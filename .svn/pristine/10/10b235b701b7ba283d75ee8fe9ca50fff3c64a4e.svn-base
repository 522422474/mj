var HundredNiuHandler = require('hundredNiuHandler');
var niuniuPokerHandler = require('niuniuPokerHandler');
var roomHandler = require('roomHandler');
var pokerAnimBase = require('pokerAnimationBase');
cc.Class({
    extends: cc.Component,

    properties: {
        playerNodes: [cc.Node],
        //发牌器
        dealerNode: cc.Node,
        //扑克节点
        pokerCradsNode: cc.Node,
        //扑克牌型动画
        pokerTypeNode: cc.Node,
        otherPokerTypePrefab: cc.Prefab,
    	//桌面上筹码数量
    	selfCostChips: cc.Node,
    	allCostChips: cc.Node,
        //筹码飘飞
        chipPrefab: cc.Prefab,
        chipsNode: cc.Node,
        scoreParent: cc.Node,
        scoreNode: cc.Prefab,
        //区域节点
        areaNode: cc.Node,
        //区域赢家动画
        areaWin: cc.Node,
        //动画节点
        actionNode: cc.Node,
        //倒计时节点
        countNode: cc.Node,
        //下注筹码选择
        toggle0: cc.Toggle,
        toggle1: cc.Toggle,
        toggle2: cc.Toggle,
        toggle3: cc.Toggle,
        toggle4: cc.Toggle,
    },

    onLoad: function () {
        this.handlerMsg();
        this.pokerAnimBase = new pokerAnimBase();
    	this.initUI();
        this.niuniuStayType = niuniuPokerHandler.getGameStatus();
        this.niuniuPokerType = niuniuPokerHandler.getPokerType();
    },
    handlerMsg: function () {
        registEvent('niuhun-onGameChips', this, this.changeChipsAndScore);
    },
    onDestroy: function () {
        unregistEvent('niuhun-onGameChips', this, this.changeChipsAndScore);
    },
    //初始化
    initUI: function () {
        this.coinFlyData();
        this.initRoundData();
        this.initPokerCards();
        this.initChipsOnDesk();
    },
    initChipsOnDesk: function () {
        var selfCostLen = this.selfCostChips.childrenCount;
        for (var i = 0; i < selfCostLen; i++) {
            var child = this.selfCostChips.children[i];
            if(child){
                child.getComponent(cc.Label).string = 0;
            }
        }
        var allCostLen = this.allCostChips.childrenCount;
        for (var j = 0; j < allCostLen; j++) {
            var child = this.allCostChips.children[j];
            if(child){
                child.getComponent(cc.Label).string = 0;
            }
        }

        for (var i = 0; i < this.chipsNode.childrenCount; i++) {
            var child = this.chipsNode.children[i];
            child.removeAllChildren();
        }
    },
    initRoundData: function () {
        this.playSign = -1;
        this.clipsList = [];
        this.clipsChoose = 0;
        this.countNode.active = false;
        this.getRoomInfo();
        this.saveClipsNum();
        this.selectClipsNum();
        this.savePokerData();
    },
    initPokerCards: function () {
        for (var index = 0; index<this.pokerCradsNode.childrenCount; index++) {
            var poker = this.pokerCradsNode.children[index];
            for (var i = 0; i < poker.childrenCount; i++) {
                poker.children[i].active = false;
                var pokerScp = poker.children[i].getComponent("niuNiuPoker");
                pokerScp.initCardInfo(null);
            }
        }
        //初始化牌型动画
        for (var j = 0; j < this.pokerTypeNode.childrenCount; j++) {
            var child = this.pokerTypeNode.children[j];
            if (child) {
                child.removeAllChildren();
            }
        }

        //胜利动画初始化
        for (var i = 0; i < this.areaWin.childrenCount; i++) {
            var animationNode = this.areaWin.children[i];
            animationNode.active = false;
        }
    },
    //飘飞筹码相关
    coinFlyData: function () {
        this._coinIndex = 0;
        this.chipsNum = 20;
        this._coinList = [];
        this._winnerIndex = 0;
        this._winnerToLoser = {winPos: [], losePos: [], winnerList: {0:[],1:[],2:[],3:[]}}; //赢区域，输区域，闲家赢家列表
    },

    getRoomInfo: function () {
        this.clipsList = niuniuPokerHandler.XIAZHU[roomHandler.room.opts.scorelv];
        this.clipsChoose = this.clipsList[0];
    },
    //选择筹码
    selectClipsNum: function () {
        if (this.clipsList.length > 0) {
            if (this.toggle0.isChecked) {
                this.clipsChoose = this.clipsList[0];
            }else if (this.toggle1.isChecked) {
                this.clipsChoose = this.clipsList[1];
            }else if (this.toggle2.isChecked) {
                this.clipsChoose = this.clipsList[2];
            }else if (this.toggle3.isChecked) {
                this.clipsChoose = this.clipsList[3];
            }else if (this.toggle4.isChecked) {
                this.clipsChoose = this.clipsList[4];
            }
        }else {
            this.clipsChoose = 0;
        } 
    },
    saveClipsNum: function () {
        this.toggle0.isChecked = this.clipsChoose == this.clipsList[0] ? true : false;
        this.toggle1.isChecked = this.clipsChoose == this.clipsList[1] ? true : false;
        this.toggle2.isChecked = this.clipsChoose == this.clipsList[2] ? true : false;
        this.toggle3.isChecked = this.clipsChoose == this.clipsList[3] ? true : false;
        this.toggle4.isChecked = this.clipsChoose == this.clipsList[4] ? true : false;
    },

    //开始动画
    gameStartAnimation: function (callback) {
        HundredNiuHandler.isStartAnimationPlayed = true;
        var starActNode = cc.find('/beginXiaZhu',this.actionNode);
        starActNode.active = true;
        var anim = starActNode.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation('newAnimation',1);
        var self = this;
        this.scheduleOnce(function(){
            starActNode.active = false;
            HundredNiuHandler.isStartAnimationPlayed = false;
            // self.initUI();
            callback();
        },1.5);
    },
    //下注结束动画
    chipsStopAnimation: function () {
        var endActNode = cc.find('/stopXiaZhu',this.actionNode);
        endActNode.active = true;
        var anim = endActNode.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation('newAnimation',1);
        var self = this;
        this.scheduleOnce(function(){
            endActNode.active = false;
            HundredNiuHandler.isStartAnimationPlayed = false;
        },1.5);
    },
    //通杀
    showAllWinAnimation: function () {
        var tongying = cc.find('/tongying',this.actionNode);
        tongying.active = true;
        var anim = tongying.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation('newAnimation',1);
        var self = this;
        this.scheduleOnce(function(){
            tongying.active = false;
        },1.5);
    },

    clickSetClips: function (evt, area) {
        HundredNiuHandler.requestSetChips(this.clipsChoose, area);
    },

    continueChips: function () {
        HundredNiuHandler.requestContinueChips();
    },
    //发牌
    savePokerData: function () {
        this.pokerArr = [];
        this.pokerPosArr = [];
        for (var j = 0; j<this.pokerCradsNode.childrenCount; j++) {
            var poker = this.pokerCradsNode.children[j];
            for (var i = 0; i<6; i++) {
                this.pokerArr.push(poker.children[i]);
                this.pokerPosArr.push(poker.children[i].position);   
            }
        }
    },
    //发牌动画
    dealAction: function(callback) {
        var self = this;
        this.pokerAnimBase.dealAction(this.pokerArr,this.dealerNode.position,this.pokerPosArr,0.1,function(delayTime){
            self.scheduleOnce(function () {
                self.showAreaPokerCards();
                callback();
            },delayTime);
        });
    },

    //亮牌
    showAreaPokerCards: function () {
        var pokerLen = this.pokerCradsNode.childrenCount;
        var pokerCards = HundredNiuHandler.pokerCards;
        for (var i = pokerLen - 1; i >= 0; i--) {
            this.delayTimeShowPoker(this.pokerCradsNode.children[i], pokerCards[i], i);
        }
    },
    //添加延时
    delayTimeShowPoker: function (handCardNode, cards, index) {
        var runNum = 5 - index;
        var self = this;
        setTimeout(function(){
            var cardPos = true;
            var playercardInfo = self.showPokerForm(index, cards, cardPos);
            self.rotatePoker(handCardNode, playercardInfo.newHandCards, index);
        },runNum*300);
    },
    //显示亮牌形式
    showPokerForm: function (index, cards, cardPos) {
        var pokerTypeCards = [];
        if (HundredNiuHandler.pokerCards3[index]) {
            pokerTypeCards = HundredNiuHandler.pokerCards3[index];
        }
        var newArray = pokerTypeCards.concat(cards);
        var newHandCards = niuniuPokerHandler.unequally(newArray);
        var cardsType = HundredNiuHandler.pokerType[index];
        if (cardsType > this.niuniuPokerType.NIU_NONE && cardsType < this.niuniuPokerType.NIU_NIU) {
            newHandCards.splice(3,0,0);  
            cardPos = false;
        }else {
            newHandCards.splice(5,0,0);
            cardPos = true;
        }
        return {newHandCards:newHandCards,cardPos:cardPos};
    },
    //翻牌动画
    rotatePoker: function (handCardNode, cards, index) {
        var self = this;

        var rotate = function (pokerScp, card, index) {
            var action1 = cc.scaleTo(0.25,0,0.25);
            var action2 = cc.scaleTo(0.25,0.25,0.25);
            pokerScp.runAction(cc.sequence(action1,action2, cc.callFunc(function () {
                var pokerScpInfo = pokerScp.getComponent('niuNiuPoker');
                cc.log('card = '+card);
                self.showPokerContent(pokerScpInfo, card);
                if (index == 0 && self.playSign != index) {
                    self.showWinIcon();
                    self.showChipsFlyAnimation();
                }
                self.playCardType(index);
            }, self)));
        }
        for (var j = 0; j < handCardNode.children.length; j++) {
            var pokerScp = handCardNode.children[j];
            rotate(pokerScp, cards[j], index);
        }
    },
    //显示单张牌
    showPokerContent: function (handCardNode, cards) {
        if (cards == null) {
            handCardNode.initCardInfo(null);
        }else if (cards == 0) {
            handCardNode.clearCardsUI();
        }else {
            handCardNode.turnOver();
            handCardNode.initCardInfo(cards);  
        }
    },
    //播放牌型
    playCardType: function (localIndex) {
        var record = null;
        if (HundredNiuHandler.pokerType) {
            record = HundredNiuHandler.pokerType[localIndex];
        }
        if (this.playSign == localIndex) return;
        //播放牌型动画
        if (record === undefined || record === null) return;
        var actNode = cc.find("act" + localIndex,this.pokerTypeNode);
        actNode.removeAllChildren();
        var pokerTypePrefab = this.otherPokerTypePrefab;
        pokerTypePrefab = cc.instantiate(pokerTypePrefab);
        actNode.addChild(pokerTypePrefab);
        pokerTypePrefab.getComponent("pokerTypeAnimation").initFanInfo(record);
        pokerTypePrefab.scaleX = 0.5;
        pokerTypePrefab.scaleY = 0.5;
        var action = cc.scaleTo(0.3, 1, 1);
        pokerTypePrefab.runAction(action);
        this.playSign = localIndex;
    },

    //压筹码
    changeChipsAndScore: function (data) {
        if (!data) return;
        var ChipsData = data.detail;
        var turnUid = ChipsData.uid;
        var chipsArea = ChipsData.idx;
        var setChips = ChipsData.num;
        var selfChipsNum = ChipsData.all;
        var areaChipsNum = ChipsData.total;
        this.addChip(setChips, turnUid, chipsArea);
        this.addClipsNum(turnUid, chipsArea, selfChipsNum, areaChipsNum);
    },
    addClipsNum: function (turnUid, chipsArea, selfChipsNum, areaChipsNum) {
        var newValue = 0;
        if (selfChipsNum != null) {
            newValue = ConversionCoinValue(selfChipsNum);
        }else {
            newValue = null;
        }
        var sumAreaNode = cc.find('chips'+chipsArea, this.allCostChips);
        var selfSetAreaNode = cc.find('chips'+chipsArea, this.selfCostChips);
        if (turnUid == GameData.player.uid) {
            selfSetAreaNode.getComponent(cc.Label).string = newValue;
        }
        sumAreaNode.getComponent(cc.Label).string = areaChipsNum;
    },
    addChip: function (score, turnerUid, toArea) {
        var score = score;
        var localIdx = HundredNiuHandler.getPlayerPosByUid(turnerUid);
        var clipNode = cc.instantiate(this.chipPrefab);
        var handenode;
        if (localIdx == -1) {
            handenode = cc.find('tableInfo/otherPlayer', this.node);
        }else {
            handenode = this.playerNodes[localIdx];
        }
        // clipNode.getComponent('poker_chipPrefab').setChipImg(score);
        clipNode.parent = this.chipsNode.getChildByName('chips'+toArea);
        clipNode.x = handenode.x;
        clipNode.y = handenode.y;
        clipNode.active = true;
        this.clipFlyToTableAnimation(clipNode, toArea);
    },
    //筹码移动动画
    clipFlyToTableAnimation: function (clipNode, toArea) {
        var toAreaNode = cc.find('area'+toArea,this.areaNode);
        var posX = toAreaNode.x;
        var posY = toAreaNode.y;
        var x = posX - this.randomNum(-75, 75);
        var y = posY - this.randomNum(-100, 100);
        var action1 = cc.moveTo(0.3, cc.p(x, y));
        var action2 = cc.scaleTo(0.1, 0.8, 0.8);
        var actionC = cc.scaleTo(0.1, 0.5, 0.5);
        var action = cc.sequence(action1, action2, actionC);
        var action3 = cc.callFunc(function () {
            clipNode.removeFromParent(true);
        }, clipNode);
        var action4 = cc.fadeOut(0.1);
        var chipsParent = this.chipsNode.getChildByName('chips'+toArea);
        if (chipsParent.childrenCount > 30) {
            clipNode.runAction(cc.sequence(action, action4, action3)).easing(cc.easeCubicActionOut());
        } else {
            clipNode.runAction(action).easing(cc.easeCubicActionOut());
        }
    },
    randomNum: function (min, max) {
        var distance = max - min;
        var num = Math.random() * distance + min;
        return parseInt(num, 10);
    },

    showWinIcon: function () {
        for (var i = 0; i < this.areaWin.childrenCount; i++) {
            var animationNode = this.areaWin.children[i];
            if (HundredNiuHandler.pokerResult[i]) {
                animationNode.active = false;
            } else {
                animationNode.active = true;
                var anim = animationNode.getComponent(dragonBones.ArmatureDisplay);
                anim.playAnimation('newAnimation',0);
            }
        }
    },

    //倒计时
    gambleCountTime: function (callback) {
        var self = this;
        var updateCountDownTime = function () {
            HundredNiuHandler.gameTimes --;
            var countBg = cc.find('countBg',self.countNode);
            var countLb1 = cc.find('countTime1',countBg);
            countBg.active = true;
            if (HundredNiuHandler.isStartAnimationPlayed) {
                self.countNode.active = false;    
            } else {
                self.countNode.active = true;
            }
            countLb1.getComponent(cc.Label).string = HundredNiuHandler.gameTimes;
            if (HundredNiuHandler.gameTimes > 0 && HundredNiuHandler.gameTimes <= 3) {
                var scaleAc1 = cc.scaleTo(0.25, 2, 2);
                var scaleAc2 = cc.scaleTo(0.25, 1, 1);
                countBg.runAction(cc.sequence(scaleAc1, scaleAc2));
            } else if (HundredNiuHandler.gameTimes <= 0) {
                countBg.active = false;
                countBg.setScale(1);
                self.countNode.active = false;
                countLb1.getComponent(cc.Label).string = '';
                self.chipsStopAnimation();
                HundredNiuHandler.readyLabelActive = true;
                self.unschedule(updateCountDownTime);
                callback();
            }
        };
        var count = cc.find('countBg',self.countNode);
        if (HundredNiuHandler.gameTimes <= 0) {
            count.setScale(1);
            this.unschedule(updateCountDownTime);
            return;    
        }
        updateCountDownTime(callback);
        this.schedule(updateCountDownTime, 1);
    },

    //确定输赢
    confirmWinnerOrLoser: function () {
        niuniuPokerHandler.clearArray(this._winnerToLoser.winPos);
        niuniuPokerHandler.clearArray(this._winnerToLoser.losePos);
        this._winnerToLoser.winnerList = {0:[],1:[],2:[],3:[]};

        var result = HundredNiuHandler.pokerResult;
        for (var i = 0; i < result.length; i++) {
            if (result[i]) {
                this._winnerToLoser.losePos.push(i);
            } else {
                this._winnerToLoser.winPos.push(i);
            }
        }
        for (var j = 0; j < HundredNiuHandler.betPosPlayer.length; j++) {
            var winnerInfo = HundredNiuHandler.betPosPlayer[j];
            for (var indx = 0; indx < winnerInfo.length; indx++) {
                var uid = winnerInfo[indx];
                var scores = HundredNiuHandler.getRoundCoinByUid(uid);
                var isOnDesk = HundredNiuHandler.containsArray(HundredNiuHandler.playerInfo, uid);
                if (scores > 0 && uid != HundredNiuHandler.zhuangUid) {
                    if (isOnDesk) {
                        this._winnerToLoser.winnerList[j].push(uid);    
                    } else {
                        if (uid == GameData.player.uid) {
                            this._winnerToLoser.winnerList[j].push(uid);
                        }else {
                            this._winnerToLoser.winnerList[j].push(-1);    
                        }
                    }
                }
            }
        }
        for (var i = 0; i < Object.keys(this._winnerToLoser.winnerList).length; i++) {
            var array = this._winnerToLoser.winnerList[i];
            this._winnerToLoser.winnerList[i] = niuniuPokerHandler.unequally(array);
        }
        cc.log('this._winnerToLoser = '+JSON.stringify(this._winnerToLoser));
    },
    showChipsFlyAnimation: function () {
        this.confirmWinnerOrLoser();
        if (this._winnerToLoser.winPos.length == 0) {
            //庄家通赢
            this.showAllWinAnimation();
        }else {
            if (this._winnerToLoser.losePos.length == 0) {
                //闲家通赢
                this.showAllWinAnimation();
            }
        }
        if (this._winnerToLoser.losePos.length > 0) {
            this.zhuangWinner();
        }else {
            if (this._winnerToLoser.winPos.length > 0) {
                this.xianWinner();
            }
        }
    },
    zhuangWinner: function () {
        //筹码从区域飞向庄家
        var index = HundredNiuHandler.getPlayerPosByUid(HundredNiuHandler.zhuangUid);
        var zhuangPlayer = this.playerNodes[index];
        for (var i = 0; i < this._winnerToLoser.losePos.length; i++) {
            var onPos = this._winnerToLoser.losePos[i];
            var chipsParent =  this.chipsNode.getChildByName('chips'+onPos);
            for (var j = 0; j < chipsParent.childrenCount; j++) {
                var actionX = zhuangPlayer.x + this.randomNum(-50,50);
                var actionY = zhuangPlayer.y + this.randomNum(-20,50);

                var child = chipsParent.children[j];
                this.resultChipsAnimation(child, cc.p(actionX, actionY));
            }
        }
        if (this._winnerToLoser.winPos.length > 0) {
            var self = this;
            this.scheduleOnce(function () {
                self.zhuangActionArea();
            },0.5);
        } else {
            this.moveAboutScore();
        }
    },
    xianWinner: function () {
        //筹码从区域飞向各个闲家
        this.scheduleOnce(this.xianWinAction, 0.5);
    },
    xianWinAction: function () {
        var self = this;
        var playerLen = this._winnerToLoser.winPos.length;
        for (var i = 0; i < this._winnerToLoser.winPos.length; i++) {
            var onPos = this._winnerToLoser.winPos[i];
            var lastWinner = this._winnerToLoser.winnerList[onPos].length - 1;
            if (this._winnerToLoser.winnerList[onPos].length == 0) continue;
            var num = 0;
            var chipsParen = this.chipsNode.getChildByName('chips'+onPos);
            for (var j = 0; j < chipsParen.childrenCount; j++) {
                if (num > lastWinner) {
                    num = 0;
                }
                var uid = this._winnerToLoser.winnerList[onPos][num];
                var player;
                if (uid == -1) {
                    player = cc.find('tableInfo/otherPlayer', this.node);
                }else {
                    var playerPos = HundredNiuHandler.getPlayerPosByUid(uid);
                    player = this.playerNodes[playerPos];
                }
                num++;

                var actionX = player.x + this.randomNum(-50,50);
                var actionY = player.y + this.randomNum(-20,50);
                var child = chipsParen.children[j];
                this.resultChipsAnimation(child, cc.p(actionX, actionY));
            }
        }
        this.moveAboutScore();
    },
    zhuangActionArea: function () {
        //筹码从庄家飞向赢的区域
        this._coinIndex = 0;
        this.schedule(this.zhuangToAreaAc, 0.05);
    },
    zhuangToAreaAc: function () {
        var self = this;
        var removeFunc;
        var lastWinner = this._winnerToLoser.winPos.length - 1;
        var index = HundredNiuHandler.getPlayerPosByUid(HundredNiuHandler.zhuangUid);
        var zhuangPlayer = this.playerNodes[index];
        for (var i = 0; i < this._winnerToLoser.winPos.length; i++) 
        {
            var coinNum = this._coinIndex + 1;
            var node = this.createCoinNode(coinNum);
            node.setPosition(zhuangPlayer.getPosition());

            var moveTo;
            var coinAction = function(num) {
                var winIndex = self._winnerToLoser.winPos[self._winnerIndex];
                var toAreaNode = cc.find('area'+winIndex,self.areaNode);
                var actionX = toAreaNode.getPosition().x + self.randomNum(-50,50);
                var actionY = toAreaNode.getPosition().y + self.randomNum(-20,50);
                moveTo = cc.moveTo(0.25, cc.p(actionX, actionY));
                //移除筹码节点
                removeFunc = cc.callFunc(function(){
                    self._coinList[num - 1].active = false;
                    self.chipsNode.removeChild(self._coinList[num - 1]);
                }, self);
            }
            //每个赢家应该得到的筹码数
            if (coinNum <= this.chipsNum * (this._winnerIndex + 1) && this._winnerIndex < lastWinner) 
            {
                coinAction(coinNum);
            }
            //如果筹码数大于赢家应得筹码数，说明该筹码应给下一位赢家
            else if (coinNum > this.chipsNum * (this._winnerIndex + 1) && this._winnerIndex < lastWinner) 
            {
                this._winnerIndex++;
                coinAction(coinNum);
            }
            //最后一名赢家得到剩余的所有筹码数(注：分数的多寡不会影响所得筹码数，一切都是固定的)
            else if (this._winnerIndex == lastWinner) 
            {
                coinAction(coinNum);
            }
            var fade = cc.fadeOut(0.4);
            var seq = cc.sequence(moveTo, fade, removeFunc);
            node.runAction(seq).easing(cc.easeCubicActionOut());
            this._coinIndex++;
        }
        //this.chipsNum * this._winnerToLoser.winPos.length筹码总数
        if (this._coinIndex >= this.chipsNum * this._winnerToLoser.winPos.length) 
        {
            this.unschedule(this.zhuangToAreaAc);
            this.scheduleOnce(function () {
                self.xianWinner();
            },0.5);
        }
    },
    //创建金币节点
    createCoinNode: function (coinNum) {
        var node;
        if (!this.chipsNode.getChildByName('coinNode' + coinNum))
        {
            node = cc.instantiate(this.chipPrefab);
            node.name = 'coinNode' + coinNum;
            this.chipsNode.addChild(node);
        }else {
            node = this.chipsNode.getChildByName('coinNode' + coinNum);
        }
        node.active = true;
        this._coinList.push(node);
        return node;
    },
    resultChipsAnimation: function (node, position) {
        var action1 = cc.moveTo(0.4,position);
        var action2 = cc.callFunc(function () {
            node.active = false;
            node.destroy();
        }, node);
        node.runAction(cc.sequence(action1, action2)).easing(cc.easeCubicActionOut());
    },

    moveAboutScore: function(){
        //小结算金币移动和飘分
        var self = this;
        var players = [];
        var playScoreInfo = HundredNiuHandler.roundCoin;
        for (var i = 0; i < playScoreInfo.length; i++) {
            var uid = playScoreInfo[i].uid;
            var isOnDesk = HundredNiuHandler.containsArray(HundredNiuHandler.playerInfo, uid);
            if (isOnDesk) {
                players.push(playScoreInfo[i]);
            } else {
                if (uid == GameData.player.uid) {
                    players.push(playScoreInfo[i]);
                }
            }
        }

        for (var j = 0; j < players.length; j++) {
            if (players[j] == null) continue;
            var player = players[j];
            var index = HundredNiuHandler.getPlayerPosByUid(player.uid);
            var runScore = player.score;
            var headNode = self.scoreParent.getChildByName("score"+index);
            var playerGetScore = headNode.getChildByName("resultScore");
            if (playerGetScore == null) {
                playerGetScore = cc.instantiate(self.scoreNode);
                playerGetScore.getComponent('resultRunScore').getScoreColor(runScore);
                playerGetScore.active = true;
                headNode.addChild(playerGetScore);
            }
            var move1 = cc.moveBy(1,cc.p(0,60));
            playerGetScore.runAction(move1);
        }
        this.scheduleOnce(function () {
            for (var i = 0; i < self.scoreParent.children.length; i++) {
               self.scoreParent.children[i].removeAllChildren();
            }
            self.initUI();
            cc.log('moveAboutScore initUI readyLabelActive');
            HundredNiuHandler.readyLabelActive = false;
        },1);
    },
});
