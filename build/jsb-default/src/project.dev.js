require = function() {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }
        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function(r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }
      return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
  }
  return r;
}()({
  1: [ function(require, module, exports) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        cachedSetTimeout = "function" === typeof setTimeout ? setTimeout : defaultSetTimout;
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        cachedClearTimeout = "function" === typeof clearTimeout ? clearTimeout : defaultClearTimeout;
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) return setTimeout(fun, 0);
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) return clearTimeout(marker);
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) return;
      draining = false;
      currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1;
      queue.length && drainQueue();
    }
    function drainQueue() {
      if (draining) return;
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) currentQueue && currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
      queue.push(new Item(fun, args));
      1 !== queue.length || draining || runTimeout(drainQueue);
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = "";
    process.versions = {};
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
      return [];
    };
    process.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process.cwd = function() {
      return "/";
    };
    process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process.umask = function() {
      return 0;
    };
  }, {} ],
  AMapPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b99cTs08pHdZzc6H6LO+ei", "AMapPanel");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        mapLayer: cc.Node,
        play_up_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        up_player: cc.Node,
        left_player: cc.Node,
        distanceLine: cc.Node,
        distanceNode: cc.Node,
        distanceLine1: cc.Node,
        distanceNode1: cc.Node,
        hint: cc.Node,
        playerArray: []
      },
      onLoad: function onLoad() {},
      showPlayers: function showPlayers() {
        this.distanceData = {};
        this.playerArray = [];
        if (3 == GameData.joiners.length) {
          this.showLayer(true);
          this.showPlayer("up", this.up_player);
          this.showPlayer("left", this.left_player);
          this.up_player.tag = 0;
          this.left_player.tag = 1;
          this.getLocation();
          this.twoCondition();
        } else if (4 == GameData.joiners.length) {
          this.showLayer(false);
          this.showPlayer("right", this.play_right_player);
          this.showPlayer("up", this.play_up_player);
          this.showPlayer("left", this.play_left_player);
          this.play_right_player.tag = 0;
          this.play_up_player.tag = 1;
          this.play_left_player.tag = 2;
          this.getLocation();
          this.threeCondition();
        }
      },
      showPlayer: function showPlayer(direction, parent) {
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerName = cc.find("name", parent);
          playerName.getComponent(cc.Label).string = "IP : " + player.remoteAddr;
          this.setHeadIcon(player.headimgurl, parent);
          this.playerArray.push(player);
        } else parent.active = false;
      },
      setHeadIcon: function setHeadIcon(headimgurl, parent) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var headNode = cc.find("headMask/head", parent);
            headNode.getComponent(cc.Sprite).spriteFrame = null;
            headNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      getLocation: function getLocation() {
        for (var i = 0; i < this.playerArray.length; i++) {
          var uidA = this.playerArray[i].uid;
          var pos = this.playerArray[i].posInfo;
          if (0 == pos.latPos && 0 == pos.longPos) continue;
          if (!this.distanceData[uidA]) {
            this.distanceData[uidA] = {};
            this.distanceData[uidA].playlist = {};
          }
          for (var ii = 0; ii < this.playerArray.length; ii++) {
            var uidB = this.playerArray[ii].uid;
            var posB = this.playerArray[ii].posInfo;
            if (uidB == uidA) continue;
            if (0 == posB.latPos && 0 == posB.longPos) continue;
            this.distanceData[uidA].playlist[uidB] || (this.distanceData[uidA].playlist[uidB] = getDistance(pos.latPos, pos.longPos, posB.latPos, posB.longPos));
          }
        }
      },
      twoCondition: function twoCondition() {
        WriteLog("距离列表1: this.distanceData = " + JSON.stringify(this.distanceData));
        for (var i = 0; i < this.playerArray.length; i++) {
          var lineNode = cc.find("Line1", this.distanceLine1);
          var distance = cc.find("distance1", this.distanceNode1);
          var playerInfo = cc.find("two/playerInfo", this.mapLayer);
          var Uid = this.playerArray[i].uid;
          if (this.distanceData[Uid]) for (var j = 0; j < this.playerArray.length; j++) {
            var nextUid = this.playerArray[j].uid;
            if (nextUid == Uid) continue;
            var playList = this.distanceData[Uid].playlist;
            if (Object.keys(playList).length > 0) for (var key in playList) if (key == nextUid) {
              WriteLog("..............................typeof(playList[nextUid]) = " + _typeof(playList[nextUid]));
              if (playList[nextUid] >= 1e3) {
                var kilometer = playList[nextUid] / 1e3;
                kilometer = kilometer.toFixed(2);
                distance.getComponent(cc.Label).string = kilometer + "km";
              } else if (playList[nextUid] <= 50) {
                distance.getComponent(cc.Label).string = playList[nextUid] + "m";
                distance.color = new cc.Color(255, 0, 0);
                lineNode.getChildByName("Line").active = false;
                lineNode.getChildByName("redLine").active = true;
                for (var ii = 0; ii < this.playerArray.length; ii++) {
                  var childNode = playerInfo.getChildByTag(ii);
                  this.headImage(childNode, true);
                }
              } else distance.getComponent(cc.Label).string = playList[nextUid] + "m";
            }
          } else {
            distance.getComponent(cc.Label).string = "距离未确定";
            distance.color = new cc.Color(255, 0, 0);
            lineNode.getChildByName("Line").active = false;
            lineNode.getChildByName("redLine").active = true;
            var childNode = playerInfo.getChildByTag(i);
            var misLocation = cc.find("misLocation", childNode);
            var misLabel = cc.find("misLabel", childNode);
            misLabel.active = true;
            misLocation.active = true;
            this.headImage(childNode, true);
          }
        }
        var childNode1, childNode2;
        var ipStr, ipStr1;
        childNode1 = playerInfo.getChildByTag(0);
        var ip = cc.find("name", childNode1);
        ipStr = ip.getComponent("cc.Label").string;
        childNode2 = playerInfo.getChildByTag(1);
        var ip1 = cc.find("name", childNode2);
        ipStr1 = ip1.getComponent("cc.Label").string;
        if (ipStr == ipStr1) {
          for (var i = 0; i < this.playerArray.length; i++) {
            var childNode = playerInfo.getChildByTag(i);
            this.headImage(childNode, true);
            var ipNode = cc.find("name", childNode);
            ipNode.color = new cc.Color(255, 0, 0);
          }
          GameData.danger = true;
        }
      },
      threeCondition: function threeCondition() {
        WriteLog("距离列表2: this.distanceData = " + JSON.stringify(this.distanceData));
        for (var i = 0; i < this.playerArray.length; i++) {
          var lineNode = cc.find("Line" + i, this.distanceLine);
          var distance = cc.find("distance" + i, this.distanceNode);
          var playerInfo = cc.find("three/playerInfo", this.mapLayer);
          var Uid = this.playerArray[i].uid;
          if (this.distanceData[Uid]) for (var j = 0; j < this.playerArray.length; j++) {
            var nextUid = this.playerArray[j].uid;
            if (nextUid == Uid) continue;
            var playList = this.distanceData[Uid].playlist;
            console.log("playList = " + JSON.stringify(playList));
            var lineNode2 = void 0;
            var distance2 = void 0;
            if (Object.keys(playList).length > 0) for (var key in playList) if (key == nextUid) {
              if (2 == i) if (0 == j) if (playList[nextUid] >= 1e3) {
                var kilometer = playList[nextUid] / 1e3;
                kilometer = kilometer.toFixed(2);
                distance.getComponent(cc.Label).string = kilometer + "km";
              } else if (playList[nextUid] <= 50) {
                distance.color = new cc.Color(255, 0, 0);
                lineNode.getChildByName("Line").active = false;
                lineNode.getChildByName("redLine").active = true;
                distance.getComponent(cc.Label).string = playList[nextUid] + "m";
              } else distance.getComponent(cc.Label).string = playList[nextUid] + "m"; else {
                lineNode2 = cc.find("Line1", this.distanceLine);
                distance2 = cc.find("distance1", this.distanceNode);
                if (playList[nextUid] >= 1e3) {
                  var kilometer = playList[nextUid] / 1e3;
                  kilometer = kilometer.toFixed(2);
                  distance2.getComponent(cc.Label).string = kilometer + "km";
                } else if (playList[nextUid] <= 50) {
                  distance2.color = new cc.Color(255, 0, 0);
                  lineNode2.getChildByName("Line").active = false;
                  lineNode2.getChildByName("redLine").active = true;
                  distance2.getComponent(cc.Label).string = playList[nextUid] + "m";
                } else distance2.getComponent(cc.Label).string = playList[nextUid] + "m";
              } else if (j == i + 1) if (playList[nextUid] >= 1e3) {
                var kilometer = playList[nextUid] / 1e3;
                kilometer = kilometer.toFixed(2);
                distance.getComponent(cc.Label).string = kilometer + "km";
              } else if (playList[nextUid] <= 50) {
                distance.color = new cc.Color(255, 0, 0);
                lineNode.getChildByName("Line").active = false;
                lineNode.getChildByName("redLine").active = true;
                distance.getComponent(cc.Label).string = playList[nextUid] + "m";
              } else distance.getComponent(cc.Label).string = playList[nextUid] + "m"; else {
                lineNode2 = cc.find("Line" + j, this.distanceLine);
                distance2 = cc.find("distance" + j, this.distanceNode);
                if (playList[nextUid] >= 1e3) {
                  var kilometer = playList[nextUid] / 1e3;
                  kilometer = kilometer.toFixed(2);
                  distance2.getComponent(cc.Label).string = kilometer + "km";
                } else if (playList[nextUid] <= 50) {
                  distance2.color = new cc.Color(255, 0, 0);
                  lineNode2.getChildByName("Line").active = false;
                  lineNode2.getChildByName("redLine").active = true;
                  distance2.getComponent(cc.Label).string = playList[nextUid] + "m";
                } else distance2.getComponent(cc.Label).string = playList[nextUid] + "m";
              }
              if (playList[nextUid] <= 50) {
                var headInfo = playerInfo.getChildByTag(i);
                var headInfo2 = playerInfo.getChildByTag(j);
                this.headImage(headInfo, true);
                this.headImage(headInfo2, true);
              }
            }
          } else {
            distance.getComponent(cc.Label).string = "距离未确定";
            distance.color = new cc.Color(255, 0, 0);
            lineNode.getChildByName("Line").active = false;
            lineNode.getChildByName("redLine").active = true;
            var childNode = playerInfo.getChildByTag(i);
            var misLocation = cc.find("misLocation", childNode);
            var misLabel = cc.find("misLabel", childNode);
            misLabel.active = true;
            misLocation.active = true;
            this.headImage(childNode, true);
            if (0 == i) {
              var lineNode2 = cc.find("Line2", this.distanceLine);
              var distance2 = cc.find("distance2", this.distanceNode);
              distance2.getComponent(cc.Label).string = "距离未确定";
              distance2.color = new cc.Color(255, 0, 0);
              lineNode2.getChildByName("Line").active = false;
              lineNode2.getChildByName("redLine").active = true;
            } else {
              var lineNode2 = cc.find("Line" + (i - 1), this.distanceLine);
              var distance2 = cc.find("distance" + (i - 1), this.distanceNode);
              distance2.getComponent(cc.Label).string = "距离未确定";
              distance2.color = new cc.Color(255, 0, 0);
              lineNode2.getChildByName("Line").active = false;
              lineNode2.getChildByName("redLine").active = true;
            }
          }
          var childNode1, childNode2;
          var ipStr, ipStr1;
          var ips, ips1;
          if (2 == i) {
            childNode1 = playerInfo.getChildByTag(i);
            ips = cc.find("name", childNode1);
            ipStr = ips.getComponent("cc.Label").string;
            childNode2 = playerInfo.getChildByTag(0);
            ips1 = cc.find("name", childNode2);
            ipStr1 = ips1.getComponent("cc.Label").string;
          } else {
            childNode1 = playerInfo.getChildByTag(i);
            ips = cc.find("name", childNode1);
            ipStr = ips.getComponent("cc.Label").string;
            childNode2 = playerInfo.getChildByTag(i + 1);
            ips1 = cc.find("name", childNode2);
            ipStr1 = ips1.getComponent("cc.Label").string;
          }
          var equIp1, equIp2;
          if (ipStr == ipStr1) {
            this.headImage(childNode1, true);
            this.headImage(childNode2, true);
            equIp1 = cc.find("name", childNode1);
            equIp2 = cc.find("name", childNode2);
            equIp1.color = new cc.Color(255, 0, 0);
            equIp2.color = new cc.Color(255, 0, 0);
            GameData.danger = true;
          }
        }
      },
      showLayer: function showLayer(index) {
        var twoNode = cc.find("two", this.mapLayer);
        var threeNode = cc.find("three", this.mapLayer);
        twoNode.active = index;
        threeNode.active = !index;
      },
      headImage: function headImage(parent, act) {
        var headImg1 = cc.find("headBg", parent);
        var headImg2 = cc.find("headBg1", parent);
        headImg1.active = act;
        headImg2.active = !act;
      },
      closeClick: function closeClick(eve) {
        soundMngr.instance.playAudioOther("button");
        this.mapLayer.active = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  AgreePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb5c1qykSlLrp3TMkMvUToV", "AgreePanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      onClose: function onClose() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {} ],
  ButtonCD: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd685eHL2JIwKKeUCjNI0Cu", "ButtonCD");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        delay: 2
      },
      onLoad: function onLoad() {
        this.button = this.node.getComponent(cc.Button);
        this.node.on(cc.Node.EventType.TOUCH_END, this.onClickHandler, this);
      },
      onClickHandler: function onClickHandler() {
        var self = this;
        var timeCallback = function timeCallback(dt) {
          cc.log("button interactable true");
          self.button.interactable = true;
        };
        cc.log("button interactable false");
        this.button.interactable = false;
        this.scheduleOnce(timeCallback, 2);
      }
    });
    cc._RF.pop();
  }, {} ],
  CardButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fa7444OqREkrVNZSI8nPHS", "CardButton");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        cardId: 0,
        index: 0,
        btn: cc.Button
      },
      onLoad: function onLoad() {
        this.setTouchOn();
        this.is_move = false;
        this.initPosition = this.node.parent.position;
        this.first_move_position = 0;
      },
      setTouchOn: function setTouchOn() {
        this.btn.node.interactable = true;
        this.btn.node.on(cc.Node.EventType.TOUCH_START, this.onBtnStart, this);
        this.btn.node.on(cc.Node.EventType.TOUCH_MOVE, this.onBtnMove, this);
        this.btn.node.on(cc.Node.EventType.TOUCH_END, this.onBtnEnd, this);
        this.btn.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onBtnCancel, this);
      },
      getCardId: function getCardId() {
        return this.cardId;
      },
      setCardId: function setCardId(id) {
        this.cardId = id;
      },
      getIndex: function getIndex() {
        return this.index;
      },
      setIndex: function setIndex(index) {
        this.index = index;
      },
      cardRestoration: function cardRestoration() {
        this.node.parent.setPosition(this.initPosition);
      },
      onBtnStart: function onBtnStart(event) {
        soundMngr.instance.playAudioOther("card_click");
        if (GameData.game.turn != GameData.player.uid) return;
        var position = event.touch.getLocation();
        this.first_move_position = position;
        sendEvent("onCardBtnStart", {
          card: this.getCardId(),
          index: this.getIndex(),
          position: position
        });
      },
      onBtnMove: function onBtnMove(event) {
        if (GameData.game.turn != GameData.player.uid) return;
        var position = event.touch.getLocation();
        var node = this.node.parent;
        (Math.abs(position.x - this.first_move_position.x) >= 20 || Math.abs(position.y - this.first_move_position.y) >= 20) && (this.is_move = true);
        true == this.is_move && node.setPosition(node.parent.convertToNodeSpaceAR(position));
        sendEvent("onCardBtnMove", {
          card: this.getCardId(),
          index: this.getIndex(),
          position: position
        });
      },
      onBtnEnd: function onBtnEnd(event) {
        if (GameData.game.turn != GameData.player.uid) return;
        var position = event.touch.getLocation();
        var node = this.node.parent;
        var type = 0;
        true == this.is_move && (type = node.getPositionY() < 100 ? -1 : 1);
        this.is_move = false;
        sendEvent("onCardBtnEnd", {
          card: this.getCardId(),
          index: this.getIndex(),
          position: position,
          type: type
        });
      },
      onBtnCancel: function onBtnCancel(event) {
        if (GameData.game.turn != GameData.player.uid) return;
        this.cardRestoration();
        sendEvent("onCardBtnCancel", {
          card: this.getCardId(),
          index: this.getIndex()
        });
      },
      onBtnClicked: function onBtnClicked(evt) {
        soundMngr.instance.playAudioOther("card_click");
        if (GameData.game.turn != GameData.player.uid) return;
        sendEvent("onHandCardClicked", {
          card: this.cardId,
          index: this.index
        });
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  CardRef: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "525e4JjEmVGHKmJ1Iy5T9Dv", "CardRef");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardFaces: {
          default: [],
          type: cc.SpriteFrame
        }
      },
      getSpriteFrame: function getSpriteFrame(cardId) {
        if (cardId <= 31) return this.cardFaces[cardId - 1];
        if (41 == cardId) return this.cardFaces[31];
        if (51 == cardId) return this.cardFaces[32];
        if (61 == cardId) return this.cardFaces[33];
        if (71 == cardId) return this.cardFaces[34];
        if (81 == cardId) return this.cardFaces[35];
        if (91 == cardId) return this.cardFaces[36];
        return null;
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  Card: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b240cv8k9NbZoLQBFLRrIP", "Card");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        index: 0,
        id: 0
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  ChatPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac6a6E1pe9FTbm7Bb7gE7ss", "ChatPanel");
    "use strict";
    var tdk_roomData = require("tdkRoomData");
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        emoChatContainer: cc.Node,
        chatAnimationPrefab: cc.Prefab,
        fastVoiceItem: cc.Node
      },
      onLoad: function onLoad() {
        this.chatInput = cc.find("allPanel/EditBox", this.node).getComponent(cc.EditBox);
        this.sendButton = cc.find("allPanel/sendButton", this.node);
        this.chatInput.string = "";
        var animationCount = 16;
        for (var i = 0; i < animationCount; i++) {
          var charEmo = cc.instantiate(this.chatAnimationPrefab);
          this.emoChatContainer.addChild(charEmo);
          charEmo.x = i % 6 * 140 - 350;
          charEmo.y = -60 - 150 * parseInt(i / 6);
          var animation = charEmo.getComponent(cc.Animation);
          if (i < animationCount) {
            var aniName = animation.getClips()[i].name;
            charEmo.name = aniName;
            animation.play(aniName);
            charEmo.on(cc.Node.EventType.TOUCH_END, this.onEmoClick, this);
          }
        }
        this.initFastVoiceItems();
        cc.log("GameData.client.gameType = " + GameData.client.gameType);
        GameData.client.gameType === gameDefine.GameType.Game_niu_niu || GameData.client.gameType === gameDefine.GameType.Game_TDK || GameData.client.gameType === gameDefine.GameType.Game_Niu_Niu_10 || GameData.client.gameType === gameDefine.GameType.Game_Poker_ZJH ? this.NN_selectEmoAndWord(0, 1) : this.selectEmoAndWord(0, 1);
      },
      initFastVoiceItems: function initFastVoiceItems() {
        var talks = [ "嘛钱不钱的，乐呵乐呵得了。", "哎呀，出错牌了。", "怒了啊，怒了啊。", "今儿运气不错啊，没少赢。", "楞嘛神儿！快点吧，花都谢了。", "我要加油了啊。", "这牌打的没谁了，谢了啊。", "还让不让人活了，我要发威了", "今儿输的太多了，太点背了。", "土豪，咱们做朋友吧。", "等下哈，我考虑考虑出嘛。", "不好意思啊。" ];
        var soundKeys = [ "card_K_1", "card_K_2", "card_K_3", "card_K_4", "card_K_5", "card_K_6", "card_K_7", "card_K_8", "card_K_9", "card_K_10", "card_K_11", "card_K_12" ];
        if (GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ) {
          talks = [ "大家好，很高兴见到各位！", "和你合作真是太愉快了。", "快点儿啊！都等得我花都谢了。", "你的牌打得也忒儿好咧！", "不要吵了，专心玩游戏吧。", "又断线了， 网络怎么这么差啊。", "各位真不好意思，我要离开一会儿。", "不要走，决战到天亮。", "你是MM，还是GG", "我们交个朋友吧，能不能告诉我你的联系方法呀。", "再见了，我会想念大家的。" ];
          soundKeys = [ "Chat_0", "Chat_1", "Chat_2", "Chat_3", "Chat_4", "Chat_5", "Chat_6", "Chat_7", "Chat_8", "Chat_9", "Chat_10" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ) {
          talks = [ "大家好，很高兴见到各位！", "和你合作真是太愉快了。", "快点儿啊！都等得我花都谢了。", "你的牌打得也忒儿好咧！", "不要吵了，专心玩游戏吧。", "又断线了， 网络怎么这么差啊。", "各位真不好意思，我要离开一会儿。", "不要走，决战到天亮。", "你是MM，还是GG", "我们交个朋友吧，能不能告诉我你的联系方法呀。", "再见了，我会想念大家的。" ];
          soundKeys = [ "Chat_0", "Chat_1", "Chat_2", "Chat_3", "Chat_4", "Chat_5", "Chat_6", "Chat_7", "Chat_8", "Chat_9", "Chat_10" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_Poker_paodekuai) {
          talks = [ "大家好，很高兴见到各位！", "和你合作真是太愉快了。", "快点儿啊！都等得我花都谢了。", "你的牌打得也忒儿好咧！", "不要吵了，专心玩游戏吧。", "又断线了， 网络怎么这么差啊。", "各位真不好意思，我要离开一会儿。", "不要走，决战到天亮。", "你是MM，还是GG", "我们交个朋友吧，能不能告诉我你的联系方法呀。", "再见了，我会想念大家的。" ];
          soundKeys = [ "Chat_0", "Chat_1", "Chat_2", "Chat_3", "Chat_4", "Chat_5", "Chat_6", "Chat_7", "Chat_8", "Chat_9", "Chat_10" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_niu_niu) {
          talks = [ "大家好，很高兴见到各位", "初来乍到，请大家手下留情", "快点吧，花开花谢好几回了", "别拼了，没牛就是没牛", "不好意思，又赢了", "底裤都要输光了咯", "我先走了，后会有期", "怎么又是你坐庄啊", "从天堂到地狱，我路过人间" ];
          soundKeys = [ "voice_0", "voice_1", "voice_2", "voice_3", "voice_4", "voice_5", "voice_6", "voice_7", "voice_8" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_Poker_ZJH) {
          talks = [ "三十年河东三十年河西", "宝宝委屈但宝宝不说", "不要欺负我", "上天啊，赐我一把好牌吧", "同志们，敢不敢火拼一把", "禁止跟我比牌", "快点下注，别磨磨蹭蹭的", "闷到底，看牌是小狗", "你敢下我就敢跟，别以为我会怕你", "你怎么那么爱看牌" ];
          soundKeys = [ "voice_1", "voice_2", "voice_3", "voice_4", "voice_5", "voice_6", "voice_7", "voice_8", "voice_9", "voice_10" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_Niu_Niu_10) {
          talks = [ "大家好，很高兴见到各位", "初来乍到，请大家手下留情", "快点吧，花开花谢好几回了", "别拼了，没牛就是没牛", "不好意思，又赢了", "底裤都要输光了咯", "我先走了，后会有期", "怎么又是你坐庄啊", "从天堂到地狱，我路过人间" ];
          soundKeys = [ "voice_0", "voice_1", "voice_2", "voice_3", "voice_4", "voice_5", "voice_6", "voice_7", "voice_8" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_TDK) if (1 == tdk_roomData.getPlayerSexByUid(GameData.player.uid)) {
          talks = [ "走着瞧", "你这牌打的太让人无语了", "呵呵，没了吧", "看你打牌可真费劲", "你沙愣的，我们还是朋友", "眼瞅都下班了，你快点呗" ];
          soundKeys = [ "chat_01", "chat_02", "chat_03", "chat_04", "chat_05", "chat_06" ];
        } else {
          talks = [ "小样的你给我等着", "拜托有你这样玩牌的吗", "哈哈，没了吧", "快点吧，牌在你手上都下崽了", "朋友，看你打牌可真费劲", "喂，你还在不在" ];
          soundKeys = [ "chat_11", "chat_12", "chat_13", "chat_14", "chat_15", "chat_16" ];
        }
        if (GameData.client.gameType == gameDefine.GameType.Game_MJ_HuaDian || GameData.client.gameType == gameDefine.GameType.Game_Mj_CC || GameData.client.gameType == gameDefine.GameType.Game_Mj_Heb) {
          talks = [ "赢的我都过意不去了！", "我掐指一算，你这是要点炮呀！", "等会，我寻思寻思！", "能不能行啦！赶紧的！", "城市套路深！我想回农村！", "老铁醒醒，该你出牌了。" ];
          soundKeys = [ "card_K_1", "card_K_2", "card_K_3", "card_K_4", "card_K_5", "card_K_6" ];
        }
        for (var i = 0; i < talks.length; i++) {
          var voiceItem = cc.instantiate(this.fastVoiceItem);
          voiceItem.parent = this.fastVoiceItem.parent;
          voiceItem.x = this.fastVoiceItem.x;
          voiceItem.y = this.fastVoiceItem.y - 61 * i;
          cc.find("Label", voiceItem).getComponent(cc.Label).string = talks[i];
          voiceItem.getComponent("FastVoiceButton").sound = soundKeys[i];
        }
        this.fastVoiceItem.getParent().height = this.fastVoiceItem.parent.childrenCount * this.fastVoiceItem.height;
        this.fastVoiceItem.active = false;
      },
      onEmoClick: function onEmoClick(e) {
        soundMngr.instance.playAudioOther("button");
        cc.log("on emo click : " + e.target.name);
        var aniName = e.target.name;
        ChatHandler.getInstance().requestChat("emo", aniName, function(rtn) {});
        this.onClose();
      },
      onDestroy: function onDestroy() {},
      onSendButton: function onSendButton() {
        soundMngr.instance.playAudioOther("button");
        if ("" != this.chatInput.string) {
          ChatHandler.getInstance().requestChat("word", this.chatInput.string, function(rtn) {});
          this.chatInput.string = "";
          this.onClose();
        }
      },
      selectEmoAndWord: function selectEmoAndWord(evt, type) {
        soundMngr.instance.playAudioOther("button");
        var emoScoreView = cc.find("allPanel/emoScrollView", this.node);
        var wordScoreView = cc.find("allPanel/wordScrollView", this.node);
        var wordBtn = cc.find("allPanel/switchToggle/wordBtn", this.node);
        var emoBtn = cc.find("allPanel/switchToggle/emoBtn", this.node);
        var wordBtn_stop = cc.find("allPanel/switchToggle/wordBtn_stop", this.node);
        var emoBtn_stop = cc.find("allPanel/switchToggle/emoBtn_stop", this.node);
        if (1 == type) {
          wordBtn.active = true;
          emoBtn_stop.active = true;
          wordScoreView.active = true;
          emoBtn.active = false;
          wordBtn_stop.active = false;
          emoScoreView.active = false;
        } else if (2 == type) {
          wordBtn.active = false;
          emoBtn_stop.active = false;
          wordScoreView.active = false;
          emoBtn.active = true;
          wordBtn_stop.active = true;
          emoScoreView.active = true;
        }
      },
      NN_selectEmoAndWord: function NN_selectEmoAndWord(evt, type) {
        soundMngr.instance.playAudioOther("button");
        var emoScoreView = cc.find("allPanel/emoScrollView", this.node);
        var wordScoreView = cc.find("allPanel/wordScrollView", this.node);
        var wordBtn = cc.find("allPanel/wordSprite", this.node);
        var emoBtn = cc.find("allPanel/emoSprite", this.node);
        var wordBtn_stop = cc.find("allPanel/wordButton", this.node);
        var emoBtn_stop = cc.find("allPanel/emoButton", this.node);
        if (1 == type) {
          wordBtn.active = true;
          emoBtn_stop.active = true;
          wordScoreView.active = true;
          emoBtn.active = false;
          wordBtn_stop.active = false;
          emoScoreView.active = false;
        } else if (2 == type) {
          wordBtn.active = false;
          emoBtn_stop.active = false;
          wordScoreView.active = false;
          emoBtn.active = true;
          wordBtn_stop.active = true;
          emoScoreView.active = true;
        }
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        for (var i = 0; i < this.emoChatContainer.childrenCount; i++) {
          var charEmo = this.emoChatContainer.children[i];
          var animation = charEmo.getComponent(cc.Animation);
          var aniName = animation.getClips()[i].name;
          animation.stop(aniName);
        }
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    tdkRoomData: "tdkRoomData"
  } ],
  CompetitionDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4895fxaTONI9YpkvRZSOZsg", "CompetitionDetail");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        gameName: cc.Label
      },
      onLoad: function onLoad() {},
      initUI: function initUI(GameType) {
        this.gameName.string = this.getGameName(GameType);
      },
      close: function close() {
        closeView(this.node.name);
      },
      getGameName: function getGameName(GameType) {
        var config = configMgr.getServerConfig();
        var nameStr = "";
        nameStr = config["fight"][GameType].name;
        return nameStr;
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine"
  } ],
  CompetitionRecord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ab70AQ/ZVNor0kcLBrWvJm", "CompetitionRecord");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scrollView: cc.ScrollView,
        scrollViewItem: cc.Node,
        content: cc.Node
      },
      onLoad: function onLoad() {},
      close: function close() {
        closeView(this.node.name);
      },
      initUI: function initUI() {}
    });
    cc._RF.pop();
  }, {} ],
  "DDZ-ReplayCardController": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "237ce2RBZBHPICdOjPhGb5a", "DDZ-ReplayCardController");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: 0,
        handPokers: cc.Node,
        disPokers: cc.Node,
        headNode: cc.Node,
        headPrefab: cc.Prefab,
        headComponent: null,
        direction: "right",
        handPokerList: [],
        disPokerList: []
      },
      getList: function getList() {
        return {
          uid: this.uid,
          hand: this.handPokerList,
          dis: this.disPokerList
        };
      },
      onLoad: function onLoad() {
        this.joinermax = Object.keys(ReplayData.players).length;
      },
      showHead: function showHead(playername, headimgurl) {
        this.getHeadComponent().setName(playername);
        this.getHeadComponent().setHeadIcon(headimgurl);
      },
      showPlayerIdentity: function showPlayerIdentity(show, type) {
        this.getHeadComponent().showPlayerIdentity(show, type);
      },
      getLiuGuang: function getLiuGuang(isPlay) {},
      setCoin: function setCoin(value) {
        this.getHeadComponent().setCoin(value);
      },
      setNamePositionByDir: function setNamePositionByDir(direction) {
        this.getHeadComponent().setNamePositionByDir(direction);
      },
      getHeadComponent: function getHeadComponent() {
        if (null == this.headComponent) {
          var head = cc.instantiate(this.headPrefab);
          head.parent = this.headNode;
          this.headComponent = head.getComponent("DDZ-playerTemplate");
        }
        return this.headComponent;
      },
      discard: function discard(cards) {
        cc.log("cards:" + cards);
        this.hideDisCard();
        if (null == cards) {
          cc.log("ReplayCardController,can not discard the card, the card is null or length is not 1");
          return;
        }
        this.handCardListRemove(cards);
        for (var i = 0; i < cards.length; i++) this.disPokerList.push(cards[i]);
        this.doHandCard();
        this.showDisCard(cards);
      },
      showDisCard: function showDisCard(discards) {
        cc.log("discards:" + discards);
        for (var i = 0; i < discards.length; i++) {
          var cardName = "dis_" + i;
          var cardNode = this.disPokers.getChildByName(cardName);
          cardNode.active = true;
          this.showCardContent(cardNode, discards[i]);
        }
      },
      hideDisCard: function hideDisCard() {
        for (var key in this.disPokers.children) this.disPokers.children[key].active = false;
      },
      doHandCard: function doHandCard() {
        var cardlength = this.handPokerList.length;
        this.handPokerSort(this.handPokerList);
        for (var key in this.handPokers.children) this.handPokers.children[key].active = false;
        var i = Math.ceil(this.handPokers.childrenCount / 2) - Math.ceil(cardlength / 2);
        var parentName = this.handPokers.parent.name.substring(6);
        if ("down" == parentName) for (var j = 0; j < cardlength; j++) {
          var cardName = "hand_" + (j + i);
          var cardNode = this.handPokers.getChildByName(cardName);
          if (null == cardNode) {
            cc.error("can not find the card node, name is " + cardName);
            continue;
          }
          cardNode.active = true;
          this.showCardContent(cardNode, this.handPokerList[j]);
        } else for (var j = 0; j < cardlength; j++) {
          var cardName = "hand_" + j;
          var cardNode = this.handPokers.getChildByName(cardName);
          if (null == cardNode) {
            cc.error("can not find the card node, name is " + cardName);
            continue;
          }
          cardNode.active = true;
          this.showCardContent(cardNode, this.handPokerList[j]);
        }
      },
      showCardContent: function showCardContent(cardNode, cardId) {
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      handCardListRemove: function handCardListRemove(cards) {
        var len = this.handPokerList.length;
        for (var i = 0; i < len; i++) for (var j = 0; j < cards.length; j++) if (this.handPokerList[i] == cards[j]) {
          this.handPokerList.splice(i, 1);
          this.handCardListRemove(cards);
        }
      },
      showHandCard: function showHandCard(cardList) {
        this.handPokerList = [];
        if (null == cardList) {
          cc.error("cardList is null");
          return;
        }
        for (var i = 0; i < cardList.length; i++) {
          var cardId = cardList[i];
          this.handPokerList.push(cardId);
        }
        this.doHandCard();
      },
      addHolePoker: function addHolePoker(cards) {
        this.showHandCard(cards);
      },
      handPokerSort: function handPokerSort() {
        var hand = [];
        var numbers = [];
        for (var i = 0; i < this.handPokerList.length; i++) numbers[i] = this.handPokerList[i] % 100;
        numbers.sort(function(a, b) {
          return a - b;
        });
        for (var i = 0; i < this.handPokerList.length; i++) for (var j = 0; j < numbers.length; j++) if (this.handPokerList[i] % 100 == numbers[j]) {
          hand[j] = this.handPokerList[i];
          this.handPokerList[i] = 0;
          numbers[j] = 0;
          break;
        }
        this.handPokerList = hand;
        return this.handPokerList;
      }
    });
    cc._RF.pop();
  }, {} ],
  "DDZ-ReplayMain": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0fa43MczhHpYav4aNMb3dB", "DDZ-ReplayMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerCardNodes: {
          default: [],
          type: [ cc.Node ]
        },
        playerDownNode: cc.Node,
        playerRightNode: cc.Node,
        playerLeftNode: cc.Node,
        otherNode: cc.Node,
        holePokerNode: cc.Node,
        multipleNode: cc.Node,
        chuaiIcon_right: cc.Node,
        chuaiIcon_left: cc.Node,
        tiIcon_right: cc.Node,
        tiIcon_left: cc.Node,
        stopBtn: cc.Button,
        playBtn: cc.Button,
        exitBtn: cc.Button,
        quick_btn: cc.Button,
        overBtn: cc.Button,
        _actionIndex: -1,
        _playerCardList: [],
        _effectController: null,
        roomNum: cc.Label,
        runSum: cc.Label,
        detain: cc.Label,
        ruleLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initNum = 1;
        this.stopBtn.node.active = false;
        this.playBtn.node.active = true;
        this.ruleLabel.string = getRuleStrDDZ(ReplayRoomData.opts);
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("tjddz-onGameStart", this, this.showTableLayer);
        registEvent("onServerNotice", this, handlerServerNotice);
        scheduleLamp(this);
        this.detain_left = 0;
        this.detain_right = 0;
        this.detain_down = 0;
        if (ReplayRoomData.opts.detain > 0) {
          this.detain.node.active = true;
          void 0 == ReplayData.game.opts.detain ? this.detain.string = "押底：0" : this.detain.string = "押底：" + ReplayData.game.opts.startDetain;
        } else this.detain.node.active = false;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("ddz-onGameStart", this, this.showTableLayer);
        unregistEvent("tjddz-onGameStart", this, this.showTableLayer);
        registEvent("onServerNotice", this, handlerServerNotice);
      },
      onEnable: function onEnable() {
        cc.director.getScheduler().setTimeScale(1);
        this.roomNum.getComponent(cc.Label).string = ReplayRoomData.roomid;
        this.initStopPanel();
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var handPoker = cc.find("cardHand", this.playerCardNodes[i]);
          var disPoker = cc.find("cardDis", this.playerCardNodes[i]);
          this.hideChildNode(handPoker);
          this.hideChildNode(disPoker);
        }
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          var score = this.getScore(headerNode.uid);
          headerNode.setCoin(score);
        }
        this.schedule(this.runAction, 1);
      },
      showTableLayer: function showTableLayer() {
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? cc.director.loadScene("table") : GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ ? cc.director.loadScene("table-DDZ") : GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ && cc.director.loadScene("table-TJDDZ");
      },
      runAction: function runAction() {
        this.runNextAction();
      },
      initData: function initData() {
        cc.log("replayDataJson: ", JSON.stringify(replayDataJson));
        ReplayData = JSON.parse(replayDataJson);
      },
      initStopPanel: function initStopPanel() {
        var self = this;
        this.stopBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(1);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.playBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(0);
          self.stopBtn.node.active = true;
          self.playBtn.node.active = false;
        });
        this.exitBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          ReplayDataCenter.openRoundPanel = true;
          cc.director.getScheduler().setTimeScale(1);
          cc.director.loadScene("home");
        });
        this.quick_btn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(2);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.overBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          self.overBtnClick();
        });
      },
      onClose: function onClose() {
        ReplayDataCenter.openReplayPanel = true;
        cc.director.getScheduler().setTimeScale(1);
        cc.director.loadScene("home");
      },
      overBtnClick: function overBtnClick() {
        this.unschedule(this.runAction);
        for (var i = this._actionIndex + 1; i < ReplayData.game.actions.length; i++) {
          var actionObject = ReplayData.game.actions[i];
          var uid = actionObject.uid;
          var action = actionObject.action;
          var card = actionObject.card;
          cc.log(i, uid, action, card);
        }
        ReplayDataCenter.resultCard = this.getAllCards();
        var resultData;
        for (var key in ReplayData.game.actions) if ("over" == ReplayData.game.actions[key].action) {
          resultData = ReplayData.game.actions[key];
          break;
        }
        if (void 0 != resultData.data.dissovlt) {
          createMoveMessage("房间已解散");
          var that = this;
          this.scheduleOnce(function() {
            that.onClose();
          }, 1);
        } else openView("DDZ-replayResult", gameDefine.GameType.Game_Poker_DDZ);
      },
      showCardContent: function showCardContent(cardNode, cardId) {
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      getScore: function getScore(uid) {
        var index;
        for (var i = 0; i < ReplayRoomData.players.length; i++) ReplayData.id == ReplayRoomData.players[i].id && (index = i);
        var nowScore = 0;
        if (0 != index) for (var i = 0; i < index; i++) nowScore += ReplayRoomData.players[i].score[uid];
        return nowScore;
      },
      runNextAction: function runNextAction() {
        this._actionIndex++;
        cc.log("ReplayData: ", JSON);
        if (this._actionIndex < ReplayData.game.actions.length) {
          var actionObject = ReplayData.game.actions[this._actionIndex];
          var uid = actionObject.uid;
          var action = actionObject.action;
          var card = actionObject.card;
          cc.log(this._actionIndex, uid, action, card);
          this.whoDoSomething(actionObject);
        } else if (this._actionIndex == ReplayData.game.actions.length) {
          cc.log("replay over");
          var actionindex = this._actionIndex - 1;
          for (var i = 0; i < this._playerCardList.length; i++) {
            var headerNode = this._playerCardList[i];
            var score = this.getScore(headerNode.uid);
            score += ReplayData.scores[headerNode.uid];
            headerNode.setCoin(score);
          }
          this.lastTime = 2;
          this.schedule(this.updateLastTime, 1);
        } else this.unschedule(this.runAction);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        if (this.lastTime <= 0) {
          ReplayDataCenter.resultCard = this.getAllCards();
          var resultData;
          for (var key in ReplayData.game.actions) if ("over" == ReplayData.game.actions[key].action) {
            resultData = ReplayData.game.actions[key];
            break;
          }
          if (void 0 != resultData.data.dissovlt) {
            createMoveMessage("房间已解散");
            var that = this;
            this.scheduleOnce(function() {
              that.onClose();
            }, 1);
          } else openView("DDZ-replayResult", gameDefine.GameType.Game_Poker_DDZ);
          this.unschedule(this.updateLastTime);
        }
      },
      getAllCards: function getAllCards() {
        var list = [];
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var cardNode = this.playerCardNodes[i];
          list.push(cardNode.getComponent("DDZ-ReplayCardController").getList());
        }
        return list;
      },
      setHeadScore: function setHeadScore(uid, data) {
        var score = 0;
        var pos = this.getPosByUid(uid);
        "down" == pos ? score = this.detain_down += data : "right" == pos ? score = this.detain_right += data : "left" == pos && (score = this.detain_left += data);
        for (var key in ReplayData.game.opts.startScore) uid == key && (score += ReplayData.game.opts.startScore[key]);
        return score;
      },
      initHeadScore: function initHeadScore() {
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          var score = 0;
          for (var key in ReplayData.game.opts.startScore) if (key == headerNode.uid) {
            score = ReplayData.game.opts.startScore[key];
            headerNode.setCoin(score);
            break;
          }
        }
      },
      showDetain: function showDetain(data) {
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          var score = 0;
          for (var key in data.score) if (key == headerNode.uid) {
            score = this.setHeadScore(key, data.score[key]);
            headerNode.setCoin(score);
            break;
          }
        }
        var detainScore = Math.abs(this.detain_down + this.detain_left + this.detain_right);
        detainScore += ReplayData.game.opts.startDetain;
        this.detain.string = "押底：" + detainScore;
      },
      showHandCards: function showHandCards(data) {
        this._playerCardList = [];
        cc.log("data:" + JSON.stringify(data));
        var cards = data.card;
        var index;
        if (true == otherReplay[0]) {
          for (var key = 0; key < ReplayRoomData.players.length; key++) if (ReplayRoomData.players[key]) {
            index = key;
            break;
          }
        } else for (var key = 0; key < ReplayRoomData.players.length; key++) if (ReplayRoomData.players[key].uid == GameData.player.uid) {
          index = key;
          break;
        }
        var playerInfo = {};
        var ownerIndex = 0;
        playerInfo = ReplayRoomData.players;
        ownerIndex = index;
        if (null == ownerIndex || void 0 == ownerIndex) return;
        var indexList = [];
        this.playerNum = ReplayData.players.length;
        if (4 == this.playerNum) ; else if (3 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1, 2 ]);
          1 == ownerIndex && (indexList = [ 1, 2, 0 ]);
          2 == ownerIndex && (indexList = [ 2, 0, 1 ]);
        } else 2 == this.playerNum;
        for (var i = 0; i < indexList.length; i++) {
          var needindex = indexList[i];
          var cardList = cards[needindex];
          if (null != this.playerCardNodes && this.playerCardNodes.length > 0 && null != this.playerCardNodes[i]) {
            var playerCards = this.playerCardNodes[i].getComponent("DDZ-ReplayCardController");
            playerCards.showHandCard(cardList.card);
            var uid = cards[needindex].uid;
            var name = playerInfo[needindex].name;
            var headimgurl = playerInfo[needindex].headimgurl;
            playerCards.uid = uid;
            playerCards.showHead(name + "", headimgurl);
            1 == i && playerCards.setNamePositionByDir("right");
            this._playerCardList.push(playerCards);
          }
        }
        if (1 == this.initNum) {
          this.initHeadScore();
          this.initNum++;
        }
      },
      tiChuaiAction: function tiChuaiAction(tiChuaiNode) {
        var callFunc1 = cc.callFunc(function() {
          tiChuaiNode.active = true;
        }, this);
        var callFunc2 = cc.callFunc(function() {
          tiChuaiNode.active = false;
        }, this);
        var delayTime = cc.delayTime(1);
        var seq = cc.sequence(callFunc1, delayTime, callFunc2);
        tiChuaiNode.parent.runAction(seq);
      },
      showPlayerTiChuai: function showPlayerTiChuai(pos, dizhuUid, uid, data) {
        var that = this;
        if (1 == data.num && uid == dizhuUid) {
          if ("right" == pos) {
            cc.log("showPlayerTiChuai pos right");
            this.tiChuaiAction(this.chuaiIcon_right);
          } else if ("left" == pos) {
            cc.log("showPlayerTiChuai pos left");
            this.tiChuaiAction(this.chuaiIcon_left);
          }
        } else if (1 == data.num && uid != dizhuUid) if ("right" == pos) {
          cc.log("showPlayerTiChuai dizhu pos right");
          this.tiChuaiAction(this.tiIcon_right);
        } else if ("left" == pos) {
          cc.log("showPlayerTiChuai dizhu pos left");
          this.tiChuaiAction(this.tiIcon_left);
        }
      },
      showKicking: function showKicking(data) {
        cc.log("showKicking");
        var pos = this.getPosByUid(data.uid);
        this.showPlayerTiChuai(pos, ReplayData.game.opts.dizhu, data.uid, data);
      },
      showHeadTiChuai: function showHeadTiChuai(parent, dizhuUid, uid, data) {
        var playerNode = parent.getChildByName("TablePlayerTemplate");
        var tiChuaiNode = cc.find("tiChuaiNode", playerNode);
        if (1 == data.num && uid != dizhuUid) {
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          tiIcon.active = true;
          parent == this.playerRightNode && (tiIcon.x = -67);
        } else if (1 == data.num && uid == dizhuUid) {
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          chuaiIcon.active = true;
          parent == this.playerRightNode && (chuaiIcon.x = -67);
        }
      },
      showPlayerKicking: function showPlayerKicking(data) {
        cc.log("showPlayerKicking");
        var pos = this.getPosByUid(data.uid);
        "down" == pos ? this.showHeadTiChuai(this.playerDownNode, ReplayData.game.opts.dizhu, data.uid, data) : "right" == pos && this.showHeadTiChuai(this.playerRightNode, ReplayData.game.opts.dizhu, data.uid, data);
        "left" == pos && this.showHeadTiChuai(this.playerLeftNode, ReplayData.game.opts.dizhu, data.uid, data);
      },
      getPosByUid: function getPosByUid(uid) {
        var index;
        if (true == otherReplay[0]) {
          for (var key = 0; key < ReplayRoomData.players.length; key++) if (ReplayRoomData.players[key]) {
            index = key;
            break;
          }
        } else for (var key = 0; key < ReplayRoomData.players.length; key++) if (ReplayRoomData.players[key].uid == GameData.player.uid) {
          index = key;
          break;
        }
        var ownerIndex = 0;
        var indexList = [];
        ownerIndex = index;
        0 == ownerIndex && (indexList = [ 0, 1, 2 ]);
        1 == ownerIndex && (indexList = [ 1, 2, 0 ]);
        2 == ownerIndex && (indexList = [ 2, 0, 1 ]);
        var posList = [ "down", "right", "left" ];
        for (var key = 0; key < indexList.length; key++) if (this._playerCardList[key].uid == uid) return posList[key];
      },
      whoDoSomething: function whoDoSomething(data) {
        this.runSum.getComponent(cc.Label).string = "进度: " + this._actionIndex + "/" + (ReplayData.game.actions.length - 1);
        cc.log("data = " + JSON.stringify(data));
        var cardController = this.getCardController(data.uid);
        if ("deal" == data.action) {
          this._handPokers = [];
          this._handPokers = data.card;
          this.showHandCards(data);
          this._actionIndex > 1 && createMoveMessage("无人叫分,重新发牌");
        }
        if ("holePokers" == data.action) {
          var handPoker = [];
          for (var key in this._handPokers) data.uid == this._handPokers[key].uid && (handPoker = this._handPokers[key].card);
          var cards = data.card.concat(handPoker);
          cardController.addHolePoker(cards);
          var jiaofenNodes = cc.find("jiaofenSps", this.otherNode);
          this.hideChildNode(jiaofenNodes);
          this.showHolePoker(data);
          this.showMultiple(1);
          this.showPlayerIdentity(data);
        }
        if ("jiaofen" == data.action) this.showJiaofen(data); else if ("detain" == data.action) this.showDetain(data); else if ("startTi" == data.action || "startChuai" == data.action) {
          this.showKicking(data);
          this.showPlayerKicking(data);
        } else if ("discard" == data.action) {
          this.hideOtherNode(data);
          cardController.discard(data.card);
          cc.log("data.multiple:" + data.multiple + JSON.stringify(data));
          this.changeMultiple(data.multiple);
        } else if ("pass" == data.action) {
          cardController.hideDisCard();
          this.showPass(data);
        } else if ("over" == data.action) {
          cc.log("over:" + JSON.stringify(data));
          this.changeMultiple(data.data.boomNum);
        }
      },
      showHolePoker: function showHolePoker(data) {
        cc.log("data.cards:" + data.card);
        var index = 0;
        for (var key in this.holePokerNode.children) {
          this.showCardContent(this.holePokerNode.children[key], data.card[index]);
          index++;
        }
      },
      showJiaofen: function showJiaofen(data) {
        for (var i = 0; i < this._playerCardList.length; i++) this._playerCardList[i].uid == data.uid ? this.showJiaofenText(i, data.num) : this.hideJiaofenText(i);
      },
      showJiaofenText: function showJiaofenText(index, num) {
        var passNode = cc.find("jiaofenSps/jiaofen" + index, this.otherNode);
        var iconUrl = "";
        switch (num) {
         case 1:
          iconUrl = "resources/ddz/UI/common/artword/artword_1fen.png";
          break;

         case 2:
          iconUrl = "resources/ddz/UI/common/artword/artword_2fen.png";
          break;

         case 3:
          iconUrl = "resources/ddz/UI/common/artword/artword_3fen.png";
          break;

         case 4:
          iconUrl = "resources/ddz/UI/common/artword/artword_bujiao.png";
        }
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        passNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        passNode.active = true;
      },
      hideJiaofenText: function hideJiaofenText(index) {
        var passNode = cc.find("jiaofenSps/jiaofen" + index, this.otherNode);
        passNode.active = false;
      },
      showPass: function showPass(data) {
        for (var i = 0; i < this._playerCardList.length; i++) data.uid == this._playerCardList[i].uid ? this.showPassText(i) : this.hidePassText(i);
      },
      showPassText: function showPassText(index) {
        var passNode = cc.find("buchuNodes/buchuLb" + index, this.otherNode);
        passNode.active = true;
      },
      hidePassText: function hidePassText(index) {
        var passNode = cc.find("buchuNodes/buchuLb" + index, this.otherNode);
        passNode.active = false;
      },
      showMultiple: function showMultiple(data) {
        this.showChildNode(this.multipleNode);
        this.changeMultiple(data);
      },
      changeMultiple: function changeMultiple(num) {
        cc.log("num:" + num);
        var multiple = cc.find("multipleNum", this.multipleNode);
        multiple.getComponent(cc.Label).string = num;
      },
      hideOtherNode: function hideOtherNode(data) {
        for (var i = 0; i < this._playerCardList.length; i++) data.uid == this._playerCardList[i].uid && this.hidePassText(i);
      },
      showPlayerIdentity: function showPlayerIdentity(data) {
        var playerCards = this.getCardController(data.uid);
        for (var i = 0; i < this._playerCardList.length; i++) playerCards.uid == ReplayData.game.opts.dizhu && playerCards.uid == this._playerCardList[i].uid ? this._playerCardList[i].showPlayerIdentity(true, 1) : this._playerCardList[i].showPlayerIdentity(true, 2);
      },
      removeDisFromLast: function removeDisFromLast(cardId) {
        var actionObject = ReplayData.game.actions[this._actionIndex - 1];
        var lastuid = actionObject.uid;
        var lastCardController = this.getCardController(lastuid);
        lastCardController.removeDisCard(cardId);
      },
      getAnimationIndex: function getAnimationIndex(uid) {
        var actionPos = "";
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var playerCards = this.playerCardNodes[i].getComponent("DDZ-ReplayCardController");
          4 == this.playerNum ? playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i ? actionPos = "right" : 2 == i ? actionPos = "up" : 3 == i && (actionPos = "left")) : 3 == this.playerNum ? playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i ? actionPos = "up" : 2 == i && (actionPos = "left")) : 2 == this.playerNum && playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i && (actionPos = "up"));
        }
        return actionPos;
      },
      hideChildNode: function hideChildNode(node) {
        for (var key in node.children) node.children[key].active = false;
      },
      showChildNode: function showChildNode(node) {
        for (var key in node.children) node.children[key].active = true;
      },
      cardActionAnimation: function cardActionAnimation(uid, action) {},
      getCardController: function getCardController(uid) {
        for (var i = 0; i < this._playerCardList.length; i++) {
          var cardController = this._playerCardList[i];
          if (cardController.uid == uid) return cardController;
        }
        return null;
      },
      ruleClick: function ruleClick() {},
      isRuleBtn: function isRuleBtn() {},
      onShowPlayIntrClick: function onShowPlayIntrClick() {},
      showPlayIntroduce: function showPlayIntroduce(size) {}
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  "DDZ-ReplayResultPanel": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57f80JCasNMDJx4BgY/2tXt", "DDZ-ReplayResultPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        resultIcon: cc.Node,
        roomID: cc.Label,
        createtime: cc.Label,
        roundData: cc.Label,
        isMark: 0,
        font: {
          default: [],
          type: [ cc.Font ]
        }
      },
      onLoad: function onLoad() {
        this.onShow();
      },
      onClose: function onClose(evt) {
        ReplayDataCenter.openReplayPanel = true;
        cc.director.getScheduler().setTimeScale(1);
        cc.director.loadScene("home");
      },
      onShow: function onShow() {
        this.tiChuaiData = [];
        for (var key in ReplayData.game.actions) "startTi" != ReplayData.game.actions[key].action && "startChuai" != ReplayData.game.actions[key].action || this.tiChuaiData.push(ReplayData.game.actions[key]);
        for (var i = 0; i < ReplayData.players.length; i++) {
          this.showCards(i);
          this.showPlayer(i);
          this.showScore(i);
          this.showDetail(i);
        }
        this.showRoundInfo();
        this.showResultIcon();
        this.showDetain();
      },
      showResultIcon: function showResultIcon() {
        var Uid;
        if (true == otherReplay[0]) {
          for (var key in ReplayRoomData.players) if (key) {
            Uid = ReplayRoomData.players[key].uid;
            break;
          }
        } else Uid = GameData.player.uid;
        var myScore = ReplayData.scores[Uid];
        var iconUrl = "";
        var texture;
        if (myScore > 0) {
          iconUrl = "resources/ddz/UI/result/woyingle.png";
          texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.resultIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        } else if (myScore < 0) {
          iconUrl = "resources/ddz/UI/result/shibaile.png";
          texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.resultIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + ReplayData.room;
        var time = getTimeStr(ReplayRoomData.createtime);
        this.createtime.string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        var showRoundNum = 0;
        if (void 0 != ReplayRoomData.games) for (var i = 0; i < ReplayRoomData.games.length; i++) ReplayData.id == ReplayRoomData.games[i].id && (showRoundNum = i + 1); else if (void 0 != ReplayRoomData.record) for (var i = 0; i < ReplayRoomData.record.length; i++) ReplayData.id == ReplayRoomData.record[i].id && (showRoundNum = i + 1);
        this.roundData.string = "第" + showRoundNum + "局";
      },
      showDetail: function showDetail(index) {},
      showPlayer: function showPlayer(index) {
        var player = ReplayData.players[index];
        var idNode = cc.find("player_" + (index + 1) + "/headNode/playerID", this.node);
        var nameNode = cc.find("player_" + (index + 1) + "/headNode/name", this.node);
        var headpicNode = cc.find("player_" + (index + 1) + "/headNode/head", this.node);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        this.showPlayerIdentity(player, index);
        this.showMultiple(player, index);
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showCards: function showCards(index) {
        var player = ReplayData.players[index];
        var playerNode = cc.find("player_" + (index + 1), this.node);
        var parent = cc.find("cardsNoe", playerNode);
        var uid = player.uid;
        var playCard;
        for (var key = 0; key < ReplayData.game.cards.length; key++) if (ReplayData.game.cards[key].uid == uid) {
          playCard = ReplayData.game.cards[key].cards;
          break;
        }
        for (var key in parent.children) parent.children[key].active = false;
        for (var i = 0; i < playCard.length; i++) {
          var card = parent.getChildByName("card_" + i);
          card.active = true;
          this.showCardContent(card, playCard[i]);
        }
      },
      showPlayerIdentity: function showPlayerIdentity(player, index) {
        var Identity = cc.find("player_" + (index + 1) + "/headNode/identity_icon", this.node);
        var iconUrl = "";
        iconUrl = player.uid == ReplayData.game.opts.dizhu ? "resources/ddz/UI/common/icon/dizhu_icon.png" : "resources/ddz/UI/common/icon/nongmin_icon.png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        Identity.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showDetain: function showDetain() {
        if (ReplayRoomData.opts.detain > 0) {
          var detain = cc.find("panel/detain/label", this.node);
          var resultData;
          for (var key in ReplayData.game.actions) "over" == ReplayData.game.actions[key].action && (resultData = ReplayData.game.actions[key]);
          detain.getComponent(cc.Label).string = "押底:" + resultData.data.detain;
          detain.parent.active = true;
        } else {
          var detain = cc.find("panel/detain/label", this.node);
          detain.parent.active = false;
        }
      },
      showMultiple: function showMultiple(player, index) {
        var difen = cc.find("player_" + (index + 1) + "/difen/label", this.node);
        var beishu = cc.find("player_" + (index + 1) + "/beishu/label", this.node);
        cc.log("ReplayData:" + JSON.stringify(ReplayData.game.actions));
        var resultData;
        for (var key in ReplayData.game.actions) if ("over" == ReplayData.game.actions[key].action) {
          resultData = ReplayData.game.actions[key];
          break;
        }
        difen.getComponent(cc.Label).string = resultData.data.remainFen;
        beishu.getComponent(cc.Label).string = resultData.data.boomNum;
        difen.parent.y = 210;
        beishu.parent.y = 162;
        var shouDi = cc.find("player_" + (index + 1) + "/shouDi/label", this.node);
        var kuiDi = cc.find("player_" + (index + 1) + "/kuiDi/label", this.node);
        shouDi.parent.active = false;
        kuiDi.parent.active = false;
        ReplayRoomData.opts.detain > 0 && this.showDetainScore(difen, beishu, player, index, resultData);
        true == ReplayRoomData.opts.kicking && this.showPlayerTiChuai(index);
      },
      showDetainScore: function showDetainScore(difen, beishu, player, index, resultData) {
        cc.log("showDetainScore");
        if (true == resultData.data.flag) if (player.uid == ReplayData.game.opts.dizhu) if (resultData.data.detainData < 0) {
          difen.parent.y = 239;
          beishu.parent.y = 209;
          var shouDi = cc.find("player_" + (index + 1) + "/shouDi/label", this.node);
          shouDi.getComponent(cc.Label).string = resultData.data.detainInfo[player.uid];
          shouDi.parent.active = true;
          shouDi.parent.y = 141;
          var kuiDi = cc.find("player_" + (index + 1) + "/kuiDi/label", this.node);
          kuiDi.getComponent(cc.Label).string = -resultData.data.detainData;
          kuiDi.parent.active = true;
          kuiDi.parent.y = 176;
        } else {
          difen.parent.y = 226;
          beishu.parent.y = 190;
          var shouDi = cc.find("player_" + (index + 1) + "/shouDi/label", this.node);
          shouDi.getComponent(cc.Label).string = resultData.data.detainInfo[player.uid];
          shouDi.parent.active = true;
          shouDi.parent.y = 155;
        } else {
          difen.parent.y = 226;
          beishu.parent.y = 190;
          var shouDi = cc.find("player_" + (index + 1) + "/shouDi/label", this.node);
          shouDi.getComponent(cc.Label).string = resultData.data.detainInfo[player.uid];
          shouDi.parent.active = true;
          shouDi.parent.y = 155;
        } else if (void 0 == resultData.data.flag && player.uid == ReplayData.game.opts.dizhu) if (resultData.data.detainInfo > 0) {
          difen.parent.y = 226;
          beishu.parent.y = 190;
          var shouDi = cc.find("player_" + (index + 1) + "/shouDi/label", this.node);
          shouDi.getComponent(cc.Label).string = resultData.data.detainInfo;
          shouDi.parent.active = true;
          shouDi.parent.y = 155;
        } else if (resultData.data.detainInfo < 0) {
          difen.parent.y = 226;
          beishu.parent.y = 190;
          var kuiDi = cc.find("player_" + (index + 1) + "/kuiDi/label", this.node);
          kuiDi.getComponent(cc.Label).string = -resultData.data.detainInfo;
          kuiDi.parent.active = true;
          kuiDi.parent.y = 155;
        }
      },
      showPlayerTiChuai: function showPlayerTiChuai(index) {
        var uid = ReplayData.players[index].uid;
        for (var key = 0; key < this.tiChuaiData.length; key++) if (this.tiChuaiData[key].uid == uid && uid != ReplayData.game.opts.dizhu) {
          if (1 == this.tiChuaiData[key].num) {
            var tiIcon = cc.find("player_" + (index + 1) + "/tiIcon", this.node);
            tiIcon.active = true;
          }
        } else if (this.tiChuaiData[key].uid == uid && uid == ReplayData.game.opts.dizhu && 1 == this.tiChuaiData[key].num) {
          var chuaiIcon = cc.find("player_" + (index + 1) + "/chuaiIcon", this.node);
          chuaiIcon.active = true;
        }
      },
      showCardContent: function showCardContent(cardNode, cardId) {
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showScore: function showScore(index) {
        var uid = ReplayData.players[index].uid;
        var scoreNode = cc.find("player_" + (index + 1) + "/field_num1", this.node);
        if (ReplayData.scores[uid] > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + ReplayData.scores[uid];
        } else if (ReplayData.scores[uid] < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = ReplayData.scores[uid];
        } else {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = ReplayData.scores[uid];
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {} ],
  "DDZ-coinEnd": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27f69QL1llCqI/C+ianfLn0", "DDZ-coinEnd");
    "use strict";
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        coinEndNode: cc.Node,
        coinEndLayer: cc.Node,
        resultIcon: cc.Node,
        Player: cc.Node,
        buttonNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("coinEndEvent", this, this.onCoinEndEventHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("coinEndEvent", this, this.onCoinEndEventHandler);
      },
      onEnable: function onEnable() {
        this.onCoinEndEventHandler();
      },
      onCoinEndEventHandler: function onCoinEndEventHandler() {
        this.updateUIShow();
      },
      onShow: function onShow() {
        this.uiAction();
        this.updateUIShow();
      },
      uiAction: function uiAction() {
        this.coinEndNode.active = true;
        this.coinEndLayer.scale = .6;
        var scale1 = cc.scaleTo(.2, 1.2);
        var scale2 = cc.scaleTo(.2, .9);
        var scale3 = cc.scaleTo(.1, 1);
        this.coinEndLayer.stopAllActions();
        this.coinEndLayer.runAction(cc.sequence(scale1, scale2, scale3).easing(cc.easeIn(3)));
      },
      updateUIShow: function updateUIShow() {
        if (void 0 == GameData.room.opts) return;
        if (GameData.room.opts.joinermax) {
          this.hideNodeChild(this.resultIcon);
          for (var i = 0; i < GameData.room.opts.joinermax; i++) {
            this.showPlayer(i);
            this.showMultiple(i);
            this.showScore(i);
            this.showDouble(i);
          }
        }
        this.showButtonNode();
      },
      setName: function setName(name) {
        return isChinese(name) ? getShortStr(name, 5) : getShortStr(name, 10);
      },
      setHeadImg: function setHeadImg(imgurl, node) {
        if (void 0 == imgurl || imgurl.length <= 0 || void 0 == node) return;
        cc.loader.load({
          url: imgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        if (void 0 == player) return;
        var playerNode = cc.find("player_" + (index + 1), this.Player);
        var nameNode = cc.find("name", playerNode);
        var headpicNode = cc.find("head", playerNode);
        var identityNode = cc.find("identityIcon", playerNode);
        player.uid == GameDataDDZ.game.dizhuUid ? identityNode.active = true : player.uid != GameData.game.dizhuUid && (identityNode.active = false);
        GameData.player.uid == player.uid ? nameNode.color = new cc.Color(255, 229, 124) : nameNode.color = new cc.Color(123, 253, 255);
        nameNode.getComponent(cc.Label).string = this.setName(player.name);
        this.setHeadImg(player.headimgurl, headpicNode);
      },
      showMultiple: function showMultiple(index) {
        var player = GameData.joiners[index];
        if (void 0 == player) return;
        var playerNode = cc.find("player_" + (index + 1), this.Player);
        var multipleNode = cc.find("multiple", playerNode);
        multipleNode.getComponent(cc.Label).string = GameDataDDZ.resultData.boomNum;
      },
      showDouble: function showDouble(index) {
        var player = GameData.joiners[index];
        if (void 0 == player) return;
        var uid = player.uid;
        var playerNode = cc.find("player_" + (index + 1), this.Player);
        if (GameDataDDZ.isEmptyObject(GameDataDDZ.kicking)) return;
        for (var key in GameDataDDZ.kicking.kicking) if (key == uid && uid != GameDataDDZ.kicking.dizhu) {
          var doubleNode = cc.find("doubleIcon", playerNode);
          1 == GameDataDDZ.kicking.kicking[key] ? doubleNode.active = true : doubleNode.active = false;
        } else if (key == uid && uid == GameDataDDZ.kicking.dizhu) {
          var doubleNode = cc.find("doubleIcon", playerNode);
          1 == GameDataDDZ.kicking.kicking[key] ? doubleNode.active = true : doubleNode.active = false;
        }
      },
      showScore: function showScore(index) {
        var playerData = GameData.joiners[index];
        if (void 0 == playerData) return;
        var uid = playerData.uid;
        var playerNode = cc.find("player_" + (index + 1), this.Player);
        var scoreNode = cc.find("score", playerNode);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[uid] && (score = coinData.coins[uid]);
        } else GameDataDDZ.resultData.score && (score = GameDataDDZ.resultData.score[uid]);
        if (score > 0) {
          scoreNode.color = new cc.Color(255, 229, 124);
          scoreNode.getComponent(cc.Label).string = "+" + score;
          if (uid == GameData.player.uid) {
            var winIcon = cc.find("winIcon", this.resultIcon);
            winIcon.active = true;
          }
        } else if (score < 0) {
          scoreNode.color = new cc.Color(123, 253, 255);
          scoreNode.getComponent(cc.Label).string = score;
          if (uid == GameData.player.uid) {
            var loseIcon = cc.find("loseIcon", this.resultIcon);
            loseIcon.active = true;
          }
        } else {
          scoreNode.color = new cc.Color(132, 255, 123);
          scoreNode.getComponent(cc.Label).string = score;
          if (uid == GameData.player.uid) {
            var dogfallIcon = cc.find("dogfallIcon", this.resultIcon);
            dogfallIcon.active = true;
          }
        }
      },
      showButtonNode: function showButtonNode() {
        if (void 0 == GameData.room.opts) return;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          cc.find("continBtn2", this.buttonNode).active = false;
          cc.find("continBtn", this.buttonNode).active = true;
          cc.find("backBtn", this.buttonNode).active = true;
        } else {
          cc.find("continBtn2", this.buttonNode).active = true;
          cc.find("continBtn", this.buttonNode).active = false;
          cc.find("backBtn", this.buttonNode).active = false;
        }
      },
      showTimer: function showTimer() {
        var continBtn = cc.find("continBtn", this.buttonNode);
        var timeNode = cc.find("time", continBtn);
        var count = 6;
        var that = this;
        var timerCallback = function timerCallback() {
          count--;
          timeNode.getComponent(cc.Label).string = "（" + count + "）";
          if (count <= 0) {
            that.unschedule(timerCallback);
            that.btnBackOnClicked();
          }
        };
        this.schedule(timerCallback, 1);
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      onSelectGameClick: function onSelectGameClick(event, customEventData) {
        if (inCD(1e3)) return;
        if (customEventData == gameDefine.currencyType.Currency_Card) {
          if (GameData.roomClose) {
            this.coinEndNode.active = false;
            this.node.getComponent("DDZ-roomMain").showSummaryLayer();
          } else {
            DDZHandler.getInstance().requestReady(function(res) {});
            this.coinEndNode.active = false;
            GameDataDDZ.game.dizhuUid = 0;
            sendEvent("initTableNode");
          }
          GameDataDDZ.clearObject(GameDataDDZ.kicking);
        } else if (customEventData == gameDefine.currencyType.Currency_Coin) {
          matchHandler.selectGameType = GameData.room.opts.gameType;
          matchHandler.selectGameLv = GameData.room.opts.scorelv;
          matchHandler.signup();
          GameDataDDZ.game.dizhuUid = 0;
          sendEvent("initTableNode");
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    roomHandler: "roomHandler"
  } ],
  "DDZ-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e7d7x5FwNFj4ahxAtX84LG", "DDZ-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round6: cc.Toggle,
        round10: cc.Toggle,
        round20: cc.Toggle,
        fanshu2: cc.Toggle,
        fanshu3: cc.Toggle,
        fanshu4: cc.Toggle,
        wuxianfan: cc.Toggle,
        payNode: cc.Node,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        timesNode: cc.Node,
        times1: cc.Toggle,
        times2: cc.Toggle,
        times5: cc.Toggle,
        scoreNode: cc.Node,
        score1: cc.Toggle,
        score2: cc.Toggle,
        score3: cc.Toggle,
        limitLabel: cc.Label,
        jiaofen: cc.Toggle,
        lzJiaofen: cc.Toggle,
        bwJiaofen: cc.Toggle,
        detain1: cc.Toggle,
        detain2: cc.Toggle,
        detain3: cc.Toggle,
        detain4: cc.Toggle,
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        },
        fullMark: {
          default: null,
          type: cc.Toggle
        },
        suppress: {
          default: null,
          type: cc.Toggle
        },
        tiChuai: {
          default: null,
          type: cc.Toggle
        },
        fourAndTow: {
          default: null,
          type: cc.Toggle
        }
      },
      onLoad: function onLoad() {
        this.refreshUI();
        this.modeType = 1;
        this.spendData = void 0;
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      createRoom: function createRoom() {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Poker_DDZ);
        var createData = {
          gameType: gameDefine.GameType.Game_Poker_DDZ,
          playType: GameDataDDZ.createRoomOpts.playType,
          roundMax: GameDataDDZ.createRoomOpts.roundMax,
          roundRule: GameDataDDZ.createRoomOpts.roundMax,
          roundType: GameDataDDZ.createRoomOpts.roundType,
          fanshu: GameDataDDZ.createRoomOpts.fanshu,
          joinermax: 3,
          clubId: 0,
          roomType: 0,
          costType: GameDataDDZ.createRoomOpts.costType,
          score: GameDataDDZ.createRoomOpts.score,
          times: GameDataDDZ.createRoomOpts.times,
          jiaofenType: GameDataDDZ.createRoomOpts.jiaofenType,
          fullMark: GameDataDDZ.createRoomOpts.fullMark,
          suppress: GameDataDDZ.createRoomOpts.suppress,
          kicking: GameDataDDZ.createRoomOpts.kicking,
          detain: GameDataDDZ.createRoomOpts.detain,
          fourFlag: GameDataDDZ.createRoomOpts.fourFlag,
          scorelv: GameDataDDZ.createRoomOpts.score,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_DDZ) return createData;
        createData.currencyType = modeTypeData.Game_Poker_DDZ.CurrencyType;
        createData.settleType = modeTypeData.Game_Poker_DDZ.SettleType;
        return createData;
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..ddz");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_DDZ) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Poker_DDZ.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Poker_DDZ];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Poker_DDZ];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        var cost;
        var number = 3;
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            0 === key ? cost = this.spendData[6].cost : 1 === key ? cost = this.spendData[10].cost : 2 === key && (cost = this.spendData[20].cost);
            final = cost[number].final;
            this.pay2.isChecked;
            this.spendUI[key].string = "（" + str1 + "*" + final + str2 + "）";
          } else {
            cost = this.spendData[key].cost;
            final = cost[number].final;
            str2 = "/局";
            this.spendUI[key].string = "";
          }
          this.drowArray[key].active = 0 == final;
        }
      },
      selectRoomType: function selectRoomType(evt, data) {},
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.round6.isChecked) {
          GameDataDDZ.createRoomOpts.roundMax = 6;
          GameDataDDZ.createRoomOpts.roundType = gameDefine.roundType.round;
        } else if (this.round10.isChecked) {
          GameDataDDZ.createRoomOpts.roundMax = 10;
          GameDataDDZ.createRoomOpts.roundType = gameDefine.roundType.round;
        } else if (this.round20.isChecked) {
          GameDataDDZ.createRoomOpts.roundMax = 20;
          GameDataDDZ.createRoomOpts.roundType = gameDefine.roundType.round;
        }
        this.fanshu2.isChecked ? GameDataDDZ.createRoomOpts.fanshu = 2 : this.fanshu3.isChecked ? GameDataDDZ.createRoomOpts.fanshu = 3 : this.fanshu4.isChecked ? GameDataDDZ.createRoomOpts.fanshu = 4 : this.wuxianfan.isChecked && (GameDataDDZ.createRoomOpts.fanshu = 15);
        this.pay1.isChecked ? GameDataDDZ.createRoomOpts.costType = 1 : this.pay2.isChecked ? GameDataDDZ.createRoomOpts.costType = 2 : this.pay3.isChecked && (GameDataDDZ.createRoomOpts.costType = 3);
        this.jiaofen.isChecked ? GameDataDDZ.createRoomOpts.jiaofenType = 1 : this.lzJiaofen.isChecked ? GameDataDDZ.createRoomOpts.jiaofenType = 2 : this.bwJiaofen.isChecked && (GameDataDDZ.createRoomOpts.jiaofenType = 3);
        this.detain1.isChecked ? GameDataDDZ.createRoomOpts.detain = 1 : this.detain2.isChecked ? GameDataDDZ.createRoomOpts.detain = 2 : this.detain3.isChecked ? GameDataDDZ.createRoomOpts.detain = 3 : this.detain4.isChecked && (GameDataDDZ.createRoomOpts.detain = 0);
        this.fullMark.isChecked ? GameDataDDZ.createRoomOpts.fullMark = true : GameDataDDZ.createRoomOpts.fullMark = false;
        this.suppress.isChecked ? GameDataDDZ.createRoomOpts.suppress = true : GameDataDDZ.createRoomOpts.suppress = false;
        this.tiChuai.isChecked ? GameDataDDZ.createRoomOpts.kicking = true : GameDataDDZ.createRoomOpts.kicking = false;
        this.fourAndTow.isChecked ? GameDataDDZ.createRoomOpts.fourFlag = true : GameDataDDZ.createRoomOpts.fourFlag = false;
        this.score1.isChecked ? GameDataDDZ.createRoomOpts.score = 0 : this.score2.isChecked ? GameDataDDZ.createRoomOpts.score = 1 : this.score3.isChecked && (GameDataDDZ.createRoomOpts.score = 2);
        GameDataDDZ.saveCreateRoomOpts();
      },
      selectRoundRuleClick: function selectRoundRuleClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 6:
          this.round6.isChecked = true;
          this.round10.isChecked = false;
          this.round20.isChecked = false;
          break;

         case 10:
          this.round10.isChecked = true;
          this.round6.isChecked = false;
          this.round20.isChecked = false;
          break;

         case 20:
          this.round20.isChecked = true;
          this.round6.isChecked = false;
          this.round10.isChecked = false;
        }
        this.round6.isChecked ? GameDataDDZ.createRoomOpts.roundMax = 6 : this.round10.isChecked ? GameDataDDZ.createRoomOpts.roundMax = 10 : this.round20.isChecked && (GameDataDDZ.createRoomOpts.roundMax = 20);
        this.showSpendUI();
        this.refreshTimesScore();
      },
      selectTimesClick: function selectTimesClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 1:
          this.times1.isChecked = true;
          this.times2.isChecked = false;
          this.times5.isChecked = false;
          break;

         case 10:
          this.times2.isChecked = true;
          this.times1.isChecked = false;
          this.times5.isChecked = false;
          break;

         case 20:
          this.times5.isChecked = true;
          this.times2.isChecked = false;
          this.times1.isChecked = false;
        }
        this.times1.isChecked ? GameDataDDZ.createRoomOpts.times = 1 : this.times2.isChecked ? GameDataDDZ.createRoomOpts.times = 2 : this.times5.isChecked && (GameDataDDZ.createRoomOpts.times = 5);
        this.showSpendUI();
        this.refreshTimesScore();
      },
      refreshUI: function refreshUI() {
        this.round6.isChecked = 6 == GameDataDDZ.createRoomOpts.roundMax;
        this.round10.isChecked = 10 == GameDataDDZ.createRoomOpts.roundMax;
        this.round20.isChecked = 20 == GameDataDDZ.createRoomOpts.roundMax;
        this.fanshu2.isChecked = 2 == GameDataDDZ.createRoomOpts.fanshu;
        this.fanshu3.isChecked = 3 == GameDataDDZ.createRoomOpts.fanshu;
        this.fanshu4.isChecked = 4 == GameDataDDZ.createRoomOpts.fanshu;
        this.wuxianfan.isChecked = 15 == GameDataDDZ.createRoomOpts.fanshu;
        this.pay1.isChecked = 1 == GameDataDDZ.createRoomOpts.costType;
        this.pay2.isChecked = 2 == GameDataDDZ.createRoomOpts.costType;
        this.pay3.isChecked = 3 == GameDataDDZ.createRoomOpts.costType;
        this.jiaofen.isChecked = 1 == GameDataDDZ.createRoomOpts.jiaofenType;
        this.lzJiaofen.isChecked = 2 == GameDataDDZ.createRoomOpts.jiaofenType;
        this.bwJiaofen.isChecked = 3 == GameDataDDZ.createRoomOpts.jiaofenType;
        this.detain1.isChecked = 1 == GameDataDDZ.createRoomOpts.detain;
        this.detain2.isChecked = 2 == GameDataDDZ.createRoomOpts.detain;
        this.detain3.isChecked = 3 == GameDataDDZ.createRoomOpts.detain;
        this.detain4.isChecked = 0 == GameDataDDZ.createRoomOpts.detain;
        this.fullMark.isChecked = true == GameDataDDZ.createRoomOpts.fullMark;
        this.suppress.isChecked = true == GameDataDDZ.createRoomOpts.suppress;
        this.tiChuai.isChecked = true == GameDataDDZ.createRoomOpts.kicking;
        this.fourAndTow.isChecked = true == GameDataDDZ.createRoomOpts.fourFlag;
        this.score1.isChecked = 0 == GameDataDDZ.createRoomOpts.score;
        this.score2.isChecked = 1 == GameDataDDZ.createRoomOpts.score;
        this.score3.isChecked = 2 == GameDataDDZ.createRoomOpts.score;
        this.showSpendUI();
        this.refreshTimesScore();
      },
      refreshTimesScore: function refreshTimesScore() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.timesNode.active = false;
          this.scoreNode.active = false;
          this.payNode.active = true;
          return;
        }
        this.scoreNode.active = true;
        this.timesNode.active = false;
        this.payNode.active = false;
        var index = 0;
        switch (GameDataDDZ.createRoomOpts.roundMax) {
         case 6:
          index = 0;
          break;

         case 10:
          index = 1;
          break;

         case 20:
          index = 2;
        }
        var number = 3;
        var cost = this.spendData[index].cost;
        var costFinal = cost[number];
        var enter = this.spendData[index].enter;
        var enterFinal = enter[number];
        void 0 == GameDataDDZ.createRoomOpts.times && (GameDataDDZ.createRoomOpts.times = 1);
        this.score1.isChecked ? GameDataDDZ.createRoomOpts.score = 0 : this.score2.isChecked ? GameDataDDZ.createRoomOpts.score = 1 : this.score3.isChecked && (GameDataDDZ.createRoomOpts.score = 2);
        var times1Label = cc.find("label", this.score1.node);
        var times2Label = cc.find("label", this.score2.node);
        var times5Label = cc.find("label", this.score3.node);
        times1Label.getComponent(cc.Label).string = "初级场：台费" + costFinal[0] + " 进入条件≥" + enterFinal[0] + " 倍数 100";
        times2Label.getComponent(cc.Label).string = "中级场：台费" + costFinal[1] + " 进入条件≥" + enterFinal[1] + " 倍数 200";
        times5Label.getComponent(cc.Label).string = "高级场：台费" + costFinal[2] + " 进入条件≥" + enterFinal[2] + " 倍数 500";
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "DDZ-home": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fd30yg15pLNrsAGA4PxWYg", "DDZ-home");
    "use strict";
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_join: cc.Node,
        layer_ddz: cc.Node,
        head_node: cc.Node,
        head_name: cc.Label,
        head_identify_num: cc.Label,
        head_money_num: cc.Label,
        head_gold_num: cc.Label,
        head_friend_num: cc.Label,
        roomcard_num: cc.Label,
        create_btn: cc.Button,
        join_btn: cc.Button,
        back_btn: cc.Button,
        fangkaAdd: cc.Button,
        pay1_club: cc.Toggle,
        pay2_club: cc.Toggle,
        pay3_club: cc.Toggle,
        pay4_club: cc.Toggle,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        maskBtn: cc.Node,
        selectClubBtn: cc.Button,
        addBtn: cc.Button,
        clubName: cc.Label,
        diamondsNum: cc.Label,
        agentBtn: cc.Node,
        room_number: cc.String,
        room_number_bg: cc.Sprite,
        playerTemplate: cc.Prefab,
        paoMadengLabel: cc.Label,
        _paoMadengX: 0,
        hintNode: cc.Node,
        activeBtnNode: cc.Node,
        activeRedPoint: cc.Node
      },
      onShiSanShui: function onShiSanShui() {
        cc.director.loadScene("SSSHome");
      },
      onLoad: function onLoad() {
        this.room_number = "";
        this.roomcard_num.string = GameData.player.card;
        if (GameData.player.club && Object.keys(GameData.player.club).length > 0) {
          void 0 != GameData.playerCurrClubId && null != GameData.playerCurrClubId || (GameData.playerCurrClubId = GameData.getClubDataByIndex(0).club_id);
          if (0 != Object.keys(GameData.player.club).length) {
            if (null == GameData.getClubDataByClubId(GameData.playerCurrClubId)) return;
            this.clubName.string = GameData.getClubDataByClubId(GameData.playerCurrClubId).clubName;
            this.diamondsNum.string = GameData.getClubDataByClubId(GameData.playerCurrClubId).diamond;
          }
        }
        isChinese(GameData.player.name) ? this.head_name.string = getShortStr(GameData.player.name, 5) : this.head_name.string = getShortStr(GameData.player.name, 10);
        this.head_identify_num.string = GameData.player.uid;
        this.head_money_num.string = GameData.player.money;
        var headNode = cc.instantiate(this.playerTemplate);
        headNode.getComponent("playerTemplate").setPlayer(GameData.player);
        headNode.getComponent("playerTemplate").setName("");
        headNode.getComponent("playerTemplate").setIsPlayerIcon(false);
        headNode.getComponent("playerTemplate").setHeadIcon(GameData.player.headimgurl);
        this.head_node.addChild(headNode);
        this.runPaoMadeng();
        if (void 0 == GameData.player.roomid || 0 == GameData.player.roomid) {
          this.create_btn.node.active = true;
          this.back_btn.node.active = false;
        } else {
          this.create_btn.node.active = false;
          this.back_btn.node.active = true;
        }
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("openScore", this, this.showTableLayer);
        registEvent("cardChange", this, this.roomcardRefresh);
        registEvent("refreshUIClubData", this, this.clubDataRefresh);
        registEvent("refreshUIClubInvite", this, this.showHint);
        registEvent("refreshCreateOrBackBtn", this, this.refreshCreateOrBackBtn);
        registEvent("refreshActivityRedPoint", this, this.refreshActivityRedPoint);
        if (ReplayDataCenter.openRoundPanel) {
          ReplayDataCenter.openRoundPanel = false;
          openView("RecordPanel");
        }
        ReplayDataCenter.openReplayPanel && openView("RoundPanel");
        this.refreshRuleUI();
      },
      onEnable: function onEnable() {
        soundMngr.instance.playMusic("sound/wait");
        GameData.player.agentFlag || sendEvent("refreshActivityRedPoint");
        startLocation();
      },
      showTableLayer: function showTableLayer() {
        cc.director.loadScene("table");
      },
      showHint: function showHint() {
        GameData.player.clubInvite.length > 0 ? this.hintNode.active = true : this.hintNode.active = false;
      },
      fangkaAddCBack: function fangkaAddCBack(evt) {
        openView("kefuweixin");
      },
      roomcardRefresh: function roomcardRefresh() {
        this.roomcard_num.string = GameData.player.card;
      },
      clubDataRefresh: function clubDataRefresh() {
        console.log("GameData.playerCurrClubId  " + GameData.playerCurrClubId);
        if (GameData.player.club && Object.keys(GameData.player.club).length > 0) {
          void 0 != GameData.playerCurrClubId && null != GameData.playerCurrClubId || (GameData.playerCurrClubId = GameData.getClubDataByIndex(0).club_id);
          if (0 != Object.keys(GameData.player.club).length) {
            console.log("GameData.playerCurrClubId  " + GameData.playerCurrClubId);
            if (null == GameData.getClubDataByClubId(GameData.playerCurrClubId)) return;
            this.clubName.string = GameData.getClubDataByClubId(GameData.playerCurrClubId).clubName;
            this.diamondsNum.string = GameData.getClubDataByClubId(GameData.playerCurrClubId).diamond;
          }
          this.refreshAgentRoomBtn();
        }
      },
      refreshCreateOrBackBtn: function refreshCreateOrBackBtn() {
        if (void 0 == GameData.player.roomid || 0 == GameData.player.roomid) {
          this.create_btn.node.active = true;
          this.back_btn.node.active = false;
        } else {
          this.create_btn.node.active = false;
          this.back_btn.node.active = true;
        }
      },
      refreshActivityRedPoint: function refreshActivityRedPoint() {
        this.activeRedPoint.active = true;
      },
      backBtnClicked: function backBtnClicked(evt) {
        RoomHandler.enterMjRoom(GameData.player.roomid);
      },
      joinBtnClicked: function joinBtnClicked(evt) {
        if (void 0 == GameData.player.roomid || GameData.player.roomid <= 0) {
          this.showNumber();
          this.layer_join.active = true;
        } else {
          console.log("GameData.player.roomid----" + GameData.player.roomid);
          createMessageBox("您已在房间中,不能加入别的房间,是否返回房间?", function() {
            RoomHandler.enterMjRoom(GameData.player.roomid);
          }, function() {});
        }
        this.layer_join.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
      },
      backToHome: function backToHome(evt) {
        this.layer_join.active = false;
        this.layer_ddz.active = false;
      },
      createDdz: function createDdz(evt) {
        this.layer_ddz.active = true;
      },
      refreshRuleUI: function refreshRuleUI() {
        GameData.player.club && Object.keys(GameData.player.club).length > 0 && this.refreshAgentRoomBtn();
      },
      enterNumber: function enterNumber(evt, data) {
        if (this.room_number.length < 6) {
          this.room_number += data;
          this.showNumber();
          this.room_number.length >= 6 && RoomHandler.enterMjRoom(this.room_number);
        }
      },
      deleteNumber: function deleteNumber(evt) {
        this.room_number = this.room_number.substring(0, this.room_number.length - 1);
        this.showNumber();
      },
      resetNumber: function resetNumber(evt) {
        this.room_number = "";
        this.showNumber();
      },
      showNumber: function showNumber() {
        for (var i = 1; i <= this.room_number.length; i++) {
          var number = this.room_number.substr(i - 1, 1);
          var Label = cc.find("panel/enterNode/roomLabel_" + i, this.layer_join).getComponent("cc.Label");
          Label.string = number;
          Label.node.active = true;
        }
        for (var i = 6; i > this.room_number.length; i--) {
          var Label = cc.find("panel/enterNode/roomLabel_" + i, this.layer_join);
          Label.active = false;
        }
      },
      enterRoom: function enterRoom(evt) {
        "" !== this.room_number && RoomHandler.enterMjRoom(this.room_number);
      },
      runPaoMadeng: function runPaoMadeng() {
        this._paoMadengX = this.paoMadengLabel.node.x;
        GameData.configData.paomadengIndex = 0;
        this.gotoPaoMadeng();
        this.schedule(this.gotoPaoMadeng, 10);
      },
      gotoPaoMadeng: function gotoPaoMadeng() {
        if (GameData.configData.paomadeng) {
          this.paoMadengLabel.string = GameData.configData.paomadeng[GameData.configData.paomadengIndex].content;
          this.paoMadengLabel.node.x = this._paoMadengX;
          var moveToAction = cc.moveTo(10, cc.p(this._paoMadengX - 570 - this.paoMadengLabel.node.width, this.paoMadengLabel.node.y));
          this.paoMadengLabel.node.runAction(moveToAction);
          GameData.configData.paomadengIndex++;
          GameData.configData.paomadengIndex == GameData.configData.paomadeng.length && (GameData.configData.paomadengIndex = 0);
        }
      },
      openPlayIntro: function openPlayIntro(evt) {
        openView("PlayIntroPanel");
      },
      openRecordPanel: function openRecordPanel(evt) {
        openView("RecordPanel");
      },
      openSettingsPanel: function openSettingsPanel(evt) {
        cc.director.loadScene("table");
      },
      openNoticePanel: function openNoticePanel() {},
      shareBtnClick: function shareBtnClick() {
        openView("SharePanel");
      },
      selectClubClick: function selectClubClick() {
        openView("selectclubPanel");
      },
      joinClubClick: function joinClubClick() {
        openView("joinclubIDPanel");
      },
      agentRoomClick: function agentRoomClick() {},
      showUIClub: function showUIClub() {},
      refreshAgentRoomBtn: function refreshAgentRoomBtn() {}
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    roomHandler: "roomHandler"
  } ],
  "DDZ-playerTemplate": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1752fsPEM1E+Iqg5fnRBdVQ", "DDZ-playerTemplate");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headBtn: cc.Button,
        headIcon: cc.Sprite,
        zhuangIcon: cc.Sprite,
        zhuangNumIcon: cc.Sprite,
        nameLabel: cc.Label,
        score: cc.Label,
        tiChuaiNode: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        },
        uid: 0,
        _player: null
      },
      onLoad: function onLoad() {},
      setPlayer: function setPlayer(data) {
        this._player = data;
        this.uid = this._player.uid;
      },
      setName: function setName(name) {
        this.nameLabel.string = getShortStr(name, 4);
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showPlayerIdentity: function showPlayerIdentity(show, type) {
        this.setIsPlayerIcon(show);
        if (1 == type) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/ddz/UI/common/icon/dizhu_icon.png"));
          this.zhuangIcon.spriteFrame = new cc.SpriteFrame(texture);
        } else 2 == type && (this.zhuangIcon.spriteFrame = null);
      },
      setIsPlayerIcon: function setIsPlayerIcon(show) {
        this.zhuangIcon.node.active = show;
      },
      setNamePositionByDir: function setNamePositionByDir(direction) {
        if ("right" == direction) {
          this.nameLabel.node.x = -50;
          this.score.node.x = -50;
          this.nameLabel.HorizontalAlign = 3;
          this.nameLabel.node.anchorX = 1;
          this.score.HorizontalAlign = 3;
          this.score.node.anchorX = 1;
          var bg = cc.find("bg", this.node);
          bg.scaleX = -1;
          bg.x = -30;
        }
      },
      showZhuangNum: function showZhuangNum(zhuang, num) {},
      enableHeadBtn: function enableHeadBtn(flag) {
        this.headBtn.node.active = flag;
      },
      onHeadBtnClicked: function onHeadBtnClicked(evt) {
        var sceneName = cc.director.getScene().name;
        if ("home" == sceneName) createPlayerInfoPanel(this._player); else {
          var self = this;
          var fun = function fun(panel) {
            if (panel) {
              var template = panel.getComponent("uiRoomPlayerInfo");
              template && template.onShow(self._player);
            }
          };
          var roomData = RoomHandler.getRoomData();
          roomData && roomData.opts && roomData.opts.gameType && openPlayerInfoView(roomData.opts.gameType, fun);
        }
      },
      setCoin: function setCoin(value, type) {
        var coinNode = cc.find("score", this.node);
        var showStr = "";
        if (value > 0) {
          showStr = "+" + value;
          coinNode.getComponent("cc.Label").font = this.fonts[0];
        } else if (value < 0) {
          showStr = value;
          coinNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (0 == value) {
          showStr = value;
          coinNode.getComponent("cc.Label").font = this.fonts[2];
        }
        coinNode.getComponent(cc.Label).string = showStr;
      },
      setGold: function setGold(value) {
        var coinNode = cc.find("score", this.node);
        var showStr = 0;
        void 0 != value ? showStr = value : null;
        coinNode.getComponent(cc.Label).font = null;
        coinNode.color = (showStr > 0 ? 0 : showStr < 0, new cc.Color(255, 229, 124));
        if (showStr > 9999) {
          showStr /= 1e4;
          coinNode.getComponent(cc.Label).string = showStr + "万";
        } else coinNode.getComponent(cc.Label).string = showStr;
      },
      getLiuGuang: function getLiuGuang(isPlay) {
        var liuguang = cc.find("liuguang", this.node);
        liuguang.active = isPlay;
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  "DDZ-poker": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3dbbsTQntJwaLr0NhEA5Lt", "DDZ-poker");
    "use strict";
    var cardTypes = {
      straights: {
        level: 1,
        colorFormat: false,
        numFormat: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],
        allowedLength: [ 5, 6, 7, 8, 9, 10, 11, 12 ],
        notAllowedCard: [ 15 ]
      }
    };
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerParent: {
          default: null,
          type: cc.Node
        },
        cardMask: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        this.cards = this.pokerParent.children;
        for (var key in this.pokerParent.children) this.cardInitY = this.cards[key].y;
        this.touchedCards = [];
        this.selectedCards = [];
        this.addTouchEvent();
      },
      start: function start() {},
      onDestroy: function onDestroy() {},
      addTouchEvent: function addTouchEvent() {
        this.pokerParent.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("pokerParent TOUCH_START");
          var card = event.target;
          this.touchStartLocation = this.cards[0].convertTouchToNodeSpace(event);
          var index = 0;
          for (var i = 0; i < this.cards.length; i++) {
            var c = this.cards[i];
            if (c.name == card.name) {
              index = i;
              break;
            }
          }
          if ("handLayout" == card.name) {
            this.firstTouchedCard = void 0;
            this.clearTouchedCards();
            return;
          }
          var touchedCard = {
            index: index,
            card: card
          };
          cc.log("card.active:" + card.active, card.name);
          this.firstTouchedCard = touchedCard;
          this.pushTouchedCards(touchedCard.index, touchedCard.card);
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("pokerParent TOUCH_MOVE");
          this.clearTouchedCards();
          if (void 0 == this.firstTouchedCard) return;
          this.pushTouchedCards(this.firstTouchedCard.index, this.firstTouchedCard.card);
          var nodeLocation = this.cards[0].convertTouchToNodeSpace(event);
          var x = nodeLocation.x;
          var y = nodeLocation.y;
          var startTouchLocation = this.touchStartLocation;
          for (var i = 0; i < this.cards.length; i++) {
            var card = this.cards[i];
            var cardX = card.x + 20;
            var min, max;
            if (startTouchLocation.x < nodeLocation.x) {
              min = startTouchLocation.x;
              max = nodeLocation.x;
            } else {
              min = nodeLocation.x;
              max = startTouchLocation.x;
            }
            min <= cardX && cardX <= max && card.active && this.pushTouchedCards(i, card);
          }
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("pokerParent TOUCH_END");
          this.doSelectCard();
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          console.log("pokerParent TOUCH_CANCEL");
          this.doSelectCard();
        }, this);
        for (var i = 0; i < this.cards.length; i++) {
          var cards = this.cards;
          (function(i) {
            var card = cards[i];
            card.on(cc.Node.EventType.TOUCH_START, function(event) {
              console.log("card TOUCH_START");
            }, card);
            card.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
              console.log("card TOUCH_MOVE");
            }, card);
            card.on(cc.Node.EventType.TOUCH_END, function(event) {
              console.log("card TOUCH_END");
              card.active && soundMngr.instance.playOtherAudioPoker("click", null);
            }, card);
            card.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
              console.log("card TOUCH_CANCEL");
              card.active && soundMngr.instance.playOtherAudioPoker("click", null);
            }, card);
          })(i);
        }
      },
      pushTouchedCards: function pushTouchedCards(index, card) {
        var cardObj = {
          index: index,
          name: card.name,
          isSelected: card.y != this.cardInitY
        };
        var existCard = this.touchedCards.find(function(obj) {
          return obj.name == card.name ? obj : null;
        });
        if (!existCard) {
          this.touchedCards.push(cardObj);
          this.addCardMask(card);
        }
      },
      clearTouchedCards: function clearTouchedCards() {
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardIndex = this.touchedCards[i].index;
          var card = this.cards[cardIndex];
          card.removeChildByTag(100);
        }
        this.touchedCards = [];
      },
      contain: function contain(arr, obj) {
        if (arr.toString() == obj.toString()) return true;
        return false;
      },
      doSelectCard: function doSelectCard() {
        this.selectedCards = [];
        this.pokerTypeArry = [];
        this.shunziArry = [];
        var tempPokerArr = [];
        var flag = true;
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardObj = this.touchedCards[i];
          var card = this.cards[cardObj.index];
          var cardId = card.getComponent("Card").id;
          this.pokerTypeArry.push(cardId);
          tempPokerArr.push(cardId % 100);
        }
        for (var j = 0; j < this.pokerTypeArry.length; j++) for (var k = 0; k < this.pokerTypeArry.length; k++) k != j && this.pokerTypeArry[k] % 100 == this.pokerTypeArry[j] % 100 && this.pokerTypeArry.splice(k, 1);
        var bool = this.getCardsType(this.pokerTypeArry);
        if (bool) {
          var pokerArr = [];
          for (var j = 0; j < this.pokerTypeArry.length; j++) {
            pokerArr.push(this.pokerTypeArry[j] % 100);
            pokerArr.push(this.pokerTypeArry[j] % 100);
          }
          pokerArr.sort(function(a, b) {
            return a - b;
          });
          tempPokerArr.sort(function(a, b) {
            return a - b;
          });
          this.contain(pokerArr, tempPokerArr) && (flag = false);
        }
        if (flag && "straights" == bool) for (var j = 0; j < this.pokerTypeArry.length; j++) {
          var exist = true;
          for (var k = 0; k < this.shunziArry.length; k++) this.pokerTypeArry[j] % 100 == this.shunziArry[k] % 100 && (exist = false);
          exist && this.shunziArry.push(this.pokerTypeArry[j]);
        }
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardObj = this.touchedCards[i];
          var card = this.cards[cardObj.index];
          var cardId = card.getComponent("Card").id;
          cc.log("card:" + card.name);
          for (var j = 0; j < this.shunziArry.length; j++) cardId == this.shunziArry[j] && (cardObj.isSelected ? card.y = card.y - 30 : card.y = card.y + 30);
          0 == this.shunziArry.length && (cardObj.isSelected ? card.y = card.y - 30 : card.y = card.y + 30);
        }
        this.clearTouchedCards();
        this.showSelectedCards();
      },
      addCardMask: function addCardMask(card) {
        var cardMask = cc.instantiate(this.cardMask);
        cardMask.setTag(100);
        cardMask.setPosition(cc.p(0, 0));
        card.addChild(cardMask);
      },
      showSelectedCards: function showSelectedCards() {
        this.selectedCards = [];
        for (var i = 0; i < this.cards.length; i++) {
          var card = this.cards[i];
          var isSelected = card.y != this.cardInitY;
          isSelected && this.selectedCards.push(card.name);
        }
        sendEvent("ddz-disPokerArry", this.selectedCards);
      },
      getCardsType: function getCardsType(cards) {
        for (var key in cardTypes) {
          var type = cardTypes[key];
          var lengthmatch = false;
          for (var i = 0; i < type.allowedLength.length; i++) type.allowedLength[i] == cards.length && (lengthmatch = true);
          if (!lengthmatch) continue;
          var numbers = this.createSortedCardNumbers(cards);
          cc.log("numbers = " + numbers);
          var fatch = true;
          if (type.notAllowedCard) for (var i = 0; i < numbers.length; i++) for (var j = 0; j < type.notAllowedCard.length; j++) numbers[i] == type.notAllowedCard[j] && (fatch = false);
          var count1 = 0, count2 = 0;
          if ("aircraft" == key.substring(0, key.length - 1) || "aircraft" == key) for (var i = 0; i < cards.length; i++) {
            115 == cards[i] || 215 == cards[i] || 315 == cards[i] || 415 == cards[i] ? count1++ : 114 != cards[i] && 214 != cards[i] && 314 != cards[i] && 414 != cards[i] || count2++;
            3 == count1 && 3 == count2 && (fatch = false);
          }
          if (!fatch) continue;
          var formatMacth = true;
          var format = type.numFormat;
          var cutNum = null;
          var startNum = [];
          for (var j = 0; j < numbers.length; j++) for (var k = 0; k < numbers.length; k++) k != j && numbers[k] == numbers[j] && numbers.splice(k, 1);
          numbers.sort(function(a, b) {
            return a - b;
          });
          cc.log("numbers = " + numbers);
          for (var i = 0; i < numbers.length; i++) {
            if (0 == format[i]) continue;
            if (format[i] < 0) if (startNum[-format[i]]) {
              if (startNum[-format[i]] != numbers[i]) {
                formatMacth = false;
                break;
              }
            } else startNum[-format[i]] = numbers[i]; else if (null == cutNum) cutNum = numbers[i] - format[i]; else if (cutNum != numbers[i] - format[i]) {
              formatMacth = false;
              break;
            }
          }
          if (formatMacth && numbers.length >= 5) return key;
        }
        return false;
      },
      createSortedCardNumbers: function createSortedCardNumbers(cards) {
        var numbers = [];
        for (var i = 0; i < cards.length; i++) numbers[i] = cards[i] % 100;
        return numbers;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  "DDZ-roomDissolve": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "508b9DsuZ5E/bRHuk8foPBu", "DDZ-roomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        null != GameData.game.onRoomDissolve && GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.openDisAgree = false;
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("ddz-onGameAllScore", this, this.showAllScore);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 200 * (i + 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            if (2 == joiner.status) {
              console.log("joiner.status ==" + joiner.status);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = true;
            }
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("DDZ-roomMain").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("DDZ-roomMain").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          0 == GameData.room.opts.detain ? this.node.getComponent("DDZ-roomMain").showSummaryLayer() : GameData.room.opts.detain > 0 && registEvent("ddz-onGameAllScore", this, this.showAllScore);
          this.unschedule(this.updateLastTime);
        }
      },
      showAllScore: function showAllScore() {
        this.node.getComponent("DDZ-roomMain").showSummaryLayer();
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("DDZ-roomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "DDZ-roomMain": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aaa42yxaQVNxZnROf2N0Pam", "DDZ-roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        coinEndLayer: cc.Node,
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("onServerNotice", this, handlerServerNotice);
        registEvent("coinEnd", this, this.showCoinEndLayer);
        scheduleLamp(this);
        GameDataDDZ.game.gameStart ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var movePos = event.touch.getLocation();
          var talkBtnMovePos = this.convertToNodeSpace(movePos);
          var radius = {
            x: this.getContentSize().width / 2,
            y: this.getContentSize().height / 2
          };
          var distance = cc.pDistance(talkBtnMovePos, radius);
          if (distance > this.getContentSize().width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        gameDefine.roomType.Room_Match != GameData.room.opts.roomType ? this.talkBtn.node.active = true : this.talkBtn.node.active = false;
        GameDataDDZ.game.initcards ? this.showTableUI(true) : this.showTableUI(false);
      },
      onDestroy: function onDestroy() {
        unregistEvent("ddz-onGameStart", this, this.showTableLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("onServerNotice", this, handlerServerNotice);
        unregistEvent("coinEnd", this, this.showCoinEndLayer);
        GameData.initGameData();
        GameDataDDZ.initRoomData();
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("ddz/sound/ddz_bg");
        gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType && (this.uiWaitLayer.active = false);
      },
      showTableLayer: function showTableLayer() {
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("ddz/sound/ddz_bg");
      },
      showCoinEndLayer: function showCoinEndLayer(data) {
        var time = data.detail;
        void 0 === time ? time = 0 : null;
        var self = this;
        this.scheduleOnce(function() {
          var template = this.node.getComponent("DDZ-coinEnd");
          template && template.onShow();
          self.uiWaitLayer.active = false;
        }, time);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("DDZ-SettingsPanel", gameDefine.GameType.Game_Poker_DDZ) : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        GameData.realNum = 0;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      },
      AnimationDelayTime: function AnimationDelayTime(data) {
        this._AnimationDelayTime = data.detail;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  "DDZ-roomSummary": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "477a7VYp7ZAV7BMQAd14PXV", "DDZ-roomSummary");
    "use strict";
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        },
        lostNode: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        this.showTime();
        this.hideLostNode();
        for (var i = 0; i < GameData.joiners.length; i++) this.showPlayer(GameData.joiners[i], i + 1);
      },
      hideLostNode: function hideLostNode() {
        for (var key in this.lostNode.children) this.lostNode.children[key].active = false;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        if (!player) return;
        var joinermax = GameData.room.opts.joinermax;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreTxtNode = cc.find("player_" + idx + "/field_text1", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var maxScore = cc.find("player_" + idx + "/maxScore", this.panel);
        var maxBobm = cc.find("player_" + idx + "/maxBobm", this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        var owner = cc.find("player_" + idx + "/owner", this.panel);
        owner.active = GameData.room.creator == player.uid;
        isChinese(player.name) ? nameNode.getComponent("cc.Label").string = getShortStr(player.name, 5) : nameNode.getComponent("cc.Label").string = getShortStr(player.name, 9);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        if (GameDataDDZ.roomsummaryData && 0 != Object.keys(GameDataDDZ.roomsummaryData).length) {
          0 != Object.keys(GameDataDDZ.roomsummaryData.maxFen).length && (maxScore.getComponent("cc.Label").string = "单局最高分:" + GameDataDDZ.roomsummaryData.maxFen[player.uid]);
          0 != Object.keys(GameDataDDZ.roomsummaryData.maxBoom).length && (maxBobm.getComponent("cc.Label").string = "打出炸弹数:" + GameDataDDZ.roomsummaryData.maxBoom[player.uid]);
        }
        this.loadHeadImg(player.headimgurl, headNode);
        var winNode = cc.find("player_" + idx + "/win", this.panel);
        winNode.active = false;
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          scoreTxtNode.active = false;
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[player.uid] && (score = coinData.coins[player.uid]);
        } else if (null != GameDataDDZ.roomsummaryData.score) {
          score = GameDataDDZ.roomsummaryData.score[player.uid];
          var GetScoreMaxUid = function GetScoreMaxUid() {
            var tempUid;
            tempUid = GameData.joiners[0].uid;
            for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && GameDataDDZ.roomsummaryData.score[GameData.joiners[i].uid] > GameDataDDZ.roomsummaryData.score[tempUid] && (tempUid = GameData.joiners[i].uid);
            return tempUid;
          };
          GameDataDDZ.roomsummaryData.score[GetScoreMaxUid()] == GameDataDDZ.roomsummaryData.score[player.uid];
        }
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
        if (GameData.room.creator == player.uid) {
          var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
          ownerNode.active = true;
        }
      },
      loadHeadImg: function loadHeadImg(imgurl, node) {
        if (void 0 == imgurl || imgurl.length <= 0 || void 0 == node) return;
        cc.loader.load({
          url: imgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (node.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "DDZ-roomWait": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0817zHk/BKx6/ZA8c686Nt", "DDZ-roomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomZh: cc.Label,
        roomNum: cc.Label,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        readyBtn: cc.Node,
        detain: {
          default: null,
          type: cc.Label
        },
        maskNode: cc.Node,
        QiangDiZhuNode: cc.Node,
        jiaofenNode: cc.Node,
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers();
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("ddz-onReady", this, this.onReady);
        registEvent("initCards", this, this.showPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("ddz-onDiZhu", this, this.onDiZhuHandler);
        registEvent("initTableNode", this, this.showPlayers);
        registEvent("onPrepareInfo", this, this.onPrepareInfo);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("ddz-onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("ddz-onGameStart", this, this.onGameStartHandler);
        registEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("HideReadyNode", this, this.HideReadyNode);
        registEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        registEvent("ddz-showKicking", this, this.showKicking);
        registEvent("ddz-deputeInfo", this, this.showDeputeInfo);
        registEvent("dynChat", this, this.dynChatHandler);
        DDZHandler.getInstance().requestReady();
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
        gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType && this.hideAllReadyStatus();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameDataDDZ.game.gameStart;
        GameData.game.onRoomReadyInfo.data && sendEvent("onRoomReadyInfo", GameData.game.onRoomReadyInfo.data);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("ddz-onReady", this, this.onReady);
        unregistEvent("initCards", this, this.showPlayers);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("ddz-onDiZhu", this, this.onDiZhuHandler);
        unregistEvent("initTableNode", this, this.showPlayers);
        unregistEvent("onPrepareInfo", this, this.onPrepareInfo);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("ddz-onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("ddz-onGameStart", this, this.onGameStartHandler);
        unregistEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        unregistEvent("ddz-onGameScore", this, this.onGameScoreHandler);
        unregistEvent("yunwaUploaded", this, this.onYunwaUploaded);
        unregistEvent("HideReadyNode", this, this.HideReadyNode);
        unregistEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        unregistEvent("ddz-showKicking", this, this.showKicking);
        unregistEvent("ddz-deputeInfo", this, this.showDeputeInfo);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onReady: function onReady() {
        GameDataDDZ.clearObject(GameDataDDZ.kicking);
        sendEvent("initTableNode");
        DDZHandler.getInstance().requestReady();
      },
      onDiZhuHandler: function onDiZhuHandler() {
        this.playQiangDiZhuAnimation();
      },
      onGameScoreHandler: function onGameScoreHandler(data) {
        var AnimationDelayTime = data.detail;
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, AnimationDelayTime);
      },
      HideReadyNode: function HideReadyNode() {
        this.readyNode.active = false;
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("DDZ-playerTemplate");
          var uid = playerTemplate.uid;
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[uid] && playerTemplate.setGold(GameData.players[uid].coin); else {
            var score = void 0 == GameDataDDZ.allScores[uid] ? 0 : GameDataDDZ.allScores[uid];
            playerTemplate.setCoin(score, 1);
          }
        }
        void 0 != GameDataDDZ.roomsummaryData.gameFlag && sendEvent("initTableNode");
        this.showDetainScore();
        this.hideLostNode();
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioPokerChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("DDZ-playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return cc.p(0, 0);
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showDetain: function showDetain() {
        if (GameData.room.opts.detain > 0) {
          this.detain.node.active = true;
          this.detain.string = "押底 : 0";
        } else 0 == GameData.room.opts.detain && (this.detain.node.active = false);
      },
      showDetainScore: function showDetainScore() {
        void 0 != GameDataDDZ.roomsummaryData.detain ? this.detain.string = "押底 : " + GameDataDDZ.roomsummaryData.detain : this.showDetain();
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      hideLostNode: function hideLostNode() {
        for (var key in this.lostNode.children) this.lostNode.children[key].active = false;
      },
      hideAllReadyStatus: function hideAllReadyStatus() {
        cc.find("ready_hand_left", this.readyNode).active = false;
        cc.find("readying_left", this.readyNode).active = false;
        cc.find("ready_hand_right", this.readyNode).active = false;
        cc.find("readying_right", this.readyNode).active = false;
        cc.find("ready_hand_down", this.readyNode).active = false;
        cc.find("readying_down", this.readyNode).active = false;
      },
      onPrepareInfo: function onPrepareInfo(data) {
        this.hideAllReadyStatus();
        this.readyNode.active = true;
        this.hideTiChuai();
        for (var key in GameDataDDZ.game.onRoomReadyInfo) if (true == GameDataDDZ.game.onRoomReadyInfo[key]) {
          var tablePos = GameDataDDZ.getPosByUid(key);
          this.showReadyIcon(tablePos, true, false);
        }
        this.onRoomReadyInfoHandler(data);
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("left", this.play_left_player);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.x = isCreator ? 107 : 6;
        this.node.getComponent("DDZ-roomtable").showRoomRule();
        this.connectRecurrence();
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {},
      showPlayer: function showPlayer(direction, parent) {
        var playerNode = parent.getChildByName("uiPlayerNode");
        if (void 0 == playerNode) {
          playerNode = cc.instantiate(this.playerTemplate);
          playerNode.name = "uiPlayerNode";
          parent.addChild(playerNode);
        }
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          parent.active = true;
          playerNode.active = true;
          playerNode.getComponent("DDZ-playerTemplate").setPlayer(player);
          playerNode.getComponent("DDZ-playerTemplate").setName(player.name);
          playerNode.getComponent("DDZ-playerTemplate").setHeadIcon(player.headimgurl);
          playerNode.getComponent("DDZ-playerTemplate").setNamePositionByDir(direction);
          playerNode.getComponent("DDZ-playerTemplate").setIsPlayerIcon(false);
          if (0 != GameDataDDZ.game.dizhuUid) {
            var isdizhu = GameDataDDZ.game.dizhuUid == player.uid;
            isdizhu ? playerNode.getComponent("DDZ-playerTemplate").showPlayerIdentity(true, 1) : playerNode.getComponent("DDZ-playerTemplate").showPlayerIdentity(true, 2);
          }
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) playerNode.getComponent("DDZ-playerTemplate").setGold(player.coin); else {
            var score = 0;
            void 0 != GameDataDDZ.roomsummaryData.score && (score = void 0 == GameDataDDZ.roomsummaryData.score[player.uid] ? 0 : GameDataDDZ.roomsummaryData.score[player.uid]);
            playerNode.getComponent("DDZ-playerTemplate").setCoin(score, 1);
          }
          this.headers.push(playerNode);
          playerNode.setTag(player.uid);
          2 == player.status && this.showReadyIcon(direction, false, false);
          var isOnLine = RoomHandler.isPlayerOnline(player.uid);
          var disHanderNode = cc.find("Disconnect", playerNode);
          var disNode = cc.find("lost_" + direction, this.lostNode);
          disNode.active = !isOnLine;
          disHanderNode.active = !isOnLine;
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      hideTiChuai: function hideTiChuai() {
        for (var index = 0; index < this.headers.length; index++) {
          var tiChuaiNode = cc.find("tiChuaiNode", this.headers[index]);
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          tiIcon.active = false;
          chuaiIcon.active = false;
        }
      },
      showPlayerTiChuai: function showPlayerTiChuai(parent, dizhuUid, uid) {
        var playerNode = parent.getChildByName("TablePlayerTemplate");
        var tiChuaiNode = cc.find("tiChuaiNode", playerNode);
        if (1 == GameDataDDZ.kicking.kicking[uid] && uid != dizhuUid) {
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          tiIcon.active = true;
          parent == this.play_right_player && (tiIcon.x = -67);
        } else if (1 == GameDataDDZ.kicking.kicking[uid] && uid == dizhuUid) {
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          chuaiIcon.active = true;
          parent == this.play_right_player && (chuaiIcon.x = -67);
        }
      },
      showKicking: function showKicking() {
        if (GameDataDDZ.isEmptyObject(GameDataDDZ.kicking)) return;
        for (var key in GameDataDDZ.kicking.kicking) {
          var pos = GameDataDDZ.getPosByUid(key);
          "down" == pos ? this.showPlayerTiChuai(this.play_down_player, GameDataDDZ.kicking.dizhu, key) : "right" == pos && this.showPlayerTiChuai(this.play_right_player, GameDataDDZ.kicking.dizhu, key);
          "left" == pos && this.showPlayerTiChuai(this.play_left_player, GameDataDDZ.kicking.dizhu, key);
        }
      },
      showDeputeInfo: function showDeputeInfo() {
        for (var key in GameDataDDZ.deputeInfo) 0 == GameDataDDZ.deputeInfo[key] ? this.showTrusteeship(key, false) : 1 == GameDataDDZ.deputeInfo[key] && this.showTrusteeship(key, true);
      },
      showTrusteeship: function showTrusteeship(uid, show) {
        for (var index = 0; index < this.headers.length; index++) {
          var headerNode = this.headers[index];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            cc.find("trusteeship", headerNode).active = show;
            return;
          }
        }
      },
      connectRecurrence: function connectRecurrence() {
        this.showKicking();
        this.showDetainScore();
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) return;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameDataDDZ.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (connectInfo.uid != isReadyUid || 0 == connectInfo.uid) {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          }
        }
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      setRoomNum: function setRoomNum() {
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
        if (GameData.room.opts.roomType == gameDefine.roomType.Room_Match) {
          this.roomZh.node.opacity = 90;
          this.roomNum.node.opacity = 90;
        }
      },
      backBtnClicked: function backBtnClicked() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : DDZHandler.getInstance().quitMjRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "经典斗地主 房间号:" + GameData.room.id;
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var gameTypeStr = "";
        var limitStr = "";
        var str = "玩法:";
        var costTypeArr = [ "房主付,", "AA制,", "赢家付,", "代开房付费,", "" ];
        var detainArr = [ "不押,", "1分,", "2分,", "3分," ];
        var jiaofenTypeArr = [ "赢家叫分,", "轮庄叫分,", "霸王叫分," ];
        str += costTypeArr[GameData.room.opts.costType - 1];
        str += jiaofenTypeArr[GameData.room.opts.jiaofenType - 1];
        str += "押底:" + detainArr[GameData.room.opts.detain];
        if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          gameTypeStr = "金币场 ";
          var serverConfig = configMgr.getServerConfig();
          if (serverConfig && serverConfig.roomCoin) {
            var spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Poker_DDZ];
            if (spendData) {
              var index = 0;
              switch (GameData.room.opts.roundMax) {
               case 6:
                index = 0;
                break;

               case 10:
                index = 1;
                break;

               case 20:
                index = 2;
              }
              if (spendData[index]) {
                var cost = spendData[index].enter;
                var final = cost[GameData.room.opts.joinermax];
                final && (limitStr = "进入条件：" + final[GameData.room.opts.scorelv]);
              }
            }
          }
        }
        true == GameData.room.opts.suppress && (str += "憋三家,");
        true == GameData.room.opts.kicking && (str += "带踢踹,");
        true == GameData.room.opts.fourFlag ? str += "四带2对," : true == GameData.room.opts.fullMark && (str += "两王或4个2叫满,");
        str += "局数:" + GameData.room.opts.roundMax + "局,";
        var str2 = "请您快速加入对局.";
        var fanshu = 15 == GameData.room.opts.fanshu ? "无限番" : GameData.room.opts.fanshu + "番";
        var des = gameTypeStr + limitStr + str + str2 + fanshu;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("经典斗地主", "我在经典斗地主等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("经典斗地主", "我在经典斗地主等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyInviteKey: function onCopyInviteKey() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "经典斗地主,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      onCopyRoomInfo: function onCopyRoomInfo() {},
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        this.readyNode.active = !GameDataDDZ.game.gameStart;
        this.hideAllReadyStatus();
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      },
      playQiangDiZhuAnimation: function playQiangDiZhuAnimation() {
        if (!GameDataDDZ.game.flag) return;
        this.QiangDiZhuNode.position = cc.p(0, 0);
        this.QiangDiZhuNode.active = true;
        var self = this;
        var func = function func() {
          var pos = self.getHeadPositionOnUid(GameDataDDZ.game.dizhuUid);
          var move = cc.moveTo(.5, cc.p(pos.x, pos.y + 45));
          var fun = cc.callFunc(function() {
            self.jiaofenNode.active = false;
            self.QiangDiZhuNode.active = false;
            self.showPlayers();
          });
          self.QiangDiZhuNode.stopAllActions();
          self.QiangDiZhuNode.runAction(cc.sequence(move, fun));
        };
        var animation = this.QiangDiZhuNode.getComponent(dragonBones.ArmatureDisplay);
        animation.playAnimation("qiangdizhu", 1);
        animation.addEventListener(dragonBones.EventObject.COMPLETE, func, this);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "DDZ-roomtable": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d32db7ko4RLopjHl3Y1G46Z", "DDZ-roomtable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var errorCode = require("errorCode");
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        ruleLb: cc.Label,
        coinEndLayer: cc.Node,
        handCardLayOut: cc.Node,
        cardsNode: cc.Node,
        actionLayer: cc.Node,
        jiaofenNode: cc.Node,
        HoleCardsNode: cc.Node,
        clockNodes: cc.Node,
        buchuNodes: cc.Node,
        warningNode: cc.Node,
        multipleNode: cc.Node,
        _countdown_index: 0,
        _currClockNodes: cc.Node,
        lastRoundLabel: cc.Label,
        dragonAnimations: cc.Node,
        winAnimation: cc.Node,
        loseAnimation: cc.Node,
        planeNode: cc.Node,
        chuntianNode: cc.Node,
        bobmAinmation: cc.Node,
        huojianAinmation: cc.Node,
        maskbg: cc.Node,
        dizhuSign: cc.Prefab,
        tiBtnNode: cc.Node,
        tiIcon_right: cc.Node,
        undouble_right: cc.Node,
        tiIcon_left: cc.Node,
        undouble_left: cc.Node,
        tiIcon_down: cc.Node,
        undouble_down: cc.Node,
        passNode: cc.Node,
        noTrustNode: cc.Node,
        trustBtn: cc.Node,
        handCardMask: cc.Node,
        waitJiaoFen: cc.Node,
        waitDouble: cc.Node,
        _effcetFlag: false,
        _currTime: null
      },
      onLoad: function onLoad() {
        this.initData();
        this.initUI();
        this.registListenr();
        for (var key in this.handCardLayOut.children) this.defaultPokerY = this.handCardLayOut.children[key].y;
        if (GameDataDDZ.game.initcards) {
          this.cardsNode.active = true;
          this._dealEnd = true;
          this.onShow();
        }
        null != GameDataDDZ.currJiaofenPlayerData && this.showJiaoFenNode();
        this.showTiChuai();
        if (GameDataDDZ.game.gameStartDizhu) {
          this.showDizhuInfo();
          this.showObtainNode();
          this.showDisPoker();
          this.showBuchuNode();
          this.showCardNum();
          this.showDeputeInfo();
        }
        this.connectRecurrence();
      },
      registListenr: function registListenr() {
        registEvent("ddz-onGameScore", this, this.onGameScoreHandler);
        registEvent("ddz-onShowObtainNode", this, this.onShowObtainHandler);
        registEvent("ddz-showDisPoker", this, this.onShowDisPokerHandler);
        registEvent("ddz-showWatch", this, this.onShowWatchHandler);
        registEvent("ddz-onDiZhu", this, this.onShowDizhuInfoHandler);
        registEvent("ddz-jiaoFencb", this, this.onJiaoFenCBHandler);
        registEvent("ddz-startTi", this, this.showTiChuai);
        registEvent("ddz-showKicking", this, this.showKicking);
        registEvent("onPrepareInfo", this, this.onPrepareInfo);
        registEvent("ddz-onGameInfo", this, this.onShow);
        registEvent("ddz-initCardHand", this, this.initCardHand);
        registEvent("ddz-initCardHandNum", this, this.showCardNum);
        registEvent("ddz-initCardHands", this, this.onShow);
        registEvent("ddz-onGameStart", this, this.handleGameStart);
        registEvent("ddz-onJiaoFen", this, this.showJiaoFenNode);
        registEvent("initTableNode", this, this.initTableNode);
        registEvent("ddz-onDiscardType", this, this.showDisCardType);
        registEvent("ddz-disPokerArry", this, this.setDisPokerArry);
        registEvent("ddz-passcb", this, this.playPassEffect);
        registEvent("ddz-hintCard", this, this.showHintCard);
        registEvent("onShowSummary", this, this.stopClockMusic);
        registEvent("ddz-reconnectionInfo", this, this.reconnectionInfo);
        registEvent("ddz-deputeInfo", this, this.showDeputeInfo);
        var self = this;
        this.maskbg.on(cc.Node.EventType.TOUCH_END, function() {
          self.DoubleClick();
        });
        this.trustBtn.on(cc.Node.EventType.TOUCH_END, this.onTrustBtnTouchEnd);
      },
      onDestroy: function onDestroy() {
        unregistEvent("ddz-onGameScore", this, this.onGameScoreHandler);
        unregistEvent("ddz-onShowObtainNode", this, this.onShowObtainHandler);
        unregistEvent("ddz-showDisPoker", this, this.onShowDisPokerHandler);
        unregistEvent("ddz-showWatch", this, this.onShowWatchHandler);
        unregistEvent("ddz-onDiZhu", this, this.onShowDizhuInfoHandler);
        unregistEvent("ddz-jiaoFencb", this, this.onJiaoFenCBHandler);
        unregistEvent("ddz-startTi", this, this.showTiChuai);
        unregistEvent("ddz-showKicking", this, this.showKicking);
        unregistEvent("onPrepareInfo", this, this.onPrepareInfo);
        unregistEvent("ddz-onGameInfo", this, this.onShow);
        unregistEvent("ddz-initCardHand", this, this.initCardHand);
        unregistEvent("ddz-initCardHandNum", this, this.showCardNum);
        unregistEvent("ddz-initCardHands", this, this.onShow);
        unregistEvent("ddz-onGameStart", this, this.handleGameStart);
        unregistEvent("ddz-onJiaoFen", this, this.showJiaoFenNode);
        unregistEvent("initTableNode", this, this.initTableNode);
        unregistEvent("ddz-onDiscardType", this, this.showDisCardType);
        unregistEvent("ddz-disPokerArry", this, this.setDisPokerArry);
        unregistEvent("ddz-passcb", this, this.playPassEffect);
        unregistEvent("ddz-hintCard", this, this.showHintCard);
        unregistEvent("onShowSummary", this, this.stopClockMusic);
        unregistEvent("ddz-reconnectionInfo", this, this.reconnectionInfo);
        unregistEvent("ddz-deputeInfo", this, this.showDeputeInfo);
        var self = this;
        this.maskbg.off(cc.Node.EventType.TOUCH_END, function() {
          self.DoubleClick();
        });
        this.trustBtn.off(cc.Node.EventType.TOUCH_END, this.onTrustBtnTouchEnd);
      },
      onEnable: function onEnable() {
        this._countdown_index = 15;
        this.showKicking();
        this.initCardHand();
      },
      initData: function initData() {
        this._dealActionIndex = 1;
        this._cardHandPosArr = [];
        this._angularArr = [];
        this._dealEnd = false;
        this.disCardArry = [];
        this.disPokerArry = [];
        this._dragonAnimtaionNum = 1;
        this._buJiao = 0;
        this._trusteeshipFlag = false;
        GameDataDDZ.kicking = {};
      },
      initUI: function initUI() {
        this.cardsNode.active = false;
        this.jiaofenNode.active = false;
        this.trustBtn.active = false;
        this.waitJiaoFen.active = false;
        this.waitDouble.active = false;
        this.showRoomRule();
        this.hideDisCards();
        this.setDisCardBtnStatus();
        this.hideIsDoubleFlag();
      },
      initTableNode: function initTableNode() {
        this.initData();
        this.initUI();
        var leftLastCardNode = cc.find("lastpokerNum", this.play_layer_left);
        var rightLastCardNode = cc.find("lastpokerNum", this.play_layer_right);
        this.hideNodeChild(leftLastCardNode);
        this.hideNodeChild(rightLastCardNode);
        this.hideDisCards();
        this.hideHandCards();
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        this.actionLayer.active = false;
        this.hideNodeChild(this.clockNodes);
        this.hideNodeChild(this.multipleNode);
        GameDataDDZ.game.dizhuUid = 0;
        this.chuntianNode.active = false;
        this.winAnimation.active = false;
        this.loseAnimation.active = false;
        this.planeNode.active = false;
        this.bobmAinmation.active = false;
        this.huojianAinmation.active = false;
        this.trustBtn.active = false;
        this.hideNodeChild(this.warningNode);
        this.hideNodeChild(this.buchuNodes);
        this.stopClockMusic();
      },
      onShowWatchHandler: function onShowWatchHandler() {
        this.showWatch();
        this.showKicking();
        this.showTiChuai();
      },
      onJiaoFenCBHandler: function onJiaoFenCBHandler(data) {
        this.playJiaofenEffect(data);
        this.showJiaofenText();
      },
      onShowDizhuInfoHandler: function onShowDizhuInfoHandler() {
        var self = this;
        self.showDizhuInfo();
      },
      onShowDisPokerHandler: function onShowDisPokerHandler(data) {
        this.hideIsDoubleFlag();
        this.disPoker(data);
      },
      onShowObtainHandler: function onShowObtainHandler() {
        this.waitDouble.active = false;
        this.showObtainNode();
      },
      onGameScoreHandler: function onGameScoreHandler() {
        this.showWinNode();
        var time = this.showGameEndAction();
        void 0 === time ? time = 0 : null;
        var self = this;
        this.scheduleOnce(function() {
          sendEvent("coinEnd");
        }, time);
      },
      showRoomRule: function showRoomRule() {
        this.ruleLb.string = this.getRuleStr();
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      handleGameStart: function handleGameStart() {
        this.coinEndLayer.active = false;
        this.cardsNode.active = true;
        this.hideHoleCards();
      },
      onPrepareInfo: function onPrepareInfo() {
        if (void 0 == GameDataDDZ.game.onRoomReadyInfo) return;
        true == GameDataDDZ.game.onRoomReadyInfo[GameData.player.uid];
      },
      initCardHand: function initCardHand() {
        if (void 0 == GameDataDDZ.getMyHandCards()) return;
        GameDataDDZ.getMyHandCards().length == GameDataDDZ.handCardSize && true == GameDataDDZ.deal && (this._firstInit = true);
        this.onShow();
      },
      onShow: function onShow() {
        var downHandCardNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in downHandCardNode.children) downHandCardNode.children[key].y = this.defaultPokerY;
        this.showCards();
        this.cardsNode.active = true;
        this.HoleCardsNode.active = true;
        this.lastRoundLabel.string = "局数:" + GameData.room.roundNum + "/" + GameData.room.opts.roundMax;
        GameData.room.opts.roomType == gameDefine.roomType.Room_Match && (this.lastRoundLabel.node.opacity = 90);
      },
      showCards: function showCards() {
        var player = GameData.getPlayerByPos("down");
        if (player && GameDataDDZ.cards[player.uid]) {
          this._firstInit ? this.dealActionMngr() : this.showMyHandCards(player, this.play_layer_down);
          this.play_layer_down.active = true;
        } else this.play_layer_down.active = false;
      },
      showCardNum: function showCardNum() {
        var player = GameData.getPlayerByPos("right");
        if (player && GameDataDDZ.cards[player.uid]) {
          this.showOtherHandCards(player, this.play_layer_right);
          this.play_layer_right.active = true;
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameDataDDZ.cards[player.uid]) {
          this.showOtherHandCards(player, this.play_layer_left);
          this.play_layer_left.active = true;
        } else this.play_layer_left.active = false;
        this.showWarningNode();
      },
      dealActionMngr: function dealActionMngr() {
        this._firstInit = false;
        this._dealActionIndex = 1;
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        if (void 0 == cardsHandNode) return;
        this.hideNodeChild(cardsHandNode);
        this.schedule(this.dealAction, .2);
      },
      dealAction: function dealAction() {
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        if (void 0 == cardsHandNode) return;
        var handCards = GameDataDDZ.getMyHandCards();
        if (void 0 == handCards) return;
        var handCard_len = handCards.length;
        void 0 === this._dealActionIndex ? this._dealActionIndex = 1 : null;
        var sumW = 1007;
        var middle = sumW / 2;
        var interval = 53;
        var start = 0;
        start = this._dealActionIndex % 2 > 0 ? middle + (interval / 2 + parseInt(this._dealActionIndex / 2) * interval) : middle + parseInt(this._dealActionIndex / 2) * interval;
        for (var j = 0; j < this._dealActionIndex; j++) {
          var node = cc.find("hand_" + j, cardsHandNode);
          node.active = true;
          node.x = start - j * interval;
          this.removeDizhuSign(node);
          this.showCardContent(node, handCards[j]);
        }
        this._dealActionIndex++;
        if (this._dealActionIndex > handCard_len) {
          var self = this;
          this.unschedule(this.dealAction);
          this.scheduleOnce(function() {
            self._dealEnd = true;
            self.handCardRestoration();
            var player = GameData.getPlayerByPos("down");
            self.showMyHandCards(player, self.play_layer_down);
            GameDataDDZ.curWatchData.gameStatus == GameDataDDZ.roomStatus.JIAOFEN && self.showJiaoFenNode();
          }, 1);
        }
      },
      showTiChuai: function showTiChuai() {
        if (GameDataDDZ.tiFlag && GameDataDDZ.kicking.kicking && void 0 == GameDataDDZ.kicking.kicking[GameData.player.uid] && GameDataDDZ.roomStatus.TICHUAI == GameDataDDZ.curWatchData.gameStatus) {
          this.tiBtnNode.active = true;
          this.waitDouble.active = false;
        }
      },
      tiChuaiAction: function tiChuaiAction(node) {
        var callFunc1 = cc.callFunc(function() {
          node.active = true;
        }, this);
        var callFunc2 = cc.callFunc(function() {
          node.active = false;
        }, this);
        var delayTime = cc.delayTime(1);
        var seq = cc.sequence(callFunc1);
        node.parent.stopAllActions();
        node.parent.runAction(seq);
      },
      showKicking: function showKicking() {
        if (GameDataDDZ.curWatchData.gameStatus != GameDataDDZ.roomStatus.TICHUAI) return;
        var double = {
          right: this.tiIcon_right,
          left: this.tiIcon_left,
          down: this.tiIcon_down
        };
        var undouble = {
          right: this.undouble_right,
          left: this.undouble_left,
          down: this.undouble_down
        };
        void 0 === GameDataDDZ.kicking.kicking ? GameDataDDZ.kicking.kicking = {} : null;
        for (var key in GameDataDDZ.kicking.kicking) {
          var isDouble = GameDataDDZ.kicking.kicking[key];
          if (void 0 == isDouble) continue;
          var pos = GameDataDDZ.getPosByUid(key);
          if (void 0 == pos) continue;
          key == GameData.player.uid && (this.tiBtnNode.active = false);
          var node = void 0;
          1 == isDouble ? node = double[pos] : 0 == isDouble && (node = undouble[pos]);
          if (void 0 == node) continue;
          this.tiChuaiAction(node);
        }
        var show = true;
        GameDataDDZ.kicking.kicking[GameData.player.uid] ? Object.keys(GameDataDDZ.kicking.kicking).length <= 3 && (show = true) : GameDataDDZ.tiFlag && (show = false);
        this.waitDouble.active = show;
        cc.log("..waitDouble:" + show);
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        this.resetPokerPos();
        var cardHand = GameDataDDZ.getMyHandCards();
        if (void 0 == cardHand) return;
        var cardsHandNode = cc.find("cardHand/handLayout", parent);
        for (var key in cardsHandNode.children) cardsHandNode.children[key].active = false;
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(cardHand.length / 2);
        for (var j = 0; j < cardHand.length; j++) {
          var node = cc.find("cardHand/handLayout/hand_" + (i + j), parent);
          node.active = true;
          player.uid == GameDataDDZ.game.dizhuUid ? this.addDizhuSign(node) : this.removeDizhuSign(node);
          this.showCardContent(node, cardHand[j]);
        }
      },
      showOtherHandCards: function showOtherHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardHand = GameDataDDZ.getHandCardNum(uid);
          var handNumLb = cc.find("lastpokerNum/pokerNum", parent);
          handNumLb.active = true;
          handNumLb.getComponent(cc.Label).string = cardHand;
          var node = cc.find("cardHand/hand_0", parent);
          node.active = true;
        }
      },
      showCardContent: function showCardContent(cardNode, cardId) {
        if (0 == cardId) return;
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showPokerBack: function showPokerBack() {
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in cardsHandNode.children) {
          this.showCardContent(cardsHandNode.children[key], "back");
          cardsHandNode.children[key].active = false;
        }
      },
      showWatch: function showWatch() {
        this.stopClockMusic();
        for (var index = 0; index < GameDataDDZ.curWatchData.uid.length; index++) this.showClock(GameDataDDZ.curWatchData.uid[index]);
      },
      reconnectionInfo: function reconnectionInfo() {
        this._dealEnd = true;
        this.showJiaoFenNode();
      },
      showJiaoFenNode: function showJiaoFenNode() {
        var uid = GameDataDDZ.currJiaofenPlayerData.uid;
        var maxNum = GameDataDDZ.currJiaofenPlayerData.maxNum;
        if (GameDataDDZ.game.isJiaofenAgain) {
          this._dealEnd = false;
          GameDataDDZ.game.isJiaofenAgain = !GameDataDDZ.game.isJiaofenAgain;
          1 == this._buJiao && createMoveMessage("无人叫地主,重新发牌");
          this._buJiao++;
        }
        if (false == this._dealEnd) return;
        this.actionLayer.active = false;
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        for (var i = 1; i < 5; i++) {
          var BtnNode = cc.find("btn" + i, this.jiaofenNode);
          BtnNode.getComponent(cc.Button).interactable = true;
        }
        if (GameData.player.uid == uid) {
          this.jiaofenNode.active = true;
          this.waitJiaoFen.active = false;
          for (;maxNum > 0; maxNum--) {
            var BtnNode1 = cc.find("btn" + maxNum, this.jiaofenNode);
            BtnNode1.getComponent(cc.Button).interactable = false;
          }
        } else {
          this.jiaofenNode.active = false;
          this.waitJiaoFen.active = true;
        }
        this.disabledJiaoFenBtn();
        this.stopClockMusic();
        this.showClocks(uid);
        this.showJiaofenText();
      },
      disabledJiaoFenBtn: function disabledJiaoFenBtn() {
        if (null == GameDataDDZ.currJiaofenPlayerData) return;
        if (void 0 != GameDataDDZ.currJiaofenPlayerData.fullMark) {
          for (var index = 1; index <= 4; index++) {
            var BtnNode1 = cc.find("btn" + index, this.jiaofenNode);
            BtnNode1.getComponent(cc.Button).interactable = false;
          }
          var BtnNode2 = cc.find("btn3", this.jiaofenNode);
          BtnNode2.getComponent(cc.Button).interactable = true;
        } else if (void 0 != GameDataDDZ.currJiaofenPlayerData.suppress) {
          for (var index = 1; index <= 3; index++) {
            var BtnNode1 = cc.find("btn" + index, this.jiaofenNode);
            BtnNode1.getComponent(cc.Button).interactable = false;
          }
          var BtnNode2 = cc.find("btn3", this.jiaofenNode);
          BtnNode2.getComponent(cc.Button).interactable = true;
        }
      },
      showJiaofenText: function showJiaofenText() {
        var node = cc.find("jiaofenSps", this.cardsNode);
        if (void 0 == node) return;
        node.active = true;
        var posList = [ "right", "left", "down" ];
        for (var i = 0; i < posList.length; i++) {
          var pos = posList[i];
          var jiaofenNode = cc.find("jiaofenSps/" + pos + "Sp", this.cardsNode);
          if (void 0 == jiaofenNode) continue;
          jiaofenNode.active = false;
          var playerData = GameData.getPlayerByPos(pos);
          if (void 0 == playerData) continue;
          var num = GameDataDDZ.getJiaofenNum(playerData.uid);
          if (void 0 == num) continue;
          jiaofenNode.active = true;
          var texture = cc.textureCache.addImage(cc.url.raw(this.getJiaofenImg(num)));
          jiaofenNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      selectScroe: function selectScroe(eve, data) {
        switch (parseInt(data)) {
         case 1:
          DDZHandler.getInstance().requestSelectScore(1, function(data) {});
          break;

         case 2:
          DDZHandler.getInstance().requestSelectScore(2, function(data) {});
          break;

         case 3:
          DDZHandler.getInstance().requestSelectScore(3, function(data) {});
          break;

         case 4:
          DDZHandler.getInstance().requestSelectScore(4, function(data) {});
        }
        this.jiaofenNode.active = false;
        this._buJiao = 1;
      },
      playJiaofenEffect: function playJiaofenEffect(data) {
        var uid = data.detail.uid;
        var num = data.detail.num;
        var playerSex = GameData.getPlayerSexByUid(uid);
        var fenStr = "";
        switch (num) {
         case 1:
          fenStr = "yifen";
          break;

         case 2:
          fenStr = "liangfen";
          break;

         case 3:
          fenStr = "sanfen";
          break;

         case 4:
          fenStr = "bujiao";
        }
        soundMngr.instance.playOtherAudioPoker(fenStr, playerSex);
      },
      showDizhuInfo: function showDizhuInfo() {
        var cards = GameDataDDZ.gameStartData.cards;
        var multipleNum = GameDataDDZ.gameStartData.multiple;
        this.showHoleCards(cards);
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        this.changeMultiple(multipleNum);
        this.waitJiaoFen.active = false;
      },
      hideHoleCards: function hideHoleCards() {
        var HoleCardsNode = cc.find("cards", this.HoleCardsNode);
        for (var key in HoleCardsNode.children) this.showHoleCardContent(HoleCardsNode.children[key], "back");
      },
      showHoleCards: function showHoleCards(cards) {
        var _this = this;
        if (void 0 != cards) {
          var HoleCardsNode = cc.find("cards", this.HoleCardsNode);
          var that = this;
          var _loop = function _loop(i) {
            var cardNode = cc.find("dipai_card" + i, HoleCardsNode);
            action1 = cc.scaleTo(.25, 0, .5);
            action2 = cc.scaleTo(.25, .45, .5);
            cardNode.runAction(cc.sequence(action1, action2));
            _this.scheduleOnce(function() {
              that.showHoleCardContent(cardNode, cards[i]);
            }, .3);
          };
          for (var i = 0; i < HoleCardsNode.childrenCount; i++) {
            var action1;
            var action2;
            _loop(i);
          }
          this.jiaofenNode.active = false;
        }
      },
      showHoleCardContent: function showHoleCardContent(cardNode, cardId) {
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showDeputeInfo: function showDeputeInfo() {
        for (var key in GameDataDDZ.deputeInfo) {
          var pos = GameDataDDZ.getPosByUid(key);
          var ObtainNode = cc.find("actions", this.cardsNode);
          if (0 == GameDataDDZ.deputeInfo[key]) switch (pos) {
           case "down":
            this.handCardMask.off(cc.Node.EventType.TOUCH_START, function() {});
            this.trustBtn.on(cc.Node.EventType.TOUCH_END, this.onTrustBtnTouchEnd);
            this.handCardMask.active = false;
            this.noTrustNode.active = false;
            this._trusteeshipFlag = false;
            sendEvent("ddz-onShowObtainNode");
          } else if (1 == GameDataDDZ.deputeInfo[key]) switch (pos) {
           case "down":
            this.handCardMask.on(cc.Node.EventType.TOUCH_START, function() {});
            this.trustBtn.off(cc.Node.EventType.TOUCH_END, this.onTrustBtnTouchEnd);
            ObtainNode.active = false;
            this.handCardMask.active = true;
            this.noTrustNode.active = true;
            this._trusteeshipFlag = true;
          }
        }
      },
      easeCubicActionTimer: function easeCubicActionTimer(node) {
        node.opacity = node.opacity - 51;
      },
      easeCubicAction: function easeCubicAction(node) {
        var index = 0;
        var that = this;
        var timerCall = function timerCall() {
          index++;
          that.easeCubicActionTimer(node);
          if (index >= 5) {
            node.active = false;
            node.opacity = 255;
            that.unschedule(timerCall);
          }
        };
        this.schedule(timerCall, .1);
      },
      showObtainNode: function showObtainNode() {
        gameDefine.roomType.Room_Match == GameData.room.opts.roomType ? this.trustBtn.active = true : this.trustBtn.active = false;
        this.disCardArry = [];
        var uid = GameDataDDZ.currObtainPlayerData.uid;
        var isPass = GameDataDDZ.currObtainPlayerData.flag;
        var hintFlag = GameDataDDZ.currObtainPlayerData.hintFlag;
        this._effcetFlag = isPass;
        var ObtainNode = cc.find("actions", this.cardsNode);
        var passBtn = cc.find("actions/btnPass", this.cardsNode);
        var hintBtn = cc.find("actions/btnTishi", this.cardsNode);
        var disBtn = cc.find("actions/btnDisCard", this.cardsNode);
        if (GameData.player.uid == uid) {
          ObtainNode.active = true;
          if (isPass) {
            passBtn.active = true;
            hintBtn.active = true;
            disBtn.active = true;
            if (!hintFlag) {
              hintBtn.active = false;
              disBtn.active = false;
              this.passNode.active = true;
              var that = this;
              this.scheduleOnce(function() {
                that.easeCubicAction(that.passNode);
              }, 1);
            }
          } else {
            passBtn.active = false;
            hintBtn.active = false;
            hintFlag && (disBtn.active = true);
          }
          true == this._trusteeshipFlag && (ObtainNode.active = false);
        } else ObtainNode.active = false;
        this.stopClockMusic();
        this.showClocks(uid);
        var pos = GameData.tablePos[uid];
        var dispokerNode;
        switch (pos) {
         case "down":
          dispokerNode = cc.find("layer_down/cardDis", this.cardsNode);
          break;

         case "right":
          dispokerNode = cc.find("layer_right/cardDis", this.cardsNode);
          break;

         case "left":
          dispokerNode = cc.find("layer_left/cardDis", this.cardsNode);
          break;

         case "up":
          dispokerNode = cc.find("layer_up/cardDis", this.cardsNode);
        }
        this.hidePassNode(pos);
        void 0 != dispokerNode && this.hideNodeChild(dispokerNode);
        var myPokerNum = GameDataDDZ.getMyHandCards().length;
        if (!passBtn.active && !hintBtn.active && 1 == myPokerNum) for (var key in this.handCardLayOut.children) if (true == this.handCardLayOut.children[key].active && GameData.player.uid == uid && this.handCardLayOut.children[key].y == this.defaultPokerY) {
          this.handCardLayOut.children[key].y += 30;
          this.disPokerArry.push(this.handCardLayOut.children[key]);
        }
        this.setDisCardBtnStatus();
      },
      hidePassNode: function hidePassNode(pos) {
        var show = false;
        switch (pos) {
         case "down":
          var node = cc.find("buchuLb0", this.buchuNodes);
          node.active = show;
          break;

         case "right":
          var node = cc.find("buchuLb1", this.buchuNodes);
          node.active = show;
          break;

         case "left":
          var node = cc.find("buchuLb2", this.buchuNodes);
          node.active = show;
        }
      },
      onDisCardClick: function onDisCardClick() {
        var cardsNode = cc.find("cardHand/handLayout", this.play_layer_down);
        this.disCardArry = [];
        var key;
        for (key in this.disPokerArry) {
          var cardId = this.disPokerArry[key].getComponent("Card").id;
          this.disCardArry.push(cardId);
        }
        DDZHandler.getInstance().requestOnDisCard(this.disCardArry, function(rtn) {});
        var i = 0;
        for (key in cardsNode.children) cardsNode.children[key].y == this.defaultPokerY && i++;
        i > 0 && 0 == this.disCardArry.length && createMoveMessage("请选择要出的牌!");
      },
      onPassCardClick: function onPassCardClick() {
        var ObtainNode = cc.find("actions", this.cardsNode);
        ObtainNode.active = false;
        var errorCode = require("errorCode");
        DDZHandler.getInstance().requestOnPassCard(function(rtn) {
          rtn.result != errorCode.Success && (ObtainNode.active = true);
        });
        this.resetPokerPos();
      },
      onHintClick: function onHintClick() {
        DDZHandler.getInstance().requestOnHintCard(GameData.player.uid, function(data) {});
      },
      playPassEffect: function playPassEffect(data) {
        var uid = data.detail.uid;
        var playerSex = GameData.getPlayerSexByUid(uid);
        soundMngr.instance.playOtherAudioPoker("buyao", playerSex);
        this.showBuchuNode();
      },
      showBuchuNode: function showBuchuNode() {
        var player = GameData.getPlayerByPos("down");
        var cards = GameDataDDZ.getDisPoker(player.uid);
        var parent = cc.find("buchuLb0", this.buchuNodes);
        this.showbuchuStr(player, parent, cards);
        player = GameData.getPlayerByPos("right");
        cards = GameDataDDZ.getDisPoker(player.uid);
        parent = cc.find("buchuLb1", this.buchuNodes);
        this.showbuchuStr(player, parent, cards);
        player = GameData.getPlayerByPos("left");
        cards = GameDataDDZ.getDisPoker(player.uid);
        parent = cc.find("buchuLb2", this.buchuNodes);
        this.showbuchuStr(player, parent, cards);
      },
      showbuchuStr: function showbuchuStr(player, node, cards) {
        if (void 0 == cards) return;
        0 == cards[0] ? node.active = true : 0 == cards.length && (node.active = false);
      },
      disPoker: function disPoker(data) {
        var uid = data.detail.uid;
        var cardNum = GameDataDDZ.getHandCardNum(uid);
        if (cardNum <= 2) {
          var sex = GameData.getPlayerSexByUid(uid);
          this.scheduleOnce(function() {
            soundMngr.instance.playOtherAudioPoker("baojing" + cardNum, sex);
          }, 1);
        }
        this.showDisPoker();
      },
      showDisPoker: function showDisPoker() {
        var player = GameData.getPlayerByPos("down");
        var cards = GameDataDDZ.getDisPoker(player.uid);
        if (player && GameDataDDZ.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.showPokerCards(player, this.play_layer_down, cards);
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        cards = GameDataDDZ.getDisPoker(player.uid);
        if (player && GameDataDDZ.cards[player.uid]) {
          this.play_layer_right.active = true;
          this.showPokerCards(player, this.play_layer_right, cards);
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        cards = GameDataDDZ.getDisPoker(player.uid);
        if (player && GameDataDDZ.cards[player.uid]) {
          this.play_layer_left.active = true;
          this.showPokerCards(player, this.play_layer_left, cards);
        } else this.play_layer_left.active = false;
      },
      showPokerCards: function showPokerCards(player, parent, cards) {
        var uid = GameDataDDZ.currObtainPlayerData.uid;
        var cardNode = cc.find("cardDis", parent);
        if (void 0 == cards) return;
        this.hideNodeChild(cardNode);
        if (parent == this.play_layer_down) {
          var i = Math.ceil(cardNode.childrenCount / 2) - Math.ceil(cards.length / 2);
          for (var j = 0; j < cards.length; j++) {
            var node = cc.find("dis_" + (i + j), cardNode);
            0 == cards[0] ? node.active = false : node.active = true;
            player.uid == GameDataDDZ.game.dizhuUid ? this.addDizhuSign(node, "dis") : this.removeDizhuSign(node);
            this.showCardContent(node, cards[j]);
          }
        } else for (var k = 0; k < cards.length; k++) {
          var node = cc.find("dis_" + k, cardNode);
          0 == cards[0] ? node.active = false : node.active = true;
          player.uid == GameDataDDZ.game.dizhuUid ? this.addDizhuSign(node, "dis") : this.removeDizhuSign(node);
          this.showCardContent(node, cards[k]);
        }
      },
      showClocks: function showClocks(uid) {
        if (void 0 == uid) return;
        var player = GameData.getPlayerByPos("down");
        var clockNodes = cc.find("cloock0", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
        player = GameData.getPlayerByPos("right");
        clockNodes = cc.find("cloock1", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
        player = GameData.getPlayerByPos("left");
        clockNodes = cc.find("cloock2", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
      },
      showClock: function showClock(uid) {
        if (void 0 == uid) return;
        var player = GameData.getPlayerByPos("down");
        var clockNodes = cc.find("cloock0", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
      },
      showClockContent: function showClockContent(player, parent, uid) {
        void 0 != GameDataDDZ.curWatchData.time ? 0 != Math.floor(GameDataDDZ.curWatchData.time / 1e3) && (this._countdown_index = Math.floor(GameDataDDZ.curWatchData.time / 1e3)) : this._countdown_index = 15;
        if (player.uid == uid) {
          parent.active = true;
          this.PLayerUID = uid;
          this._currClockNodes = parent;
          this.runCountDown();
          this.startCoundDown();
        }
      },
      startCoundDown: function startCoundDown() {
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index);
        if (this._countdown_index < 1) if (gameDefine.roomType.Room_Match == GameData.room.opts.roomType) {
          this.stopClockMusic();
          this.unschedule(this.runCountDown);
        } else this._countdown_index = 15; else {
          var action1 = cc.blink(.5, 3);
          if (3 == this._countdown_index && this.PLayerUID == GameData.player.uid) {
            this._currClockNodes.runAction(action1);
            soundMngr.instance.playAudioOther("countdown");
          }
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var timeStr = num;
        var timeLabel = cc.find("timeLb", this._currClockNodes);
        num < 10 && num > 0 ? timeStr = "0" + num : 0 == num && (timeStr = 0);
        timeLabel.getComponent(cc.Label).string = timeStr;
      },
      hideDisCards: function hideDisCards() {
        var downDisCardNode = cc.find("cardDis", this.play_layer_down);
        var leftDisCardNode = cc.find("cardDis", this.play_layer_left);
        var rightDisCardNode = cc.find("cardDis", this.play_layer_right);
        this.hideNodeChild(downDisCardNode);
        this.hideNodeChild(leftDisCardNode);
        this.hideNodeChild(rightDisCardNode);
      },
      hideHandCards: function hideHandCards() {
        var downHandCardNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var leftHandCardNode = cc.find("cardHand", this.play_layer_left);
        var rightHandCardNode = cc.find("cardHand", this.play_layer_right);
        this.hideNodeChild(downHandCardNode);
        this.hideNodeChild(leftHandCardNode);
        this.hideNodeChild(rightHandCardNode);
      },
      showSurplusPoker: function showSurplusPoker() {
        for (var index = 0; index < GameData.joiners.length; index++) {
          var pos = GameDataDDZ.getPosByUid(GameData.joiners[index].uid);
          switch (pos) {
           case "left":
            var leftDisCardNode = cc.find("cardDis", this.play_layer_left);
            this.showSurplusCards(leftDisCardNode, GameData.joiners[index].uid);
            break;

           case "right":
            var rightDisCardNode = cc.find("cardDis", this.play_layer_right);
            this.showSurplusCards(rightDisCardNode, GameData.joiners[index].uid);
          }
        }
      },
      showSurplusCards: function showSurplusCards(pokerNode, uid) {
        var cards = GameDataDDZ.getHandCards(uid);
        if (void 0 == cards) return;
        for (var i = 0; i < cards.length; i++) {
          var node = cc.find("dis_" + i, pokerNode);
          node.active = true;
          node.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/ddz/UI/pokers/poker_" + cards[i] + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      showWinNode: function showWinNode(data) {
        this._dealEnd = false;
        this.passNode.active = false;
        this.noTrustNode.active = false;
        this.handCardMask.active = false;
        this.actionLayer.active = false;
        this.stopClockMusic();
        this.hideNodeChild(this.warningNode);
        this.hideNodeChild(this.buchuNodes);
        this.showSurplusPoker();
        sendEvent("HideReadyNode");
      },
      playGameEndSound: function playGameEndSound() {
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          if (!coinData || !coinData.coin) return;
          myScore = coinData.coin[GameData.player.uid];
        } else myScore = GameDataDDZ.resultData.score[GameData.player.uid];
        myScore > 0 ? soundMngr.instance.playOtherAudioPoker("shengli", null) : soundMngr.instance.playOtherAudioPoker("shibai", null);
      },
      showGameEndAction: function showGameEndAction() {
        var player = GameData.getPlayerByPos("down");
        player && GameDataDDZ.cards[player.uid] ? this.play_layer_down.active = true : this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        player && GameDataDDZ.cards[player.uid] ? this.play_layer_right.active = true : this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        player && GameDataDDZ.cards[player.uid] ? this.play_layer_left.active = true : this.play_layer_left.active = false;
        this.playGameEndSound();
        return this.showWinnerAnimation();
      },
      showWinnerAnimation: function showWinnerAnimation() {
        if (GameDataDDZ.resultData.chuntian) {
          var self = this;
          this.scheduleOnce(function() {
            self.chuntianNode.active = true;
            var chuntianAnimation = self.chuntianNode.getComponent(dragonBones.ArmatureDisplay);
            chuntianAnimation.playAnimation("newAnimation", 1);
            chuntianAnimation.addEventListener(dragonBones.EventObject.COMPLETE, function() {
              self.chuntianNode.active = false;
            }, this);
            soundMngr.instance.playOtherAudioPoker("chuntian", null);
          }, 1.5 * this._dragonAnimtaionNum + 1);
          return 1.5 * this._dragonAnimtaionNum + 3;
        }
        return 3;
      },
      getJiaofenImg: function getJiaofenImg(num) {
        var img = "";
        switch (parseInt(num)) {
         case 1:
          img = "resources/ddz/UI/common/artword/artword_1fen.png";
          break;

         case 2:
          img = "resources/ddz/UI/common/artword/artword_2fen.png";
          break;

         case 3:
          img = "resources/ddz/UI/common/artword/artword_3fen.png";
          break;

         case 4:
          img = "resources/ddz/UI/common/artword/artword_bujiao.png";
        }
        return img;
      },
      showWarningNode: function showWarningNode(data) {
        var warningNode;
        var player = GameData.getPlayerByPos("down");
        if (player && GameDataDDZ.cards[player.uid]) {
          warningNode = cc.find("warning0", this.warningNode);
          this.showWarningContent(player.uid, warningNode);
        }
        player = GameData.getPlayerByPos("right");
        if (player && GameDataDDZ.cards[player.uid]) {
          warningNode = cc.find("warning1", this.warningNode);
          this.showWarningContent(player.uid, warningNode);
        }
        player = GameData.getPlayerByPos("left");
        if (player && GameDataDDZ.cards[player.uid]) {
          warningNode = cc.find("warning2", this.warningNode);
          this.showWarningContent(player.uid, warningNode);
        }
      },
      showWarningContent: function showWarningContent(uid, node) {
        var cardNum = GameDataDDZ.getHandCardNum(uid);
        if (cardNum <= 2) {
          node.active = true;
          var anima = node.getComponent(cc.Animation);
          anima.play("warningAnimation");
        } else node.active = false;
      },
      showDisCardType: function showDisCardType(data) {
        var DiscardType = data.detail.type;
        var multiple = data.detail.multiple;
        this._dragonAnimtaionNum = 0;
        var playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        soundMngr.instance.playAudioPokerDisType(data, playerSex, this._effcetFlag);
        soundMngr.instance.playOtherAudioPoker("discard", null);
        if ("aircraft" == DiscardType.substring(0, DiscardType.length - 1) || "aircraft" == DiscardType || "tribletraights" == DiscardType) {
          soundMngr.instance.playOtherAudioPoker("plane", null);
          this._dragonAnimtaionNum++;
          this.DDZplayAnimation(this.planeNode);
        }
        if ("bomb" == DiscardType) {
          this._dragonAnimtaionNum++;
          soundMngr.instance.playOtherAudioPoker("bomb", null);
          this.DDZplayAnimation(this.bobmAinmation);
        }
        if ("jokerBomb" == DiscardType) {
          this._dragonAnimtaionNum++;
          soundMngr.instance.playOtherAudioPoker("bomb", null);
          this.DDZplayAnimation(this.huojianAinmation);
        }
        this.changeMultiple(multiple);
      },
      changeMultiple: function changeMultiple(num) {
        if (void 0 == num) return;
        var multipleNum = cc.find("multipleNum", this.multipleNode);
        this.showNodeChild(this.multipleNode);
        multipleNum.getComponent(cc.Label).string = "X" + num;
      },
      showNodeChild: function showNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = true;
      },
      setDisPokerArry: function setDisPokerArry(data) {
        var pokerArry = data.detail;
        this.disPokerArry = [];
        for (var i = 0; i < pokerArry.length; i++) {
          var pokerName = pokerArry[i];
          for (var key in this.handCardLayOut.children) pokerName == this.handCardLayOut.children[key].name && true == this.handCardLayOut.children[key].active && this.disPokerArry.push(this.handCardLayOut.children[key]);
        }
        this.setDisCardBtnStatus();
      },
      DDZplayAnimation: function DDZplayAnimation(animNode) {
        animNode.active = true;
        var anima = animNode.getComponent(dragonBones.ArmatureDisplay);
        anima.playAnimation("newAnimation", 1);
        anima.addEventListener(dragonBones.EventObject.COMPLETE, function() {
          animNode.active = false;
        }, this);
      },
      resetPokerPos: function resetPokerPos() {
        var cardsNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in cardsNode.children) cardsNode.children[key].y = this.defaultPokerY;
        this.disPokerArry.splice(0, this.disPokerArry.length);
        this.setDisCardBtnStatus();
      },
      DoubleClick: function DoubleClick() {
        var time = new Date().getTime();
        if (time - this._currTime < 500) {
          this.resetPokerPos();
          this.disPokerArry = [];
        }
        this._currTime = time;
        this.setDisCardBtnStatus();
      },
      showHintCard: function showHintCard(data) {
        var cards = data.detail.cards;
        var uid = data.detail.uid;
        this.disPokerArry = [];
        var downHandCardNode = cc.find("layer_down/cardHand/handLayout", this.cardsNode);
        for (var key in downHandCardNode.children) downHandCardNode.children[key].y = this.defaultPokerY;
        for (var key in downHandCardNode.children) {
          var card = downHandCardNode.children[key].getComponent("Card");
          for (var i = 0; i < cards.length; i++) if (card.id == cards[i] && true == downHandCardNode.children[key].active) {
            downHandCardNode.children[key].y += 30;
            this.disPokerArry.push(downHandCardNode.children[key]);
          }
        }
        this.setDisCardBtnStatus();
      },
      stopClockMusic: function stopClockMusic() {
        this.unschedule(this.runCountDown);
        this.hideNodeChild(this.clockNodes);
      },
      getRuleStr: function getRuleStr() {
        if (GameData.room.opts) return getRuleStrDDZ(GameData.room.opts);
      },
      addDizhuSign: function addDizhuSign(node, type) {
        var dizhuSign = cc.instantiate(this.dizhuSign);
        "dis" == type && dizhuSign.setPosition(cc.p(-40, 45));
        node.addChild(dizhuSign);
      },
      removeDizhuSign: function removeDizhuSign(node) {
        node.removeAllChildren(true);
      },
      connectRecurrence: function connectRecurrence() {
        var flag = false;
        GameData.room.opts && (flag = true);
        if (!flag) return;
        true == GameData.room.opts.kicking && this.connectTiChuai();
      },
      connectTiChuai: function connectTiChuai() {
        if (GameDataDDZ.isEmptyObject(GameData.joinContact)) return;
        if (GameDataDDZ.isEmptyObject(GameDataDDZ.kicking)) return;
        if (GameData.joinContact.uid != GameData.player.uid) return;
        for (var key in GameDataDDZ.kicking.kicking) if (key == GameData.player.uid) {
          this.tiBtnNode.active = false;
          return;
        }
        if (GameDataDDZ.game.dizhuUid == GameData.player.uid) {
          if (2 == GameDataDDZ.objectLen(GameDataDDZ.kicking.kicking)) {
            this.showWatch();
            var index = 0;
            for (var key in GameDataDDZ.kicking.kicking) 0 == GameDataDDZ.kicking.kicking[key] && index++;
          }
        } else {
          this.showWatch();
          this.tiBtnNode.active = true;
        }
      },
      onTiBtnChecked: function onTiBtnChecked(evt, customEventData) {
        this.tiBtnNode.active = false;
        this.stopClockMusic();
        DDZHandler.getInstance().requestTiChuai(customEventData, function(rtn) {});
      },
      onTrustBtnTouchEnd: function onTrustBtnTouchEnd() {
        DDZHandler.getInstance().requestDepute();
      },
      onNoTrustBtnChecked: function onNoTrustBtnChecked(evt, customEventData) {
        2 == customEventData && (this.noTrustNode.active = false);
        DDZHandler.getInstance().requestDepute();
      },
      setDisCardBtnStatus: function setDisCardBtnStatus() {
        var status = false;
        this.disPokerArry.length > 0 && (status = true);
        var disCardNode = cc.find("btnDisCard", this.actionLayer);
        disCardNode.getComponent("cc.Button").interactable = status;
      },
      handCardRestoration: function handCardRestoration() {
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        if (void 0 == cardsHandNode) return;
        var index = 0;
        for (var i = 19; i >= 0; i--) {
          var node = cc.find("hand_" + i, cardsHandNode);
          if (node) {
            node.x = 53 * index;
            index++;
          }
        }
      },
      hideIsDoubleFlag: function hideIsDoubleFlag() {
        this.tiIcon_right.active = false;
        this.tiIcon_left.active = false;
        this.tiIcon_down.active = false;
        this.undouble_left.active = false;
        this.undouble_right.active = false;
        this.undouble_down.active = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  DisCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3bb2cZiklBCKLjPxvFiYdqL", "DisCard");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        icon: cc.Sprite
      },
      onLoad: function onLoad() {},
      setIcon: function setIcon(cardId) {
        var ref = this.getCardRef();
        if (null != ref) {
          this.icon.spriteFrame = ref.getSpriteFrame(cardId);
          this.icon.node.active = true;
        }
      },
      getCardRef: function getCardRef() {
        null == this._cardRef && (this._cardRef = this.node.getComponent("CardRef"));
        return this._cardRef;
      }
    });
    cc._RF.pop();
  }, {} ],
  EveryDayShare: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6adfEgKUhCmahQ2wLuttdY", "EveryDayShare");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        shareImage: cc.Node
      },
      onLoad: function onLoad() {
        this.shareImage.active = false;
      },
      cancel: function cancel() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      },
      shareContent: function shareContent() {
        this.shareImage.active = true;
        if (inCD(3e3)) return;
        soundMngr.instance.playAudioOther("button");
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  FastVoiceButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5d8732LyFM07PsqFfJkzps", "FastVoiceButton");
    "use strict";
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        sound: "null",
        parent: cc.Node
      },
      onLoad: function onLoad() {},
      onClick: function onClick() {
        soundMngr.instance.playAudioOther("button");
        var talkContent = cc.find("Label", this.node).getComponent(cc.Label).string;
        ChatHandler.getInstance().requestChat("fast", {
          sound: this.sound,
          content: talkContent
        }, function(rtn) {});
        this.parent.getComponent("ChatPanel").onClose();
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  HandCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c44b4plwdFpJQOFrIED/IU", "HandCard");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bottom: cc.Sprite,
        icon: cc.Sprite,
        huier: cc.Node,
        cardId: 0,
        _cardRef: null
      },
      onLoad: function onLoad() {
        this.showHuier(false);
      },
      setIcon: function setIcon(cardId) {
        var ref = this.getCardRef();
        if (null != ref) {
          this.icon.spriteFrame = ref.getSpriteFrame(cardId);
          this.icon.node.active = true;
        }
      },
      showHuier: function showHuier(show) {
        this.huier.active = show;
      },
      setBottom: function setBottom(bottomUrl) {
        var texture = cc.textureCache.addImage(cc.url.raw(bottomUrl));
        this.bottom.spriteFrame = new cc.SpriteFrame(texture);
      },
      getCardRef: function getCardRef() {
        null == this._cardRef && (this._cardRef = this.node.getComponent("CardRef"));
        return this._cardRef;
      }
    });
    cc._RF.pop();
  }, {} ],
  HideComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "577caR31SxH85wNQAo/OCz9", "HideComponent");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        delay: 3
      },
      onLoad: function onLoad() {},
      show: function show(delay) {
        this.node.active = true;
        this.unschedule(this.gotoHide);
        this.scheduleOnce(this.gotoHide, delay);
      },
      gotoHide: function gotoHide() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  LanguagerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13853RE+l9KmrtpYJnOg+WI", "LanguagerManager");
    "use strict";
    cc._RF.pop();
  }, {} ],
  MoveMessage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80b1ck2bNJJV6HubwhnNSrs", "MoveMessage");
    "use strict";
    var errorCode = require("errorCode");
    var codeString = require("codeString");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var actionTo = cc.moveBy(2, cc.p(0, 40));
        this.node.runAction(actionTo);
        var self = this;
        var timeCallback = function timeCallback(dt) {
          self.node.destroy();
        };
        this.scheduleOnce(timeCallback, 2);
      },
      setContent: function setContent(content, code) {
        var str = content;
        var label = cc.find("Label", this.node);
        code && codeString && (str = codeString[code]);
        label && (label.getComponent(cc.Label).string = str);
      }
    });
    cc._RF.pop();
  }, {
    codeString: "codeString",
    errorCode: "errorCode"
  } ],
  "NN-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7030d6PnhKqpIckMfxosFD", "NN-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        spend: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.spendData = void 0;
        this.refreshNiuNiuUI();
      },
      createRoom: function createRoom() {
        this.saveNiuNiuRule();
        profileNiuNiu.saveCreateRoomOpts();
        GameData.setGameType(gameDefine.GameType.Game_niu_niu);
        var createData = profileNiuNiu.createRoomOpts;
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_niu_niu) return createData;
        createData.currencyType = modeTypeData.Game_niu_niu.CurrencyType;
        createData.settleType = modeTypeData.Game_niu_niu.SettleType;
        return createData;
      },
      saveNiuNiuRule: function saveNiuNiuRule() {
        var panel = this.node;
        var roundToggleArry = [ cc.find("/round/ToggleGroup/round10", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round20", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round30", panel).getComponent(cc.Toggle) ];
        var selectedRooundType = 10;
        for (var i = 0; i < roundToggleArry.length; i++) roundToggleArry[i].isChecked && (selectedRooundType = 10 * (i + 1));
        profileNiuNiu.createRoomOpts.roundMax = selectedRooundType;
        profileNiuNiu.createRoomOpts.roundRule = selectedRooundType / 10;
        var bossType = 0;
        var bossTypes = [ cc.find("/bossType/ToggleGroup/boss1", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss2", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss3", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < bossTypes.length; i++) bossTypes[i].isChecked && (bossType = i + 1);
        profileNiuNiu.createRoomOpts.bossType = bossType;
        var baseScore = 0;
        var baseScores = [ cc.find("/baseScore/toggleGroup/score1", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score2", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score5", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < baseScores.length; i++) baseScores[i].isChecked && (baseScore = this.getScoreBeseNum(baseScores[i].node));
        profileNiuNiu.createRoomOpts.scoreBase = baseScore;
        var multipleType = 0;
        var multipleTypes = [ cc.find("/multipleType/ToggleGroup/multiple1", panel).getComponent(cc.Toggle), cc.find("/multipleType/ToggleGroup/multiple2", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < multipleTypes.length; i++) multipleTypes[i].isChecked && (multipleType = i);
        profileNiuNiu.createRoomOpts.multipleType = multipleType;
        var cost_type = 0;
        var cost_types = [ cc.find("/rule_roomPay/toggleGroup/roomOwner", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/AA", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/winPlayer", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < cost_types.length; i++) cost_types[i].isChecked && (cost_type = i + 1);
        profileNiuNiu.createRoomOpts.costType = cost_type;
        profileNiuNiu.createRoomOpts.joinermax = 6;
        profileNiuNiu.createRoomOpts.gameType = 5;
        this.showSpendUI();
      },
      refreshNiuNiuUI: function refreshNiuNiuUI() {
        var panel = this.node;
        var roundToggleArry = [ cc.find("/round/ToggleGroup/round10", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round20", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round30", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < roundToggleArry.length; i++) roundToggleArry[i].isChecked = i + 1 == profileNiuNiu.createRoomOpts.roundMax / 10;
        var bossType = 0;
        var bossTypes = [ cc.find("/bossType/ToggleGroup/boss1", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss2", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss3", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < bossTypes.length; i++) bossTypes[i].isChecked = i + 1 == profileNiuNiu.createRoomOpts.bossType;
        var baseScore = 0;
        var baseScores = [ cc.find("/baseScore/toggleGroup/score1", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score2", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score5", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < baseScores.length; i++) baseScores[i].isChecked = this.getScoreBeseNum(baseScores[i].node) == profileNiuNiu.createRoomOpts.scoreBase;
        var multipleTypes = [ cc.find("/multipleType/ToggleGroup/multiple1", panel).getComponent(cc.Toggle), cc.find("/multipleType/ToggleGroup/multiple2", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < multipleTypes.length; i++) multipleTypes[i].isChecked = i == profileNiuNiu.createRoomOpts.multipleType;
        profileNiuNiu.createRoomOpts.costType > 3 ? profileNiuNiu.createRoomOpts.costType = 1 : null;
        var cost_types = [ cc.find("/rule_roomPay/toggleGroup/roomOwner", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/AA", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/winPlayer", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < cost_types.length; i++) cost_types[i].isChecked = i + 1 == profileNiuNiu.createRoomOpts.costType;
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..niuniu6");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_niu_niu) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_niu_niu.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_niu_niu];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_niu_niu];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        var cost;
        var number = 6;
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            cost = this.spendData[key + 1].cost;
            final = cost[number].final;
            this.spend[key].string = "（" + str1 + "*" + final + "）";
          } else {
            cost = this.spendData[key].cost;
            final = cost[number].final;
            str2 = "/局";
            this.spend[key].string = "";
          }
          this.drowArray[key].active = 0 == final;
        }
      },
      getScoreBeseNum: function getScoreBeseNum(node) {
        var nameStr = node.name;
        var num = nameStr.substring(5, nameStr.length);
        return parseInt(num);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  NoticePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4aa3cD0EOlMdbnzK17vK/4D", "NoticePanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        hdBtn: cc.Node,
        hdLb: cc.Node,
        ggBtn: cc.Node,
        ggLb: cc.Node,
        hdScrollNode: cc.Node,
        hdBtnScrollNode: cc.Node,
        ggScrollNode: cc.Node,
        ggBtnScrollNode: cc.Node,
        hdBtnItem: cc.Node,
        ggBtnItem: cc.Node,
        toptitle: cc.Label,
        redPoint: cc.Node,
        activeArry: {
          default: [],
          type: [ cc.Prefab ]
        },
        GgArry: {
          default: [],
          type: [ cc.Prefab ]
        },
        HdContentArry: [],
        GgContentArry: [],
        HdBtnsArry: [],
        GgBtnsArry: [],
        hdCurrIndex: 1,
        GgCurrIndex: 1
      },
      onLoad: function onLoad() {
        this.initData();
        this.initUI();
        this.registerListener();
      },
      initData: function initData() {
        this.HdContentArry = [];
        this.GgContentArry = [];
        this.HdBtnsArry = [];
        this.GgBtnsArry = [];
        this.hdCurrIndex = 1;
        this.GgCurrIndex = 1;
        this.topHdTitle = [ "绑定代理", "资料补全" ];
        this.topGgTitle = [ "公告" ];
      },
      initUI: function initUI() {
        this.initHdUI();
        this.initGgUI();
      },
      registerListener: function registerListener() {
        registEvent("closeAgentBind", this, this.closeAgentBind);
      },
      onDestroy: function onDestroy() {
        unregistEvent("closeAgentBind", this, this.closeAgentBind);
      },
      initHdUI: function initHdUI() {
        this.HdscrollContent = cc.find("view/content", this.hdScrollNode);
        if (!GameData.player.agentFlag) {
          var agentBindNode = cc.instantiate(this.activeArry[0]);
          agentBindNode.setTag(9999);
          this.HdscrollContent.addChild(agentBindNode);
          this.HdContentArry.push(agentBindNode);
        }
        for (var i = 0; i < this.HdContentArry.length; i++) {
          var item = cc.instantiate(this.hdBtnItem);
          item.active = true;
          item.parent = this.hdBtnItem.parent;
          item.name = "btns" + (i + 2);
          item.setTag(i + 1);
          item.y = this.hdBtnItem.y - this.hdBtnItem.height * i;
          cc.log("item.y " + item.y);
          cc.log("item.tag " + item.tag);
          this.initSelectBtnsItem(item, i + 1);
          this.HdBtnsArry.push(item);
        }
        0 == this.HdContentArry.length && this.showDefaultData(1);
      },
      initGgUI: function initGgUI() {
        this.GgscrollContent = cc.find("view/content", this.ggScrollNode);
        var NoticeNode = cc.instantiate(this.GgArry[0]);
        this.GgscrollContent.addChild(NoticeNode);
        this.GgContentArry.push(NoticeNode);
      },
      initSelectBtnsItem: function initSelectBtnsItem(parent, i) {
        var btn1 = cc.find("btn1", parent);
        var btn2 = cc.find("btn2", parent);
        if (2 == i) {
          btn1.active = true;
          btn2.active = false;
        }
        btn1.setTag(i);
        btn1.on(cc.Node.EventType.TOUCH_END, this.selectHdBtnIndex, this);
      },
      refreshUI: function refreshUI(type) {
        1 == this.selectPageType && (this.redPoint.active = false);
        console.log("type = " + type);
        1 == type ? this.refreshHdUI() : this.refreshGgUI();
      },
      refreshHdUI: function refreshHdUI() {
        0 == this.HdContentArry.length && this.showDefaultData(1);
        for (var i = 0; i < this.HdBtnsArry.length; i++) {
          this.HdBtnsArry[i].y = this.hdBtnItem.y - this.hdBtnItem.height * i;
          var btn1 = cc.find("btn1", this.HdBtnsArry[i]);
          var btn2 = cc.find("btn2", this.HdBtnsArry[i]);
          if (this.hdCurrIndex == this.HdBtnsArry[i].tag) {
            btn1.active = false;
            btn2.active = true;
          } else {
            btn1.active = true;
            btn2.active = false;
          }
        }
        for (var i = 0; i < this.HdContentArry.length; i++) this.hdCurrIndex == i + 1 ? this.HdContentArry[i].active = true : this.HdContentArry[i].active = false;
      },
      refreshGgUI: function refreshGgUI() {
        0 == this.GgContentArry.length && this.showDefaultData(2);
        this.HdContentArry.length > 0 && this.showRedPoint();
      },
      selectUIType: function selectUIType(eve, data) {
        soundMngr.instance.playAudioOther("button");
        var flag = false;
        1 == data && (flag = true);
        this.hdLb.active = flag;
        this.hdBtn.active = !flag;
        this.ggLb.active = !flag;
        this.ggBtn.active = flag;
        this.selectPageType = true == flag ? 1 : 2;
        this.showHdAbout(flag);
        this.showGgAbout(!flag);
        this.refreshUI(data);
      },
      selectHdBtnIndex: function selectHdBtnIndex(eve) {
        soundMngr.instance.playAudioOther("button");
        var index = eve.target.tag;
        this.hdCurrIndex = index;
        this.refreshHdUI();
      },
      showDefaultData: function showDefaultData(type) {
        1 == type ? this.hdBtnItem.active = false : this.ggBtnItem.active = false;
      },
      showHdAbout: function showHdAbout(bool) {
        this.hdScrollNode.active = bool;
        this.hdBtnScrollNode.active = bool;
      },
      showGgAbout: function showGgAbout(bool) {
        this.ggScrollNode.active = bool;
        this.ggBtnScrollNode.active = bool;
      },
      changeTopTitle: function changeTopTitle(str) {
        this.toptitle.string = str;
      },
      closeAgentBind: function closeAgentBind() {
        this.HdscrollContent.removeChildByTag(9999, true);
        this.hdBtnItem.parent.removeChildByTag(1, true);
        this.HdContentArry.shift();
        this.HdBtnsArry.shift();
        this.hdCurrIndex = 1;
        this.refreshHdUI();
      },
      showRedPoint: function showRedPoint() {
        if (1 == this.selectPageType) return;
        this.redPoint.active = true;
      },
      close: function close() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  "PDK-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "099b4iwrIJIh6S7ucvtYE0f", "PDK-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round6: cc.Toggle,
        round10: cc.Toggle,
        round20: cc.Toggle,
        renShu3: cc.Toggle,
        renShu2: cc.Toggle,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        times1: cc.Toggle,
        times10: cc.Toggle,
        times20: cc.Toggle,
        times50: cc.Toggle,
        scoreNode: cc.Node,
        score1: cc.Toggle,
        score2: cc.Toggle,
        score3: cc.Toggle,
        guan: {
          default: null,
          type: cc.Toggle
        },
        buGuan: {
          default: null,
          type: cc.Toggle
        },
        hearts3: {
          default: null,
          type: cc.Toggle
        },
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.refreshUI();
        this.modeType = 1;
        this.spendData = void 0;
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      createRoom: function createRoom() {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Poker_paodekuai);
        var createData = {
          gameType: gameDefine.GameType.Game_Poker_paodekuai,
          roomType: 0,
          passFlag: GameDataPDK.createRoomOpts.playType,
          roundMax: GameDataPDK.createRoomOpts.roundMax,
          roundRule: GameDataPDK.createRoomOpts.roundMax,
          joinermax: GameDataPDK.createRoomOpts.joinermax,
          roundType: 1,
          clubId: 0,
          costType: GameDataPDK.createRoomOpts.costType,
          score: GameDataPDK.createRoomOpts.score,
          times: GameDataPDK.createRoomOpts.times,
          zhuangType: GameDataPDK.createRoomOpts.zhuangType,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_paodekuai) return createData;
        createData.currencyType = modeTypeData.Game_Poker_paodekuai.CurrencyType;
        createData.settleType = modeTypeData.Game_Poker_paodekuai.SettleType;
        return createData;
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..pdk");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_paodekuai) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Poker_paodekuai.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Poker_paodekuai];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Poker_paodekuai];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            var cost;
            0 === key ? cost = this.spendData[10].cost : 1 === key ? cost = this.spendData[20].cost : 2 === key && (cost = this.spendData[30].cost);
            var number = 3;
            final = cost[number].final;
            this.pay2.isChecked;
          } else final = this.spendData[key].cost;
          this.drowArray[key].active = 0 == final;
          this.spendUI[key].string = "（" + str1 + "*" + final + str2 + "）";
        }
      },
      selectRoomType: function selectRoomType(evt, data) {},
      saveRuleFromUI: function saveRuleFromUI() {
        this.round6.isChecked ? GameDataPDK.createRoomOpts.roundMax = 10 : this.round10.isChecked ? GameDataPDK.createRoomOpts.roundMax = 20 : this.round20.isChecked && (GameDataPDK.createRoomOpts.roundMax = 30);
        this.renShu3.isChecked ? GameDataPDK.createRoomOpts.joinermax = 3 : this.renShu2.isChecked && (GameDataPDK.createRoomOpts.joinermax = 2);
        this.pay1.isChecked ? GameDataPDK.createRoomOpts.costType = 1 : this.pay2.isChecked ? GameDataPDK.createRoomOpts.costType = 2 : this.pay3.isChecked && (GameDataPDK.createRoomOpts.costType = 3);
        this.guan.isChecked ? GameDataPDK.createRoomOpts.playType = 1 : this.buGuan.isChecked && (GameDataPDK.createRoomOpts.playType = 2);
        this.hearts3.isChecked ? GameDataPDK.createRoomOpts.zhuangType = true : GameDataPDK.createRoomOpts.zhuangType = false;
        GameDataPDK.saveCreateRoomOpts();
      },
      selectRoundRuleClick: function selectRoundRuleClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 10:
          this.round6.isChecked = true;
          this.round10.isChecked = false;
          this.round20.isChecked = false;
          break;

         case 20:
          this.round10.isChecked = true;
          this.round6.isChecked = false;
          this.round20.isChecked = false;
          break;

         case 30:
          this.round20.isChecked = true;
          this.round6.isChecked = false;
          this.round10.isChecked = false;
        }
        this.round6.isChecked ? GameDataPDK.createRoomOpts.roundMax = 10 : this.round10.isChecked ? GameDataPDK.createRoomOpts.roundMax = 20 : this.round20.isChecked && (GameDataPDK.createRoomOpts.roundMax = 30);
        this.refreshTimesScore();
      },
      selectTimesClick: function selectTimesClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 1:
          this.times1.isChecked = true;
          this.times10.isChecked = false;
          this.times20.isChecked = false;
          this.times50.isChecked = false;
          break;

         case 10:
          this.times10.isChecked = true;
          this.times1.isChecked = false;
          this.times20.isChecked = false;
          this.times50.isChecked = false;
          break;

         case 20:
          this.times20.isChecked = true;
          this.times10.isChecked = false;
          this.times1.isChecked = false;
          this.times50.isChecked = false;
          break;

         case 50:
          this.times50.isChecked = true;
          this.times10.isChecked = false;
          this.times20.isChecked = false;
          this.times1.isChecked = false;
        }
        this.times1.isChecked ? GameDataPDK.createRoomOpts.times = 1 : this.times10.isChecked ? GameDataPDK.createRoomOpts.times = 10 : this.times20.isChecked ? GameDataPDK.createRoomOpts.times = 20 : this.times50.isChecked && (GameDataPDK.createRoomOpts.times = 50);
        this.refreshTimesScore();
      },
      refreshUI: function refreshUI() {
        this.round6.isChecked = 10 == GameDataPDK.createRoomOpts.roundMax;
        this.round10.isChecked = 20 == GameDataPDK.createRoomOpts.roundMax;
        this.round20.isChecked = 30 == GameDataPDK.createRoomOpts.roundMax;
        this.renShu3.isChecked = 3 == GameDataPDK.createRoomOpts.joinermax;
        this.renShu2.isChecked = 2 == GameDataPDK.createRoomOpts.joinermax;
        this.pay1.isChecked = 1 == GameDataPDK.createRoomOpts.costType;
        this.pay2.isChecked = 2 == GameDataPDK.createRoomOpts.costType;
        this.pay3.isChecked = 3 == GameDataPDK.createRoomOpts.costType;
        this.guan.isChecked = 1 == GameDataPDK.createRoomOpts.playType;
        this.buGuan.isChecked = 2 == GameDataPDK.createRoomOpts.playType;
        this.hearts3.isChecked = true == GameDataPDK.createRoomOpts.zhuangType;
        this.showSpendUI();
        if (true == this.renShu2.isChecked) {
          this.hearts3.isChecked = false;
          this.hearts3.node.active = false;
        }
        this.score1.isChecked = true;
        this.score2.isChecked = false;
        this.score3.isChecked = false;
        this.refreshTimesScore();
      },
      refreshTimesScore: function refreshTimesScore() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.scoreNode.active = false;
          return;
        }
        this.scoreNode.active = true;
        var index = 0;
        switch (GameDataPDK.createRoomOpts.roundMax) {
         case 10:
          index = 0;
          break;

         case 20:
          index = 1;
          break;

         case 30:
          index = 2;
        }
        var scoreArray = this.spendData[index].enter;
        var times1Label = cc.find("label", this.score1.node);
        var times2Label = cc.find("label", this.score2.node);
        var times5Label = cc.find("label", this.score3.node);
        void 0 == GameDataPDK.createRoomOpts.times && (GameDataPDK.createRoomOpts.times = 1);
        times1Label.getComponent(cc.Label).string = "≥" + GameDataPDK.createRoomOpts.times * parseInt(scoreArray[0]);
        times2Label.getComponent(cc.Label).string = "≥" + GameDataPDK.createRoomOpts.times * parseInt(scoreArray[1]);
        times5Label.getComponent(cc.Label).string = "≥" + GameDataPDK.createRoomOpts.times * parseInt(scoreArray[2]);
        this.score1.isChecked ? GameDataPDK.createRoomOpts.score = GameDataPDK.createRoomOpts.times * parseInt(scoreArray[0]) : this.score2.isChecked ? GameDataPDK.createRoomOpts.score = GameDataPDK.createRoomOpts.times * parseInt(scoreArray[1]) : this.score3.isChecked && (GameDataPDK.createRoomOpts.score = GameDataPDK.createRoomOpts.times * parseInt(scoreArray[2]));
      },
      onRenShu2Clicked: function onRenShu2Clicked() {
        this.hearts3.isChecked = false;
        var checkmark = cc.find("checkmark", this.hearts3.node);
        checkmark.active = false;
        this.hearts3.interactable = false;
        this.hearts3.node.active = false;
      },
      onRenShu3Clicked: function onRenShu3Clicked() {
        this.hearts3.interactable = true;
        this.hearts3.node.active = true;
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "PDK-handler": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87e848gxYhGXpYVPn/isrTr", "PDK-handler");
    "use strict";
    var errorCode = require("errorCode");
    var PDKHandler = {};
    module.exports = PDKHandler;
    PDKHandler.quitRoom = function(roomid) {
      RoomHandler.quitRoom(roomid);
    };
    PDKHandler.quitRoom = function(roomid) {
      RoomHandler.quitRoom(roomid);
    };
    PDKHandler.deleteRoom = function(roomid, action) {
      RoomHandler.deleteRoom(roomid, action);
    };
    PDKHandler.requestReady = function(callback) {
      GameNet.getInstance().request("room.roomHandler.ready", {}, function(rtn) {});
    };
    PDKHandler.requestSelectScore = function(num, callback) {
      var self = this;
      GameNet.getInstance().request("room.pokerPdkHandler.jiaofen", {
        num: num
      }, function(rtn) {
        callback(rtn);
      });
    };
    PDKHandler.requestTiChuai = function(num, callback) {
      var self = this;
      GameNet.getInstance().request("room.pokerPdkHandler.tichuai", {
        num: num
      }, function(rtn) {
        callback(rtn);
      });
    };
    PDKHandler.requestOnPassCard = function(callback) {
      var self = this;
      GameNet.getInstance().request("room.pokerPdkHandler.pass", {}, function(rtn) {
        callback(rtn);
      });
    }, PDKHandler.requestOnHintCard = function(callback) {
      var self = this;
      GameNet.getInstance().request("room.pokerPdkHandler.hint", {}, function(rtn) {
        if (rtn.result == errorCode.NotHavePokerDis) {
          createMoveMessage("没有大过上家的牌");
          return;
        }
        callback(rtn);
      });
    };
    PDKHandler.requestOnDisCard = function(cards, callback) {
      var self = this;
      GameNet.getInstance().request("room.pokerPdkHandler.discard", {
        cards: cards
      }, function(rtn) {
        rtn.result == errorCode.NotPokerDis ? createMoveMessage("大不过上家的牌") : rtn.result == errorCode.HandPatternsError ? createMoveMessage("出牌牌形错误") : rtn.result == errorCode.MaxCardPut ? createMoveMessage("下家报单，必须出最大的单牌") : rtn.result == errorCode.NotHaveThreePoker && createMoveMessage("出牌组合不含有红桃三");
        callback(rtn);
      });
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode"
  } ],
  "PDK-poker": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "250680cCGhCQIDziK/F2x8m", "PDK-poker");
    "use strict";
    var cardTypes = {
      straights: {
        level: 1,
        colorFormat: false,
        numFormat: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],
        allowedLength: [ 5, 6, 7, 8, 9, 10, 11, 12 ],
        notAllowedCard: [ 15 ]
      }
    };
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerParent: {
          default: null,
          type: cc.Node
        },
        cardMask: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        this.cards = this.pokerParent.children;
        for (var key in this.pokerParent.children) this.cardInitY = this.cards[key].y;
        this.touchedCards = [];
        this.selectedCards = [];
        this.addTouchEvent();
      },
      start: function start() {},
      onDestroy: function onDestroy() {},
      addTouchEvent: function addTouchEvent() {
        this.pokerParent.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("pokerParent TOUCH_START");
          var card = event.target;
          this.touchStartLocation = this.cards[0].convertTouchToNodeSpace(event);
          var index = 0;
          for (var i = 0; i < this.cards.length; i++) {
            var c = this.cards[i];
            if (c.name == card.name) {
              index = i;
              break;
            }
          }
          if ("handLayout" == card.name) {
            this.firstTouchedCard = void 0;
            this.clearTouchedCards();
            return;
          }
          var touchedCard = {
            index: index,
            card: card
          };
          cc.log("card.active:" + card.active, card.name);
          this.firstTouchedCard = touchedCard;
          this.pushTouchedCards(touchedCard.index, touchedCard.card);
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("pokerParent TOUCH_MOVE");
          this.clearTouchedCards();
          if (void 0 == this.firstTouchedCard) return;
          this.pushTouchedCards(this.firstTouchedCard.index, this.firstTouchedCard.card);
          var nodeLocation = this.cards[0].convertTouchToNodeSpace(event);
          var x = nodeLocation.x;
          var y = nodeLocation.y;
          var startTouchLocation = this.touchStartLocation;
          for (var i = 0; i < this.cards.length; i++) {
            var card = this.cards[i];
            var cardX = card.x + 20;
            var min, max;
            if (startTouchLocation.x < nodeLocation.x) {
              min = startTouchLocation.x;
              max = nodeLocation.x;
            } else {
              min = nodeLocation.x;
              max = startTouchLocation.x;
            }
            min <= cardX && cardX <= max && card.active && this.pushTouchedCards(i, card);
          }
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("pokerParent TOUCH_END");
          this.doSelectCard();
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          console.log("pokerParent TOUCH_CANCEL");
          this.doSelectCard();
        }, this);
        for (var i = 0; i < this.cards.length; i++) {
          var cards = this.cards;
          (function(i) {
            var card = cards[i];
            card.on(cc.Node.EventType.TOUCH_START, function(event) {
              console.log("card TOUCH_START");
            }, card);
            card.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
              console.log("card TOUCH_MOVE");
            }, card);
            card.on(cc.Node.EventType.TOUCH_END, function(event) {
              console.log("card TOUCH_END");
              card.active && soundMngr.instance.playOtherAudioPoker("click", null);
            }, card);
            card.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
              console.log("card TOUCH_CANCEL");
              card.active && soundMngr.instance.playOtherAudioPoker("click", null);
            }, card);
          })(i);
        }
      },
      pushTouchedCards: function pushTouchedCards(index, card) {
        var cardObj = {
          index: index,
          name: card.name,
          isSelected: card.y != this.cardInitY
        };
        var existCard = this.touchedCards.find(function(obj) {
          return obj.name == card.name ? obj : null;
        });
        if (!existCard) {
          this.touchedCards.push(cardObj);
          this.addCardMask(card);
        }
      },
      clearTouchedCards: function clearTouchedCards() {
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardIndex = this.touchedCards[i].index;
          var card = this.cards[cardIndex];
          card.removeChildByTag(100);
        }
        this.touchedCards = [];
      },
      doSelectCard: function doSelectCard() {
        this.selectedCards = [];
        this.pokerTypeArry = [];
        this.shunziArry = [];
        var tempPokerArr = [];
        var flag = true;
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardObj = this.touchedCards[i];
          var card = this.cards[cardObj.index];
          var cardId = card.getComponent("Card").id;
          this.pokerTypeArry.push(cardId);
          tempPokerArr.push(cardId % 100);
        }
        for (var j = 0; j < this.pokerTypeArry.length; j++) for (var k = 0; k < this.pokerTypeArry.length; k++) k != j && this.pokerTypeArry[k] % 100 == this.pokerTypeArry[j] % 100 && this.pokerTypeArry.splice(k, 1);
        console.log("1111111111111111```" + this.pokerTypeArry);
        var bool = this.getCardsType(this.pokerTypeArry);
        console.log("1111111111111111```" + bool);
        if (bool) {
          var pokerArr = [];
          for (var j = 0; j < this.pokerTypeArry.length; j++) {
            pokerArr.push(this.pokerTypeArry[j] % 100);
            pokerArr.push(this.pokerTypeArry[j] % 100);
          }
          pokerArr.sort(function(a, b) {
            return a - b;
          });
          tempPokerArr.sort(function(a, b) {
            return a - b;
          });
          this.contain(pokerArr, tempPokerArr) && (flag = false);
        }
        if (flag && "straights" == bool) for (var j = 0; j < this.pokerTypeArry.length; j++) {
          var exist = true;
          for (var k = 0; k < this.shunziArry.length; k++) this.pokerTypeArry[j] % 100 == this.shunziArry[k] % 100 && (exist = false);
          exist && this.shunziArry.push(this.pokerTypeArry[j]);
        }
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardObj = this.touchedCards[i];
          var card = this.cards[cardObj.index];
          var cardId = card.getComponent("Card").id;
          cc.log("card:" + card.name);
          for (var j = 0; j < this.shunziArry.length; j++) cardId == this.shunziArry[j] && (cardObj.isSelected ? card.y = card.y - 30 : card.y = card.y + 30);
          0 == this.shunziArry.length && (cardObj.isSelected ? card.y = card.y - 30 : card.y = card.y + 30);
        }
        this.clearTouchedCards();
        this.showSelectedCards();
      },
      addCardMask: function addCardMask(card) {
        var cardMask = cc.instantiate(this.cardMask);
        cardMask.setTag(100);
        cardMask.setPosition(cc.p(0, 0));
        card.addChild(cardMask);
      },
      showSelectedCards: function showSelectedCards() {
        this.selectedCards = [];
        for (var i = 0; i < this.cards.length; i++) {
          var card = this.cards[i];
          var isSelected = card.y != this.cardInitY;
          isSelected && this.selectedCards.push(card.name);
        }
        sendEvent("pdk-disPokerArry", this.selectedCards);
      },
      contain: function contain(arr, obj) {
        if (arr.toString() == obj.toString()) return true;
        return false;
      },
      getCardsType: function getCardsType(cards) {
        for (var key in cardTypes) {
          var type = cardTypes[key];
          var lengthmatch = false;
          for (var i = 0; i < type.allowedLength.length; i++) type.allowedLength[i] == cards.length && (lengthmatch = true);
          if (!lengthmatch) continue;
          var numbers = this.createSortedCardNumbers(cards);
          cc.log("numbers = " + numbers);
          var fatch = true;
          if (type.notAllowedCard) for (var i = 0; i < numbers.length; i++) for (var j = 0; j < type.notAllowedCard.length; j++) numbers[i] == type.notAllowedCard[j] && (fatch = false);
          var count1 = 0, count2 = 0;
          if ("aircraft" == key.substring(0, key.length - 1) || "aircraft" == key) for (var i = 0; i < cards.length; i++) {
            115 == cards[i] || 215 == cards[i] || 315 == cards[i] || 415 == cards[i] ? count1++ : 114 != cards[i] && 214 != cards[i] && 314 != cards[i] && 414 != cards[i] || count2++;
            3 == count1 && 3 == count2 && (fatch = false);
          }
          if (!fatch) continue;
          var formatMacth = true;
          var format = type.numFormat;
          var cutNum = null;
          var startNum = [];
          for (var j = 0; j < numbers.length; j++) for (var k = 0; k < numbers.length; k++) k != j && numbers[k] == numbers[j] && numbers.splice(k, 1);
          numbers.sort(function(a, b) {
            return a - b;
          });
          cc.log("numbers = " + numbers);
          for (var i = 0; i < numbers.length; i++) {
            if (0 == format[i]) continue;
            if (format[i] < 0) if (startNum[-format[i]]) {
              if (startNum[-format[i]] != numbers[i]) {
                formatMacth = false;
                break;
              }
            } else startNum[-format[i]] = numbers[i]; else if (null == cutNum) cutNum = numbers[i] - format[i]; else if (cutNum != numbers[i] - format[i]) {
              formatMacth = false;
              break;
            }
          }
          if (formatMacth && numbers.length >= 5) return key;
        }
        return false;
      },
      createSortedCardNumbers: function createSortedCardNumbers(cards) {
        var numbers = [];
        for (var i = 0; i < cards.length; i++) numbers[i] = cards[i] % 100;
        return numbers;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  "PDK-roomDissolve": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "378b8taE7FEbrGN07GKWBuk", "PDK-roomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        null != GameData.game.onRoomDissolve && GameData.client.gameType == gameDefine.GameType.Game_Poker_paodekuai && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.openDisAgree = false;
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        var flag = false;
        GameData.room.opts && (flag = true);
        if (!flag) return;
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 200 * (i + 1);
        }
      },
      showPlayers: function showPlayers() {
        var flag = false;
        GameData.room.opts && (flag = true);
        if (!flag) return;
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            var isOnLine = RoomHandler.isPlayerOnline(uid);
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = !isOnLine;
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("PDK-roomMain").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("PDK-roomMain").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("PDK-roomMain").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("PDK-roomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "PDK-roomHandler": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3957NLmZNEm67cT7GTm7Uu", "PDK-roomHandler");
    "use strict";
    var room_pdk = {
      allScores: {},
      roomsummaryData: {},
      openScore: 0,
      recordInfo: [],
      currJiaofenPlayerData: {},
      gameStartData: {},
      currObtainPlayerData: {},
      lastDisPokerUid: 0,
      hideDisCard: {},
      deal: false,
      tiFlag: false,
      chuaiFlag: false,
      kicking: {},
      currtiChuaiPlayerData: [],
      handCardSize: 17,
      handCardSizeMax: 20,
      game: {
        roundType: 0,
        roundNum: 0,
        roundmax: 0,
        turn: 0,
        lastdisUid: 0,
        lastdisCard: 0,
        winnerUid: 0,
        dizhuUid: 0,
        gangOver: 0,
        gameStart: false,
        gameStartDizhu: false,
        initcards: false,
        onRoomDissolve: {},
        onRoomDissolveResult: {},
        onRoomDisbandTimer: {},
        onRoomReadyInfo: {},
        isJiaofenAgain: false
      },
      cards: {},
      resultData: {},
      createRoomOpts: {}
    };
    module.exports = room_pdk;
    room_pdk.initCreateRoomOpts = function() {
      var data = cc.sys.localStorage.getItem("DDZcreateRoomOpts");
      if (null != data) {
        room_pdk.createRoomOpts = JSON.parse(data);
        return;
      }
      room_pdk.createRoomOpts = {};
      room_pdk.createRoomOpts.roomTypes = 1;
      room_pdk.createRoomOpts.playType = 0;
      room_pdk.createRoomOpts.roundMax = 6;
      room_pdk.createRoomOpts.fanshu = 2;
      room_pdk.createRoomOpts.costType = 1;
      room_pdk.createRoomOpts.jiaofenType = 1;
      room_pdk.createRoomOpts.mud = false;
      room_pdk.createRoomOpts.kicking = false;
      room_pdk.createRoomOpts.times = 1;
      room_pdk.createRoomOpts.score = 1;
    };
    room_pdk.saveCreateRoomOpts = function() {
      if (null == room_pdk.createRoomOpts || void 0 == room_pdk.createRoomOpts) return;
      cc.sys.localStorage.setItem("DDZcreateRoomOpts", JSON.stringify(room_pdk.createRoomOpts));
    };
    room_pdk.getJiaofenNum = function(uid) {
      return room_pdk.cards[uid]["jiaofenNum"];
    };
    room_pdk.getDisPoker = function(uid) {
      return room_pdk.cards[uid]["discards"];
    };
    room_pdk.getHandCards = function(uid) {
      return room_pdk.cards[uid]["hand"];
    };
    room_pdk.getMyHandCards = function() {
      if (void 0 != room_pdk.cards[GameData.player.uid]) return room_pdk.cards[GameData.player.uid]["hand"];
    };
    room_pdk.getHandCardNum = function(uid) {
      return room_pdk.cards[uid]["handnum"];
    };
    room_pdk.setPosition = function() {
      GameData.tablePos = {};
      var order;
      var index = GameData.getPlayerIndex(GameData.player.uid);
      if (void 0 == GameData.room.opts) return;
      if (4 == GameData.room.opts.joinermax) {
        0 == index ? order = [ "down", "right", "up", "left" ] : 1 == index ? order = [ "left", "down", "right", "up" ] : 2 == index ? order = [ "up", "left", "down", "right" ] : 3 == index && (order = [ "right", "up", "left", "down" ]);
        for (var i = 0; i < GameData.joiners.length; i++) GameData.joiners[i] && (GameData.tablePos[GameData.joiners[i].uid] = order[i]);
      } else if (3 == GameData.room.opts.joinermax) {
        0 == index ? order = [ "down", "right", "left" ] : 1 == index ? order = [ "left", "down", "right" ] : 2 == index && (order = [ "right", "left", "down" ]);
        for (var i = 0; i < GameData.joiners.length; i++) GameData.joiners[i] && (GameData.tablePos[GameData.joiners[i].uid] = order[i]);
      } else if (2 == GameData.room.opts.joinermax) {
        0 == index ? order = [ "down", "up" ] : 1 == index && (order = [ "up", "down" ]);
        for (var i = 0; i < GameData.joiners.length; i++) GameData.joiners[i] && (GameData.tablePos[GameData.joiners[i].uid] = order[i]);
      }
      cc.log("table pos:" + JSON.stringify(GameData.tablePos));
    };
    room_pdk.getPosByUid = function(uid) {
      return GameData.tablePos[uid];
    };
    room_pdk.isEmptyObject = function(object) {
      for (var key in object) return false;
      return true;
    };
    room_pdk.objectLen = function(object) {
      var len = 0;
      for (var key in object) len++;
      return len;
    };
    room_pdk.clearObject = function(object) {
      for (var key in object) delete object[key];
      if (room_pdk.isEmptyObject(object)) return true;
      return false;
    };
    room_pdk.registMessage = function() {
      GameNet.getInstance().setCallBack("tjddz-hideCard", function(data) {
        WriteLog("tjddz-hideCard: ", data);
        room_pdk.hideDisCard = data;
        sendEvent("tjddz-hideCard", data);
      });
      GameNet.getInstance().setCallBack("tjddz-startChuai", function(data) {
        WriteLog("do event tjddz-startChuai  " + JSON.stringify(data));
        room_pdk.chuaiFlag = true;
        sendEvent("tjddz-startChuai", data);
      });
      GameNet.getInstance().setCallBack("tjddz-startTi", function(data) {
        WriteLog("do event tjddz-startTi  " + JSON.stringify(data));
        room_pdk.tiFlag = true;
        sendEvent("tjddz-startTi", data);
      });
      GameNet.getInstance().setCallBack("tjddz-showKicking", function(data) {
        WriteLog("do event tjddz-showKicking  " + JSON.stringify(data));
        room_pdk.kicking = data;
        sendEvent("tjddz-showKicking", data);
      });
      GameNet.getInstance().setCallBack("tjddz-onGameInfo", function(data) {
        WriteLog("do event tjddz-onGameInfo  " + JSON.stringify(data));
        room_pdk.game.initcards = true;
        room_pdk.deal = false;
        sendEvent("tjddz-onGameInfo", data);
      });
      GameNet.getInstance().setCallBack("tjddz-initCardHandNum", function(data) {
        WriteLog("do event tjddz-initCardHandNum  " + JSON.stringify(data));
        room_pdk.cards[data.uid] = void 0 === room_pdk.cards[data.uid] ? {} : room_pdk.cards[data.uid];
        room_pdk.cards[data.uid]["handnum"] = data.num;
        sendEvent("tjddz-initCardHandNum");
      });
      GameNet.getInstance().setCallBack("tjddz-initCardHand", function(data) {
        WriteLog("do event tjddz-initCardHand  " + JSON.stringify(data));
        room_pdk.cards[data.uid] = void 0 === room_pdk.cards[data.uid] ? {} : room_pdk.cards[data.uid];
        room_pdk.cards[data.uid]["hand"] = data.hand;
        sendEvent("tjddz-initCardHand");
      });
      GameNet.getInstance().setCallBack("tjddz-onGameStart", function(data) {
        WriteLog("do event tjddz-onGameStart  " + JSON.stringify(data));
        room_pdk.initGameData();
        room_pdk.game.gameStart = true;
        room_pdk.deal = true;
        sendEvent("tjddz-onGameStart");
      });
      GameNet.getInstance().setCallBack("tjddz-onGameScore", function(data) {
        WriteLog("do event tjddz-onGameScore  " + JSON.stringify(data));
        room_pdk.resultData = data;
        room_pdk.game.gameStart = false;
        room_pdk.tiFlag = false;
        room_pdk.chuaiFlag = false;
        sendEvent("tjddz-onGameScore", data);
      });
      GameNet.getInstance().setCallBack("tjddz-onGameAllScore", function(data) {
        WriteLog("do event tjddz-onGameAllScore  " + JSON.stringify(data));
        room_pdk.allScores = data.score;
        room_pdk.roomsummaryData = data;
        sendEvent("tjddz-onGameAllScore", data);
      });
      GameNet.getInstance().setCallBack("tjddz-onFirstJiaoFen", function(data) {
        WriteLog("sercerMsg  tjddz-onFirstJiaoFen :" + JSON.stringify(data));
        room_pdk.game.isJiaofenAgain = data.flag;
        room_pdk.currJiaofenPlayerData = data;
        sendEvent("tjddz-onJiaoFen", data);
      });
      GameNet.getInstance().setCallBack("tjddz-showWatch", function(data) {
        WriteLog("sercerMsg  tjddz-showWatch :" + JSON.stringify(data));
        room_pdk.currtiChuaiPlayerData = data;
        sendEvent("tjddz-showWatch", data);
      });
      GameNet.getInstance().setCallBack("tjddz-nextJiaoFen", function(data) {
        WriteLog("sercerMsg  tjddz-nextJiaoFen :" + JSON.stringify(data));
        for (var key in data.allJiaoFen) room_pdk.cards[key]["jiaofenNum"] = data.allJiaoFen[key];
        room_pdk.currJiaofenPlayerData = data;
        sendEvent("tjddz-onJiaoFen", data);
      });
      GameNet.getInstance().setCallBack("tjddz-reconnectionInfo", function(data) {
        WriteLog("sercerMsg  tjddz-reconnectionInfo :" + JSON.stringify(data));
        if ("jiaofen" == data.type) {
          room_pdk.currJiaofenPlayerData = data;
          for (var key in data.allJiaoFen) room_pdk.cards[key]["jiaofenNum"] = data.allJiaoFen[key];
        }
      });
      GameNet.getInstance().setCallBack("tjddz-openScore", function(data) {
        WriteLog("do event tjddz-openScore  " + JSON.stringify(data));
        room_pdk.openScore = data.open;
        sendEvent("tjddz-openScore", data);
      });
      GameNet.getInstance().setCallBack("tjddz-onDiZhu", function(data) {
        WriteLog("sercerMsg  tjddz-onDiZhu  :" + JSON.stringify(data));
        room_pdk.game.dizhuUid = data.dizhuUid;
        room_pdk.gameStartData = data;
        room_pdk.game.gameStartDizhu = true;
        sendEvent("tjddz-onDiZhu", data);
      });
      GameNet.getInstance().setCallBack("tjddz-disCardUid", function(data) {
        WriteLog("sercerMsg  tjddz-disCardUid  :" + JSON.stringify(data));
        room_pdk.currObtainPlayerData = data;
        sendEvent("tjddz-onShowObtainNode", data);
      });
      GameNet.getInstance().setCallBack("tjddz-initCardHandNums", function(data) {
        WriteLog("do event tjddz-initCardHandNums  " + JSON.stringify(data));
        room_pdk.cards[data.uid]["handnum"] = data.num;
        cc.log("initCardHandNums" + JSON.stringify(room_pdk.cards[data.uid]));
        sendEvent("tjddz-initCardHandNums");
      });
      GameNet.getInstance().setCallBack("tjddz-showDisPoker", function(data) {
        WriteLog("sercerMsg  tjddz-showDisPoker  :" + JSON.stringify(data));
        room_pdk.cards[data.uid] = void 0 === room_pdk.cards[data.uid] ? {} : room_pdk.cards[data.uid];
        room_pdk.cards[data.uid]["discards"] = data.cards;
        sendEvent("tjddz-showDisPoker", data);
      });
      GameNet.getInstance().setCallBack("tjddz-initCardHands", function(data) {
        WriteLog("do event tjddz-initCardHands  " + JSON.stringify(data));
        room_pdk.cards[data.uid] = void 0 === room_pdk.cards[data.uid] ? {} : room_pdk.cards[data.uid];
        room_pdk.cards[data.uid]["hand"] = data.hand;
        sendEvent("tjddz-initCardHands", data);
      });
      GameNet.getInstance().setCallBack("tjddz-cardWarning", function(data) {
        WriteLog("do event tjddz-cardWarning  " + JSON.stringify(data));
        sendEvent("tjddz-cardWarning", data);
      });
      GameNet.getInstance().setCallBack("tjddz-onDiscardType", function(data) {
        WriteLog("do event tjddz-onDiscardType  " + JSON.stringify(data));
        room_pdk.lastDisPokerUid = data.uid;
        sendEvent("tjddz-onDiscardType", data);
      });
      GameNet.getInstance().setCallBack("tjddz-jiaoFencb", function(data) {
        WriteLog("do event tjddz-jiaoFencb  " + JSON.stringify(data));
        sendEvent("tjddz-jiaoFencb", data);
      });
      GameNet.getInstance().setCallBack("tjddz-passcb", function(data) {
        WriteLog("do event tjddz-passcb  " + JSON.stringify(data));
        room_pdk.cards[data.uid]["discards"] = data.cards;
        room_pdk.cards[data.nextUid]["discards"] = data.nextCards;
        sendEvent("tjddz-passcb", data);
      });
      GameNet.getInstance().setCallBack("tjddz-hintCard", function(data) {
        WriteLog("do event tjddz-hintCard  " + JSON.stringify(data));
        sendEvent("tjddz-hintCard", data);
      });
      GameNet.getInstance().setCallBack("tjddz-BackTable", function(data) {
        WriteLog("do event tjddz-BackTable  " + JSON.stringify(data));
        room_pdk.game.initcards = true;
      });
    };
    cc._RF.pop();
  }, {} ],
  "PDK-roomMain": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5bb4hFPK9B8LymfJNnDZV3", "PDK-roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("pdk-onGameStart", this, this.showTableLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("AnimationDelayTime", this, this.showResultLayer);
        registEvent("onServerNotice", this, handlerServerNotice);
        scheduleLamp(this);
        GameDataPDK.game.gameStart ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        1 == GameDataPDK.openScore && this.showResultDirectly();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(1e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnMovePos = this.convertToNodeSpace(movePos);
          var radius = {
            x: this.getContentSize().width / 2,
            y: this.getContentSize().height / 2
          };
          var distance = cc.pDistance(talkBtnMovePos, radius);
          if (distance > this.getContentSize().width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.showTableUI(true);
      },
      onDestroy: function onDestroy() {
        unregistEvent("pdk-onGameStart", this, this.showTableLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("AnimationDelayTime", this, this.showResultLayer);
        unregistEvent("onServerNotice", this, handlerServerNotice);
        GameData.initGameData();
        GameDataPDK.initRoomData();
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("pdk/sound/bgm1");
      },
      showTableLayer: function showTableLayer() {
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("pdk/sound/bgm1");
      },
      showResultLayer: function showResultLayer(data) {
        var AnimationDelayTime = data.detail;
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, AnimationDelayTime);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        if (true == GameData.contact && GameData.joinContact.uid == GameData.player.uid) GameData.contact = false; else {
          GameData.contact = false;
          GameData.realNum++;
        }
        this.node.getComponent("PDK-roomResult").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("DDZ-SettingsPanel", gameDefine.GameType.Game_Poker_TianjinDDZ) : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        GameData.realNum = 0;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      },
      AnimationDelayTime: function AnimationDelayTime(data) {
        this._AnimationDelayTime = data.detail;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  "PDK-roomResult": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2508OhVShP77Zqm8rYRx/1", "PDK-roomResult");
    "use strict";
    var PDKHandler = require("PDK-handler");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        resultIcon: cc.Sprite,
        isMark: 0,
        roomid: cc.Label,
        createTime: cc.Label,
        roundNum: cc.Label,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        if (GameData.room.opts.joinermax) {
          for (var i = 0; i < GameData.room.opts.joinermax; i++) {
            this.showPlayer(i);
            this.showScore(i);
            this.showDetail(i);
            this.showWinIcon(i);
            this.showPoker(i);
          }
          this.showResultIcon();
          this.showRoomDetail();
        }
      },
      initResultLayer: function initResultLayer() {
        if (!GameDataPDK.isEmptyObject(GameDataPDK.game.onRoomReadyInfo)) for (var key in GameDataPDK.game.onRoomReadyInfo) if (true == GameDataPDK.game.onRoomReadyInfo[key] && key == GameData.player.uid) {
          this.resultLayer.active = false;
          break;
        }
      },
      showName: function showName(label, name) {
        isChinese(name) ? label.string = getShortStr(name, 4) : isChinese(name) || (label.string = getShortStr(name, 8));
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var playerNode = cc.find("panel/player_" + (index + 1), this.resultLayer);
        playerNode.active = true;
        var idNode = cc.find("panel/player_" + (index + 1) + "/headNode/playerID", this.resultLayer);
        var nameNode = cc.find("panel/player_" + (index + 1) + "/headNode/name", this.resultLayer);
        var headpicNode = cc.find("panel/player_" + (index + 1) + "/headNode/head", this.resultLayer);
        var identityNode = cc.find("panel/player_" + (index + 1) + "/headNode/identity_icon", this.resultLayer);
        this.showName(nameNode.getComponent(cc.Label), player.name);
        idNode.getComponent(cc.Label).string = "ID:" + player.uid;
        player.uid == GameData.room.creator ? identityNode.active = true : identityNode.active = false;
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            cc.log("result:" + player.headimgurl);
            headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var residue = cc.find("panel/player_" + (index + 1) + "/residue/label", this.resultLayer);
        var boomNum = cc.find("panel/player_" + (index + 1) + "/boomNum/label", this.resultLayer);
        residue.getComponent(cc.Label).string = GameDataPDK.cards[player.uid]["handnum"] + "张";
        for (var key in GameDataPDK.resultData.boom) if (player.uid == key) {
          boomNum.getComponent(cc.Label).string = GameDataPDK.resultData.boom[key];
          break;
        }
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("panel/player_" + (index + 1) + "/field_num1", this.resultLayer);
        if (GameDataPDK.resultData.score) if (GameDataPDK.resultData.score[uid] > 0) {
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
          scoreNode.getComponent("cc.Label").string = "+" + GameDataPDK.resultData.score[uid];
        } else if (0 == GameDataPDK.resultData.score[uid]) {
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
          scoreNode.getComponent("cc.Label").string = "+" + GameDataPDK.resultData.score[uid];
        } else {
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
          scoreNode.getComponent("cc.Label").string = GameDataPDK.resultData.score[uid];
        }
      },
      showWinIcon: function showWinIcon(index) {
        var player = GameData.joiners[index];
        var node = cc.find("panel/player_" + (index + 1) + "/resultIcon", this.resultLayer);
        var iconUrl = "";
        if (player.uid == GameDataPDK.resultData.winner) iconUrl = "resources/pdk/sheng.png"; else for (var key in GameDataPDK.resultData.guanmen) if (player.uid == key) {
          iconUrl = "resources/pdk/guanmen.png";
          break;
        }
        node.active = true;
        node.getComponent(cc.Sprite).spriteFrame = null;
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showPoker: function showPoker(index) {
        var pokerNode = cc.find("panel/player_" + (index + 1) + "/cardsNoe", this.resultLayer);
        for (var key in pokerNode.children) pokerNode.children[key].active = false;
        var uid = GameData.joiners[index].uid;
        var cards = GameDataPDK.getHandCards(uid);
        if (void 0 == cards.length) return;
        for (var i = 0; i < cards.length; i++) {
          var node = cc.find("card_" + i, pokerNode);
          node.active = true;
          node.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/ddz/UI/pokers/poker_" + cards[i] + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      showResultIcon: function showResultIcon() {
        var myScore = GameDataPDK.resultData.score[GameData.player.uid];
        var iconUrl = "";
        myScore > 0 ? iconUrl = "resources/ddz/UI/result/woyingle.png" : myScore < 0 ? iconUrl = "resources/ddz/UI/result/shibaile.png" : 0 == myScore && (iconUrl = "resources/pdk/pingjubiaoti.png");
        this.resultIcon.getComponent(cc.Sprite).spriteFrame = null;
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        this.resultIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showRoomDetail: function showRoomDetail() {
        this.roomid.string = "房间号:" + GameData.room.id;
        this.createTime.string = getDate(GameData.room.createtime);
        this.roundNum.string = "第 " + GameData.room.roundNum + "/" + GameData.room.opts.roundMax + " 局";
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("PDK-roomMain").showSummaryLayer();
        } else {
          PDKHandler.requestReady(function(res) {});
          this.resultLayer.active = false;
          GameDataPDK.game.zhuangUid = 0;
          sendEvent("pdk-onGameStart");
          sendEvent("initTableNode");
        }
        GameDataPDK.clearObject(GameDataPDK.kicking);
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    "PDK-handler": "PDK-handler"
  } ],
  "PDK-roomSummary": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb77dCuLYJNLKCNLjY5wF4x", "PDK-roomSummary");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        },
        lostNode: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        this.showTime();
        this.hideLostNode();
        for (var i = 0; i < GameData.joiners.length; i++) this.showPlayer(GameData.joiners[i], i + 1);
      },
      hideLostNode: function hideLostNode() {
        for (var key in this.lostNode.children) this.lostNode.children[key].active = false;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        if (!player) return;
        var joinermax = GameData.room.opts.joinermax;
        var playerNode = cc.find("player_" + idx, this.panel);
        playerNode.active = true;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var maxScore = cc.find("player_" + idx + "/maxScore", this.panel);
        var maxBobm = cc.find("player_" + idx + "/maxBobm", this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        var owner = cc.find("player_" + idx + "/owner", this.panel);
        owner.active = GameData.room.creator == player.uid;
        isChinese(player.name) ? nameNode.getComponent("cc.Label").string = getShortStr(player.name, 5) : nameNode.getComponent("cc.Label").string = getShortStr(player.name, 9);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        if (GameDataPDK.roomsummaryData && 0 != Object.keys(GameDataPDK.roomsummaryData).length) {
          0 != Object.keys(GameDataPDK.roomsummaryData.maxFen).length && (maxScore.getComponent("cc.Label").string = "单局最高分:" + GameDataPDK.roomsummaryData.maxFen[player.uid]);
          0 != Object.keys(GameDataPDK.roomsummaryData.maxBoom).length && (maxBobm.getComponent("cc.Label").string = "打出炸弹数:" + GameDataPDK.roomsummaryData.maxBoom[player.uid]);
        }
        null != player.headimgurl && "" != player.headimgurl && player.headimgurl.length > 0 && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            cc.log("player.headimgurl:" + player.headimgurl);
            headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
          }
        });
        if (null != GameDataPDK.roomsummaryData.score) {
          var score = GameDataPDK.roomsummaryData.score[player.uid];
          cc.log("..score:" + score);
          if (score > 0) {
            scoreNode.getComponent("cc.Label").string = "+" + score;
            scoreNode.getComponent("cc.Label").font = this.fonts[1];
          } else if (score < 0) {
            scoreNode.getComponent("cc.Label").string = score;
            scoreNode.getComponent("cc.Label").font = this.fonts[0];
          } else {
            scoreNode.getComponent("cc.Label").string = score;
            scoreNode.getComponent("cc.Label").font = this.fonts[2];
          }
          if (GameData.room.creator == player.uid) {
            var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
            ownerNode.active = true;
          }
          var GetScoreMaxUid = function GetScoreMaxUid() {
            var tempUid;
            tempUid = GameData.joiners[0].uid;
            for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && GameDataPDK.roomsummaryData.score[GameData.joiners[i].uid] > GameDataPDK.roomsummaryData.score[tempUid] && (tempUid = GameData.joiners[i].uid);
            return tempUid;
          };
          var winNode = cc.find("player_" + idx + "/win", this.panel);
          if (GameDataPDK.roomsummaryData.score[GetScoreMaxUid()] == GameDataPDK.roomsummaryData.score[player.uid]) {
            var winNode = cc.find("player_" + idx + "/win", this.panel);
            winNode.active = GameDataPDK.roomsummaryData.score[GetScoreMaxUid()] > 0;
          }
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {} ],
  "PDK-roomWait": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "17b6dvGOcFLVL3aFBoXWcgV", "PDK-roomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var PDKHandler = require("PDK-handler");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        readyBtn: cc.Node,
        rotateCard: cc.Node,
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        WriteLog("TJDDZ-roomWait onLoad");
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers(this);
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("pdk-onReady", this, this.onReady);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("rotateAction", this, this.rotateAction);
        registEvent("initTableNode", this, this.showPlayers);
        registEvent("onPrepareInfo", this, this.onPrepareInfo);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("pdk-onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("pdk-onGameStart", this, this.onGameStartHandler);
        registEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("HideReadyNode", this, this.HideReadyNode);
        registEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        registEvent("pdk-showKicking", this, this.showKicking);
        registEvent("dynChat", this, this.dynChatHandler);
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
        PDKHandler.requestReady();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameDataPDK.game.gameStart;
        GameData.game.onRoomReadyInfo.data;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("pdk-onReady", this, this.onReady);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("rotateAction", this, this.rotateAction);
        unregistEvent("initTableNode", this, this.showPlayers);
        unregistEvent("onPrepareInfo", this, this.onPrepareInfo);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("pdk-onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("pdk-onGameStart", this, this.onGameStartHandler);
        unregistEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        unregistEvent("pdk-onGameScore", this, this.onGameScoreHandler);
        unregistEvent("yunwaUploaded", this, this.onYunwaUploaded);
        unregistEvent("HideReadyNode", this, this.HideReadyNode);
        unregistEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        unregistEvent("pdk-showKicking", this, this.showKicking);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onReady: function onReady() {
        GameDataPDK.clearObject(GameDataPDK.kicking);
        sendEvent("initTableNode");
        PDKHandler.requestReady();
      },
      onGameScoreHandler: function onGameScoreHandler(data) {
        var AnimationDelayTime = data.detail;
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, AnimationDelayTime);
      },
      HideReadyNode: function HideReadyNode() {
        this.readyNode.active = false;
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("DDZ-playerTemplate");
          var uid = playerTemplate.uid;
          var score = void 0 == GameDataPDK.allScores[uid] ? 0 : GameDataPDK.allScores[uid];
          playerTemplate.setCoin(score, 1);
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioPokerChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                cc.log("animationName:" + animationName);
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("DDZ-playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      rotateAction: function rotateAction() {
        var pos = GameDataPDK.getPosByUid(GameDataPDK.game.zhuangUid);
        if ("left" == pos) this.runRotateCard(this.play_left_player); else if ("right" == pos) this.runRotateCard(this.play_right_player); else if ("down" == pos) {
          this.rotateCard.active = true;
          var moveTo = cc.moveTo(1, cc.p(0, -254));
          var that = this;
          var callFunc = cc.callFunc(function() {
            that.easeCubicAction(that.rotateCard);
          }, this);
          var delayTime = cc.delayTime(1.5);
          var seq = cc.sequence(delayTime, moveTo, callFunc);
          this.rotateCard.runAction(seq);
        }
      },
      runRotateCard: function runRotateCard(parent) {
        this.rotateCard.active = true;
        var playerPosition = parent.getPosition();
        var rotateTo = cc.rotateTo(1, 1080);
        var scaleTo = cc.scaleTo(1, .3);
        var moveTo = cc.moveTo(1, cc.p(playerPosition.x, playerPosition.y));
        var spawnAction = cc.spawn(rotateTo, scaleTo, moveTo);
        var that = this;
        var callFunc = cc.callFunc(function() {
          that.rotateCard.active = false;
          that.rotateCard.x = 0;
          that.rotateCard.y = 0;
          that.rotateCard.scaleX = 1;
          that.rotateCard.scaleY = 1;
          sendEvent("showFirstCard");
          sendEvent("runFlipAction");
        }, this);
        var delayTime = cc.delayTime(1.5);
        var seq = cc.sequence(delayTime, spawnAction, callFunc);
        this.rotateCard.runAction(seq);
      },
      scaleRotateCard: function scaleRotateCard(dt) {
        this.scaleEffectsOfNode(this.rotateCard, 1.3, 1.3, 1, 1, .4, function() {});
        dt >= 1 && this.unschedule(this.scaleRotateCard);
      },
      scaleEffectsOfNode: function scaleEffectsOfNode(node, fromScaleX, fromScaleY, toScaleX, toScaleY, time, func) {
        var fromAction = cc.scaleTo(time, fromScaleX, fromScaleY);
        var toAction = cc.scaleTo(time, toScaleX, toScaleY);
        var callFunc = cc.callFunc(func, this);
        var seq = cc.sequence(callFunc, fromAction, toAction);
        node.runAction(seq);
      },
      easeCubicActionTimer: function easeCubicActionTimer(node) {
        node.opacity = node.opacity - 51;
      },
      easeCubicAction: function easeCubicAction(node) {
        var index = 0;
        var that = this;
        var timerCall = function timerCall() {
          index++;
          that.easeCubicActionTimer(node);
          if (index >= 5) {
            node.active = false;
            node.x = 0;
            node.y = 0;
            node.opacity = 255;
            that.unschedule(timerCall);
            sendEvent("runFlipAction");
          }
        };
        this.schedule(timerCall, .1);
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      hideAllReadyStatus: function hideAllReadyStatus() {
        cc.find("ready_hand_left", this.readyNode).active = false;
        cc.find("readying_left", this.readyNode).active = false;
        cc.find("ready_hand_right", this.readyNode).active = false;
        cc.find("readying_right", this.readyNode).active = false;
        cc.find("ready_hand_down", this.readyNode).active = false;
        cc.find("readying_down", this.readyNode).active = false;
      },
      onPrepareInfo: function onPrepareInfo(data) {
        this.hideAllReadyStatus();
        this.readyNode.active = true;
        this.hideTiChuai();
        for (var key in GameDataPDK.game.onRoomReadyInfo) if (true == GameDataPDK.game.onRoomReadyInfo[key]) {
          var tablePos = GameDataPDK.getPosByUid(key);
          this.showReadyIcon(tablePos, true, false);
        }
        this.onRoomReadyInfoHandler(data);
      },
      showPlayers: function showPlayers() {
        WriteLog("showPlayers");
        this.headers = [];
        var posList = [ "down", "right", "left" ];
        var play_layer_list = [ this.play_down_player, this.play_right_player, this.play_left_player ];
        play_layer_list.push(this.play_down_player);
        play_layer_list.push(this.play_right_player);
        play_layer_list.push(this.play_left_player);
        for (var index = 0; index < GameData.room.opts.joinermax; index++) this.showPlayer(posList[index], play_layer_list[index]);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.x = isCreator ? 107 : 6;
        this.connectRecurrence();
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {},
      showPlayer: function showPlayer(direction, parent) {
        WriteLog("showPlayer");
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          cc.log("playerNode:", playerNode);
          playerNode.getComponent("DDZ-playerTemplate").setPlayer(player);
          playerNode.getComponent("DDZ-playerTemplate").setName(player.name);
          playerNode.getComponent("DDZ-playerTemplate").setHeadIcon(player.headimgurl);
          playerNode.getComponent("DDZ-playerTemplate").setNamePositionByDir(direction);
          var score = 0;
          void 0 != GameDataPDK.roomsummaryData.score && (score = void 0 == GameDataPDK.roomsummaryData.score[player.uid] ? 0 : GameDataPDK.roomsummaryData.score[player.uid]);
          playerNode.getComponent("DDZ-playerTemplate").setCoin(score, 1);
          playerNode.getComponent("DDZ-playerTemplate").setIsPlayerIcon(false);
          playerNode.getComponent("DDZ-playerTemplate").showPlayerIdentity(false, 0);
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          playerNode.setTag(player.uid);
          2 == player.status && this.showReadyIcon(direction, false, false);
          var isOnLine = RoomHandler.isPlayerOnline(player.uid);
          var disHanderNode = cc.find("Disconnect", playerNode);
          var disNode = cc.find("lost_" + direction, this.lostNode);
          disNode.active = !isOnLine;
          disHanderNode.active = !isOnLine;
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      hideTiChuai: function hideTiChuai() {
        for (var index = 0; index < this.headers.length; index++) {
          var tiChuaiNode = cc.find("tiChuaiNode", this.headers[index]);
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          tiIcon.active = false;
          chuaiIcon.active = false;
        }
      },
      showPlayerTiChuai: function showPlayerTiChuai(parent, dizhuUid, uid) {
        var playerNode = parent.getChildByName("TablePlayerTemplate");
        var tiChuaiNode = cc.find("tiChuaiNode", playerNode);
        if (1 == GameDataPDK.kicking.kicking[uid] && uid != dizhuUid) {
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          tiIcon.active = true;
          parent == this.play_right_player && (tiIcon.x = -67);
        } else if (1 == GameDataPDK.kicking.kicking[uid] && uid == dizhuUid) {
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          chuaiIcon.active = true;
          parent == this.play_right_player && (chuaiIcon.x = -67);
        }
      },
      showKicking: function showKicking() {
        for (var key in GameDataPDK.kicking.kicking) {
          var pos = GameDataPDK.getPosByUid(key);
          "down" == pos ? this.showPlayerTiChuai(this.play_down_player, GameDataPDK.kicking.dizhu, key) : "right" == pos && this.showPlayerTiChuai(this.play_right_player, GameDataPDK.kicking.dizhu, key);
          "left" == pos && this.showPlayerTiChuai(this.play_left_player, GameDataPDK.kicking.dizhu, key);
        }
      },
      connectRecurrence: function connectRecurrence() {
        this.showKicking();
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        var posList = [ "down", "right", "left" ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) this.gotoShowReady(posList[index], data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] && false != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showPlayers();
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameDataPDK.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (connectInfo.uid != isReadyUid || 0 == connectInfo.uid) {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          }
        }
        cc.log("direction :" + direction + isDisconnect);
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      setRoomNum: function setRoomNum() {
        cc.log("setRoomNum: ", JSON.stringify(GameData.room));
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : PDKHandler.quitMjRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "跑得快 房间号:" + GameData.room.id;
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str = "玩法:";
        var costTypeArr = [ "房主付,", "AA制,", "赢家付,", "代开房付费,", "" ];
        str += costTypeArr[GameData.room.opts.costType - 1];
        1 == GameData.room.opts.passFlag ? str += "必须管," : 2 == GameData.room.opts.passFlag && (str += "可不管,");
        true == GameData.room.opts.zhuangType && (str += "红桃3先出,");
        str += "局数:" + GameData.room.opts.roundMax + ",";
        str += "人数:" + GameData.room.opts.joinermax;
        var str2 = ",请您快速加入对局.";
        var des = str + str2;
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("跑得快", "我在跑得快等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("跑得快", "我在跑得快等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyInviteKey: function onCopyInviteKey() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "跑得快,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      onCopyRoomInfo: function onCopyRoomInfo() {},
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        this.readyNode.active = !GameDataPDK.game.gameStart;
        this.hideAllReadyStatus();
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    "PDK-handler": "PDK-handler",
    SoundMngr: "SoundMngr",
    roomHandler: "roomHandler"
  } ],
  "PDK-roomtable": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "942f6hjUrJJuqwRCukXjWk6", "PDK-roomtable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var PDKHandler = require("PDK-handler");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        ruleLb: cc.Label,
        handCardLayOut: cc.Node,
        cardsNode: cc.Node,
        actionLayer: cc.Node,
        jiaofenNode: cc.Node,
        HoleCardsNode: cc.Node,
        clockNodes: cc.Node,
        buchuNodes: cc.Node,
        warningNode: cc.Node,
        multipleNode: cc.Node,
        _countdown_index: 0,
        _currClockNodes: cc.Node,
        lastRoundLabel: cc.Label,
        dragonAnimations: cc.Node,
        winAnimation: cc.Node,
        loseAnimation: cc.Node,
        planeNode: cc.Node,
        chuntianNode: cc.Node,
        bobmAinmation: cc.Node,
        huojianAinmation: cc.Node,
        _effcetFlag: false,
        maskNode: cc.Node,
        _currTime: null,
        dizhuSign: {
          default: null,
          type: cc.Prefab
        },
        tiBtnNode: {
          default: null,
          type: cc.Node
        },
        chuaiBtnNode: {
          default: null,
          type: cc.Node
        },
        chuaiIcon_right: {
          default: null,
          type: cc.Node
        },
        chuaiIcon_left: {
          default: null,
          type: cc.Node
        },
        tiIcon_right: {
          default: null,
          type: cc.Node
        },
        tiIcon_left: {
          default: null,
          type: cc.Node
        },
        passNode: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        WriteLog("PDK-roomtable onLoad");
        this.initData();
        this.initUI();
        this.registListenr();
        for (var key in this.handCardLayOut.children) this.defaultPokerY = this.handCardLayOut.children[key].y;
        if (GameDataPDK.game.initcards) {
          this.cardsNode.active = true;
          this._dealEnd = true;
          this.onShow();
        }
        if (GameDataPDK.game.gameStartZhuang) {
          this.showObtainNode();
          this.showDisPoker();
          this.showBuchuNode();
          this.reconneShowWarning();
        }
        this.connectRecurrence();
      },
      registListenr: function registListenr() {
        registEvent("onPrepareInfo", this, this.showRoomRule);
        registEvent("pdk-onGameInfo", this, this.onShow);
        registEvent("showFirstCard", this, this.showZhuangInfo);
        registEvent("pdk-initCardHands", this, this.onShow);
        registEvent("pdk-initCardHand", this, this.initCardHand);
        registEvent("pdk-initCardHandNum", this, this.showCardNum);
        registEvent("pdk-initCardHandNums", this, this.showCardNum);
        registEvent("pdk-onGameStart", this, this.handleGameStart);
        registEvent("pdk-onShowObtainNode", this, this.showObtainNode);
        registEvent("pdk-showDisPoker", this, this.showDisPoker);
        registEvent("initTableNode", this, this.initTableNode);
        registEvent("pdk-onGameScore", this, this.showWinNode);
        registEvent("pdk-cardWarning", this, this.showWarningNode);
        registEvent("pdk-onDiscardType", this, this.showDisCardType);
        registEvent("pdk-disPokerArry", this, this.setDisPokerArry);
        registEvent("pdk-passcb", this, this.playPassEffect);
        registEvent("pdk-hintCard", this, this.showHintCard);
        registEvent("pdk-hideCard", this, this.hidePlayerCard);
        registEvent("onShowSummary", this, this.stopClockMusic);
        registEvent("pdk-showWatch", this, this.showWatch);
        registEvent("pdk-reconnectionInfo", this, this.reconnectionInfo);
        registEvent("runFlipAction", this, this.runFlipAction);
        registEvent("initObtainNode", this, this.initObtainNode);
        registEvent("showDisBtnAndClook", this, this.showDisBtnAndClook);
        var self = this;
        this.maskNode.on(cc.Node.EventType.TOUCH_END, function() {
          self.DoubleClick();
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPrepareInfo", this, this.showRoomRule);
        unregistEvent("pdk-onGameInfo", this, this.onShow);
        unregistEvent("showFirstCard", this, this.showZhuangInfo);
        unregistEvent("pdk-initCardHands", this, this.onShow);
        unregistEvent("pdk-initCardHand", this, this.initCardHand);
        unregistEvent("pdk-initCardHandNum", this, this.showCardNum);
        unregistEvent("pdk-initCardHandNums", this, this.showCardNum);
        unregistEvent("pdk-onGameStart", this, this.handleGameStart);
        unregistEvent("pdk-onShowObtainNode", this, this.showObtainNode);
        unregistEvent("pdk-showDisPoker", this, this.showDisPoker);
        unregistEvent("initTableNode", this, this.initTableNode);
        unregistEvent("pdk-onGameScore", this, this.showWinNode);
        unregistEvent("pdk-cardWarning", this, this.showWarningNode);
        unregistEvent("pdk-onDiscardType", this, this.showDisCardType);
        unregistEvent("pdk-disPokerArry", this, this.setDisPokerArry);
        unregistEvent("pdk-passcb", this, this.playPassEffect);
        unregistEvent("pdk-hintCard", this, this.showHintCard);
        unregistEvent("pdk-hideCard", this, this.hidePlayerCard);
        unregistEvent("onShowSummary", this, this.stopClockMusic);
        unregistEvent("pdk-showWatch", this, this.showWatch);
        unregistEvent("pdk-reconnectionInfo", this, this.reconnectionInfo);
        unregistEvent("runFlipAction", this, this.runFlipAction);
        unregistEvent("initObtainNode", this, this.initObtainNode);
        unregistEvent("showDisBtnAndClook", this, this.showDisBtnAndClook);
        var self = this;
        this.maskNode.off(cc.Node.EventType.TOUCH_END, function() {
          self.DoubleClick();
        });
      },
      initData: function initData() {
        this.disCardArry = [];
        this.disPokerArry = [];
        this._dragonAnimtaionNum = 0;
        this._cardHandPosArr = [];
        this._angularArr = [];
        this._dealActionIndex = 0;
        this._flipActionIndex = 0;
        this._cardHand = [];
        this._dealEnd = false;
        this._kickingArr = [];
        this._buJiao = 1;
        this._passFlag = 0;
      },
      initUI: function initUI() {
        this.HoleCardsNode.active = true;
        this.cardsNode.active = false;
        this.jiaofenNode.active = false;
        this.ruleLb.string = this.getRuleStr();
        this.hideDisCards();
        this.changeMultiple(0);
        this.lastRoundLabel.string = "局数:" + GameData.room.roundNum + "/" + GameData.room.opts.roundMax;
      },
      initTableNode: function initTableNode() {
        var leftLastCardNode = cc.find("lastpokerNum", this.play_layer_left);
        var rightLastCardNode = cc.find("lastpokerNum", this.play_layer_right);
        this.hideNodeChild(leftLastCardNode);
        this.hideNodeChild(rightLastCardNode);
        this.hideDisCards();
        this.hideHandCards();
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        this.actionLayer.active = false;
        this.hideNodeChild(this.clockNodes);
        this.changeMultiple(0);
        GameDataPDK.game.zhuangUid = 0;
        this.chuntianNode.active = false;
        this.winAnimation.active = false;
        this.loseAnimation.active = false;
        this.planeNode.active = false;
        this.bobmAinmation.active = false;
        this.huojianAinmation.active = false;
        this.hideNodeChild(this.warningNode);
        this.hideNodeChild(this.buchuNodes);
        this.stopClockMusic();
      },
      showRoomRule: function showRoomRule() {
        this.ruleLb.string = this.getRuleStr();
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      handleGameStart: function handleGameStart() {
        GameDataPDK.clearObject(GameDataPDK.hideDisCard);
        GameDataPDK.clearObject(GameDataPDK.currObtainPlayerData);
        this.cardsNode.active = true;
        this.hideHoleCards();
      },
      initCardHand: function initCardHand() {
        GameDataPDK.getHandCardSize();
        cc.log("---------------------hand card size: ", GameDataPDK.handCardSize);
        GameDataPDK.getMyHandCards().length == GameDataPDK.handCardSize && true == GameDataPDK.deal && (this._firstInit = true);
        this.onShow();
      },
      initObtainNode: function initObtainNode() {
        var ObtainNode = cc.find("actions", this.cardsNode);
        this.hideNodeChild(ObtainNode);
      },
      onShow: function onShow() {
        WriteLog("onShow");
        var downHandCardNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in downHandCardNode.children) downHandCardNode.children[key].y = this.defaultPokerY;
        this.showCards();
        this.cardsNode.active = true;
        this.HoleCardsNode.active = true;
        this.lastRoundLabel.string = "局数:" + GameData.room.roundNum + "/" + GameData.room.opts.roundMax;
      },
      showCards: function showCards() {
        WriteLog("showCards");
        var player = GameData.getPlayerByPos("down");
        if (player && GameDataPDK.cards[player.uid]) {
          this._firstInit ? this.dealActionMngr() : this.showMyHandCards(player, this.play_layer_down);
          this.play_layer_down.active = true;
        } else this.play_layer_down.active = false;
      },
      showCardNum: function showCardNum() {
        var posList = [ "right", "left" ];
        var play_layer_list = [ this.play_layer_right, this.play_layer_left ];
        for (var index = 0; index < GameData.room.opts.joinermax - 1; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          if (player && GameDataPDK.cards[player.uid]) {
            this.showOtherHandCards(player, play_layer_list[index]);
            play_layer_list[index].active = true;
          } else play_layer_list[index].active = false;
        }
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        WriteLog("showMyHandCards");
        this.resetPokerPos();
        var cardHand = GameDataPDK.getMyHandCards();
        var cardsHandNode = cc.find("cardHand/handLayout", parent);
        for (var key in cardsHandNode.children) cardsHandNode.children[key].active = false;
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(cardHand.length / 2);
        for (var j = 0; j < cardHand.length; j++) {
          var node = cc.find("cardHand/handLayout/hand_" + (i + j), parent);
          node.active = true;
          this.showCardContent(node, cardHand[j]);
        }
      },
      showOtherHandCards: function showOtherHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardHand = GameDataPDK.getHandCardNum(uid);
          var handNumLb = cc.find("lastpokerNum/pokerNum", parent);
          handNumLb.active = true;
          handNumLb.getComponent(cc.Label).string = cardHand;
          var node = cc.find("cardHand/hand_0", parent);
          node.active = true;
        }
      },
      showCardContent: function showCardContent(cardNode, cardId) {
        if (0 == cardId) return;
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showPokerBack: function showPokerBack() {
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in cardsHandNode.children) {
          this.showCardContent(cardsHandNode.children[key], "back");
          cardsHandNode.children[key].active = false;
        }
      },
      showZhuangInfo: function showZhuangInfo() {
        var pos = GameDataPDK.getPosByUid(GameDataPDK.game.zhuangUid);
        if ("left" == pos) {
          var node = cc.find("firstCard", this.play_layer_left);
          node.active = true;
          this.scaleEffectsOfNode(node, 1.5, 1.5, 1, 1, .3, function() {});
        } else if ("right" == pos) {
          var node = cc.find("firstCard", this.play_layer_right);
          node.active = true;
          this.scaleEffectsOfNode(node, 1.5, 1.5, 1, 1, .3, function() {});
        }
      },
      hideFirstCardNode: function hideFirstCardNode(parent) {
        if (parent == this.play_layer_down) return;
        var node = cc.find("firstCard", parent);
        node.active = false;
      },
      scaleEffectsOfNode: function scaleEffectsOfNode(node, fromScaleX, fromScaleY, toScaleX, toScaleY, time, func) {
        var fromAction = cc.scaleTo(time, fromScaleX, fromScaleY);
        var toAction = cc.scaleTo(time, toScaleX, toScaleY);
        var callFunc = cc.callFunc(func, this);
        var seq = cc.sequence(callFunc, fromAction, toAction);
        node.runAction(seq);
      },
      dealActionMngr: function dealActionMngr() {
        this._firstInit = false;
        this._cardHandPosArr.splice(0, this._cardHandPosArr.length);
        this._angularArr.splice(0, this._angularArr.length);
        this._dealActionIndex = 0;
        this._flipActionIndex = 0;
        var point = cc.director.getWinSize();
        var midpoint = {
          x: point.width / 2,
          y: point.height
        };
        this._cardHand = GameDataPDK.getMyHandCards();
        var cardHand = GameDataPDK.getMyHandCards();
        this.showPokerBack();
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(cardHand.length / 2);
        this.schedule(this.dealAction, .01);
      },
      dealAction: function dealAction() {
        sendEvent("initObtainNode");
        var handCard_len = GameDataPDK.getMyHandCards().length;
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(handCard_len / 2);
        var cardNode = cc.find("cardHand/handLayout/hand_" + (i + this._dealActionIndex), this.play_layer_down);
        this.removeDizhuSign(cardNode);
        cardNode.active = true;
        cardNode.ratationY = 180;
        this._dealActionIndex++;
        if (this._dealActionIndex >= handCard_len) {
          var that = this;
          this.unschedule(this.dealAction);
          true == GameData.room.opts.zhuangType ? sendEvent("rotateAction") : false == GameData.room.opts.zhuangType && sendEvent("runFlipAction");
        }
      },
      runFlipAction: function runFlipAction() {
        var self = this;
        self.schedule(this.flipAction, .02);
      },
      flipAction: function flipAction() {
        var handCard_len = GameDataPDK.getMyHandCards().length;
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(handCard_len / 2);
        var cardNode = cc.find("cardHand/handLayout/hand_" + (i + this._flipActionIndex), this.play_layer_down);
        cardNode.active = true;
        var rotateTo = cc.rotateTo(.01, 0, 0);
        var that = this;
        var index = this._flipActionIndex;
        var callFunc = cc.callFunc(function() {
          that.removeDizhuSign(cardNode);
          that.showCardContent(cardNode, that._cardHand[index]);
        }, this);
        var seq = cc.sequence(rotateTo, callFunc);
        cardNode.runAction(seq);
        this._flipActionIndex++;
        if (this._flipActionIndex >= handCard_len) {
          this.unschedule(this.flipAction);
          that._dealEnd = true;
          sendEvent("showDisBtnAndClook");
        }
      },
      angularByCoord: function angularByCoord(coord1, coord2) {
        var pi = 3.14159;
        var radian;
        var x = Math.abs(coord1.x) - Math.abs(coord2.x);
        var y = Math.abs(coord1.y) - Math.abs(coord2.y);
        radian = Math.atan(Math.abs(y) / Math.abs(x));
        return coord1.x < coord2.x ? 90 - radian / pi * 180 : radian / pi * 180;
      },
      showWatch: function showWatch() {
        this.stopClockMusic();
        for (var index = 0; index < GameDataPDK.currtiChuaiPlayerData.length; index++) this.showClock(GameDataPDK.currtiChuaiPlayerData[index]);
      },
      reconnectionInfo: function reconnectionInfo() {
        this._dealEnd = true;
      },
      hideHoleCards: function hideHoleCards() {
        var HoleCardsNode = cc.find("cards", this.HoleCardsNode);
        for (var key in HoleCardsNode.children) this.showHoleCardContent(HoleCardsNode.children[key], "back");
      },
      showHoleCardContent: function showHoleCardContent(cardNode, cardId) {
        cc.log("cardNode,cardId:" + cardNode, cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showDisBtnAndClook: function showDisBtnAndClook() {
        var disBtn = cc.find("actions/btnDisCard", this.cardsNode);
        disBtn.active = true;
        var uid = GameDataPDK.currObtainPlayerData.uid;
        this.showClocks(uid);
      },
      showObtainNode: function showObtainNode() {
        WriteLog("PDK-roomtable showObtainNode");
        this.disCardArry = [];
        var uid = GameDataPDK.currObtainPlayerData.uid;
        var isPass = GameDataPDK.currObtainPlayerData.flag;
        var hintFlag = GameDataPDK.currObtainPlayerData.hintFlag;
        this._effcetFlag = isPass;
        var ObtainNode = cc.find("actions", this.cardsNode);
        var passBtn = cc.find("actions/btnPass", this.cardsNode);
        var hintBtn = cc.find("actions/btnTishi", this.cardsNode);
        var disBtn = cc.find("actions/btnDisCard", this.cardsNode);
        if (GameData.player.uid == uid) {
          ObtainNode.active = true;
          if (isPass) {
            1 == GameData.room.opts.passFlag ? passBtn.active = false : 2 == GameData.room.opts.passFlag && (passBtn.active = true);
            hintBtn.active = true;
            if (hintFlag) if (GameDataPDK.currObtainPlayerData.endCardFlag) {
              passBtn.active = false;
              hintBtn.active = false;
              disBtn.active = false;
              this.disEndCard();
            } else this.onHintClick(); else {
              ObtainNode.active = false;
              this._passFlag = 1;
              this.passNode.active = true;
              var that = this;
              this.scheduleOnce(function() {
                that.easeCubicAction(that.passNode);
              }, 2);
              this.scheduleOnce(function() {
                that.onPassCardClick();
              }, 1);
            }
          } else {
            passBtn.active = false;
            hintBtn.active = false;
            true == this._dealEnd && (disBtn.active = true);
            if (GameDataPDK.currObtainPlayerData.endCardFlag) {
              disBtn.active = false;
              this.disEndCard();
            }
          }
        } else {
          hintFlag || (this._passFlag = 1);
          ObtainNode.active = false;
        }
        this.stopClockMusic();
        true == this._dealEnd && this.showClocks(uid);
        var pos = GameData.tablePos[uid];
        cc.log("pos :" + pos);
        var dispokerNode;
        switch (pos) {
         case "down":
          dispokerNode = cc.find("layer_down/cardDis", this.cardsNode);
          break;

         case "right":
          dispokerNode = cc.find("layer_right/cardDis", this.cardsNode);
          break;

         case "left":
          dispokerNode = cc.find("layer_left/cardDis", this.cardsNode);
          break;

         case "up":
          dispokerNode = cc.find("layer_up/cardDis", this.cardsNode);
        }
        void 0 != dispokerNode && this.hideNodeChild(dispokerNode);
      },
      disEndCard: function disEndCard() {
        var cardHand = GameDataPDK.getMyHandCards();
        for (var index = 0; index < cardHand.length; index++) {
          var cardId = cardHand[index];
          this.disCardArry.push(cardId);
        }
        var data = {
          detail: {
            cards: this.disCardArry,
            uid: 0
          }
        };
        this.showHintCard(data);
        this.scheduleOnce(function() {
          PDKHandler.requestOnDisCard(this.disCardArry, function() {});
        }, 1);
      },
      hidePlayerCard: function hidePlayerCard(data) {
        var uid = data.detail.uid;
        var pos = GameDataPDK.getPosByUid(uid);
        var dispokerNode;
        pos && (dispokerNode = cc.find("layer_" + pos + "/cardDis", this.cardsNode));
        void 0 != dispokerNode && this.hideNodeChild(dispokerNode);
      },
      hidePassNode: function hidePassNode(pos) {
        var show = false;
        switch (pos) {
         case "down":
          var node = cc.find("buchuLb0", this.buchuNodes);
          node.active = show;
          break;

         case "right":
          var node = cc.find("buchuLb1", this.buchuNodes);
          node.active = show;
          break;

         case "left":
          var node = cc.find("buchuLb2", this.buchuNodes);
          node.active = show;
        }
      },
      onDisCardClick: function onDisCardClick() {
        var cardsNode = cc.find("cardHand/handLayout", this.play_layer_down);
        this.disCardArry.splice(0, this.disCardArry.length);
        for (var key in this.disPokerArry) {
          var cardId = this.disPokerArry[key].getComponent("Card").id;
          cc.log("cardId " + cardId);
          this.disCardArry.push(cardId);
        }
        PDKHandler.requestOnDisCard(this.disCardArry, function() {});
        cc.log("disCardArry: ", this.disCardArry);
        cc.log("disPokerArry: ", this.disPokerArry);
        var i = 0;
        for (var key in cardsNode.children) cardsNode.children[key].y == this.defaultPokerY && i++;
        i > 0 && 0 == this.disCardArry.length && createMoveMessage("请选择要出的牌!");
      },
      onPassCardClick: function onPassCardClick() {
        var ObtainNode = cc.find("actions", this.cardsNode);
        ObtainNode.active = false;
        var errorCode = require("errorCode");
        PDKHandler.requestOnPassCard(function(rtn) {
          rtn.result != errorCode.Success && (ObtainNode.active = true);
        });
        this.resetPokerPos();
      },
      onHintClick: function onHintClick() {
        PDKHandler.requestOnHintCard(function(data) {});
      },
      playPassEffect: function playPassEffect(data) {
        var uid = data.detail.uid;
        var playerSex = GameData.getPlayerSexByUid(uid);
        soundMngr.instance.playOtherAudioPoker("pdk-buyao", playerSex);
        this.showBuchuNode();
      },
      showBuchuNode: function showBuchuNode() {
        var posList = [ "down", "right", "left" ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          var cards = GameDataPDK.getDisPoker(player.uid);
          var parent;
          parent = (1 == this._passFlag, cc.find("yaobuqi" + index, this.buchuNodes));
          this.showbuchuStr(player, parent, cards);
        }
      },
      showbuchuStr: function showbuchuStr(player, node, cards) {
        if (void 0 == cards) return;
        if (0 == cards[0]) {
          node.active = true;
          var that = this;
          this.scheduleOnce(function() {
            that.easeCubicAction(node);
          }, 2);
        } else 0 == cards.length && (node.active = false);
      },
      easeCubicActionTimer: function easeCubicActionTimer(node) {
        node.opacity = node.opacity - 51;
      },
      easeCubicAction: function easeCubicAction(node) {
        var index = 0;
        var that = this;
        var timerCall = function timerCall() {
          index++;
          that.easeCubicActionTimer(node);
          if (index >= 5) {
            node.active = false;
            node.opacity = 255;
            that.unschedule(timerCall);
          }
        };
        this.schedule(timerCall, .1);
      },
      showDisPoker: function showDisPoker() {
        var posList = [ "down", "right", "left" ];
        var play_layer_list = [ this.play_layer_down, this.play_layer_right, this.play_layer_left ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          var cards = GameDataPDK.getDisPoker(player.uid);
          if (player && GameDataPDK.cards[player.uid]) {
            play_layer_list[index].active = true;
            this.showPokerCards(player, play_layer_list[index], cards);
          } else play_layer_list[index].active = false;
        }
        this.hideDisPoker();
        this.changeMultiple(GameDataPDK.boomNum);
      },
      hideDisPoker: function hideDisPoker() {
        var disCardNode;
        if (!GameDataPDK.isEmptyObject(GameDataPDK.hideDisCard)) {
          var pos = GameDataPDK.getPosByUid(GameDataPDK.hideDisCard.uid);
          switch (pos) {
           case "down":
            disCardNode = cc.find("cardDis", this.play_layer_down);
            break;

           case "right":
            disCardNode = cc.find("cardDis", this.play_layer_right);
            break;

           case "left":
            disCardNode = cc.find("cardDis", this.play_layer_left);
          }
          this.hideNodeChild(disCardNode);
        }
      },
      showPokerCards: function showPokerCards(player, parent, cards) {
        var uid = GameDataPDK.currObtainPlayerData.uid;
        var cardNode = cc.find("cardDis", parent);
        if (void 0 == cards) return;
        this.hideNodeChild(cardNode);
        this.hideFirstCardNode(parent);
        if (parent == this.play_layer_down) {
          var i = Math.ceil(cardNode.childrenCount / 2) - Math.ceil(cards.length / 2);
          for (var j = 0; j < cards.length; j++) {
            var node = cc.find("dis_" + (i + j), cardNode);
            0 == cards[0] ? node.active = false : node.active = true;
            this.showCardContent(node, cards[j]);
          }
        } else for (var k = 0; k < cards.length; k++) {
          var node = cc.find("dis_" + k, cardNode);
          0 == cards[0] ? node.active = false : node.active = true;
          this.showCardContent(node, cards[k]);
        }
      },
      showClocks: function showClocks(uid) {
        if (void 0 == uid) return;
        var posList = [ "down", "right", "left" ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          var clockNodes = cc.find("cloock" + index, this.clockNodes);
          this.showClockContent(player, clockNodes, uid);
        }
      },
      showClock: function showClock(uid) {
        if (void 0 == uid) return;
        var player = GameData.getPlayerByPos("down");
        var clockNodes = cc.find("cloock0", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
      },
      showClockContent: function showClockContent(player, parent, uid) {
        if (player.uid == uid) {
          parent.active = true;
          this.PLayerUID = uid;
          this._currClockNodes = parent;
          this.startCoundDown();
        }
      },
      startCoundDown: function startCoundDown() {
        this._countdown_index = 14;
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "", this._currClockNodes);
        if (this._countdown_index <= 0) {
          cc.log("结束");
          this._countdown_index = 15;
        } else {
          var action1 = cc.blink(.5, 3);
          if (3 == this._countdown_index && this.PLayerUID == GameData.player.uid) {
            this._currClockNodes.runAction(action1);
            soundMngr.instance.playAudioOther("countdown");
          }
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num, cloockNode) {
        var timeStr = num;
        var timeLabel = cc.find("timeLb", cloockNode);
        num < 10 && (timeStr = "0" + num);
        timeLabel.getComponent(cc.Label).string = timeStr;
      },
      hideDisCards: function hideDisCards() {
        var downDisCardNode = cc.find("cardDis", this.play_layer_down);
        var leftDisCardNode = cc.find("cardDis", this.play_layer_left);
        var rightDisCardNode = cc.find("cardDis", this.play_layer_right);
        this.hideNodeChild(downDisCardNode);
        this.hideNodeChild(leftDisCardNode);
        this.hideNodeChild(rightDisCardNode);
      },
      hideHandCards: function hideHandCards() {
        var downHandCardNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var leftHandCardNode = cc.find("cardHand", this.play_layer_left);
        var rightHandCardNode = cc.find("cardHand", this.play_layer_right);
        this.hideNodeChild(downHandCardNode);
        this.hideNodeChild(leftHandCardNode);
        this.hideNodeChild(rightHandCardNode);
      },
      showWinNode: function showWinNode(data) {
        WriteLog("showWinNode");
        var uid = data.detail.winner;
        this._dealEnd = false;
        this._kickingArr.splice(0, this._kickingArr.length);
        this.passNode.active = false;
        this.resetPokerPos();
        this.stopClockMusic();
        this.hideNodeChild(this.warningNode);
        this.hideNodeChild(this.buchuNodes);
        this.actionLayer.active = false;
        sendEvent("HideReadyNode");
        var myScore = GameDataPDK.resultData.score[GameData.player.uid];
        uid == GameData.player.uid ? soundMngr.instance.playOtherAudioPoker("shengli", null) : uid != GameData.player.uid && soundMngr.instance.playOtherAudioPoker("shibai", null);
        var posList = [ "down", "right", "left" ];
        var play_layer_list = [ this.play_layer_down, this.play_layer_right, this.play_layer_left ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          if (player && GameDataPDK.cards[player.uid]) {
            play_layer_list[index].active = true;
            this.showWinnerIcon(player, data);
          } else play_layer_list[index].active = false;
        }
      },
      showWinnerIcon: function showWinnerIcon(player, data) {
        var uid = data.detail.winner;
        var ischuntian = data.detail.chuntian;
        var chuntianTime = 0;
        if (ischuntian) {
          chuntianTime = 2;
          this.scheduleOnce(function() {
            this.chuntianNode.active = true;
            var chuntianAnimation = this.chuntianNode.getComponent(dragonBones.ArmatureDisplay);
            chuntianAnimation.playAnimation("newAnimation", 1);
            soundMngr.instance.playOtherAudioPoker("chuntian", null);
          }, 1.5 * this._dragonAnimtaionNum);
          this.scheduleOnce(function() {
            this.chuntianNode.active = false;
          }, 1.5 * this._dragonAnimtaionNum + 2);
        }
        var myScore = GameDataPDK.resultData.score[GameData.player.uid];
        if (uid == GameData.player.uid) {
          var self = this;
          this.scheduleOnce(function() {
            this.winAnimation.active = true;
            var anim = this.winAnimation.getComponent(dragonBones.ArmatureDisplay);
            anim.playAnimation("newAnimation", 1);
          }, chuntianTime + 1.5 * this._dragonAnimtaionNum);
          this.scheduleOnce(function() {
            self.winAnimation.active = false;
          }, 4.5 + 1.5 * this._dragonAnimtaionNum);
        } else uid != GameData.player.uid && this.scheduleOnce(function() {
          this.loseAnimation.active = true;
          var anim = this.loseAnimation.getComponent(dragonBones.ArmatureDisplay);
          anim.playAnimation("newAnimation", 1);
        }, chuntianTime + 1.5 * this._dragonAnimtaionNum);
        var AnimationDelayTime = 3 * this._dragonAnimtaionNum + 2 + chuntianTime;
        sendEvent("AnimationDelayTime", AnimationDelayTime);
      },
      getJiaofenImg: function getJiaofenImg(num) {
        var img = "";
        switch (parseInt(num)) {
         case 1:
          img = "resources/ddz/UI/common/artword/artword_1fen.png";
          break;

         case 2:
          img = "resources/ddz/UI/common/artword/artword_2fen.png";
          break;

         case 3:
          img = "resources/ddz/UI/common/artword/artword_3fen.png";
          break;

         case 4:
          img = "resources/ddz/UI/common/artword/artword_bujiao.png";
        }
        return img;
      },
      showWarningNode: function showWarningNode(data) {
        var posList = [ "down", "right", "left" ];
        var play_layer_list = [ this.play_layer_down, this.play_layer_right, this.play_layer_left ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          var warningNode = cc.find("warning" + index, this.warningNode);
          var lastCardNode = null;
          index >= 1 && (lastCardNode = cc.find("lastCard" + index, this.warningNode));
          if (player && GameDataPDK.cards[player.uid]) {
            this.showWarningContent(player, warningNode, data, lastCardNode);
            play_layer_list[index] = true;
          } else play_layer_list[index] = false;
        }
      },
      showWarningContent: function showWarningContent(player, node, data, lastCardNode) {
        var uid = data.detail.uid;
        var playerSex = GameData.getPlayerSexByUid(uid);
        var baodanNum = data.detail.baodan;
        null != lastCardNode && uid == player.uid && (lastCardNode.active = true);
        this.scheduleOnce(function() {
          soundMngr.instance.playOtherAudioPoker("baojing" + baodanNum, playerSex);
        }, 1);
        if (uid == player.uid) {
          node.active = true;
          var anima = node.getComponent(cc.Animation);
          anima.play("warningAnimation");
        }
      },
      reconneShowWarning: function reconneShowWarning() {
        var posList = [ "down", "right", "left" ];
        var play_layer_list = [ this.play_layer_down, this.play_layer_right, this.play_layer_left ];
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = GameData.getPlayerByPos(posList[index]);
          var warningNode = cc.find("warning" + index, this.warningNode);
          var lastCardNode = null;
          index >= 1 && (lastCardNode = cc.find("lastCard" + index, this.warningNode));
          if (player && GameDataPDK.cards[player.uid]) {
            this.reconneShowWarningContent(player, warningNode, lastCardNode);
            play_layer_list[index] = true;
          } else play_layer_list[index] = false;
        }
      },
      reconneShowWarningContent: function reconneShowWarningContent(player, node, lastCardNode) {
        var cardNum = GameDataPDK.getHandCardNum(player.uid);
        if (cardNum <= 2 && cardNum > 0) {
          node.active = true;
          null != lastCardNode && (lastCardNode.active = true);
          var anima = node.getComponent(cc.Animation);
          anima.play("warningAnimation");
        } else {
          node.active = false;
          null != lastCardNode && (lastCardNode.active = false);
        }
      },
      hideWarningNode: function hideWarningNode(uid) {
        var warningNode;
        var lastCardNode = null;
        var cardNum = GameDataPDK.getHandCardNum(uid);
        var pos = GameDataPDK.getPosByUid(uid);
        switch (pos) {
         case "down":
          warningNode = cc.find("warning0", this.warningNode);
          break;

         case "right":
          warningNode = cc.find("warning1", this.warningNode);
          lastCardNode = cc.find("lastCard1", this.warningNode);
          break;

         case "left":
          warningNode = cc.find("warning2", this.warningNode);
          lastCardNode = cc.find("lastCard2", this.warningNode);
        }
        if (0 == cardNum) {
          warningNode.active = false;
          null != lastCardNode && (lastCardNode.active = false);
        }
      },
      showDisCardType: function showDisCardType(data) {
        var DiscardType = data.detail.type;
        var multiple = data.detail.multiple;
        this.hideWarningNode(data.detail.uid);
        this._dragonAnimtaionNum = 0;
        var playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        soundMngr.instance.playAudioPokerDisType(data, playerSex, this._effcetFlag);
        soundMngr.instance.playOtherAudioPoker("discard", null);
        if ("aircraft" == DiscardType.substring(0, DiscardType.length - 1) || "aircraft" == DiscardType || "tribletraights" == DiscardType) {
          soundMngr.instance.playOtherAudioPoker("plane", null);
          this.planeNode.active = true;
          this._dragonAnimtaionNum++;
          this.DDZplayAnimation(this.planeNode, 1.5);
        }
        if ("bomb" == DiscardType) {
          this._dragonAnimtaionNum++;
          soundMngr.instance.playOtherAudioPoker("bomb", null);
          this.DDZplayAnimation(this.bobmAinmation, 2);
        }
        if ("jokerBomb" == DiscardType) {
          this._dragonAnimtaionNum++;
          soundMngr.instance.playOtherAudioPoker("bomb", null);
          this.DDZplayAnimation(this.huojianAinmation, 1.7);
        }
      },
      changeMultiple: function changeMultiple(num) {
        if (void 0 == num) return;
        var multipleNum = cc.find("multipleNum", this.multipleNode);
        this.showNodeChild(this.multipleNode);
        multipleNum.getComponent(cc.Label).string = "X" + num;
      },
      showNodeChild: function showNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = true;
      },
      setDisPokerArry: function setDisPokerArry(data) {
        var pokerArry = data.detail;
        this.disPokerArry = [];
        cc.log("pokerArry:" + pokerArry);
        for (var i = 0; i < pokerArry.length; i++) {
          var pokerName = pokerArry[i];
          for (var key in this.handCardLayOut.children) pokerName == this.handCardLayOut.children[key].name && true == this.handCardLayOut.children[key].active && this.disPokerArry.push(this.handCardLayOut.children[key]);
        }
      },
      DDZplayAnimation: function DDZplayAnimation(animNode, delaytime) {
        animNode.active = true;
        var anima = animNode.getComponent(dragonBones.ArmatureDisplay);
        anima.playAnimation("newAnimation", 1);
        this.scheduleOnce(function() {
          animNode.active = false;
        }, delaytime);
      },
      resetPokerPos: function resetPokerPos() {
        var cardsNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in cardsNode.children) cardsNode.children[key].y = this.defaultPokerY;
        this.disPokerArry.splice(0, this.disPokerArry.length);
      },
      DoubleClick: function DoubleClick() {
        var time = new Date().getTime();
        if (time - this._currTime < 500) {
          this.resetPokerPos();
          this.disPokerArry = [];
        }
        this._currTime = time;
      },
      showHintCard: function showHintCard(data) {
        var cards = data.detail.cards;
        var uid = data.detail.uid;
        this.disPokerArry = [];
        var downHandCardNode = cc.find("layer_down/cardHand/handLayout", this.cardsNode);
        for (var key in downHandCardNode.children) downHandCardNode.children[key].y = this.defaultPokerY;
        for (var key in downHandCardNode.children) {
          var card = downHandCardNode.children[key].getComponent("Card");
          for (var i = 0; i < cards.length; i++) if (card.id == cards[i] && true == downHandCardNode.children[key].active) {
            downHandCardNode.children[key].y += 30;
            this.disPokerArry.push(downHandCardNode.children[key]);
          }
        }
      },
      stopClockMusic: function stopClockMusic() {
        this.unschedule(this.runCountDown);
        this.hideNodeChild(this.clockNodes);
      },
      getRuleStr: function getRuleStr() {
        if (GameData.room.opts) return getRuleStrPDK(GameData.room.opts);
      },
      addDizhuSign: function addDizhuSign(node, type) {
        var dizhuSign = cc.instantiate(this.dizhuSign);
        "dis" == type && dizhuSign.setPosition(cc.p(-40, 45));
        node.addChild(dizhuSign);
      },
      removeDizhuSign: function removeDizhuSign(node) {
        node.removeAllChildren(true);
      },
      connectRecurrence: function connectRecurrence() {
        if (false == GameData.room.opts.zhuangType) return;
        GameDataPDK.getHandCardSize();
        GameDataPDK.game.zhuangUid == GameData.player.uid ? GameDataPDK.getHandCards(GameDataPDK.game.zhuangUid).length == GameDataPDK.handCardSizeMax && sendEvent("showFirstCard") : GameDataPDK.getHandCardNum(GameDataPDK.game.zhuangUid) == GameDataPDK.handCardSizeMax && sendEvent("showFirstCard");
        this.changeMultiple(GameDataPDK.boomNum);
      },
      onTiBtnChecked: function onTiBtnChecked(evt, customEventData) {
        this.tiBtnNode.active = false;
        this.stopClockMusic();
        PDKHandler.requestTiChuai(customEventData, function(rtn) {
          cc.log("tiBtn rtn: ", rtn);
        });
      },
      onChuaiBtnChecked: function onChuaiBtnChecked(evt, customEventData) {
        this.chuaiBtnNode.active = false;
        this.stopClockMusic();
        PDKHandler.requestTiChuai(customEventData, function(rtn) {
          cc.log("chuaiBtn rtn: ", rtn);
        });
      }
    });
    cc._RF.pop();
  }, {
    "PDK-handler": "PDK-handler",
    SoundMngr: "SoundMngr",
    errorCode: "errorCode"
  } ],
  PengCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a618sHIZ9Ar4Vv2+PDNQN1", "PengCard");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        faces: {
          default: [],
          type: [ cc.Sprite ]
        },
        body4: cc.Node,
        huierTemplate: cc.Node,
        angangBody: cc.Node,
        _cardRef: null,
        _huierNodes: [],
        _currentCards: [],
        direction: "right"
      },
      onLoad: function onLoad() {
        this.initHUierUI();
      },
      initHUierUI: function initHUierUI() {
        if (null == this.huierTemplate) return;
        for (var i = 0; i < 4; i++) {
          var huierNode = cc.instantiate(this.huierTemplate);
          var faceSprite = this.faces[i];
          if (null != faceSprite) {
            huierNode.parent = this.faces[i].node.parent;
            this._huierNodes.push(huierNode);
          }
        }
        this.huierTemplate.destroy();
      },
      peng: function peng(cards) {
        this._currentCards = cards;
        this.angangBody.active = false;
        this.body4.active = false;
        this.showFace(cards);
      },
      chi: function chi(cards) {
        this._currentCards = cards;
        this.angangBody.active = false;
        this.body4.active = false;
        this.showFace(cards);
      },
      gang: function gang(cards) {
        this._currentCards = cards;
        null != this.angangBody && (this.angangBody.active = false);
        this.body4.active = true;
        this.showFace(cards);
      },
      angang: function angang(cards) {
        this._currentCards = cards;
        null != this.angangBody && (this.angangBody.active = true);
        this.body4.active = false;
        this.showFace(cards);
      },
      showFace: function showFace(cards) {
        for (var i = 0; i < this.faces.length; i++) {
          var faceSprite = this.faces[i];
          if (null != faceSprite && i < cards.length) {
            var cardId = cards[i];
            var huierNode = this._huierNodes[i];
            if (null != huierNode) {
              var y = ReplayDataCenter.isHuier(cardId);
              huierNode.active = y;
            }
            this.showCardContent(faceSprite.node, this.getHeader(), cardId);
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      getHeader: function getHeader() {
        var cardHeader = "";
        cardHeader = "left" == this.direction ? "mj_face_zuo_chu" : "right" == this.direction ? "mj_face_you_chu" : "up" == this.direction ? "mj_face_shang_shou" : "mj_face_xia_chu";
        return cardHeader;
      },
      getCardRef: function getCardRef() {
        null == this._cardRef && (this._cardRef = this.node.getComponent("CardRef"));
        return this._cardRef;
      },
      hasCard: function hasCard(cardId) {
        if (null == this._currentCards) return false;
        for (var i = 0; i < this._currentCards.length; i++) {
          var cId = this._currentCards[i];
          var b = ReplayDataCenter.isHuier(cId);
          if (true == b) continue;
          if (cardId == cId) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {} ],
  PlayIntroPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cd49gD1MBFn6mRoDG/V8DJ", "PlayIntroPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        tabBtns: {
          default: [],
          type: [ cc.Node ]
        },
        targetPos: {
          default: [],
          type: [ cc.Node ]
        },
        scrollView: cc.ScrollView,
        content: cc.Node,
        _originalY: 0,
        richText1: cc.Node,
        richText2: cc.Node,
        richText3: cc.Node,
        richText4: cc.Node
      },
      onLoad: function onLoad() {
        this._originalY = this.content.y;
      },
      onEnable: function onEnable() {
        this.refreshUI();
        this.gotoContent(1);
        gameDefine.ruleType.isRuleType && this.gotoRuleContent();
      },
      clickTabHandler: function clickTabHandler(evt) {
        soundMngr.instance.playAudioOther("button");
        this.gotoContent(evt.target.name.split("_")[1]);
      },
      gotoContent: function gotoContent(index) {
        for (var i = 0; i < this.tabBtns.length; i++) {
          var btnNode = this.tabBtns[i];
          var btn = btnNode.getComponent(cc.Button);
          var tname = "btn_" + index;
          btnNode.name == tname ? btn.interactable = false : btn.interactable = true;
        }
        this.scrollView.scrollToOffset(cc.p(0, -this.targetPos[index - 1].y), .1);
      },
      gotoRuleContent: function gotoRuleContent() {
        for (var i = 0; i < this.tabBtns.length; i++) {
          var btnNode = this.tabBtns[i];
          var btn = btnNode.getComponent(cc.Button);
          var tname = "btn_" + gameDefine.ruleType.type;
          btnNode.name == tname ? btn.interactable = false : btn.interactable = true;
        }
        this.scrollView.scrollToOffset(cc.p(0, -this.targetPos[gameDefine.ruleType.type - 1].y + gameDefine.ruleType.py), .1);
      },
      refreshUI: function refreshUI() {
        var bool = true;
        console.log("bool " + bool);
        this.richText1.active = bool;
        this.richText2.active = bool;
        this.richText3.active = bool;
        this.richText4.active = bool;
      },
      onClose: function onClose(evt) {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
        gameDefine.ruleType.isRuleType = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  PosterItemPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8229bumSEpEjoelaO3gC/ir", "PosterItemPrefab");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      setImg: function setImg(img) {
        if (img) {
          var iconUrl = "resources/zjh/UI/artword/artword_" + img + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  PosterPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9932OO4Y5EZKNdrzGL/Gyn", "PosterPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pageView: cc.PageView,
        pageItem: cc.Node,
        pageFlag: cc.Node,
        pageFlagItem: cc.Node
      },
      onLoad: function onLoad() {
        this.limit_time = 0;
        this.posterData = configMgr.getPoster();
        if (void 0 == this.posterData || this.posterData.length <= 0) return;
        this.pageContent = this.pageView.content;
        this.pageContent.width = this.posterData.length * this.pageItem.width;
        this.initPageContent();
      },
      update: function update(dt) {
        var sum = this.pageView.getPages().length;
        if (sum <= 1) return;
        this.limit_time += dt;
        if (this.limit_time > 3) {
          this.limit_time = 0;
          this.changeCurPageIndex();
          this.updatePageFlag();
        }
        this.updatePageFlag();
      },
      initPageContent: function initPageContent() {
        this.pageView.removeAllPages();
        this.pageContent.removeAllChildren();
        for (var key = 0; key < this.posterData.length; key++) {
          var url = this.posterData[key];
          if (url.length <= 0) continue;
          var webNode;
          webNode = 0 == key ? this.pageItem : cc.instantiate(this.pageItem);
          this.pageView.addPage(webNode);
          webNode.position = cc.p(this.pageItem.x + key * this.pageItem.width, this.pageItem.y);
          var sprite = webNode.getChildByName("sprite");
          this.loadImage(url, sprite);
        }
        this.initPageFlag();
        var sum = this.pageView.getPages().length;
        sum <= 1 && (this.pageView.elastic = false);
      },
      loadImage: function loadImage(url, sprite) {
        var texture = cc.textureCache.addImage(cc.url.raw(url));
        sprite.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
      },
      initPageFlag: function initPageFlag() {
        this.pageFlag.removeAllChildren();
        var sum = this.pageView.getPages().length;
        var interval = 30;
        var init_x = 0;
        init_x = sum % 2 > 0 ? -(parseInt(sum / 2) * this.pageFlagItem.width + parseInt(sum / 2) * interval + this.pageFlagItem.width / 2) : -(parseInt(sum / 2) * this.pageFlagItem.width + (parseInt(sum / 2) - 1) * interval + interval / 2);
        for (var key = 0; key < sum; key++) {
          var flagItem;
          flagItem = 0 == key ? this.pageFlagItem : cc.instantiate(this.pageFlagItem);
          flagItem.name = "falgItem_" + key;
          this.pageFlag.addChild(flagItem);
          flagItem.position = cc.p(init_x + key * (this.pageFlagItem.width + interval), this.pageFlagItem.y);
        }
        this.updatePageFlag();
      },
      changeCurPageIndex: function changeCurPageIndex() {
        var index = this.pageView.getCurrentPageIndex() + 1;
        index + 1 > this.pageView.getPages().length && (index = 0);
        this.pageView.setCurrentPageIndex(index);
      },
      updatePageFlag: function updatePageFlag() {
        for (var key = 0; key < this.pageFlag.getChildrenCount(); key++) {
          var node = this.pageFlag.getChildren()[key];
          var click = node.getChildByName("click");
          click.active = false;
        }
        var index = this.pageView.getCurrentPageIndex();
        var name = "falgItem_" + index;
        var flagNode = this.pageFlag.getChildByName(name);
        flagNode.getChildByName("click").active = true;
      },
      pageViewEvent: function pageViewEvent() {
        var sum = this.pageView.getPages().length;
        if (sum <= 1) return;
        this.limit_time = 0;
        this.updatePageFlag();
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView("PosterPanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr"
  } ],
  PosterPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34787KZxelGu6qmSw8glWS6", "PosterPrefab");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pageView: cc.PageView,
        pageItem: cc.Node
      },
      onLoad: function onLoad() {
        this.scrollCd = 0;
        this.allPageLength = 0;
        this.currIndex = 0;
      },
      initUI: function initUI() {
        var posterData = configMgr.CompetitionPoster();
        if (!posterData) return;
        for (var i = 0; i < posterData.length; i++) {
          var posterItem = this.pageItem.parent.getChildByName("page_" + i);
          if (null == posterItem) {
            posterItem = cc.instantiate(this.pageItem);
            posterItem.parent = this.pageItem.parent;
            posterItem.name = "page_" + i;
          }
          this.setImg(posterItem, posterData[i]);
        }
      },
      setImg: function setImg(node, url) {
        if (node) {
          node.getComponent(cc.Sprite).spriteFrame = null;
          var texture = cc.textureCache.addImage(cc.url.raw(url));
          node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      update: function update(dt) {
        this.scrollCd += dt;
        this.allPageLength = this.pageView.getPages().length;
        this.currIndex = this.pageView.getCurrentPageIndex();
        if (this.scrollCd >= 3) {
          this.scrollCd = 0;
          var nextIndex = this.currIndex + 1 > this.allPageLength ? 0 : this.currIndex + 1;
          this.pageView.scrollToPage(nextIndex, .2);
        }
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  PreLoader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52360f5GYdHC6auCW0y6jLD", "PreLoader");
    "use strict";
    function PreLoader() {}
    PreLoader.prototype.LoadTable = function(callback) {};
    cc._RF.pop();
  }, {} ],
  RecordItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "952c3pUp05KJqGv/uiHdAhk", "RecordItem");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: cc.Node,
        itemPrefab: cc.Prefab,
        roomid: 0,
        roomIdLab: cc.Label,
        roomtype: cc.Label,
        roomclub: cc.Label,
        createtime: 0,
        creatorId: 0,
        _playerItems: [],
        _players: [],
        PlayTimes: cc.Label
      },
      onLoad: function onLoad() {},
      setPlayers: function setPlayers(players, scores) {
        this._playerItems = [];
        this.content.removeAllChildren();
        this._players = players;
        if (0 == this._playerItems.length) for (var i = 0; i < this._players.length; ++i) {
          var playerItem = cc.instantiate(this.itemPrefab);
          playerItem.parent = this.content;
          playerItem.setPosition(190 * i, 10);
          this._playerItems.push(playerItem);
        }
        var index = 0;
        for (var i = 0; i < players.length; i++) {
          var player = players[i];
          if (index < this._players.length) {
            var playerItemNode = this._playerItems[index];
            var playerInfo = playerItemNode.getComponent("RecordPlayerInfo");
            playerInfo.setName(player.name);
            playerInfo.setHeadIcon(player.headimgurl);
            playerInfo.setZongfen(2, scores[player.uid]);
            var winnerId = this.setWinner(scores, players);
            var isActive = winnerId == player.uid;
            playerInfo.showWinner(isActive);
          }
          index++;
        }
      },
      showTime: function showTime(playtime) {
        cc.log("playtime = " + playtime);
        var time = getTimeStr(playtime);
        var dateStr = time[0] + "." + time[1] + "." + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        this.PlayTimes.string = dateStr;
      },
      setWinner: function setWinner(scores, players) {
        var tempUid;
        tempUid = players[0].uid;
        for (var i = 1; i < players.length; i++) players[i].uid && scores[players[i].uid] > scores[tempUid] && (tempUid = players[i].uid);
        return tempUid;
      },
      openRoundPanel: function openRoundPanel() {
        soundMngr.instance.playAudioOther("button");
        var self = this;
        openView("RoundPanel", "", function(target) {
          GameNet.getInstance().request("game.playerHandler.getRoomRecord", {
            roomid: self.roomid,
            createtime: self.createtime
          }, function(rtn) {
            target.getComponent("RoundPanel").show(rtn, self.creatorId);
            closeView("RecordPanel");
          });
        });
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  RecordPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8911eisoupJ27a4sTwjMOP1", "RecordPanel");
    "use strict";
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        scrollView: cc.ScrollView,
        prefabItem: cc.Prefab,
        listCount: 0,
        totalJushuLabel: cc.Label,
        winJushuLabel: cc.Label,
        chengjiLabel: cc.Label,
        lijianLabel: cc.Label,
        creatorNum: cc.Label,
        _itemList: [],
        layer_selectOther: cc.Node,
        roomid: 0,
        _players: null
      },
      onLoad: function onLoad() {
        this.initParam();
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("tjddz-onGameStart", this, this.showTableLayer);
        this.content = this.scrollView.content;
        if (!ReplayDataCenter.openRoundPanel) return;
        this.show(ReplayGameData);
        ReplayDataCenter.openRoundPanel = false;
      },
      initParam: function initParam() {
        this.RecordType = [ gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_Mj_Shishi, gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_Poker_13shui, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Mj_HZ, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_Poker_paodekuai ];
        this.RecordTypeMngr = {
          Game_Poker_TianjinDDZ: false,
          Game_Mj_Shishi: true,
          Game_Mj_Tianjin: true,
          Game_MJ_HuaDian: true,
          Game_Poker_13shui: false,
          Game_niu_niu: true,
          Game_TDK: true,
          Game_Poker_DDZ: true,
          Game_Mj_HZ: true,
          Game_Mj_CC: true,
          Game_Poker_paodekuai: false
        };
        this.GameTypeName = [ "天津斗地主", "石狮麻将", "天津麻将", "桦甸麻将", "十三水", "经典牛牛", "填大坑", "经典斗地主", "红中麻将", "长春麻将", "跑得快" ];
      },
      onEnable: function onEnable() {
        var self = this;
        GameNet.getInstance().request("game.playerHandler.getPlayerRecord", {}, function(rtn) {
          rtn && Object.keys(rtn).length > 0 && self.show(rtn);
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("ddz-onGameStart", this, this.showTableLayer);
        unregistEvent("tjddz-onGameStart", this, this.showTableLayer);
      },
      showTableLayer: function showTableLayer() {
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? cc.director.loadScene("table") : GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ ? cc.director.loadScene("table-DDZ") : GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ && cc.director.loadScene("table-TJDDZ");
      },
      show: function show(recordData) {
        this.totalJushuLabel.string = "";
        this.winJushuLabel.string = "";
        this.chengjiLabel.string = "";
        this.lijianLabel.string = "";
        this.creatorNum.string = "";
        if (null == recordData || void 0 == recordData) return;
        ReplayGameData = recordData;
        ReplayDataCenter.room = recordData;
        if (0 == this._itemList.length) for (var i = 0; i < 20; i++) {
          var item = cc.instantiate(this.prefabItem);
          this.content.addChild(item);
          this._itemList.push(item);
          item.active = false;
        }
        for (var index = 0; index <= this._itemList.length - 1; index++) {
          var item = this._itemList[index];
          if (index < ReplayGameData.length) {
            var roomData = ReplayGameData[index];
            var RecordTypeMngr_index = -1;
            for (var key in this.RecordTypeMngr) {
              RecordTypeMngr_index++;
              if (true == this.RecordTypeMngr[key] && roomData.opts.gameType == this.RecordType[RecordTypeMngr_index]) {
                var recordItem = item.getComponent("RecordItem");
                recordItem.roomid = roomData.roomid;
                recordItem.roomIdLab.string = roomData.roomid;
                recordItem.createtime = roomData.createtime;
                recordItem.showTime(roomData.createtime);
                recordItem.creatorId = roomData.creator;
                recordItem.setPlayers(roomData.players, roomData.score);
                this.showGameType(recordItem, roomData.opts);
                item.active = true;
                break;
              }
            }
          } else item.active = false;
        }
        var now = new Date();
        var nowYear = now.getFullYear();
        var nowMonth = now.getMonth();
        var nowDate = now.getDate();
        var playId = GameData.player.uid;
        var TodayJushu = 0;
        var winJushu = 0;
        var creatJushu = 0;
        for (var i = 0; i < ReplayGameData.length; i++) {
          var items = ReplayGameData[i];
          var da = items.createtime;
          da = new Date(items.createtime);
          var year = da.getFullYear();
          var month = da.getMonth();
          var date = da.getDate();
          var RecordTypeMngr_index = -1;
          for (var key in this.RecordTypeMngr) {
            RecordTypeMngr_index++;
            if (true == this.RecordTypeMngr[key] && items.opts.gameType == this.RecordType[RecordTypeMngr_index]) {
              if (year == nowYear && month == nowMonth && date == nowDate) {
                TodayJushu++;
                var scoreSum = items.score;
                scoreSum[playId] > 0 && winJushu++;
              }
              items.creator == playId && creatJushu++;
              break;
            }
          }
        }
        this.totalJushuLabel.string = TodayJushu;
        this.winJushuLabel.string = winJushu;
        this.creatorNum.string = creatJushu;
      },
      showGameType: function showGameType(parents, data) {
        var roomRuleString = "";
        var roomRule = data.roomType;
        switch (roomRule) {
         case 1:
          roomRuleString = "(普通房)";
          break;

         case 2:
          roomRuleString = "(俱乐部)";
        }
        parents.roomclub.string = roomRuleString;
        var RecordTypeMngr_index = -1;
        for (var key in this.RecordTypeMngr) {
          RecordTypeMngr_index++;
          if (true == this.RecordTypeMngr[key] && this.RecordType[RecordTypeMngr_index] == data.gameType) {
            parents.roomtype.string = this.GameTypeName[RecordTypeMngr_index];
            break;
          }
        }
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        ReplayDataCenter.openRoundPanel = false;
        ReplayDataCenter.openReplayPanel = false;
        closeView("RecordPanel");
      },
      openSelectRoom: function openSelectRoom(eve) {
        soundMngr.instance.playAudioOther("button");
        this.layer_selectOther.active = true;
      },
      closeLayer: function closeLayer(eve) {
        soundMngr.instance.playAudioOther("button");
        this.layer_selectOther.active = false;
      },
      sendReplayNum: function sendReplayNum(eve) {
        soundMngr.instance.playAudioOther("button");
        var str = cc.find("layer_otherRecard/panel/EditBox", this.node).getComponent(cc.EditBox).string;
        var getRoomId = str.substring(0, 6);
        var getRecordId = str.substring(6, str.length);
        openView("RoundPanel", "", function(target) {
          GameNet.getInstance().request("game.playerHandler.getRoomRecord", {
            roomid: parseInt(getRoomId),
            createtime: parseInt(getRecordId)
          }, function(rtn) {
            var playersArray = [];
            for (var key in rtn.players) playersArray.push(rtn.players[key]);
            otherReplay[0] = true;
            target.getComponent("RoundPanel").show(rtn, rtn.creator, playersArray);
            closeView("RecordPanel");
          });
        });
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  RecordPlayerInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ba58sgHLNCEZrHUzjdRnsZ", "RecordPlayerInfo");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerSprite: cc.Sprite,
        playerNameLabel: cc.Label,
        idNode: cc.Node,
        idLabel: cc.Label,
        jifenLabel: cc.Label,
        recordScore: cc.Node,
        roundScore: cc.Node,
        font: {
          default: [],
          type: [ cc.Font ]
        }
      },
      onLoad: function onLoad() {},
      setName: function setName(name) {
        this.playerNameLabel.string = name;
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          null !== texture && (self.headerSprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      setId: function setId(id) {
        this.idLabel.string = id;
      },
      setJifen: function setJifen(score) {
        this.jifenLabel.string = void 0 == score ? "" : score;
      },
      setZongfen: function setZongfen(changeNum, score) {
        var zongfenLabel;
        cc.log("changeNum = " + changeNum + ",score = " + score);
        if (1 == changeNum) {
          this.roundScore.active = true;
          this.idNode.active = true;
          this.recordScore.active = false;
          zongfenLabel = cc.find("total_score", this.roundScore);
        } else {
          this.roundScore.active = false;
          this.idNode.active = false;
          this.recordScore.active = true;
          zongfenLabel = cc.find("recordScore", this.recordScore);
        }
        this.setHeadPosition(changeNum);
        if (score > 0) {
          zongfenLabel.getComponent("cc.Label").font = this.font[0];
          zongfenLabel.getComponent("cc.Label").string = "+" + score;
        } else if (score < 0) {
          zongfenLabel.getComponent("cc.Label").font = this.font[1];
          zongfenLabel.getComponent("cc.Label").string = score;
        } else {
          zongfenLabel.getComponent("cc.Label").font = this.font[2];
          zongfenLabel.getComponent("cc.Label").string = score;
          zongfenLabel.color = new cc.Color(0, 255, 36);
        }
      },
      setHeadPosition: function setHeadPosition(type) {
        var headNode = this.headerSprite.node.parent;
        2 == type ? headNode.setPosition(cc.p(40, 0)) : headNode.setPosition(cc.p(0, 0));
      },
      showWinner: function showWinner(ac) {
        var winner = cc.find("winner", this.recordScore);
        winner.active = ac;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  ReplayCardController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aeb77LcpxRJ8rX67x0HMftk", "ReplayCardController");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: 0,
        pengCardList: [],
        gangCardList: [],
        handCardList: [],
        disCardList: [],
        chiCardList: [],
        handNode: cc.Node,
        pengNode: cc.Node,
        disNode: cc.Node,
        headNode: cc.Node,
        headPrefab: cc.Prefab,
        headComponent: null,
        cardHuierPrefab: cc.Prefab,
        direction: "right"
      },
      getList: function getList() {
        return {
          uid: this.uid,
          peng: this.pengCardList,
          chi: this.chiCardList,
          gang: this.gangCardList,
          hand: this.handCardList.sort(this.sortNumber)
        };
      },
      onLoad: function onLoad() {
        this.joinermax = Object.keys(ReplayData.players).length;
        4 == this.joinermax ? this.discardMax = 24 : 3 == this.joinermax ? this.discardMax = 36 : 2 == this.joinermax && (this.discardMax = 60);
      },
      showHead: function showHead(data, playername, headimgurl) {
        this.getHeadComponent().setName(playername);
        this.getHeadComponent().setHeadIcon(headimgurl);
        this.getHeadComponent().setPlayer(data);
      },
      showZhuang: function showZhuang(show) {
        this.getHeadComponent().showZhuang(show);
      },
      showZhuangNum: function showZhuangNum(zhuang, num) {
        this.getHeadComponent().showZhuangNum(zhuang, num);
      },
      getLiuGuang: function getLiuGuang(isPlay) {
        this.getHeadComponent().getLiuGuang(isPlay);
      },
      setCoin: function setCoin(value) {
        this.getHeadComponent().setCoin(value);
      },
      setChashuiState: function setChashuiState(uid) {
        var show = false;
        void 0 == ReplayData.opts.water || Object.keys(ReplayData.opts.water).length <= 0 ? show = false : 2 == ReplayData.opts.water[uid] && (show = true);
        this.getHeadComponent().setChaShuiShow(show);
      },
      getHeadComponent: function getHeadComponent() {
        if (null == this.headComponent) {
          var head = cc.instantiate(this.headPrefab);
          head.parent = this.headNode;
          this.headComponent = head.getComponent("playerTemplate");
        }
        return this.headComponent;
      },
      sortNumber: function sortNumber(a, b) {
        return a - b;
      },
      obtain: function obtain(cards) {
        if (null == cards || 1 != cards.length) {
          cc.log("ReplayCardController,can not obtain the card, the card is null or length is not 1");
          return;
        }
        var cardId = cards[0];
        this.handCardList.push(cardId);
        this.getObtainCardNode().active = true;
        this.showCardContent(this.getObtainCardNode(), this.getHeader(), cardId);
        this.setHuierVisible(this.getObtainCardNode(), cardId);
      },
      discard: function discard(cards) {
        if (null == cards || 1 != cards.length) {
          cc.log("ReplayCardController,can not discard the card, the card is null or length is not 1");
          return;
        }
        var discardCardId = cards[0];
        this.handCardListRemove(discardCardId);
        this.disCardList.push(discardCardId);
        this.hideObtainCard();
        this.doHandCard();
        this.showDisCard(discardCardId);
      },
      showDisCard: function showDisCard(discardId) {
        var node4 = cc.find("cardDis_4", this.node);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", this.node);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", this.node);
        node2 && (node2.active = false);
        this.disNode = cc.find("cardDis_" + this.joinermax, this.node);
        this.disNode.active = true;
        for (var j = 0; j < this.discardMax; j++) {
          var disCardNode = this.disNode.getChildByName("card_face" + j);
          if (null == disCardNode || true == disCardNode.active) continue;
          disCardNode.active = true;
          var cardHeader = "";
          cardHeader = "left" == this.direction ? "mj_face_zuo_chu" : "right" == this.direction ? "mj_face_you_chu" : "up" == this.direction ? "mj_face_shang_shou" : "mj_face_xia_chu";
          this.showCardContent(disCardNode, cardHeader, discardId);
          break;
        }
      },
      chi: function chi(cards) {
        if (null == cards || 3 != cards.length) {
          cc.log("ReplayCardController, chi, cards is null or card length is not 3");
          return;
        }
        for (var i = 0; i < 2; i++) this.handCardListRemove(cards[i]);
        var pengCardNode = this.getPengCard();
        pengCardNode.active = true;
        pengCardNode.getComponent("PengCard").chi(cards);
        this.doHandCard();
        this.chiCardList.push(cards);
      },
      peng: function peng(cards) {
        if (null == cards || 3 != cards.length) {
          cc.log("ReplayCardController, peng, cards is null or card length is not 3");
          return;
        }
        cc.log("peng before - this.handCardList.length : " + this.handCardList.length);
        for (var i = 0; i < 2; i++) this.handCardListRemove(cards[0]);
        cc.log("peng after - this.handCardList.length : " + this.handCardList.length);
        var pengCardNode = this.getPengCard();
        pengCardNode.active = true;
        pengCardNode.getComponent("PengCard").peng(cards);
        this.doHandCard();
        this.pengCardList.push(cards);
      },
      minggang: function minggang(cards) {
        if (null == cards || 4 != cards.length) {
          cc.log("ReplayCardController, minggang, cards is null or card length is not 4");
          return;
        }
        var pengCardNode = this.getPengCard();
        pengCardNode.active = true;
        pengCardNode.getComponent("PengCard").gang(cards);
        for (var i = 0; i < 3; i++) this.handCardListRemove(cards[i]);
        this.doHandCard();
        this.gangCardList.push(cards);
      },
      minggangself: function minggangself(cards) {
        if (null == cards || 4 != cards.length) {
          cc.log("ReplayCardController, minggangself, cards is null or card length is not 4");
          return;
        }
        var pengCardNode = this.getAlreadyPengCard(cards[0]);
        pengCardNode.active = true;
        pengCardNode.getComponent("PengCard").gang(cards);
        this.handCardListRemove(cards[0]);
        this.hideObtainCard();
        this.doHandCard();
        this.gangCardList.push(cards);
        for (var i = 0; i < 3; i++) {
          var len = this.pengCardList.length;
          for (var j = 0; j < len; j++) {
            var pengCardId = this.pengCardList[j][0];
            cc.log("pengCardId : " + pengCardId);
            if (pengCardId == cards[0]) {
              this.pengCardList.splice(j, 1);
              return;
            }
          }
        }
      },
      angang: function angang(cards) {
        if (null == cards || 0 == cards.length) return;
        var pengCardNode = this.getPengCard();
        pengCardNode.active = true;
        pengCardNode.getComponent("PengCard").angang(cards);
        for (var i = 0; i < 4; i++) this.handCardListRemove(cards[0]);
        this.doHandCard();
        this.gangCardList.push(cards);
      },
      hu: function hu(cards) {},
      getPengCard: function getPengCard() {
        for (var i = 0; i < 4; i++) {
          var pengCardNode = this.pengNode.getChildByName("cardPeng" + i);
          if (null == pengCardNode || true == pengCardNode.active) continue;
          return pengCardNode;
        }
        return null;
      },
      getAlreadyPengCard: function getAlreadyPengCard(cardId) {
        for (var i = 0; i < 4; i++) {
          var pengCardNode = this.pengNode.getChildByName("cardPeng" + i);
          if (null != pengCardNode && true == pengCardNode.active) {
            var has = pengCardNode.getComponent("PengCard").hasCard(cardId);
            if (true == has) return pengCardNode;
          }
        }
        return null;
      },
      doHandCard: function doHandCard() {
        var sortCardList = this.getSortCardList();
        cc.log("replay hand cart list ==>> " + sortCardList.length);
        var index = 0;
        var cardlength = ReplayData.cards[0].cards.length;
        for (var i = cardlength; i >= 1; i--) {
          var cardName = "cardHand" + i;
          var cardNode = this.handNode.getChildByName(cardName);
          if (null == cardNode) {
            cc.error("can not find the card node, name is " + cardName);
            continue;
          }
          if (i > sortCardList.length) cardNode.active = false; else {
            cardNode.active = true;
            var cardId = sortCardList[index];
            this.showCardContent(cardNode, this.getHeader(), cardId);
            this.setHuierVisible(cardNode, cardId);
            index++;
          }
        }
      },
      getHeader: function getHeader() {
        var cardHeader = "";
        cardHeader = "left" == this.direction ? "mj_face_zuo_chu" : "right" == this.direction ? "mj_face_you_chu" : "up" == this.direction ? "mj_face_shang_shou" : "mj_face_xia_shou";
        return cardHeader;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      setHuierVisible: function setHuierVisible(cardNode, cardId) {
        var show = false;
        ReplayDataCenter.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(this.direction, huierNode).active = true;
            "down" == this.direction ? huierNode.y = huierNode.y - 18 : "up" == this.direction && (huierNode.y = huierNode.y + 6);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      removeDisCard: function removeDisCard(cardId) {
        for (var i = this.disNode.childrenCount - 1; i >= 0; i--) {
          var disCardNode = this.disNode.getChildByName("card_face" + i);
          if (null == disCardNode) continue;
          if (true == disCardNode.active) {
            disCardNode.active = false;
            return;
          }
        }
        var len = this.disCardList.length;
        for (var i = 0; i < len; i++) if (this.disCardList[i] == cardId) {
          this.disCardList.splice(i, 1);
          return;
        }
        for (var i = 0; i < len; i++) this.showDisCard(this.disCardList[i]);
      },
      handCardListRemove: function handCardListRemove(cardId) {
        var len = this.handCardList.length;
        for (var i = 0; i < len; i++) if (this.handCardList[i] == cardId) {
          this.handCardList.splice(i, 1);
          return;
        }
      },
      hideObtainCard: function hideObtainCard() {
        this.handNode.getChildByName("cardHand0").active = false;
      },
      getObtainCardNode: function getObtainCardNode() {
        return this.handNode.getChildByName("cardHand0");
      },
      showHandCard: function showHandCard(cardList) {
        if (null == cardList) {
          cc.error("cardList is null");
          return;
        }
        for (var i = 0; i < cardList.length; i++) {
          var cardId = cardList[i];
          this.handCardList.push(cardId);
        }
        this.doHandCard();
      },
      getSortCardList: function getSortCardList() {
        var huierList = HuierList;
        var myHuilist = [];
        var otherList = [];
        for (var i = 0; i < this.handCardList.length; i++) {
          var id = this.handCardList[i];
          true == ReplayDataCenter.isHuier(id) ? myHuilist.push(id) : otherList.push(id);
        }
        var sortHuilist = myHuilist.sort(this.sortNumber);
        var sortOtherlist = otherList.sort(this.sortNumber);
        var list = sortHuilist.concat(sortOtherlist);
        return list;
      }
    });
    cc._RF.pop();
  }, {} ],
  ReplayCardFace: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "343563k7UtOHbAFhJI7+psk", "ReplayCardFace");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bottom: cc.Sprite,
        icon: cc.Sprite,
        huier: cc.Sprite
      },
      onLoad: function onLoad() {},
      setIcon: function setIcon(iconUrl) {
        if ("" === iconUrl) this.icon.node.active = false; else {
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.icon.spriteFrame = new cc.SpriteFrame(texture);
          this.icon.node.active = true;
        }
      },
      setHuier: function setHuier(huierUrl) {
        var texture = cc.textureCache.addImage(cc.url.raw(huierUrl));
        this.huier.spriteFrame = new cc.SpriteFrame(texture);
      },
      setBottom: function setBottom(bottomUrl) {
        var texture = cc.textureCache.addImage(cc.url.raw(bottomUrl));
        this.bottom.spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {} ],
  ReplayEffectController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fb7bYwNPBFuLBP+5GzeaYx", "ReplayEffectController");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spineNode: cc.Node
      },
      onLoad: function onLoad() {},
      showEffect: function showEffect(type) {
        cc.log("show effect: " + type);
        if (void 0 == type) return;
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case ActionType.peng:
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case ActionType.minggang:
         case ActionType.minggangself:
         case ActionType.angang:
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case ActionType.hu:
          spineUrl = "spine/table/hu";
          spineAnim = "a";
          break;

         case ActionType.chi:
          spineUrl = "spine/table/chi";
          spineAnim = "a";
          break;

         case "buhua":
          spineUrl = "shishi/animation/bu/bu";
          spineAnim = "animation";
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  ReplayLayout: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8fd6cfexeZAq6tgG2vBBaDp", "ReplayLayout");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        downHandCardPrefab: cc.Prefab,
        downHandCardParent: cc.Node,
        downDisCardPrefab: cc.Prefab,
        downDisCardParent: cc.Node,
        downPengCardPrefab: cc.Prefab,
        downPengCardParent: cc.Node,
        leftHandCardPrefab: cc.Prefab,
        leftHandCardParent: cc.Node,
        leftDisCardPrefab: cc.Prefab,
        leftDisCardParent: cc.Node,
        leftPengCardPrefab: cc.Prefab,
        leftPengCardParent: cc.Node,
        rightHandCardPrefab: cc.Prefab,
        rightHandCardParent: cc.Node,
        rightDisCardPrefab: cc.Prefab,
        rightDisCardParent: cc.Node,
        rightPengCardPrefab: cc.Prefab,
        rightPengCardParent: cc.Node,
        upHandCardPrefab: cc.Prefab,
        upHandCardParent: cc.Node,
        upDisCardPrefab: cc.Prefab,
        upDisCardParent: cc.Node,
        upPengCardPrefab: cc.Prefab,
        upPengCardParent: cc.Node,
        _showDis: false,
        _showObtain: false,
        _showPeng: false,
        _hasLayout: false
      },
      onLoad: function onLoad() {
        this._showDis = false;
        this._showObtain = false;
        this._showPeng = false;
        this._hasLayout = false;
      },
      init: function init() {
        if (false == this._hasLayout) {
          this.initLeftCard();
          this.initDownCard();
          this.initRightCard();
          this.initUpCard();
          this._hasLayout = true;
        }
      },
      initLeftCard: function initLeftCard() {
        for (var i = 0; i < GameData.client.handsize; i++) {
          var cardNode = cc.instantiate(this.leftHandCardPrefab);
          cardNode.name = "handCard" + i;
          cardNode.parent = this.leftHandCardParent;
          cardNode.y = 31 * GameData.client.handsize - 31 * i;
        }
        var obtainCardNode = cc.instantiate(this.leftHandCardPrefab);
        obtainCardNode.name = "obtain";
        obtainCardNode.parent = this.leftHandCardParent;
        obtainCardNode.y = -20;
        obtainCardNode.active = this._showObtain;
        for (var j = 0; j < 26; j++) {
          var tableCardNode = cc.instantiate(this.leftDisCardPrefab);
          tableCardNode.name = "disCard" + j;
          tableCardNode.parent = this.leftDisCardParent;
          tableCardNode.x = 48 * -Math.floor(j / 10);
          tableCardNode.y = -j % 10 * 31;
          tableCardNode.active = this._showDis;
        }
        for (var k = 0; k < 4; k++) {
          var pengCardNode = cc.instantiate(this.leftPengCardPrefab);
          pengCardNode.name = "pengCard" + k;
          pengCardNode.parent = this.leftPengCardParent;
          pengCardNode.x = 0;
          pengCardNode.y = -100 * k;
          pengCardNode.active = this._showPeng;
        }
      },
      initRightCard: function initRightCard() {
        for (var i = 0; i < GameData.client.handsize; i++) {
          var cardNode = cc.instantiate(this.rightHandCardPrefab);
          cardNode.setLocalZOrder(GameData.client.handsize - i);
          cardNode.name = "handCard" + i;
          cardNode.parent = this.rightHandCardParent;
          cardNode.y = 31 * -GameData.client.handsize + 31 * i;
        }
        var obtainCardNode = cc.instantiate(this.rightHandCardPrefab);
        obtainCardNode.name = "obtain";
        obtainCardNode.parent = this.rightHandCardParent;
        obtainCardNode.y = 20;
        obtainCardNode.active = this._showObtain;
        for (var j = 0; j < 26; j++) {
          var tableCardNode = cc.instantiate(this.rightDisCardPrefab);
          tableCardNode.setLocalZOrder(GameData.client.handsize - j);
          tableCardNode.name = "disCard" + j;
          tableCardNode.parent = this.rightDisCardParent;
          tableCardNode.x = 48 * Math.floor(j / 10);
          tableCardNode.y = j % 10 * 31;
          tableCardNode.active = this._showDis;
        }
        for (var k = 0; k < 4; k++) {
          var pengCardNode = cc.instantiate(this.rightPengCardPrefab);
          pengCardNode.name = "pengCard" + k;
          pengCardNode.parent = this.rightPengCardParent;
          pengCardNode.x = 0;
          pengCardNode.y = 100 * k;
          pengCardNode.active = this._showPeng;
        }
      },
      initDownCard: function initDownCard() {
        for (var i = 0; i < GameData.client.handsize; i++) {
          var cardNode = cc.instantiate(this.downHandCardPrefab);
          cardNode.name = "handCard" + i;
          cardNode.parent = this.downHandCardParent;
          cardNode.x = -70 * GameData.client.handsize + 70 * i;
        }
        var obtainCardNode = cc.instantiate(this.downHandCardPrefab);
        obtainCardNode.name = "obtain";
        obtainCardNode.parent = this.downHandCardParent;
        obtainCardNode.x = 40;
        obtainCardNode.active = this._showObtain;
        for (var j = 0; j < 26; j++) {
          var tableCardNode = cc.instantiate(this.downDisCardPrefab);
          tableCardNode.name = "disCard" + j;
          tableCardNode.parent = this.downDisCardParent;
          tableCardNode.x = 0 + j % 10 * 37;
          tableCardNode.y = 0 - 50 * Math.floor(j / 10);
          tableCardNode.active = this._showDis;
        }
        for (var k = 0; k < 4; k++) {
          var pengCardNode = cc.instantiate(this.downPengCardPrefab);
          pengCardNode.name = "pengCard" + k;
          pengCardNode.parent = this.downPengCardParent;
          pengCardNode.x = 230 * k;
          pengCardNode.y = 0;
          pengCardNode.active = this._showPeng;
        }
      },
      initUpCard: function initUpCard() {
        for (var i = 0; i < GameData.client.handsize; i++) {
          var cardNode = cc.instantiate(this.upHandCardPrefab);
          cardNode.name = "handCard" + i;
          cardNode.parent = this.upHandCardParent;
          cardNode.x = 40 * GameData.client.handsize - 40 * i;
        }
        var obtainCardNode = cc.instantiate(this.upHandCardPrefab);
        obtainCardNode.name = "obtain";
        obtainCardNode.parent = this.upHandCardParent;
        obtainCardNode.x = -20;
        obtainCardNode.active = this._showObtain;
        for (var j = 0; j < 26; j++) {
          var tableCardNode = cc.instantiate(this.upDisCardPrefab);
          tableCardNode.name = "disCard" + j;
          tableCardNode.setLocalZOrder(26 - j);
          tableCardNode.parent = this.upDisCardParent;
          tableCardNode.x = 0 - j % 10 * 33;
          tableCardNode.y = 0 + 45 * Math.floor(j / 10);
          tableCardNode.active = this._showDis;
        }
        for (var k = 0; k < 4; k++) {
          var pengCardNode = cc.instantiate(this.upPengCardPrefab);
          pengCardNode.name = "pengCard" + k;
          pengCardNode.parent = this.upPengCardParent;
          pengCardNode.x = 130 * -k;
          pengCardNode.y = 0;
          pengCardNode.active = this._showPeng;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  "ReplayMain-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f98fdkH4jlOGoaWCzRvAhVy", "ReplayMain-shishi");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerCardNodes: {
          default: [],
          type: [ cc.Node ]
        },
        huierFace1: cc.Sprite,
        huierFace2: cc.Sprite,
        stopBtn: cc.Button,
        playBtn: cc.Button,
        exitBtn: cc.Button,
        quick_btn: cc.Button,
        overBtn: cc.Button,
        _actionIndex: -1,
        _playerCardList: [],
        _effectController: null,
        playintrNode: cc.Node,
        roomNum: cc.Label,
        runSum: cc.Label
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.stopBtn.node.active = false;
        this.playBtn.node.active = true;
      },
      onEnable: function onEnable() {
        cc.director.getScheduler().setTimeScale(1);
        this._effectController = this.node.getComponent("ReplayEffectController");
        this.showPlayIntroduce(this.playIntrSize);
        this.roomNum.getComponent(cc.Label).string = ReplayRoomData.roomid;
        this.showUIHuier();
        this.initStopPanel();
        this.showHandCards();
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          var score = this.getScore(headerNode.uid);
          console.log("=============score = " + score);
          headerNode.setCoin(score);
        }
        this.roundBeginHua();
        this.schedule(this.runAction, 1);
      },
      onDestroy: function onDestroy() {},
      runAction: function runAction() {
        this.runNextAction();
      },
      initData: function initData() {
        ReplayData = JSON.parse(replayDataJson);
        var huier = ReplayData.opts.huier;
        var huier2 = GameData.getOtherHuier(huier);
        cc.log("huier : " + huier + ",huier2 : " + huier2);
        HuierList = [ huier, huier2 ];
      },
      initStopPanel: function initStopPanel() {
        var self = this;
        this.stopBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(1);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.playBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(0);
          self.stopBtn.node.active = true;
          self.playBtn.node.active = false;
        });
        this.exitBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          ReplayDataCenter.openRoundPanel = true;
          cc.director.getScheduler().setTimeScale(1);
          cc.director.loadScene("home");
        });
        this.quick_btn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (0 == cc.director.getScheduler().getTimeScale()) return;
          cc.director.getScheduler().setTimeScale(2);
        });
        this.overBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          self.overBtnClick();
        });
      },
      overBtnClick: function overBtnClick() {
        this.unschedule(this.runAction);
        for (var i = this._actionIndex + 1; i < ReplayData.actions.length; i++) {
          var actionObject = ReplayData.actions[i];
          var uid = actionObject.uid;
          var action = actionObject.action;
          var card = actionObject.card;
          cc.log(i, uid, action, card);
          var cardController = this.getCardController(uid);
          action == ActionType.obtain ? cardController.obtain(card) : action == ActionType.discard ? cardController.discard(card) : action == ActionType.peng ? cardController.peng(card) : action == ActionType.minggang ? cardController.minggang(card) : action == ActionType.minggangself ? cardController.minggangself(card) : action == ActionType.angang ? cardController.angang(card) : action == ActionType.chi ? cardController.chi(card) : action == ActionType.hu && cardController.hu(card);
        }
        ReplayDataCenter.resultCard = this.getAllCards();
        for (var key = 0; key < Object.keys(ReplayData.players).length; key++) {
          var playerUid = ReplayData.players[key].uid;
          var temp = false;
          ReplayData.dianpao && (temp = playerUid == ReplayData.dianpao.winner);
          if (!temp) continue;
          for (var index = 0; index < ReplayDataCenter.resultCard.length; index++) {
            var cards = ReplayDataCenter.resultCard[index];
            if (cards.uid == playerUid) {
              var handCard = cards.hand;
              if (16 == handCard.length || 13 == handCard.length || 10 == handCard.length || 7 == handCard.length || 4 == handCard.length || 1 == handCard.length) {
                handCard.push(ReplayData.dianpao.discard);
                handCard.sort(function(a, b) {
                  return a > b;
                });
              }
              break;
            }
          }
        }
        openView("ReplayResultPanel-shishi");
      },
      showUIHuier: function showUIHuier() {
        var cardlength = ReplayData.cards[0].cards.length;
        cc.log("showUIHuier --\x3e " + HuierList[0] + "," + HuierList[1]);
        this.showCardContent(this.huierFace1.node, "mj_face_xia_shou", HuierList[0]);
        13 == cardlength && this.showCardContent(this.huierFace2.node, "mj_face_xia_shou", HuierList[1]);
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      runNextAction: function runNextAction() {
        var self = this;
        this._actionIndex++;
        if (this._actionIndex < ReplayData.actions.length) {
          var actionObject = ReplayData.actions[this._actionIndex];
          var uid = actionObject.uid;
          var action = actionObject.action;
          var youjinType = 0;
          actionObject.youNum && (youjinType = actionObject.youNum);
          var card = actionObject.card;
          var hua = 0;
          actionObject.hua && actionObject.hua.length > 0 && (hua = actionObject.hua);
          cc.log(this._actionIndex, uid, action, card);
          this.gotoShowTurnEffect(uid);
          if (ReplayData.dianpao && this._actionIndex + 1 == ReplayData.actions.length) {
            var cardController = this.getCardController(ReplayData.dianpao.winner);
            cardController.obtain(card);
          }
          this.whoDoSomething(uid, action, card, hua, youjinType);
        } else if (this._actionIndex == ReplayData.actions.length) {
          cc.log("replay over");
          var actionindex = this._actionIndex - 1;
          var cardController = ReplayData.actions[actionindex];
          if (ReplayData.zimo) {
            this.cardActionAnimation(cardController.uid, "hu");
            for (var i = 0; i < this.playerCardNodes.length; i++) {
              var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
              cc.log("playerCards.uid == cardController.uid " + playerCards.uid, cardController.uid, this.playerCardNodes);
              playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.hu);
            }
          }
          if (ReplayData.dianpao) for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == ReplayData.dianpao.winner && (0 == i ? this._effectController.showEffect(ActionType.hu) : this.cardActionAnimation(ReplayData.dianpao.winner, "hu"));
          }
          for (var i = 0; i < this._playerCardList.length; i++) {
            var headerNode = this._playerCardList[i];
            var score = this.getScore(headerNode.uid);
            score += ReplayData.scores[headerNode.uid];
            headerNode.setCoin(score);
          }
          this.lastTime = 2;
          this.schedule(this.updateLastTime, 1);
        } else this.unschedule(this.runAction);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        if (this.lastTime <= 0) {
          ReplayDataCenter.resultCard = this.getAllCards();
          openView("ReplayResultPanel-shishi");
          this.unschedule(this.updateLastTime);
        }
      },
      getAllCards: function getAllCards() {
        var list = [];
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var cardNode = this.playerCardNodes[i];
          list.push(cardNode.getComponent("ReplayCardController").getList());
        }
        return list;
      },
      showHandCards: function showHandCards() {
        var creator = ReplayData.creator;
        var cards = ReplayData.cards;
        var Uid;
        if (true == otherReplay[0]) {
          for (var key in ReplayRoomData.players) if (key) {
            Uid = ReplayRoomData.players[key].uid;
            break;
          }
        } else Uid = GameData.player.uid.toString();
        var replayRoom = ReplayDataCenter.room;
        var playerInfo = {};
        var ownerIndex = 0;
        for (var i = 0; i < replayRoom.length; i++) if (replayRoom[i].roomid == ReplayData.room) {
          playerInfo = replayRoom[i].players;
          ownerIndex = playerInfo[Uid].seat;
        }
        if (null == ownerIndex || void 0 == ownerIndex) return;
        var indexList = [];
        this.playerNum = Object.keys(ReplayData.players).length;
        if (4 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1, 2, 3 ]);
          1 == ownerIndex && (indexList = [ 1, 2, 3, 0 ]);
          2 == ownerIndex && (indexList = [ 2, 3, 0, 1 ]);
          3 == ownerIndex && (indexList = [ 3, 0, 1, 2 ]);
        } else if (3 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1, 2 ]);
          1 == ownerIndex && (indexList = [ 1, 2, 0 ]);
          2 == ownerIndex && (indexList = [ 2, 0, 1 ]);
          this.playerCardNodes[1].removeFromParent(true);
          this.playerCardNodes.splice(1, 1);
        } else if (2 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1 ]);
          1 == ownerIndex && (indexList = [ 1, 0 ]);
          this.playerCardNodes[1].removeFromParent(true);
          this.playerCardNodes[3].removeFromParent(true);
          this.playerCardNodes.splice(1, 1);
          this.playerCardNodes.splice(3, 1);
        }
        for (var i = 0; i < indexList.length; i++) {
          var needindex = indexList[i];
          var cardList = cards[needindex];
          if (null != this.playerCardNodes && this.playerCardNodes.length > 0 && null != this.playerCardNodes[i]) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.showHandCard(cardList.cards);
            var uid = cards[needindex].uid;
            var name = playerInfo[uid].name;
            var headimgurl = playerInfo[uid].headimgurl;
            playerCards.uid = uid;
            playerCards.showHead(playerInfo[uid], name + "", headimgurl);
            playerCards.setChashuiState(uid);
            var show = playerCards.uid == ReplayData.opts.zhuang;
            playerCards.showZhuang(show);
            this._playerCardList.push(playerCards);
          }
        }
      },
      whoDoSomething: function whoDoSomething(uid, action, cards, hua, youjinType) {
        this.runSum.getComponent(cc.Label).string = "进度: " + this._actionIndex + "/" + (ReplayData.actions.length - 1);
        var cardController = this.getCardController(uid);
        if (action == ActionType.obtain) {
          cardController.obtain(cards);
          if (0 != hua) {
            this.cardActionAnimation(cardController.uid, "buhua");
            for (var i = 0; i < this.playerCardNodes.length; i++) {
              var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
              if (playerCards.uid == cardController.uid) {
                this.showHua(hua, this.playerCardNodes[i]);
                0 == i && this._effectController.showEffect("buhua");
              }
            }
          }
        } else if (action == ActionType.discard) cardController.discard(cards); else if (action == ActionType.peng) {
          cardController.peng(cards);
          this.cardActionAnimation(cardController.uid, "peng");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.peng);
          }
          this.removeDisFromLast(cards[0]);
        } else if (action == ActionType.minggang) {
          cardController.minggang(cards);
          this.cardActionAnimation(cardController.uid, "gang");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.minggang);
          }
          this.removeDisFromLast(cards[2]);
        } else if (action == ActionType.minggangself) {
          cardController.minggangself(cards);
          this.cardActionAnimation(cardController.uid, "gang");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.minggangself);
          }
        } else if (action == ActionType.angang) {
          cardController.angang(cards);
          this.cardActionAnimation(cardController.uid, "gang");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.angang);
          }
        } else if (action == ActionType.chi) {
          cardController.chi(cards);
          this.cardActionAnimation(cardController.uid, "chi");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.chi);
          }
          this.removeDisFromLast(cards[0]);
        } else if ("youjin" == action) {
          var playPos = this.getAnimationIndex(uid);
          console.log("..........................playPos = " + playPos);
          cardController.youjin(youjinType, playPos);
        } else cc.log("no action logic, aciotn name is " + action);
      },
      removeDisFromLast: function removeDisFromLast(cardId) {
        var actionObject = ReplayData.actions[this._actionIndex - 1];
        var lastuid = actionObject.uid;
        var lastCardController = this.getCardController(lastuid);
        lastCardController.removeDisCard(cardId);
      },
      getAnimationIndex: function getAnimationIndex(uid) {
        var actionPos = "";
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
          4 == this.playerNum ? playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i ? actionPos = "right" : 2 == i ? actionPos = "up" : 3 == i && (actionPos = "left")) : 3 == this.playerNum ? playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i ? actionPos = "up" : 2 == i && (actionPos = "left")) : 2 == this.playerNum && playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i && (actionPos = "up"));
        }
        return actionPos;
      },
      cardActionAnimation: function cardActionAnimation(uid, action) {
        var pos = this.getAnimationIndex(uid);
        var animationNode = cc.find("layer_ui/actionAnimations/" + pos, this.node);
        null != animationNode && animationNode.getComponent(cc.Animation).play(action);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        var isPlay = false;
        if (null == this._playerCardList) {
          cc.log("this._playerCardList null");
          return;
        }
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          isPlay = headerNode.uid == uid;
          headerNode.getLiuGuang(isPlay);
        }
      },
      getCardController: function getCardController(uid) {
        for (var i = 0; i < this._playerCardList.length; i++) {
          var cardController = this._playerCardList[i];
          if (cardController.uid == uid) return cardController;
        }
        return null;
      },
      roundBeginHua: function roundBeginHua() {
        for (var i = 0; i < ReplayData.cards.length; i++) {
          var hua = 0;
          hua = ReplayData.cards[i].hua;
          var uid = ReplayData.cards[i].uid;
          for (var actionIndex = 0; actionIndex < ReplayData.actions.length; actionIndex++) if (ReplayData.actions[actionIndex].uid == uid && ReplayData.actions[actionIndex].hua && ReplayData.actions[actionIndex].hua.length > 0) for (var huaIndex = 0; huaIndex < hua.length; huaIndex++) {
            var actionHua = ReplayData.actions[actionIndex].hua;
            for (var index = 0; index < actionHua.length; index++) hua[huaIndex] == actionHua[index] && hua.splice(huaIndex, 1);
          }
          if (hua && hua.length > 0) {
            this.cardActionAnimation(uid, "buhua");
            for (var j = 0; j < this.playerCardNodes.length; j++) {
              var playerCards = this.playerCardNodes[j].getComponent("ReplayCardController");
              if (playerCards.uid == uid) {
                this.showHua(hua, this.playerCardNodes[j]);
                0 == j && this._effectController.showEffect("buhua");
              }
            }
          }
        }
      },
      showHua: function showHua(hua, parent) {
        var playerCards = parent.getComponent("ReplayCardController");
        var playeruid = playerCards.uid;
        var huaPos = this.getAnimationIndex(playeruid);
        var huacard = hua.sort();
        var huaNode = cc.find("cardhua", parent);
        var huaChild = huaNode.children;
        for (var i = 0; i < huacard.length; i++) for (var j = 0; j < huaChild.length; j++) {
          if (true == huaChild[j].active || null == huaChild[j]) continue;
          huaChild[j].active = true;
          huaChild[j].getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = this.showHuaTexture(huacard[i], huaPos);
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          huaChild[j].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          break;
        }
      },
      showHuaTexture: function showHuaTexture(huaId, direction) {
        var textureUrl = "resources/shishi/image/";
        var tetureType = "";
        111 == huaId ? tetureType = "chun" : 112 == huaId ? tetureType = "xia" : 113 == huaId ? tetureType = "qiu" : 114 == huaId ? tetureType = "dong" : 121 == huaId ? tetureType = "mei" : 122 == huaId ? tetureType = "lan" : 123 == huaId ? tetureType = "zhu" : 124 == huaId && (tetureType = "ju");
        var texturedirec = "";
        "down" == direction ? texturedirec = "" : "right" == direction ? texturedirec = "4" : "up" == direction ? texturedirec = "3" : "left" == direction && (texturedirec = "2");
        textureUrl = textureUrl + tetureType + texturedirec + ".png";
        return textureUrl;
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 306)), cc.delayTime(5), cc.moveTo(.5, cc.p(30, 406)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        var roomRule = ReplayRoomData.opts;
        console.log("roomRule = " + JSON.stringify(roomRule));
        var playStr = getRuleStrShiShi(roomRule);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + ",contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        console.log("playStr = " + playStr);
        label.string = playStr;
      },
      getScore: function getScore(uid) {
        var index;
        for (var i = 0; i < ReplayRoomData.games.length; i++) ReplayData.id == ReplayRoomData.games[i].id && (index = i);
        var nowScore = 0;
        if (0 != index) for (var i = 0; i < index; i++) nowScore += ReplayRoomData.games[i].score[uid];
        console.log("................nowScore =" + nowScore);
        return nowScore;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  ReplayMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2b10SOo5xGTJ+rwrmscKnG", "ReplayMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerCardNodes: {
          default: [],
          type: [ cc.Node ]
        },
        huierFace1: cc.Sprite,
        huierFace2: cc.Sprite,
        stopBtn: cc.Button,
        playBtn: cc.Button,
        exitBtn: cc.Button,
        quick_btn: cc.Button,
        overBtn: cc.Button,
        _actionIndex: -1,
        _playerCardList: [],
        _effectController: null,
        playintrNode: cc.Node,
        roomNum: cc.Label,
        runSum: cc.Label
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.stopBtn.node.active = false;
        this.playBtn.node.active = true;
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("tjddz-onGameStart", this, this.showTableLayer);
        registEvent("pdk-onGameStart", this, this.showTableLayer);
        registEvent("onServerNotice", this, handlerServerNotice);
        scheduleLamp(this);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("ddz-onGameStart", this, this.showTableLayer);
        unregistEvent("tjddz-onGameStart", this, this.showTableLayer);
        unregistEvent("pdk-onGameStart", this, this.showTableLayer);
        unregistEvent("onServerNotice", this, handlerServerNotice);
      },
      onEnable: function onEnable() {
        cc.director.getScheduler().setTimeScale(1);
        this._effectController = this.node.getComponent("ReplayEffectController");
        this.roomNum.getComponent(cc.Label).string = ReplayRoomData.roomid;
        this.showPlayIntroduce(this.playIntrSize);
        this.showUIHuier();
        this.initStopPanel();
        this.showHandCards();
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          var score = this.getScore(headerNode.uid);
          console.log("=============score = " + score);
          headerNode.setCoin(score);
        }
        this.schedule(this.runAction, 1);
      },
      showTableLayer: function showTableLayer() {
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? cc.director.loadScene("table") : GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ ? cc.director.loadScene("table-DDZ") : GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ ? cc.director.loadScene("table-TJDDZ") : GameData.client.gameType == gameDefine.GameType.Game_Poker_paodekuai && cc.director.loadScene("table-PDK");
      },
      runAction: function runAction() {
        this.runNextAction();
      },
      initData: function initData() {
        ReplayData = JSON.parse(replayDataJson);
        var huier = ReplayData.opts.huier;
        var huier2 = GameData.getOtherHuier(huier);
        cc.log("huier : " + huier + ",huier2 : " + huier2);
        HuierList = [ huier, huier2 ];
      },
      initStopPanel: function initStopPanel() {
        var self = this;
        this.stopBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(1);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.playBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(0);
          self.stopBtn.node.active = true;
          self.playBtn.node.active = false;
        });
        this.exitBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          ReplayDataCenter.openRoundPanel = true;
          cc.director.getScheduler().setTimeScale(1);
          cc.director.loadScene("home");
        });
        this.quick_btn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(2);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.overBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          self.overBtnClick();
        });
      },
      overBtnClick: function overBtnClick() {
        soundMngr.instance.playAudioOther("button");
        this.unschedule(this.runAction);
        for (var i = this._actionIndex + 1; i < ReplayData.actions.length; i++) {
          var actionObject = ReplayData.actions[i];
          var uid = actionObject.uid;
          var action = actionObject.action;
          var card = actionObject.card;
          cc.log(i, uid, action, card);
          var cardController = this.getCardController(uid);
          action == ActionType.obtain ? cardController.obtain(card) : action == ActionType.discard ? cardController.discard(card) : action == ActionType.peng ? cardController.peng(card) : action == ActionType.minggang ? cardController.minggang(card) : action == ActionType.minggangself ? cardController.minggangself(card) : action == ActionType.angang ? cardController.angang(card) : action == ActionType.hu && cardController.hu(card);
        }
        ReplayDataCenter.resultCard = this.getAllCards();
        openView("ReplayResultPanel");
      },
      showUIHuier: function showUIHuier() {
        var cardlength = ReplayData.cards[0].cards.length;
        cc.log("showUIHuier --\x3e " + HuierList[0] + "," + HuierList[1]);
        this.showCardContent(this.huierFace1.node, "mj_face_xia_shou", HuierList[0]);
        this.showCardContent(this.huierFace2.node, "mj_face_xia_shou", HuierList[1]);
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      getScore: function getScore(uid) {
        var index;
        for (var i = 0; i < ReplayRoomData.games.length; i++) ReplayData.id == ReplayRoomData.games[i].id && (index = i);
        var nowScore = 0;
        if (0 != index) for (var i = 0; i < index; i++) nowScore += ReplayRoomData.games[i].score[uid];
        console.log("................nowScore =" + nowScore);
        return nowScore;
      },
      runNextAction: function runNextAction() {
        this._actionIndex++;
        if (this._actionIndex < ReplayData.actions.length) {
          var actionObject = ReplayData.actions[this._actionIndex];
          var uid = actionObject.uid;
          var action = actionObject.action;
          var card = actionObject.card;
          cc.log(this._actionIndex, uid, action, card);
          this.gotoShowTurnEffect(uid);
          this.whoDoSomething(uid, action, card);
        } else if (this._actionIndex == ReplayData.actions.length) {
          cc.log("replay over");
          var actionindex = this._actionIndex - 1;
          var cardController = ReplayData.actions[actionindex];
          ReplayData.result.winner > 0 && this.cardActionAnimation(cardController.uid, "hu");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && ReplayData.result.winner > 0 && this._effectController.showEffect(ActionType.hu);
          }
          for (var i = 0; i < this._playerCardList.length; i++) {
            var headerNode = this._playerCardList[i];
            var score = this.getScore(headerNode.uid);
            score += ReplayData.scores[headerNode.uid];
            headerNode.setCoin(score);
          }
          this.lastTime = 2;
          this.schedule(this.updateLastTime, 1);
        } else this.unschedule(this.runAction);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        if (this.lastTime <= 0) {
          ReplayDataCenter.resultCard = this.getAllCards();
          openView("ReplayResultPanel");
          this.unschedule(this.updateLastTime);
        }
      },
      getAllCards: function getAllCards() {
        var list = [];
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var cardNode = this.playerCardNodes[i];
          list.push(cardNode.getComponent("ReplayCardController").getList());
        }
        cc.log(JSON.stringify(list));
        return list;
      },
      showHandCards: function showHandCards() {
        var creator = ReplayData.creator;
        var cards = ReplayData.cards;
        var Uid;
        if (true == otherReplay[0]) {
          for (var key in ReplayRoomData.players) if (key) {
            Uid = ReplayRoomData.players[key].uid;
            break;
          }
        } else Uid = GameData.player.uid.toString();
        var playerInfo = {};
        var ownerIndex = 0;
        playerInfo = ReplayRoomData.players;
        ownerIndex = playerInfo[Uid].seat;
        if (null == ownerIndex || void 0 == ownerIndex) return;
        var indexList = [];
        this.playerNum = Object.keys(ReplayData.players).length;
        if (4 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1, 2, 3 ]);
          1 == ownerIndex && (indexList = [ 1, 2, 3, 0 ]);
          2 == ownerIndex && (indexList = [ 2, 3, 0, 1 ]);
          3 == ownerIndex && (indexList = [ 3, 0, 1, 2 ]);
        } else if (3 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1, 2 ]);
          1 == ownerIndex && (indexList = [ 1, 2, 0 ]);
          2 == ownerIndex && (indexList = [ 2, 0, 1 ]);
          this.playerCardNodes[1].removeFromParent(true);
          this.playerCardNodes.splice(1, 1);
        } else if (2 == this.playerNum) {
          0 == ownerIndex && (indexList = [ 0, 1 ]);
          1 == ownerIndex && (indexList = [ 1, 0 ]);
          this.playerCardNodes[1].removeFromParent(true);
          this.playerCardNodes[3].removeFromParent(true);
          this.playerCardNodes.splice(1, 1);
          this.playerCardNodes.splice(3, 1);
        }
        for (var i = 0; i < indexList.length; i++) {
          var needindex = indexList[i];
          var cardList = cards[needindex];
          if (null != this.playerCardNodes && this.playerCardNodes.length > 0 && null != this.playerCardNodes[i]) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.showHandCard(cardList.cards);
            var uid = cards[needindex].uid;
            var name = playerInfo[uid].name;
            var headimgurl = playerInfo[uid].headimgurl;
            playerCards.uid = uid;
            playerCards.showHead(playerInfo[uid], name + "", headimgurl);
            var show = playerCards.uid == ReplayData.opts.zhuang;
            playerCards.showZhuang(show);
            var num = ReplayData.opts.zhuangnum[playerCards.uid];
            playerCards.showZhuangNum(show, num);
            this._playerCardList.push(playerCards);
          }
        }
      },
      whoDoSomething: function whoDoSomething(uid, action, cards) {
        this.runSum.getComponent(cc.Label).string = "进度: " + this._actionIndex + "/" + (ReplayData.actions.length - 1);
        var cardController = this.getCardController(uid);
        if (action == ActionType.obtain) cardController.obtain(cards); else if (action == ActionType.discard) cardController.discard(cards); else if (action == ActionType.peng) {
          cardController.peng(cards);
          this.cardActionAnimation(cardController.uid, "peng");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.peng);
          }
          this.removeDisFromLast(cards[0]);
        } else if (action == ActionType.minggang) {
          cardController.minggang(cards);
          this.cardActionAnimation(cardController.uid, "gang");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.minggang);
          }
          this.removeDisFromLast(cards[2]);
        } else if (action == ActionType.minggangself) {
          cardController.minggangself(cards);
          this.cardActionAnimation(cardController.uid, "gang");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.minggangself);
          }
        } else if (action == ActionType.angang) {
          cardController.angang(cards);
          this.cardActionAnimation(cardController.uid, "gang");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.angang);
          }
        } else if (action == ActionType.hu) {
          cardController.hu(cards);
          this.cardActionAnimation(cardController.uid, "hu");
          for (var i = 0; i < this.playerCardNodes.length; i++) {
            var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
            playerCards.uid == cardController.uid && 0 == i && this._effectController.showEffect(ActionType.hu);
          }
        } else cc.log("no action logic, aciotn name is " + action);
      },
      removeDisFromLast: function removeDisFromLast(cardId) {
        var actionObject = ReplayData.actions[this._actionIndex - 1];
        var lastuid = actionObject.uid;
        var lastCardController = this.getCardController(lastuid);
        lastCardController.removeDisCard(cardId);
      },
      getAnimationIndex: function getAnimationIndex(uid) {
        var actionPos = "";
        for (var i = 0; i < this.playerCardNodes.length; i++) {
          var playerCards = this.playerCardNodes[i].getComponent("ReplayCardController");
          4 == this.playerNum ? playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i ? actionPos = "right" : 2 == i ? actionPos = "up" : 3 == i && (actionPos = "left")) : 3 == this.playerNum ? playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i ? actionPos = "up" : 2 == i && (actionPos = "left")) : 2 == this.playerNum && playerCards.uid == uid && (0 == i ? actionPos = "down" : 1 == i && (actionPos = "up"));
        }
        return actionPos;
      },
      cardActionAnimation: function cardActionAnimation(uid, action) {
        var pos = this.getAnimationIndex(uid);
        var animationNode = cc.find("layer_ui/actionAnimations/" + pos, this.node);
        null != animationNode && animationNode.getComponent(cc.Animation).play(action);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        var isPlay = false;
        if (null == this._playerCardList) {
          cc.log("this._playerCardList null");
          return;
        }
        for (var i = 0; i < this._playerCardList.length; i++) {
          var headerNode = this._playerCardList[i];
          isPlay = headerNode.uid == uid;
          headerNode.getLiuGuang(isPlay);
        }
      },
      getCardController: function getCardController(uid) {
        for (var i = 0; i < this._playerCardList.length; i++) {
          var cardController = this._playerCardList[i];
          if (cardController.uid == uid) return cardController;
        }
        return null;
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(5), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        var roomRule = ReplayRoomData.opts;
        console.log("roomRule = " + JSON.stringify(roomRule));
        var playStr = getRoomRuleStr(roomRule);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + ",contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  "ReplayResultPanel-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "742fa1aN6JCmqNF6DKOWSJP", "ReplayResultPanel-shishi");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        cardHuImage: cc.Prefab,
        winNode: cc.Node,
        lostNode: cc.Node,
        pingNode: cc.Node,
        roomID: cc.Label,
        createtime: cc.Label,
        roundData: cc.Label,
        isMark: 0,
        jinNum: 0,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {
        this.pengCard = {};
        this.gangCard = {};
        this.chiCard = {};
        this.onShow();
      },
      onClose: function onClose(evt) {
        ReplayDataCenter.openReplayPanel = true;
        cc.director.getScheduler().setTimeScale(1);
        cc.director.loadScene("home");
      },
      onShow: function onShow() {
        for (var i = 0; i < Object.keys(ReplayData.players).length; i++) {
          this.jinNum = 0;
          this.showCards(i);
          this.showPlayer(i);
          this.showScore(i);
          this.showDetail(i);
          this.showWinIcon(i);
        }
        for (var i = Object.keys(ReplayData.players).length; i < 4; i++) {
          var playerNode = cc.find("player" + (i + 1), this.node);
          playerNode.active = false;
        }
        this.showRoundInfo();
        this.showResultIcon();
      },
      showWinIcon: function showWinIcon(index) {
        var uid = ReplayData.players[index].uid;
        var parent = cc.find("player" + (index + 1), this.node);
        var node = cc.find("huIcon", parent);
        var winner = false;
        ReplayData.zimo ? winner = uid == ReplayData.zimo.winner : ReplayData.dianpao && (winner = uid == ReplayData.dianpao.winner);
        node.active = winner;
        var paoNode = cc.find("paoIcon", parent);
        cc.log("sadasd " + JSON.stringify(ReplayData));
        var dianpao = false;
        ReplayData.zimo ? dianpao = false : ReplayData.dianpao && (dianpao = uid == ReplayData.dianpao.displayer);
        paoNode.active = dianpao;
      },
      showResultIcon: function showResultIcon() {
        this.winNode.active = false;
        this.lostNode.active = false;
        this.pingNode.active = false;
        var Uid;
        if (true == otherReplay[0]) {
          for (var key in ReplayRoomData.players) if (key) {
            Uid = ReplayRoomData.players[key].uid;
            break;
          }
        } else Uid = GameData.player.uid;
        var myScore = ReplayData.scores[Uid];
        myScore > 0 ? this.winNode.active = true : myScore < 0 ? this.lostNode.active = true : this.pingNode.active = true;
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + ReplayData.room;
        var time = ReplayRoomData.createtime;
        time = new Date(time);
        var year = time.getFullYear() + "/";
        var month = time.getMonth() + 1 + "/";
        var date = time.getDate() + "   ";
        var h = time.getHours() + "";
        var m = time.getMinutes() + "";
        var s = time.getSeconds() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        s = 1 == s.length ? "0" + s : s;
        this.createtime.string = year + month + date + h + ":" + m + ":" + s;
        var showRoundNum = 0;
        for (var i = 0; i < ReplayRoomData.games.length; i++) ReplayData.id == ReplayRoomData.games[i].id && (showRoundNum = i + 1);
        this.roundData.string = "第" + showRoundNum + "局";
      },
      showDetail: function showDetail(index) {
        var player = ReplayData.players[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.node);
        var label = termNode.getComponent("cc.Label");
        label.string = " ";
        ReplayData.opts.water[player.uid] > 0 && (label.string += "2水 ");
        var huType;
        if (ReplayData.zimo) {
          if (ReplayData.zimo.winner == player.uid) {
            huType = ReplayData.zimo.type;
            label.string += ReplayDataCenter.replayResultDetailShiShi(huType);
          }
        } else if (ReplayData.dianpao && ReplayData.dianpao.winner == player.uid) {
          huType = ReplayData.dianpao.type;
          label.string += ReplayDataCenter.replayResultDetailShiShi(huType);
        }
        for (var i = 0; i < this.gangCard.length; i++) {
          ReplayDataCenter.isHuier(this.gangCard[i][0]) && (label.string += " 金杠 +" + ReplayRoomData.opts.jingang);
          var index1 = 0, index2 = 0;
          for (var j = 0; j < this.gangCard.length; j++) 4 == this.gangCard[j].length ? index1++ : 5 == this.gangCard[j].length && index2++;
        }
        index1 > 0 && (label.string += "明杠 +1*" + index1 + "  ");
        index2 > 0 && (label.string += "暗杠 +2*" + index2 + "  ");
        if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi) {
          var huaArray = this.getHuaCards(index);
          if (huaArray.length >= 1) {
            var temp = cc.find("player" + (index + 1) + "/cards", this.node);
            this.showHua(huaArray, temp);
          }
          if (huaArray.length >= 4) {
            var huaNum = RuleHandler.instance.replayCalcHuaScore(player.uid);
            huaNum && 0 != huaNum && (label.string += "花杠 +" + huaNum + " ");
          }
        }
        this.jinNum > 0 && (label.string += "金 +" + this.jinNum + "  ");
      },
      getHuaCards: function getHuaCards(index) {
        var player = ReplayData.players[index];
        var array = [];
        var initHua = ReplayData.cards[index].hua;
        initHua.length > 0 && (array = initHua);
        for (var key = 0; key < ReplayData.actions.length; key++) if (ReplayData.actions[key].uid == player.uid) {
          if (void 0 == ReplayData.actions[key].hua) continue;
          this.mergeArray(array, ReplayData.actions[key].hua);
        }
        return array;
      },
      mergeArray: function mergeArray(array1, array2) {
        for (var key = 0; key < array2.length; key++) array1.push(array2[key]);
      },
      showHua: function showHua(huaCard, parent) {
        huaCard.sort();
        var huaNode = cc.find("cardhua", parent);
        var huaChild = huaNode.children;
        for (var j = 0; j < huaChild.length; j++) huaChild[j].active = false;
        for (var i = 0; i < huaCard.length; i++) {
          var index = i + 1;
          var showCard = cc.find("cardhua/" + index, parent);
          showCard.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = this.showHuaTexture(huaCard[i]);
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          showCard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          showCard.active = true;
        }
      },
      showHuaTexture: function showHuaTexture(huaId) {
        var textureUrl = "resources/shishi/image/";
        var tetureType = "";
        111 == huaId ? tetureType = "chun" : 112 == huaId ? tetureType = "xia" : 113 == huaId ? tetureType = "qiu" : 114 == huaId ? tetureType = "dong" : 121 == huaId ? tetureType = "mei" : 122 == huaId ? tetureType = "lan" : 123 == huaId ? tetureType = "zhu" : 124 == huaId && (tetureType = "ju");
        textureUrl = textureUrl + tetureType + ".png";
        return textureUrl;
      },
      showPlayer: function showPlayer(index) {
        var player = ReplayData.players[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.node);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.node);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.node);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.node);
        var creator = cc.find("player" + (index + 1) + "/head/creator", this.node);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == ReplayData.opts.zhuang;
        creator.active = player.uid == ReplayRoomData.creator;
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showCards: function showCards(index) {
        var player = ReplayData.players[index];
        var playerNode = cc.find("player" + (index + 1), this.node);
        var parent = cc.find("cards", playerNode);
        var uid = player.uid;
        var hu;
        ReplayData.zimo ? hu = uid == ReplayData.zimo.winner : ReplayData.dianpao && (hu = uid == ReplayData.dianpao.winner);
        hu && (this.isMark = 0);
        var playCard;
        for (var i = 0; i < ReplayDataCenter.resultCard.length; i++) {
          var cards = ReplayDataCenter.resultCard[i];
          if (cards.uid == uid) {
            playCard = cards;
            break;
          }
        }
        this.pengCard = playCard.peng;
        this.gangCard = playCard.gang;
        this.chiCard = playCard.chi;
        for (var i = 0; i < this.chiCard.length; i++) this.chiCard[i].sort(function(a, b) {
          return a - b;
        });
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        var cardHand = playCard.hand;
        cardHand.length >= 2 && cardHand.sort(function(a, b) {
          return a - b;
        });
        var handNode = cc.find("cardHand", parent);
        handNode.setScale(.7);
        for (var i = 0; i < cardHand.length; i++) {
          var card = cardHand[i];
          var cardNode = cc.instantiate(this.cardTemplate);
          cardNode.getComponent("cardTemplate").setId(card);
          cardNode.getComponent("cardTemplate").enableButton(false);
          var icon = "mj_face_xia_shou_" + card + ".png";
          cardNode.getComponent("cardTemplate").setIcon("resources/mjcard2d/" + icon);
          cardNode.x = 85 * i;
          this.setMyHuierVisible(cardNode, card);
          this.setMyHuImageVisible(cardNode, card, hu);
          handNode.addChild(cardNode);
        }
        var childNum = 0;
        var pengNode = cc.find("cardPeng", parent);
        var child = pengNode.children;
        for (var i = 0; i < child.length; i++) child[i].active && childNum++;
        handNode.x = 180 * childNum - 532;
        playerNode.active = true;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        ReplayDataCenter.isHuier(cardId) && (show = true);
        true == show && this.jinNum++;
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            huierNode.y = huierNode.y - 8;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyHuImageVisible: function setMyHuImageVisible(cardNode, cardId, isHu) {
        var orCard;
        ReplayData.zimo ? orCard = ReplayData.zimo.obtain : ReplayData.dianpao && (orCard = ReplayData.dianpao.discard);
        var show = false;
        false == isHu ? show = false : orCard == cardId && 0 == this.isMark && (show = true);
        var huImageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huImageNode) {
          if (true == show) {
            huImageNode = cc.instantiate(this.cardHuImage);
            huImageNode.y = huImageNode.y - 20;
            cardNode.addChild(huImageNode);
            huImageNode.name = cardNode.name + "_hu";
          }
        } else huImageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var cards = this.gangCard.concat(this.pengCard, this.chiCard);
          var size = parseInt(16 / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].length) {
                  face.node.active = true;
                  var cardId = cards[i][n];
                  this.showCardContent(face.node, cardHeader, cardId);
                } else face.node.active = false;
              }
              if (5 == cards[i].length) {
                var face = node.getChildByName("card_face4").getComponent("cc.Sprite");
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                face.node.active = false;
                back.node.active = true;
              } else {
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      showScore: function showScore(index) {
        var uid = ReplayData.players[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.node);
        if (ReplayData.scores[uid] > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + ReplayData.scores[uid];
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else if (ReplayData.scores[uid] < 0) {
          scoreNode.getComponent("cc.Label").string = ReplayData.scores[uid];
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else {
          scoreNode.getComponent("cc.Label").string = ReplayData.scores[uid];
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  ReplayResultPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c818cZR0VdIIpz6csUMZ/4e", "ReplayResultPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        cardHuImage: cc.Prefab,
        winNode: cc.Node,
        lostNode: cc.Node,
        pingNode: cc.Node,
        roomID: cc.Label,
        createtime: cc.Label,
        roundData: cc.Label,
        isMark: 0,
        font: {
          default: [],
          type: [ cc.Font ]
        }
      },
      onLoad: function onLoad() {
        this.pengCard = {};
        this.gangCard = {};
        this.onShow();
      },
      onClose: function onClose(evt) {
        ReplayDataCenter.openReplayPanel = true;
        cc.director.getScheduler().setTimeScale(1);
        cc.director.loadScene("home");
      },
      onShow: function onShow() {
        for (var i = 0; i < Object.keys(ReplayData.players).length; i++) {
          this.showCards(i);
          this.showPlayer(i);
          this.showScore(i);
          this.showDetail(i);
          ReplayData.zimo && this.showWinIcon(i);
        }
        for (var i = Object.keys(ReplayData.players).length; i < 4; i++) {
          var playerNode = cc.find("player" + (i + 1), this.node);
          playerNode.active = false;
        }
        this.showRoundInfo();
        this.showResultIcon();
      },
      showWinIcon: function showWinIcon(index) {
        var uid = ReplayData.players[index].uid;
        var parent = cc.find("player" + (index + 1), this.node);
        var node = cc.find("huIcon", parent);
        node.active = uid == ReplayData.zimo.winner;
      },
      showResultIcon: function showResultIcon() {
        var Uid;
        if (true == otherReplay[0]) {
          for (var key in ReplayRoomData.players) if (key) {
            Uid = ReplayRoomData.players[key].uid;
            break;
          }
        } else Uid = GameData.player.uid;
        var myScore = ReplayData.scores[Uid];
        if (myScore > 0) {
          this.winNode.active = true;
          this.lostNode.active = false;
          this.pingNode.active = false;
        } else if (myScore < 0) {
          this.winNode.active = false;
          this.lostNode.active = true;
          this.pingNode.active = false;
        } else {
          this.winNode.active = false;
          this.lostNode.active = false;
          this.pingNode.active = true;
        }
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + ReplayData.room;
        var time = getTimeStr(ReplayRoomData.createtime);
        this.createtime.string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        var showRoundNum = 0;
        for (var i = 0; i < ReplayRoomData.games.length; i++) ReplayData.id == ReplayRoomData.games[i].id && (showRoundNum = i + 1);
        this.roundData.string = "第" + showRoundNum + "局";
      },
      showDetail: function showDetail(index) {
        var player = ReplayData.players[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.node);
        var label = termNode.getComponent("cc.Label");
        var huTypeStr = [];
        if (ReplayData.zimo && ReplayData.zimo.winner == player.uid) {
          var huType = ReplayData.zimo.type;
          huTypeStr = ReplayDataCenter.replayResultDetail(huType);
          label.string = huTypeStr[0];
        } else label.string = "";
        console.log("huTypeStr = " + JSON.stringify(huTypeStr));
        ReplayData.opts.zhuang == player.uid ? true == huTypeStr[1] && (label.string += "铲牌 -2   ") : label.string += "";
        ReplayRoomData.opts.times && (1 == ReplayRoomData.opts.times ? label.string += "底分 *1   " : 2 == ReplayRoomData.opts.times ? label.string += "底分 *2   " : 5 == ReplayRoomData.opts.times && (label.string += "底分 *5   "));
        var index1 = 0, index2 = 0;
        for (var i = 0; i < this.gangCard.length; i++) ReplayDataCenter.isHuier(this.gangCard[i][0]) ? label.string += "金杠 +" + ReplayRoomData.opts.jingang + "   " : 4 == this.gangCard[i].length ? index1++ : 5 == this.gangCard[i].length && index2++;
        0 == index1 || (label.string += "明杠 +1*" + index1 + "  ");
        0 == index2 || (label.string += "暗杠 +2*" + index2 + "  ");
        (index1 > 0 || index2 > 0) && true == ReplayRoomData.opts.doubleGang && ReplayData.opts.zhuangnum[ReplayData.opts.zhuang] > 0 && (label.string += "杠翻番  ");
        if (ReplayData.opts.zhuang == player.uid && ReplayData.opts.zhuangnum[player.uid] > 0) {
          var zhuangNum = ReplayData.opts.zhuangnum[player.uid];
          var score = 2 * zhuangNum;
          label.string += "坐" + zhuangNum + "庄 *" + score;
        } else if (ReplayData.opts.zhuang != player.uid && ReplayData.opts.zhuangnum[player.uid] > 0) {
          var zhuangNum = ReplayData.opts.zhuangnum[player.uid];
          var score = 2 * zhuangNum;
          label.string += "拉" + zhuangNum + "庄 *" + score;
        }
      },
      showPlayer: function showPlayer(index) {
        var player = ReplayData.players[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.node);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.node);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.node);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.node);
        var creator = cc.find("player" + (index + 1) + "/head/creator", this.node);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == ReplayData.opts.zhuang;
        creator.active = player.uid == ReplayRoomData.creator;
        if (void 0 == player.headimgurl || "" == player.headimgurl || player.headimgurl.length <= 0) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showCards: function showCards(index) {
        var player = ReplayData.players[index];
        var playerNode = cc.find("player" + (index + 1), this.node);
        var parent = cc.find("cards", playerNode);
        var uid = player.uid;
        var hu = false;
        ReplayData.zimo && (hu = uid == ReplayData.zimo.winner);
        hu && (this.isMark = 0);
        var playCard;
        for (var i = 0; i < ReplayDataCenter.resultCard.length; i++) {
          var cards = ReplayDataCenter.resultCard[i];
          if (cards.uid == uid) {
            playCard = cards;
            break;
          }
        }
        this.pengCard = playCard.peng;
        this.gangCard = playCard.gang;
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        var cardHand = playCard.hand;
        var handNode = cc.find("cardHand", parent);
        for (var i = 0; i < cardHand.length; i++) {
          var card = cardHand[i];
          var cardNode = cc.instantiate(this.cardTemplate);
          cardNode.getComponent("cardTemplate").setId(card);
          cardNode.getComponent("cardTemplate").enableButton(false);
          var icon = "mj_face_xia_shou_" + card + ".png";
          cardNode.getComponent("cardTemplate").setIcon("resources/mjcard2d/" + icon);
          cardNode.x = 85 * i;
          this.setMyHuierVisible(cardNode, card);
          ReplayData.zimo && this.setMyHuImageVisible(cardNode, card, hu);
          handNode.addChild(cardNode);
        }
        var childNum = 0;
        var pengNode = cc.find("cardPeng", parent);
        var child = pengNode.children;
        for (var i = 0; i < child.length; i++) child[i].active && childNum++;
        handNode.x = 230 * childNum - 532;
        playerNode.active = true;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        ReplayDataCenter.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            huierNode.y = huierNode.y - 18;
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find("down", huierNode).active = true;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyHuImageVisible: function setMyHuImageVisible(cardNode, cardId, isHu) {
        var orCard = ReplayData.zimo.obtain;
        var show = false;
        false == isHu ? show = false : orCard == cardId && 0 == this.isMark && (show = true);
        var huImageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huImageNode) {
          if (true == show) {
            huImageNode = cc.instantiate(this.cardHuImage);
            huImageNode.y = huImageNode.y - 20;
            cardNode.addChild(huImageNode);
            huImageNode.name = cardNode.name + "_hu";
          }
        } else huImageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var cards = this.gangCard.concat(this.pengCard);
          var size = parseInt(13 / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].length) {
                  face.node.active = true;
                  var cardId = cards[i][n];
                  this.showCardContent(face.node, cardHeader, cardId);
                } else face.node.active = false;
              }
              if (5 == cards[i].length) {
                var face = node.getChildByName("card_face4").getComponent("cc.Sprite");
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                face.node.active = false;
                back.node.active = true;
              } else {
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      showScore: function showScore(index) {
        var uid = ReplayData.players[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.node);
        if (ReplayData.scores[uid] > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + ReplayData.scores[uid];
        } else if (ReplayData.scores[uid] < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = ReplayData.scores[uid];
        } else {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = ReplayData.scores[uid];
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {} ],
  RoundItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4282pjyzJGIZVX6KzRyOCr", "RoundItem");
    "use strict";
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        roundIndexLabel: cc.Label,
        roomIdLabel: cc.Label,
        creatorIdLabel: cc.Label,
        dateLabel: cc.Label,
        content: cc.Node,
        itemPrefab: cc.Prefab,
        _playerItems: [],
        _recordId: 0,
        _createTime: 0,
        _roomId: 0,
        replayNum: cc.Label,
        gameTypeNode: cc.Node
      },
      onLoad: function onLoad() {},
      openReplay: function openReplay(evt) {
        var self = this;
        GameNet.getInstance().request("game.playerHandler.getGameRecord", {
          id: self._recordId,
          roomid: self._roomId
        }, function(rtn) {
          if (!rtn || Object.keys(rtn).length <= 0) return;
          ReplayData = rtn;
          if (ReplayData.cards) {
            var cardlength = ReplayData.cards[0].cards.length;
            var huier = ReplayData.opts.huier;
            var huier2 = GameData.getOtherHuier(huier);
            13 == cardlength ? HuierList = [ huier, huier2 ] : 16 == cardlength && (HuierList = [ huier ]);
          }
          cc.log("go to replay");
          switch (ReplayRoomData.opts.gameType) {
           case gameDefine.GameType.Game_Poker_DDZ:
            cc.director.loadScene("replay-DDZ");
            break;

           case gameDefine.GameType.Game_Mj_Tianjin:
            cc.director.loadScene("replay");
            break;

           case gameDefine.GameType.Game_Mj_Shishi:
            cc.director.loadScene("replay-shishi");
            break;

           case gameDefine.GameType.Game_TDK:
            cc.director.loadScene("replay-tdk");
            break;

           default:
            createMoveMessage("暂无回放");
          }
        });
      },
      show: function show(roundIndex, roomId, creatorId, createtime, recordId) {
        this._roomId = roomId;
        this._recordId = recordId;
        this._createTime = createtime;
        this.roundIndexLabel.string = roundIndex;
        var len = roomId.toString().length;
        var zeroLen = 6 - len;
        for (var i = 0; i < zeroLen; i++) roomId = "0" + roomId;
        this.roomIdLabel.string = roomId;
        this.creatorIdLabel.string = creatorId;
        this.replayNum.string = recordId;
        var time = getTimeStr(recordId);
        var dateStr = time[0] + "." + time[1] + "." + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        this.dateLabel.string = dateStr;
      },
      showGameType: function showGameType(data) {
        var gametype = cc.find("typeName", this.gameTypeNode);
        var clubType = cc.find("roomtype", this.gameTypeNode);
        var roomRuleString = "";
        var roomRule = data.roomType;
        switch (roomRule) {
         case 1:
          roomRuleString = "(普通房)";
          break;

         case 2:
          roomRuleString = "(俱乐部)";
        }
        clubType.getComponent("cc.Label").string = roomRuleString;
        var strType = "";
        switch (data.gameType) {
         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          strType = "天津斗地主";
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          strType = "石狮麻将";
          break;

         case gameDefine.GameType.Game_Mj_Tianjin:
          strType = "天津麻将";
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          strType = "桦甸麻将";
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          strType = "十三水";
          break;

         case gameDefine.GameType.Game_niu_niu:
          strType = "经典牛牛";
          break;

         case gameDefine.GameType.Game_TDK:
          strType = "填大坑";
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          strType = "经典斗地主";
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          strType = "红中麻将";
          break;

         case gameDefine.GameType.Game_Mj_CC:
          strType = "长春麻将";
        }
        gametype.getComponent("cc.Label").string = strType;
      },
      setPlayers: function setPlayers(players, scores) {
        this._playerItems = [];
        if (0 == this._playerItems.length) for (var i = 0; i < Object.keys(players).length; ++i) {
          var playerItem = cc.instantiate(this.itemPrefab);
          playerItem.parent = this.content;
          playerItem.setPosition(190 * i, 10);
          this._playerItems.push(playerItem);
        }
        var index = 0;
        for (var key in players) {
          var player = players[key];
          if (index < Object.keys(players).length) {
            var playerItemNode = this._playerItems[index];
            var playerInfo = playerItemNode.getComponent("RecordPlayerInfo");
            playerInfo.setName(player.name);
            playerInfo.setHeadIcon(player.headimgurl);
            playerInfo.setId(player.uid);
            null == scores || void 0 == scores ? playerInfo.setZongfen(1, 0) : playerInfo.setZongfen(1, scores[player.uid]);
            playerInfo.setJifen(void 0);
          }
          index++;
        }
      },
      copyRepayNum: function copyRepayNum(eve) {
        soundMngr.instance.playAudioOther("button");
        cc.log("this._roomId = " + this._roomId + ",this._createTime = " + this._createTime);
        var num = "";
        num = num + this._roomId + this._createTime;
        WriteLog("shareStr = " + num);
        textClipboard(num);
        createMoveMessage("复制回放码成功");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  RoundPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "380a3oAtgRJRJXhjiO0P+Hj", "RoundPanel");
    "use strict";
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        scrollView: cc.ScrollView,
        prefabItem: cc.Prefab,
        _itemList: [],
        roomID: cc.Label,
        creatorLabel: cc.Label,
        roonMaxNum: cc.Label,
        roomRules: cc.Label
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("tjddz-onGameStart", this, this.showTableLayer);
        if (!ReplayDataCenter.openReplayPanel) return;
        var players = {};
        for (var i = 0; i < ReplayDataCenter.room.length; i++) ReplayDataCenter.room[i].roomid == ReplayRoomData.roomid && (players = ReplayDataCenter.room[i].players);
        var self = this;
        GameNet.getInstance().request("game.playerHandler.getRoomRecord", {
          roomid: ReplayData.room,
          createtime: ReplayRoomData.createtime
        }, function(rtn) {
          self.show(rtn, rtn.creator);
        });
        ReplayDataCenter.openReplayPanel = false;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("ddz-onGameStart", this, this.showTableLayer);
        unregistEvent("tjddz-onGameStart", this, this.showTableLayer);
      },
      showTableLayer: function showTableLayer() {
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? cc.director.loadScene("table") : GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ ? cc.director.loadScene("table-DDZ") : GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ && cc.director.loadScene("table-TJDDZ");
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView("RoundPanel");
        otherReplay[0] = false;
        ReplayDataCenter.openRoundPanel = true;
        openView("RecordPanel");
      },
      show: function show(roundData, creatorId) {
        this._itemList = [];
        this.roomID.string = "";
        this.creatorLabel.string = "";
        this.roonMaxNum.string = "";
        this.showRoomRule("");
        this.scrollView.content.removeAllChildren();
        if (Object.keys(roundData).length <= 0) {
          createMoveMessage("暂无牌局详情");
          return;
        }
        var gamesData;
        roundData.games ? gamesData = roundData.games : roundData.record && (gamesData = roundData.record);
        if (0 == this._itemList.length) for (var i = 0; i < gamesData.length; ++i) {
          var item = cc.instantiate(this.prefabItem);
          this.scrollView.content.addChild(item);
          this._itemList.push(item);
          item.active = false;
        }
        ReplayRoomData = roundData;
        this.roomID.string = roundData.roomid;
        this.creatorLabel.string = creatorId;
        ReplayRoomData.creator = creatorId;
        this.roonMaxNum.string = gamesData.length;
        this.showRoomRule(roundData.opts);
        for (var index = this._itemList.length - 1; index >= 0; index--) {
          var roundItemNode = this._itemList[index];
          if (roundItemNode.active) break;
          var oneRoundData = gamesData[gamesData.length - 1 - index];
          if (index < gamesData.length && null != oneRoundData.score) {
            var roundItem = roundItemNode.getComponent("RoundItem");
            roundItem.show(gamesData.length - index, roundData.roomid, creatorId, roundData.createtime, oneRoundData.id);
            roundItem.showGameType(roundData.opts);
            cc.log("oneRoundData = " + JSON.stringify(oneRoundData));
            roundItem.setPlayers(roundData.players, oneRoundData.score);
            roundItemNode.active = true;
          } else roundItemNode.active = false;
        }
      },
      showRoomRule: function showRoomRule(roomRule) {
        var rule = "";
        switch (roomRule.gameType) {
         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          rule = getRuleStrTJDDZ(roomRule);
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          rule = getRuleStrShiShi(roomRule);
          break;

         case gameDefine.GameType.Game_Mj_Tianjin:
          rule = getRoomRuleStr(roomRule);
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          rule = getRuleStrHd(roomRule);
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          rule = getRuleStr13(roomRule);
          break;

         case gameDefine.GameType.Game_niu_niu:
          rule = getRuleStrNiuNiu(roomRule);
          break;

         case gameDefine.GameType.Game_TDK:
          rule = getRuleStrTDK(roomRule);
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          rule = getRuleStrDDZ(roomRule);
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          rule = getRuleStrHongZhong(roomRule);
          break;

         case gameDefine.GameType.Game_Mj_CC:
          rule = getRuleStrCC(roomRule);
        }
        this.roomRules.string = rule;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  RunlampPanel1: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4edcZNepZA0ridzpQALZtv", "RunlampPanel1");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        runlampLabel: cc.Label,
        _paoMadengX: 0
      },
      onLoad: function onLoad() {
        this.node.zIndex = 1e3;
        this.runPaoMadeng();
        var point = cc.director.getWinSize();
        var paoMaDeng = cc.find("paoMaDeng", this.node);
        paoMaDeng.setPosition(cc.p(point.width / 2, point.height / 1.25));
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      },
      changeRunlamp: function changeRunlamp(oriented) {
        var point = cc.director.getWinSize();
        var paoMaDeng = cc.find("paoMaDeng", this.node);
        if (oriented == AutoScene.SCENE_HORIZONTAL) {
          paoMaDeng.rotation = -90;
          paoMaDeng.setPosition(cc.p(point.height / 3.8, point.width / 3.2));
        } else oriented == AutoScene.SCENE_VERTICAL && paoMaDeng.setPosition(cc.p(point.width / 1.8, point.height / 1.18));
      },
      runPaoMadeng: function runPaoMadeng() {
        this._paoMadengX = this.runlampLabel.node.x;
        GameData.configData.paomadengIndex = 0;
        this.gotoPaoMadeng();
        this.schedule(this.gotoPaoMadeng, 10);
      },
      gotoPaoMadeng: function gotoPaoMadeng() {
        if (!GameData.serverNoticeData[1]) return;
        var paoMaStr = GameData.serverNoticeData[1].content;
        paoMaStr = paoMaStr.replace(/[\n]/gi, "");
        this.runlampLabel.string = paoMaStr;
        this.runlampLabel.node.x = this._paoMadengX;
        var moveToAction = cc.moveTo(10, cc.p(this._paoMadengX - 570 - this.runlampLabel.node.width, this.runlampLabel.node.y));
        var sequence = cc.sequence(moveToAction, cc.callFunc(function() {
          closeView("RunlampPanel1");
        }));
        this.runlampLabel.node.runAction(sequence);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  RunlampPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d476aKaA9FFZ6+yCGg93TYl", "RunlampPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        runlampLabel: cc.Label,
        _paoMadengX: 0
      },
      onLoad: function onLoad() {
        this.node.zIndex = 1e3;
        this.runPaoMadeng();
        var point = cc.director.getWinSize();
        var paoMaDeng = cc.find("paoMaDeng", this.node);
        paoMaDeng.setPosition(cc.p(point.width / 2, point.height / 1.25));
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      },
      changeRunlamp: function changeRunlamp(oriented) {
        var point = cc.director.getWinSize();
        var paoMaDeng = cc.find("paoMaDeng", this.node);
        if (oriented == AutoScene.SCENE_HORIZONTAL) {
          paoMaDeng.rotation = -90;
          paoMaDeng.setPosition(cc.p(point.height / 3.8, point.width / 3.2));
        } else oriented == AutoScene.SCENE_VERTICAL && paoMaDeng.setPosition(cc.p(point.width / 1.8, point.height / 1.18));
      },
      runPaoMadeng: function runPaoMadeng() {
        this._paoMadengX = this.runlampLabel.node.x;
        this.gotoPaoMadeng();
        this.schedule(this.gotoPaoMadeng, 10);
      },
      gotoPaoMadeng: function gotoPaoMadeng() {
        if (!GameData.serverNoticeData) return;
        var paoMaStr = GameData.serverNoticeData[0].content;
        paoMaStr = paoMaStr.replace(/[\n]/gi, "");
        this.runlampLabel.string = paoMaStr;
        this.runlampLabel.node.x = this._paoMadengX;
        var moveToAction = cc.moveTo(10, cc.p(this._paoMadengX - 570 - this.runlampLabel.node.width, this.runlampLabel.node.y));
        var sequence = cc.sequence(moveToAction, cc.callFunc(function() {
          closeView("RunlampPanel");
        }));
        this.runlampLabel.node.runAction(sequence);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  SSSCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5cec9pLTlFJfJHIAjhtQQMN", "SSSCard");
    "use strict";
    var soundMngr = require("SoundMngr");
    var SSSCard = cc.Class({
      extends: cc.Component,
      properties: {
        card: {
          default: null,
          type: cc.Node
        },
        oneCard: {
          default: null,
          type: cc.Node
        },
        towCard: {
          default: null,
          type: cc.Node
        },
        id: 0,
        isSelect: false,
        isChange: false,
        cardHand: cc.Node
      },
      onLoad: function onLoad() {
        this.cards = [];
        this.cardList = [];
        this.oneCard;
        this.towCard;
        var card0 = cc.find("card0", this.cardHand);
        var card1 = cc.find("card1", this.cardHand);
        this.cardHand.getChildByName("upCardNode") || (this.distance = 1.45 * Math.abs(card0.getPositionX() - card1.getPositionX()));
        this.addTouchEvent();
        this._selectArray = [];
        this._init_x = 0;
        this._end_x = 0;
      },
      onDestroy: function onDestroy() {
        this.card.off(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.card.off(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.card.off(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.card.off(cc.Node.EventType.TOUCH_CANCEL, this.cancelTouch, this);
      },
      addTouchEvent: function addTouchEvent() {
        this.card.on(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.card.on(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.card.on(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.card.on(cc.Node.EventType.TOUCH_CANCEL, this.cancelTouch, this);
      },
      pushInCardId: function pushInCardId(cardId) {
        if (true == this.checkIsHave(cardId)) return;
        this._selectArray.push(cardId);
      },
      checkIsHave: function checkIsHave(cardId) {
        for (var key = 0; key < this._selectArray.length; key++) if (this._selectArray[key] == cardId) return true;
        return false;
      },
      checkCardPosition_x: function checkCardPosition_x() {
        var children = this.card.parent.getChildren();
        if (children.length <= 0) {
          cc.log("function:checkCardPosition_x.. children is empty.");
          return;
        }
        for (var key = 0; key < this.card.parent.getChildrenCount(); key++) {
          var cardNode = children[key];
          if (!cardNode) continue;
          var distance = cardNode.width * cardNode.scaleX / 4;
          var select_x = cardNode.x - distance;
          select_x < this._init_x && select_x > this._end_x ? this.pushInCardId(cardNode.getComponent("SSSCard").id) : select_x > this._init_x && select_x < this._end_x && this.pushInCardId(cardNode.getComponent("SSSCard").id);
        }
      },
      setCardMaskState: function setCardMaskState() {
        var children = this.card.parent.getChildren();
        if (children.length <= 0) {
          cc.log("function:setCardMaskState.. children is empty.");
          return;
        }
        for (var key = 0; key < this.card.parent.getChildrenCount(); key++) {
          var cardNode = children[key];
          if (!cardNode) continue;
          if (!cardNode.getComponent("SSSCard")) continue;
          var cardId = cardNode.getComponent("SSSCard").id;
          if (cardId < 0) continue;
          var show = false;
          true == this.checkIsHave(cardId) && (show = true);
          this.showCardMask(cardNode, show);
        }
      },
      showCardMask: function showCardMask(card, show) {
        var cardMask = cc.find("cardMask", card);
        cardMask.active = show;
      },
      setCardSelectState: function setCardSelectState() {
        for (var key = 0; key < this._selectArray.length; key++) {
          var cardId = this._selectArray[key];
          if (cardId < 0) continue;
          var cardNode = cc.find("card" + cardId, this.card.parent);
          if (!cardNode) continue;
          true == this.checkIsHave(cardId) && (cardNode.getComponent("SSSCard").isSelect = false == cardNode.getComponent("SSSCard").isSelect);
        }
      },
      startTouch: function startTouch(e) {
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_6);
        if (true == this.isChange) {
          this.setCardStatus(this.card);
          return;
        }
        this.reSetCardsStatus();
        var position = e.touch.getLocation();
        this._init_x = this.card.parent.convertToNodeSpaceAR(position).x;
        this._selectArray = [];
        this.pushInCardId(this.id);
        this.setCardMaskState();
      },
      moveTouch: function moveTouch(e) {
        if (true == this.isChange) return;
        var position = e.touch.getLocation();
        this._end_x = this.card.parent.convertToNodeSpaceAR(position).x;
        this._selectArray = [];
        this.pushInCardId(this.id);
        this.checkCardPosition_x();
        this.setCardMaskState();
      },
      endTouch: function endTouch(e) {
        this.cardList = this._selectArray;
        this.setCardSelectState();
        var is = false;
        if (true == this.isChange) {
          is = true;
          this.showSelectCard(is);
          return;
        }
        this._selectArray = [];
        this.setCardMaskState();
        this.showSelectCard(is);
      },
      cancelTouch: function cancelTouch(e) {
        this.cardList = this._selectArray;
        this.setCardSelectState();
        var is = false;
        if (true == this.isChange) {
          is = true;
          this.showSelectCard(is);
          return;
        }
        this._selectArray = [];
        this.setCardMaskState();
        this.showSelectCard(is);
      },
      setCardList: function setCardList(cardIdArr) {
        this.cardList = [];
        this.cardList = cardIdArr;
      },
      bounceCard: function bounceCard() {
        for (var i = 0; i < this.cardList.length; i++) {
          var node = cc.find("card" + this.cardList[i], this.cardHand);
          true == node.getComponent("SSSCard").isSelect ? node.y = node.getPositionY() + node.getContentSize().height / 5 * .55 : false == node.getComponent("SSSCard").isSelect && (node.y = 0);
        }
        this.removeAllCardsList();
      },
      showSelectCard: function showSelectCard(is) {
        if (this.cardList.length >= 1 && false == is) this.bounceCard(); else if (true == is) {
          this.moveTowCard("up", 3) ? this.cardList = [] : this.moveTowCard("mid", 5) ? this.cardList = [] : this.moveTowCard("down", 5) && (this.cardList = []);
          this.removeAllCards();
        }
      },
      showOneCard: function showOneCard(show) {
        this.oneCard.active = show;
      },
      showTowCard: function showTowCard(show) {
        this.towCard.active = show;
      },
      moveTowCard: function moveTowCard(row, len) {
        var self = this;
        var idx = 0;
        var oneCard = cc.find("oneCard", this.cardHand);
        var towCard = cc.find("towCard", this.cardHand);
        var cardRow = cc.find(row + "CardNode", this.cardHand);
        this.oneCard = oneCard;
        this.towCard = towCard;
        for (var i = 0; i < len; i++) {
          var node = cc.find("card" + i, cardRow);
          var card = node.getComponent("SSSCard");
          true == card.isSelect && (this.cards[this.cards.length] = {
            card: node,
            id: i,
            row: row
          });
        }
        if (2 == this.cards.length) {
          var spriteFrame1 = this.cards[0].card.getComponent(cc.Sprite).spriteFrame;
          var spriteFrame2 = this.cards[1].card.getComponent(cc.Sprite).spriteFrame;
          this.showCardMask(this.cards[0].card, false);
          this.showCardMask(this.cards[1].card, false);
          var cardPos1 = this.cards[0].card.getPosition();
          var cardPos2 = this.cards[1].card.getPosition();
          if (false == this.oneCard.active && false == this.towCard.active) {
            this.oneCard.setPosition(cardPos1.x, this.cards[0].card.parent.getPositionY());
            this.towCard.setPosition(cardPos2.x, this.cards[1].card.parent.getPositionY());
            this.cards[0].card.getComponent("SSSCard").isSelect = false;
            this.cards[1].card.getComponent("SSSCard").isSelect = false;
            moveCard.oneCard = this.cards[0];
            moveCard.towCard = this.cards[1];
            var temp = cardPoker13[this.cards[0].row][this.cards[0].id];
            cardPoker13[this.cards[0].row][this.cards[0].id] = cardPoker13[this.cards[1].row][this.cards[1].id];
            cardPoker13[this.cards[1].row][this.cards[1].id] = temp;
          } else if (true == this.oneCard.active || true == this.towCard.active) {
            this.cards[0].card.getComponent("SSSCard").isSelect = false;
            this.cards[1].card.getComponent("SSSCard").isSelect = false;
            return;
          }
          this.oneCard.getComponent(cc.Sprite).spriteFrame = spriteFrame1;
          this.towCard.getComponent(cc.Sprite).spriteFrame = spriteFrame2;
          this.cards[0].card.getComponent(cc.Sprite).spriteFrame = spriteFrame2;
          this.cards[1].card.getComponent(cc.Sprite).spriteFrame = spriteFrame1;
          this.cards[0].card.active = false;
          this.cards[1].card.active = false;
          this.showOneCard(true);
          this.showTowCard(true);
          var actionTo1 = cc.moveTo(.5, cc.p(cardPos2.x, this.cards[1].card.parent.getPositionY()));
          var actionTo2 = cc.moveTo(.5, cc.p(cardPos1.x, this.cards[0].card.parent.getPositionY()));
          var cardNode1 = this.cards[0].card;
          var cardNode2 = this.cards[1].card;
          var oneCall = function oneCall() {
            cardNode1.active = true;
            self.showOneCard(false);
          };
          var towCall = function towCall() {
            cardNode2.active = true;
            self.showTowCard(false);
          };
          var oneCallFunc = cc.callFunc(oneCall, this);
          var towCallFunc = cc.callFunc(towCall, this);
          var removeCardsFunc = cc.callFunc(function() {
            self.removeAllCards();
          }, this);
          var seq1 = cc.sequence(actionTo1, oneCallFunc, removeCardsFunc);
          var seq2 = cc.sequence(actionTo2, towCallFunc, removeCardsFunc);
          this.oneCard.runAction(seq1);
          this.towCard.runAction(seq2);
          return true;
        }
        return false;
      },
      removeAllCards: function removeAllCards() {
        this.cards.length > 0 && this.cards.splice(0, this.cards.length);
      },
      removeAllCardsList: function removeAllCardsList() {
        this.cardList.length > 0 && this.cardList.splice(0, this.cardList.length);
      },
      removeCardListByValue: function removeCardListByValue(value) {
        for (var i = 0; i < this.cardList.length; i++) if (this.cardList[i] == value) {
          this.cardList.splice(i, 1);
          return false;
        }
        this.cardList[this.cardList.length] = value;
        return true;
      },
      setCardStatus: function setCardStatus(node) {
        var spriteFrame = node.getComponent(cc.Sprite).spriteFrame;
        if (!spriteFrame) return;
        if (false == node.getComponent("SSSCard").isSelect) {
          if (false == node.getComponent("SSSCard").isChange) {
            this.removeCardListByValue(node.getComponent("SSSCard").id);
            this.showCardMask(node, true);
          } else true == node.getComponent("SSSCard").isChange && this.showCardMask(node, true);
          node.getComponent("SSSCard").isSelect = true;
        } else if (true == node.getComponent("SSSCard").isSelect) {
          if (false == node.getComponent("SSSCard").isChange) {
            this.removeCardListByValue(node.getComponent("SSSCard").id);
            this.showCardMask(node, true);
          } else true == node.getComponent("SSSCard").isChange && this.showCardMask(node, false);
          node.getComponent("SSSCard").isSelect = false;
        }
      },
      reSetCardsStatus: function reSetCardsStatus() {
        var poker = this.cardHand.parent;
        var parent = cc.find("cardType", poker);
        var cardType1 = cc.find("upCardNode", parent);
        var cardType2 = cc.find("midCardNode", parent);
        var cardType3 = cc.find("downCardNode", parent);
        for (var key = 0; key < 3; key++) {
          var node = cc.find("card" + key, cardType1);
          this.showCardMask(node, false);
        }
        for (var key = 0; key < 5; key++) {
          var node1 = cc.find("card" + key, cardType2);
          var node2 = cc.find("card" + key, cardType3);
          this.showCardMask(node1, false);
          this.showCardMask(node2, false);
        }
      }
    });
    module.exports = SSSCard;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  SSSChatPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0d7e6361OtHApblT5I8PbVU", "SSSChatPanel");
    "use strict";
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        emoScrollView: cc.ScrollView,
        wordScrollView: cc.ScrollView,
        wordItem: cc.Node,
        chatInput: cc.EditBox,
        sendBtn: cc.Button,
        emoBtn: cc.Button,
        wordBtn: cc.Button,
        emoSprite: cc.Sprite,
        wordSprite: cc.Sprite,
        chatAnimationPrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        this.emoContent = this.emoScrollView.content;
        this.wordContent = this.wordScrollView.content;
        this.initAnimationItems();
        this.initFastVoiceItems();
        this.onWordButton();
        this.emoScrollView.node.off(cc.Node.EventType.TOUCH_START, this.emoScrollView._onTouchMoved, this.emoScrollView, true);
        this.emoScrollView.node.off(cc.Node.EventType.TOUCH_MOVE, this.emoScrollView._onTouchMoved, this.emoScrollView, true);
        this.emoScrollView.node.off(cc.Node.EventType.TOUCH_END, this.emoScrollView._onTouchMoved, this.emoScrollView, true);
        this.emoScrollView.node.off(cc.Node.EventType.TOUCH_CANCEL, this.emoScrollView._onTouchMoved, this.emoScrollView, true);
        this.wordScrollView.node.off(cc.Node.EventType.TOUCH_START, this.wordScrollView._onTouchMoved, this.wordScrollView, true);
        this.wordScrollView.node.off(cc.Node.EventType.TOUCH_MOVE, this.wordScrollView._onTouchMoved, this.wordScrollView, true);
        this.wordScrollView.node.off(cc.Node.EventType.TOUCH_END, this.wordScrollView._onTouchMoved, this.wordScrollView, true);
        this.wordScrollView.node.off(cc.Node.EventType.TOUCH_CANCEL, this.wordScrollView._onTouchMoved, this.wordScrollView, true);
      },
      initAnimationItems: function initAnimationItems() {
        var init_x = -175, init_y = -130, interval_w = 120, interval_h = 130;
        var animationCount = 16;
        for (var i = 0; i < animationCount; i++) {
          var charEmo = this.emoContent.children[i];
          if (void 0 == charEmo) {
            charEmo = cc.instantiate(this.chatAnimationPrefab);
            this.emoContent.addChild(charEmo);
          }
          charEmo.x = init_x + i % 4 * interval_w;
          charEmo.y = init_y - parseInt(i / 4) * interval_h;
          var animation = charEmo.getComponent(cc.Animation);
          if (i < animationCount) {
            var aniName = animation.getClips()[i].name;
            charEmo.name = aniName;
            animation.play(aniName);
            charEmo.on(cc.Node.EventType.TOUCH_END, this.onEmoClick, this);
          }
        }
      },
      initFastVoiceItems: function initFastVoiceItems() {
        var talks = [ "想跑了是吧，全国都解放了。", "楞嘛神儿！相面那。", "嘛钱不钱的乐呵乐呵得了。", "好嘛！一把十三不靠。", "会玩儿嘛！竟放生张儿。", "混儿都将了啊。" ];
        var soundKeys = [ "card_K_1", "card_K_2", "card_K_3", "card_K_4", "card_K_5", "card_K_6" ];
        if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi) talks = [ "你们都是哪里的人呀？", "来来来，血战到天明！", "哈哈，上来就可以游金啦！", "今天让你们输到不敢在玩麻将！", "快点出牌，等的花儿都谢了", "老人打牌比你打的都快！" ]; else if (GameData.client.gameType == gameDefine.GameType.Game_Poker_13shui) {
          talks = [ "大家好，很高兴见到各位！", "和你合作真是太愉快了。", "快点儿啊！都等得我花都谢了。", "你的牌打得也忒儿好咧！", "不要吵了，专心玩游戏吧。", "又断线了， 网络怎么这么差啊。", "各位真不好意思，我要离开一会儿。", "不要走，决战到天亮。" ];
          soundKeys = [ "Chat_0", "Chat_1", "Chat_2", "Chat_3", "Chat_4", "Chat_5", "Chat_6", "Chat_7", "Chat_8", "Chat_9", "Chat_10" ];
        }
        for (var key in this.wordContent.children) {
          var node = this.wordContent.children[key];
          node.active = false;
        }
        var interval = 20;
        this.wordContent.height = 650;
        for (var i = 0; i < talks.length; i++) {
          var voiceItem = this.wordContent.children[i];
          if (void 0 == voiceItem) {
            voiceItem = cc.instantiate(this.wordItem);
            voiceItem.parent = this.wordContent;
            voiceItem.x = this.wordItem.x;
            voiceItem.y = this.wordItem.y - (this.wordItem.height + interval) * i;
          }
          voiceItem.active = true;
          cc.find("label", voiceItem).getComponent(cc.Label).string = talks[i];
          voiceItem.getComponent("SSSFastVoiceButton").sound = soundKeys[i];
        }
      },
      onWordButton: function onWordButton() {
        this.wordScrollView.node.active = true;
        this.emoScrollView.node.active = false;
        this.wordSprite.node.active = true;
        this.emoSprite.node.active = false;
        this.wordBtn.node.active = false;
        this.emoBtn.node.active = true;
      },
      onEmoButton: function onEmoButton() {
        this.wordScrollView.node.active = false;
        this.emoScrollView.node.active = true;
        this.wordSprite.node.active = false;
        this.emoSprite.node.active = true;
        this.wordBtn.node.active = true;
        this.emoBtn.node.active = false;
      },
      onEmoClick: function onEmoClick(e) {
        cc.log("on emo click : " + e.target.name);
        var aniName = e.target.name;
        ChatHandler.getInstance().requestChat("emo", aniName, function(rtn) {});
        closeSSSView(this.node.name);
      },
      onSendButton: function onSendButton() {
        if ("" != this.chatInput.string) {
          ChatHandler.getInstance().requestChat("word", this.chatInput.string, function(rtn) {});
          this.chatInput.string = "";
          closeSSSView(this.node.name);
        }
      },
      onClose: function onClose() {
        closeSSSView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  SSSCreateRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97914sXMyVLLY0rw/anRdum", "SSSCreateRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerNum2: {
          default: null,
          type: cc.Toggle
        },
        playerNum3: {
          default: null,
          type: cc.Toggle
        },
        playerNum4: {
          default: null,
          type: cc.Toggle
        },
        playerNum5: {
          default: null,
          type: cc.Toggle
        },
        owner: {
          default: null,
          type: cc.Toggle
        },
        AA: {
          default: null,
          type: cc.Toggle
        },
        seconds30: {
          default: null,
          type: cc.Toggle
        },
        minute1: {
          default: null,
          type: cc.Toggle
        },
        minute5: {
          default: null,
          type: cc.Toggle
        },
        unlimited: {
          default: null,
          type: cc.Toggle
        },
        round15: {
          default: null,
          type: cc.Toggle
        },
        round30: {
          default: null,
          type: cc.Toggle
        },
        round45: {
          default: null,
          type: cc.Toggle
        },
        round60: {
          default: null,
          type: cc.Toggle
        },
        round75: {
          default: null,
          type: cc.Toggle
        }
      },
      onLoad: function onLoad() {
        this.refreshUi();
      },
      createRoom: function createRoom() {
        GameData.setGameType(gameDefine.GameType.Game_Poker_13shui);
        this.saveRuleFromUi();
        var createData = {
          gameType: GameType.Game_Poker_13shui,
          costType: GameData13.createRoomOpts.payType,
          joinermax: GameData13.createRoomOpts.joinermax,
          limitTime: GameData13.createRoomOpts.limiteTime,
          roundmax: GameData13.createRoomOpts.roundmax,
          roundRule: 1,
          roomType: 0,
          clubId: 0,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_13shui) return createData;
        createData.currencyType = modeTypeData.Game_Poker_13shui.CurrencyType;
        createData.settleType = modeTypeData.Game_Poker_13shui.SettleType;
        return createData;
      },
      saveRuleFromUi: function saveRuleFromUi() {
        this.round15.isChecked ? GameData13.createRoomOpts.roundmax = 15 : this.round30.isChecked ? GameData13.createRoomOpts.roundmax = 30 : this.round45.isChecked ? GameData13.createRoomOpts.roundmax = 45 : this.round60.isChecked ? GameData13.createRoomOpts.roundmax = 60 : this.round75.isChecked ? GameData13.createRoomOpts.roundmax = 75 : GameData13.createRoomOpts.roundmax = 15;
        this.playerNum2.isChecked ? GameData13.createRoomOpts.joinermax = 2 : this.playerNum3.isChecked ? GameData13.createRoomOpts.joinermax = 3 : this.playerNum4.isChecked ? GameData13.createRoomOpts.joinermax = 4 : this.playerNum5.isChecked ? GameData13.createRoomOpts.joinermax = 5 : GameData13.createRoomOpts.joinermax = 2;
        this.seconds30.isChecked ? GameData13.createRoomOpts.limiteTime = 30 : this.minute1.isChecked ? GameData13.createRoomOpts.limiteTime = 60 : this.minute5.isChecked ? GameData13.createRoomOpts.limiteTime = 300 : this.unlimited.isChecked ? GameData13.createRoomOpts.limiteTime = 0 : GameData13.createRoomOpts.limiteTime = 30;
        this.owner.isChecked ? GameData13.createRoomOpts.payType = 1 : this.AA.isChecked ? GameData13.createRoomOpts.payType = 2 : GameData13.createRoomOpts.payType = 1;
        GameData13.saveCreateRoomOpts();
      },
      refreshUi: function refreshUi() {
        this.round15.isChecked = 15 == GameData13.createRoomOpts.roundmax;
        this.round30.isChecked = 30 == GameData13.createRoomOpts.roundmax;
        this.round45.isChecked = 45 == GameData13.createRoomOpts.roundmax;
        this.round60.isChecked = 60 == GameData13.createRoomOpts.roundmax;
        this.round75.isChecked = 75 == GameData13.createRoomOpts.roundmax;
        this.playerNum2.isChecked = 2 == GameData13.createRoomOpts.joinermax;
        this.playerNum3.isChecked = 3 == GameData13.createRoomOpts.joinermax;
        this.playerNum4.isChecked = 4 == GameData13.createRoomOpts.joinermax;
        this.playerNum5.isChecked = 5 == GameData13.createRoomOpts.joinermax;
        this.seconds30.isChecked = 30 == GameData13.createRoomOpts.limiteTime;
        this.minute1.isChecked = 60 == GameData13.createRoomOpts.limiteTime;
        this.minute5.isChecked = 300 == GameData13.createRoomOpts.limiteTime;
        this.unlimited.isChecked = 0 == GameData13.createRoomOpts.limiteTime;
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  SSSDebug: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "85e35w/d1xC5bMsIzIZS9iE", "SSSDebug");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        debugNode: {
          default: null,
          type: cc.Node
        },
        editCards: cc.EditBox,
        cardInput: cc.EditBox,
        parents: {
          default: [],
          type: cc.Node
        },
        debugBtn: cc.Node,
        cardType: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        this.debugBtn.active = setCardsOpen;
      },
      onClose: function onClose() {
        this.node.getComponent("SSSRoomMain").showDebugLayer();
      },
      onSetCards: function onSetCards() {
        var self = this;
        var str1 = this.editCards.string.split(",");
        cc.log("debug str: ", JSON.stringify(str1));
        var cards = [];
        for (var i = 0; i < str1.length; i++) {
          if (i >= GameData13.handSize) break;
          var type = parseInt(str1[i]) % 10;
          var value = Math.floor(parseInt(str1[i]) / 10);
          cards.push({
            type: type,
            value: value - 1
          });
        }
        cc.log("debug cards: ", JSON.stringify(cards));
        if (cardPoker13.up.length > 0) {
          var node = cc.find("upCardNode", this.cardType);
          self.debugNode.parent.getComponent("SSSRoomTable").setResetCard(node, "up");
        }
        if (cardPoker13.mid.length > 0) {
          var node = cc.find("midCardNode", this.cardType);
          self.debugNode.parent.getComponent("SSSRoomTable").setResetCard(node, "mid");
        }
        if (cardPoker13.down.length > 0) {
          var node = cc.find("downCardNode", this.cardType);
          self.debugNode.parent.getComponent("SSSRoomTable").setResetCard(node, "down");
        }
        cardPoker13.up.length <= 0 || cardPoker13.mid.length <= 0 || cardPoker13.down.length <= 0 ? GameNet.getInstance().request("game.debugHandler.setCards", {
          roomid: GameData.player.roomid,
          cards: cards
        }, function(rtn) {
          self.debugNode.parent.getComponent("SSSRoomTable").checkedRecommendManner();
          self.debugNode.parent.getComponent("SSSRoomTable").showSpecialType(GameData13.player.type);
          cc.log("debug rtn: ", JSON.stringify(rtn));
        }) : cc.log("没有重置上面三墩的牌，不能设置测试牌");
      },
      testAllCardShow: function testAllCardShow() {},
      testHand: function testHand(cardId) {},
      testDis: function testDis(cardId) {},
      testPeng: function testPeng(cardId) {},
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {}
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  SSSFastVoiceButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c647bmZ9LBNbKcehX+yQ+A6", "SSSFastVoiceButton");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        sound: "null"
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onClick, this);
      },
      onClick: function onClick() {
        var talkContent = cc.find("label", this.node).getComponent(cc.Label).string;
        ChatHandler.getInstance().requestChat("fast", {
          sound: this.sound,
          content: talkContent
        }, function(rtn) {});
        closeSSSView("SSSChatPanel");
      }
    });
    cc._RF.pop();
  }, {} ],
  SSSHideComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "29f79HsYmdJX5dy1LboeqKS", "SSSHideComponent");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        delay: 3
      },
      onLoad: function onLoad() {},
      show: function show(delay) {
        this.node.active = true;
        this.unschedule(this.gotoHide);
        this.scheduleOnce(this.gotoHide, delay);
      },
      gotoHide: function gotoHide() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  SSSHome: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6804fQpQHJK44XwemEyFeqa", "SSSHome");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        homeNode: {
          default: null,
          type: cc.Node
        },
        createRoomNode: {
          default: null,
          type: cc.Node
        },
        joinRoomNode: {
          default: null,
          type: cc.Node
        },
        headNode: {
          default: null,
          type: cc.Node
        },
        playerId: {
          default: null,
          type: cc.Label
        },
        playerName: {
          default: null,
          type: cc.Label
        },
        roomCardNum: {
          default: null,
          type: cc.Label
        },
        createBtn: {
          default: null,
          type: cc.Button
        },
        joinBtn: {
          default: null,
          type: cc.Button
        },
        roomCardAddBtn: {
          default: null,
          type: cc.Button
        },
        paoMaDengContent: {
          default: null,
          type: cc.Node
        },
        paoMaDengStr: {
          default: null,
          type: cc.Node
        },
        room_number: cc.String,
        room_number_bg: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {
        this.showPlayer();
        this.runPaoMaDeng();
      },
      showPlayer: function showPlayer() {
        this.playerId.string = "ID:" + GameData.player.uid;
        for (var i = 0; i < GameData13.joiners.length; i++) if (GameData.player.uid == GameData13.joiners[i].uid) {
          isChinese(GameData13.joiners[i].name) ? this.playerName.string = getShortStr(GameData13.joiners[i].name, 5) : isChinese(GameData13.joiners[i].name) || (this.playerName.string = getShortStr(GameData13.joiners[i].name, 10));
          break;
        }
      },
      onCreateRoomClicked: function onCreateRoomClicked(evt) {
        this.createRoomNode.active = true;
      },
      onJoinRoomClicked: function onJoinRoomClicked(evt) {
        cc.director.loadScene("home");
      },
      onBackToHome: function onBackToHome(evt) {
        this.createRoomNode.active = false;
      },
      runPaoMaDeng: function runPaoMaDeng() {
        var time = 5;
        var self = this;
        var timeCallback = function timeCallback(dt) {
          self.paoMaDengAction(time);
        };
        this.paoMaDengAction(time);
        this.schedule(timeCallback, time + 2);
      },
      paoMaDengAction: function paoMaDengAction(time) {
        this.paoMaDengStr.x = this.paoMaDengContent.getContentSize().width / 2 + 10;
        var str = "来一发吗？满足你。。。";
        this.paoMaDengStr.getComponent(cc.Label).string = GameData.configData.content;
        var right = this.paoMaDengContent.getContentSize().width / 2 + 10;
        var left = 0 - (right + this.paoMaDengStr.getContentSize().width);
        var actionTo = cc.moveTo(time, cc.p(left, this.paoMaDengStr.getPositionY()));
        this.paoMaDengStr.runAction(actionTo);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  SSSPlayerChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb7eaZ/i8xIaLXwnzjsla1a", "SSSPlayerChat");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        left_node: cc.Node,
        right_node: cc.Node
      },
      onLoad: function onLoad() {},
      playChat: function playChat(data, direction, type, sex) {
        this.left_node.active = false;
        this.right_node.active = false;
        var chatNode;
        switch (direction) {
         case "left":
          chatNode = this.left_node;
          break;

         case "right":
          chatNode = this.right_node;
        }
        if (void 0 == chatNode) return;
        chatNode.active = true;
        var wordNode = cc.find("word", chatNode);
        var emoNode = cc.find("emo", chatNode);
        var yuyinNode = cc.find("yuyinNode", chatNode);
        if ("word" == type) {
          var content = data.detail.msg.data;
          var chatBg = cc.find("word/bg", chatNode);
          var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
          var contentStr = content;
          chatBg.width = 20 + 24 * contentStr.length;
          wordNode.getComponent("SSSHideComponent").show(3);
          chatLabel.string = contentStr;
        } else if ("fast" == type) {
          var soundKey = data.detail.msg.data.sound;
          var content = data.detail.msg.data.content;
          var chatBg = cc.find("word/bg", chatNode);
          var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
          var contentStr = getShortStr(content, 10);
          chatBg.width = 30 * contentStr.length;
          wordNode.getComponent("SSSHideComponent").show(3);
          chatLabel.string = contentStr;
          soundMngr.instance.playAudioChat(soundKey, sex);
        } else if ("emo" == type) {
          var animationName = data.detail.msg.data;
          emoNode.getComponent(cc.Animation).play(animationName);
          emoNode.getComponent("SSSHideComponent").show(3);
        } else if ("yuyin" == type) {
          if (!GameData.isPlayVioce) return;
          var soundurl = data.detail.msg.data;
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
          var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
          yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
          yuyinNode.getComponent("SSSHideComponent").show(3);
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  SSSPromptCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb36fU2SohMhqNcdh0hQdUD", "SSSPromptCard");
    "use strict";
    var soundMngr = require("SoundMngr");
    var SSSPromptCard = cc.Class({
      extends: cc.Component,
      properties: {
        cardHand: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        WriteLog("SSSPromptCard onLoad");
        this._pokerDuiZiIndex = 0;
        this._pokerLiangDuiIndex = 0;
        this._pokerSanTiaoIndex = 0;
        this._pokerTongHuaIndex = 0;
        this._pokerShunZiIndex = 0;
        this._pokerHuLuIndex = 0;
        this._pokerTongHuaShunIndex = 0;
        this._pokerTieZhiIndex = 0;
        this._pokerWuTongIndex = 0;
      },
      onDestroy: function onDestroy() {
        WriteLog("SSSPromptCard onDestroy");
      },
      initPromptData: function initPromptData(pokerTypeObj, cardHand) {
        this._pokerDuiZiIndex = 0;
        this._pokerLiangDuiIndex = 0;
        this._pokerSanTiaoIndex = 0;
        this._pokerTongHuaIndex = 0;
        this._pokerShunZiIndex = 0;
        this._pokerHuLuIndex = 0;
        this._pokerTongHuaShunIndex = 0;
        this._pokerTieZhiIndex = 0;
        this._pokerWuTongIndex = 0;
        this._cardHandList = cardHand;
        this._pokerTypeObj = pokerTypeObj;
      },
      initCardStatus: function initCardStatus() {
        for (var count = 0; count < this.cardHand.childrenCount; count++) {
          var node = cc.find("card" + count, this.cardHand);
          var card = node.getComponent("SSSCard");
          if (card.isSelect = true) {
            card.isSelect = false;
            node.y = 0;
          }
        }
      },
      clearArray: function clearArray(array) {
        array.length > 0 && array.splice(0, array.length);
      },
      sortArray: function sortArray(array) {
        var tempArr = [];
        for (var i = 0; i < array.length; i++) tempArr.push(array[i]);
        for (var i = 0; i < tempArr.length; i++) {
          tempArr[i].value = 50 * tempArr[i].value;
          tempArr[i].type = tempArr[i].value + tempArr[i].type;
        }
        tempArr.sort(function(a, b) {
          return b.type - a.type;
        });
        for (var i = 0; i < tempArr.length; i++) {
          tempArr[i].type = tempArr[i].type - tempArr[i].value;
          tempArr[i].value = tempArr[i].value / 50;
        }
        this.clearArray(array);
        for (var i = 0; i < tempArr.length; i++) array.push(tempArr[i]);
      },
      isSameCard: function isSameCard(cards) {
        var sameCount = 0;
        for (var i = 0; i < cards.length; i++) {
          var card = cards[i];
          for (var key = 0; key < cards.length; key++) card.value == cards[key].value && card.type == cards[key].type && sameCount++;
          if (sameCount >= 2) return true;
        }
        return false;
      },
      isSameArray: function isSameArray(array1, array2) {
        this.sortArray(array1);
        this.sortArray(array2);
        if (array1.length != array2.length) return false;
        for (var i = 0; i < array1.length; i++) {
          if (array1[i].value == array2[i].value && array1[i].type == array2[i].type) continue;
          return false;
        }
        return true;
      },
      repetCard: function repetCard(cardId, cardIdArr) {
        var repetition = false;
        for (var count = 0; count < cardIdArr.length; count++) if (cardIdArr[count] == cardId) {
          repetition = true;
          break;
        }
        return repetition;
      },
      AvoidDuplicateCardType: function AvoidDuplicateCardType(pokerIndex, pokerType, cardType, func) {
        var index = pokerIndex - 1;
        if (index >= 0 && this.isSameArray(this._pokerTypeObj[cardType][index], pokerType)) {
          pokerIndex++;
          pokerIndex == this._pokerTypeObj[cardType].length && (pokerIndex = 0);
          pokerType = this._pokerTypeObj[cardType][pokerIndex];
          func();
          return pokerType;
        }
        return null;
      },
      checkedCard: function checkedCard(cardIdArr, cardId, repetition) {
        if (!repetition) {
          var node = cc.find("card" + cardId, this.cardHand);
          var card = node.getComponent("SSSCard");
          card.isSelect = true;
          cardIdArr.push(cardId);
          return true;
        }
        if (repetition) {
          if (this.repetCard(cardId, cardIdArr)) return false;
          var node = cc.find("card" + cardId, this.cardHand);
          var card = node.getComponent("SSSCard");
          card.isSelect = true;
          cardIdArr.push(cardId);
          return true;
        }
        return false;
      },
      checkedCardType: function checkedCardType(pokerIndex, cardType, func) {
        var pokerType;
        var repetition = false;
        var cardIdArr = [];
        this.initCardStatus();
        if (pokerIndex == this._pokerTypeObj[cardType].length) {
          pokerIndex = 0;
          pokerType = this._pokerTypeObj[cardType][pokerIndex];
          this.AvoidDuplicateCardType(pokerIndex, pokerType, cardType, func) && (pokerType = this.AvoidDuplicateCardType(pokerIndex, pokerType, cardType, func));
        } else if (pokerIndex < this._pokerTypeObj[cardType].length) {
          pokerType = this._pokerTypeObj[cardType][pokerIndex];
          this.AvoidDuplicateCardType(pokerIndex, pokerType, cardType, func) && (pokerType = this.AvoidDuplicateCardType(pokerIndex, pokerType, cardType, func));
        }
        this.isSameCard(pokerType) && (repetition = true);
        for (var i = 0; i < pokerType.length; i++) {
          var card1 = pokerType[i];
          for (var key = 0; key < this._cardHandList.length; key++) {
            var card2 = this._cardHandList[key];
            if (card1.value == card2.value && card1.type == card2.type) {
              if (this.checkedCard(cardIdArr, key, repetition)) break;
              if (!this.checkedCard(cardIdArr, key, repetition)) continue;
            }
          }
        }
        var node = cc.find("card0", this.cardHand);
        var card = node.getComponent("SSSCard");
        card.setCardList(cardIdArr);
        card.bounceCard();
        cc.log("cardIdArr: ", cardIdArr);
      },
      checkedDuiZi: function checkedDuiZi(evt) {
        var self = this;
        this.checkedCardType(this._pokerDuiZiIndex, RecommendType.DuiZi, function() {
          self._pokerDuiZiIndex++;
        });
        this._pokerDuiZiIndex++;
        this._pokerDuiZiIndex >= this._pokerTypeObj[RecommendType.DuiZi].length && (this._pokerDuiZiIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedLiangDui: function checkedLiangDui(evt) {
        var self = this;
        this.checkedCardType(this._pokerLiangDuiIndex, RecommendType.LiangDui, function() {
          self._pokerLiangDuiIndex++;
        });
        this._pokerLiangDuiIndex++;
        this._pokerLiangDuiIndex >= this._pokerTypeObj[RecommendType.LiangDui].length && (this._pokerLiangDuiIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedSanTiao: function checkedSanTiao(evt) {
        var self = this;
        this.checkedCardType(this._pokerSanTiaoIndex, RecommendType.SanTiao, function() {
          self._pokerSanTiaoIndex++;
        });
        this._pokerSanTiaoIndex++;
        this._pokerSanTiaoIndex >= this._pokerTypeObj[RecommendType.SanTiao].length && (this._pokerSanTiaoIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedShunZi: function checkedShunZi(evt) {
        var self = this;
        this.checkedCardType(this._pokerShunZiIndex, RecommendType.ShunZi, function() {
          self._pokerShunZiIndex++;
        });
        this._pokerShunZiIndex++;
        this._pokerShunZiIndex >= this._pokerTypeObj[RecommendType.ShunZi].length && (this._pokerShunZiIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedTongHua: function checkedTongHua(evt) {
        var self = this;
        this.checkedCardType(this._pokerTongHuaIndex, RecommendType.TongHua, function() {
          self._pokerTongHuaIndex++;
        });
        this._pokerTongHuaIndex++;
        this._pokerTongHuaIndex >= this._pokerTypeObj[RecommendType.TongHua].length && (this._pokerTongHuaIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedHuLu: function checkedHuLu(evt) {
        var self = this;
        this.checkedCardType(this._pokerHuLuIndex, RecommendType.HuLu, function() {
          self._pokerHuLuIndex++;
        });
        this._pokerHuLuIndex++;
        this._pokerHuLuIndex >= this._pokerTypeObj[RecommendType.HuLu].length && (this._pokerHuLuIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedTongHuaShun: function checkedTongHuaShun(evt) {
        var self = this;
        this.checkedCardType(this._pokerTongHuaShunIndex, RecommendType.TongHuaShun, function() {
          self._pokerTongHuaShunIndex++;
        });
        this._pokerTongHuaShunIndex++;
        this._pokerTongHuaShunIndex >= this._pokerTypeObj[RecommendType.TongHuaShun].length && (this._pokerTongHuaShunIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedTieZhi: function checkedTieZhi(evt) {
        var self = this;
        this.checkedCardType(this._pokerTieZhiIndex, RecommendType.TieZhi, function() {
          self._pokerTieZhiIndex++;
        });
        this._pokerTieZhiIndex++;
        this._pokerTieZhiIndex >= this._pokerTypeObj[RecommendType.TieZhi].length && (this._pokerTieZhiIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      checkedWuTong: function checkedWuTong(evt) {
        var self = this;
        this.checkedCardType(this._pokerWuTongIndex, RecommendType.WuTong, function() {
          self._pokerWuTongIndex++;
        });
        this._pokerWuTongIndex++;
        this._pokerWuTongIndex >= this._pokerTypeObj[RecommendType.WuTong].length && (this._pokerWuTongIndex = 0);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      }
    });
    module.exports = SSSPromptCard;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  SSSRoomDissolve: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cecede67mVNKoD1ejUR20se", "SSSRoomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        registEvent("13-GameEnd", this, this.showGameResult);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        this.lastTimeLabel.string = "";
        this.showDissolveText();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("13-GameEnd", this, this.showGameResult);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        var parent = this.headerNode.parent;
        var init_x = this.headerNode.x;
        var init_y = this.headerNode.y;
        var init_interval = 250;
        var index = 1;
        for (var key = 2; key <= GameData13.room.joinermax; key++) {
          var name = "header_" + key;
          var headNode = parent.getChildByName(name);
          if (void 0 == headNode) {
            headNode = cc.instantiate(this.headerNode);
            headNode.name = name;
            headNode.parent = parent;
            if (key > 3) {
              init_x = this.headerNode.x + 150;
              init_y = this.headerNode.y - 120;
              init_interval = 200;
              index = 4;
            }
            headNode.x = init_x + init_interval * (key - index);
            headNode.y = init_y;
          }
          headNode.active = false;
        }
        this.resetUI();
      },
      showPlayers: function showPlayers() {
        if (GameData13.room.joinermax) {
          for (var j = 1; j <= GameData13.joiners.length; j++) {
            var hNode = cc.find("header_" + j, this.headerNode.parent);
            hNode.active = true;
          }
          for (var i = 1; i <= GameData13.room.joinermax; i++) {
            var index = i;
            var joiner = GameData13.joiners[i - 1];
            if (null != joiner) {
              var uid = joiner.uid;
              var headimgurl = joiner.headimgurl;
              this.showHeaderIcon(index, headimgurl);
              this.showHeaderName(index, joiner.name);
              this.showHeaderId(index, uid);
              var show = false;
              GameData13.owner == uid && (show = true);
              this.showMainFlag(index, show);
              show = false;
              2 == joiner.status && (show = true);
              this.showLostImg(index, show);
            }
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode && (nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4));
      },
      showHeaderId: function showHeaderId(index, uid) {
        var idNode = cc.find("header_" + index + "/idLabel", this.headerNode.parent);
        idNode && (idNode.getComponent(cc.Label).string = uid);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node && (node.active = show);
      },
      showMainFlag: function showMainFlag(index, show) {
        var node = cc.find("header_" + index + "/fangzhu", this.headerNode.parent);
        node && (node.active = show);
      },
      showLostImg: function showLostImg(index, show) {
        var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
        disNode && (disNode.active = show);
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(show) {
        this.agreeBtn.active = show;
        this.disAgreeBtn.active = show;
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData13.room.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText() {
        var dissolove = GameData.game.onRoomDissolve;
        var disagreeNum = 0;
        var agreeNum = 0;
        this.isDis = dissolove.isStart;
        this.resetUI();
        this.showPlayers();
        this.alreadyAgree(true);
        cc.log("..select:" + JSON.stringify(GameData.game.onRoomDissolve));
        for (var uid in GameData.game.onRoomDissolve.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData13.joiners.length; i++) {
            var joiner = GameData13.joiners[i];
            if (joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == GameData.game.onRoomDissolve.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData13.joiners.length; i++) {
              var joiner = GameData13.joiners[i];
              joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            agreeNum++;
            this.showAgreeIcon(index, true);
            uid == GameData.player.uid && (this.agreeWaitNode.active = true);
          } else if ("agree" == GameData.game.onRoomDissolve.select[uid]) {
            agreeNum++;
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
            uid == GameData.player.uid && (this.agreeWaitNode.active = true);
          } else if ("disagree" == GameData.game.onRoomDissolve.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            if (uid != GameData.player.uid) for (var j = 0; j < GameData13.joiners.length; j++) {
              var joiner = GameData13.joiners[j];
              if (joiner.uid == uid) {
                var name = joiner.name;
                poker13MessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", "", "", function() {});
                this.agreeWaitNode.active = false;
              }
            }
            break;
          }
          "agree" != GameData.game.onRoomDissolve.select[uid] && "apply" != GameData.game.onRoomDissolve.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (disagreeNum >= 1) {
          cc.find("layer_dissolve", this.node).active = false;
          return;
        }
        var max;
        2 == GameData13.room.joinermax ? max = GameData13.room.joinermax : GameData13.room.joinermax > 2 && (max = parseInt(GameData13.room.joinermax / 2) + 1);
        agreeNum == max && (GameData.player.roomid = void 0);
        this.node.getComponent("SSSRoomMain").showdissolveLayer();
        this.handleVoteResult(this.isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      showGameResult: function showGameResult(data) {
        if (false == this.isDis) {
          cc.log("gemaEndResult: ", JSON.stringify(GameData13.gemaEndResult));
          if (GameData13.isEmptyObject(GameData13.gemaEndResult)) {
            if (GameData13.isEmptyObject(GameData13.gemaEndResult)) {
              GameData13.clearObject(GameData.game.onRoomDissolve) ? cc.log("对象已清空") : cc.log("对象没有清空");
              GameData13.clearAllGameData();
              cc.director.loadScene("home");
            }
          } else {
            GameData.SetLayerData.soundOpen = false;
            this.node.getComponent("SSSRoomMain").showSummaryLayer();
            GameData13.clearObject(GameData.game.onRoomDissolve) ? cc.log("对象已清空") : cc.log("对象没有清空");
          }
        }
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.player.roomid, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.player.roomid, "disagree");
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.unschedule(this.updateLastTime);
          if (false == GameData13.game.start) {
            GameData13.clearObject(GameData.game.onRoomDissolve) ? cc.log("对象已清空") : cc.log("对象没有清空");
            GameData13.clearAllGameData();
            cc.director.loadScene("home");
          }
        }
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.player.roomid, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData13.joiners.length; i++) {
          var player = GameData13.joiners[i];
          var index = i + 1;
          if (player.uid == uid) {
            player.status = 0;
            this.showLostImg(index, show);
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  SSSRoomMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42615aBtMxHvZlm6NI5DVCf", "SSSRoomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        dissolveLayer: {
          default: null,
          type: cc.Node
        },
        summaryLayer: {
          default: null,
          type: cc.Node
        },
        settingLayer: {
          default: null,
          type: cc.Node
        },
        debugLayer: {
          default: null,
          type: cc.Node
        },
        playerHeadArray: {
          default: [],
          type: [ cc.Node ]
        },
        promptScrollView: {
          default: null,
          type: cc.ScrollView
        },
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        chatNode: cc.Prefab,
        prefabList: {
          default: [],
          type: [ cc.Prefab ]
        }
      },
      onLoad: function onLoad() {
        GameData.saveSetLayerData();
        this.rotationScene(AutoScene.SCENE_HORIZONTAL);
        registEvent("onRoomChat", this, this.onSSSChatHandler);
        registEvent("onRoomDissolve", this, this.showdissolveLayer);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          if (inCD(3e3)) return;
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var position = this.parent.convertToNodeSpaceAR(movePos);
          if (Math.abs(position.x - this.position.x) > this.width || Math.abs(position.y - this.position.y) > this.height) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.playerSex = 1;
        soundMngr.instance.playMusic("shisanshui/sound/sss_table_bg1");
        this.showdissolveLayer();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomChat", this, this.onSSSChatHandler);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
      },
      rotationScene: function rotationScene(oriented) {
        WriteLog("rotationScene");
        var node = cc.director.getScene().getChildByName("Canvas");
        var canvas = node.getComponent(cc.Canvas);
        if (oriented == AutoScene.SCENE_HORIZONTAL) {
          var sceneRotateTo = cc.rotateTo(.1, -90);
          var sceneSize = new cc.size(1280, 720);
          canvas.designResolution = sceneSize;
          node.runAction(sceneRotateTo);
          this.promptScrollView.horizontal = false;
          this.promptScrollView.vertical = true;
        } else if (oriented == AutoScene.SCENE_VERTICAL) {
          var sceneSize = new cc.size(720, 1280);
          canvas.designResolution = sceneSize;
          this.promptScrollView.horizontal = true;
          this.promptScrollView.vertical = false;
        }
        this.changeRunlampPanel(oriented);
      },
      changeRunlampPanel: function changeRunlampPanel(oriented) {
        if (GameData.gameType == gameDefine.GameType.Game_Poker_13shui) {
          var child = cc.director.getScene().getChildByName("lampNode");
          var children = child.children;
          if (children.length <= 0) return;
          if (GameData.serverNoticeData.length > 1) {
            var paoMaDeng = children[0].getComponent("RunlampPanel1");
            paoMaDeng.changeRunlamp(oriented);
          } else if (1 == GameData.serverNoticeData.length) {
            var paoMaDeng = children[0].getComponent("RunlampPanel");
            paoMaDeng.changeRunlamp(oriented);
          }
        }
      },
      showPlayers: function showPlayers() {
        this.tableNode.active = true;
      },
      showSettingLayer: function showSettingLayer(evt) {
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
        openSSSView("SSSSettingsPanel");
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.game.onRoomDissolve = {};
        GameData13.clearAllGameData();
        GameData13.owner != GameData.player.uid ? poker13MessageBox("房主已经解散房间", "", "", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      showdissolveLayer: function showdissolveLayer() {
        var data = GameData.game.onRoomDissolve;
        if (Object.keys(data).length <= 0) {
          this.dissolveLayer.active = false;
          return;
        }
        var dissolve = data.select;
        if (Object.keys(dissolve).length <= 0 || null == dissolve) {
          this.dissolveLayer.active = false;
          return;
        }
        if (void 0 == GameData.player.roomid || GameData.player.roomid <= 0) {
          this.dissolveLayer.active = false;
          return;
        }
        this.dissolveLayer.active = true;
        this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        this.node.getComponent("SSSRoomTable").stopGameAction();
        GameData.player.uid == GameData13.joiners[0].uid ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      onSSSChatHandler: function onSSSChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData13.getPlayerSexByUid(uid);
        for (var i = 0; i < GameData13.joiners.length; i++) if (uid == GameData13.joiners[i].uid) {
          var index = GameData13.getPosition(GameData13.joiners[i].uid);
          var playerHeadNode = this.playerHeadArray[index - 1];
          if (void 0 == playerHeadNode) continue;
          var chatNode = playerHeadNode.getChildByName("chatNode");
          if (void 0 == chatNode) {
            chatNode = cc.instantiate(this.chatNode);
            chatNode.name = "chatNode";
            chatNode.parent = playerHeadNode;
          }
          var direction;
          switch (index) {
           case 1:
           case 2:
           case 4:
            direction = "right";
            break;

           case 3:
           case 5:
            direction = "left";
          }
          if (void 0 == direction) continue;
          chatNode.getComponent("SSSPlayerChat").playChat(data, direction, type, this.playerSex);
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      openChatPanel: function openChatPanel() {
        if (inCD(3e3)) return;
        openSSSView("SSSChatPanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  SSSRoomTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac1c25c8bNHna+u+BXIRxcb", "SSSRoomTable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    var poker13 = require("../logic/poker13");
    var errorCode = require("errorCode");
    var SSSRoomTable = cc.Class({
      extends: cc.Component,
      properties: {
        tableNode: {
          default: null,
          type: cc.Node
        },
        player: {
          default: [],
          type: [ cc.Node ]
        },
        poker_1: {
          default: null,
          type: cc.Node
        },
        poker_2: {
          default: null,
          type: cc.Node
        },
        poker_3: {
          default: null,
          type: cc.Node
        },
        poker_4: {
          default: null,
          type: cc.Node
        },
        poker_5: {
          default: null,
          type: cc.Node
        },
        roomId: {
          default: null,
          type: cc.Node
        },
        roundNum: {
          default: null,
          type: cc.Node
        },
        setBtn: {
          default: null,
          type: cc.Button
        },
        chatBtn: {
          default: null,
          type: cc.Button
        },
        VChatBtn: {
          default: null,
          type: cc.Button
        },
        ruleBtn: {
          default: null,
          type: cc.Button
        },
        readyBtn: {
          default: null,
          type: cc.Node
        },
        quitBtn: {
          default: null,
          type: cc.Node
        },
        upResetBtn: {
          default: null,
          type: cc.Node
        },
        midResetBtn: {
          default: null,
          type: cc.Node
        },
        downResetBtn: {
          default: null,
          type: cc.Node
        },
        animation: {
          default: null,
          type: cc.Node
        },
        startAnimation: {
          default: null,
          type: cc.Node
        },
        up: {
          default: null,
          type: cc.Node
        },
        mid: {
          default: null,
          type: cc.Node
        },
        down: {
          default: null,
          type: cc.Node
        },
        allScore: {
          default: null,
          type: cc.Node
        },
        waitNode: {
          default: null,
          type: cc.Node
        },
        jettonNode: {
          default: null,
          type: cc.Node
        },
        jetton: {
          default: null,
          type: cc.Node
        },
        specialPlayerName: {
          default: null,
          type: cc.Label
        },
        neatenNode: {
          default: null,
          type: cc.Node
        },
        poker: {
          default: null,
          type: cc.Node
        },
        cardHand: {
          default: null,
          type: cc.Node
        },
        upCardNode: {
          default: null,
          type: cc.Node
        },
        midCardNode: {
          default: null,
          type: cc.Node
        },
        downCardNode: {
          default: null,
          type: cc.Node
        },
        nodeMask: {
          default: null,
          type: cc.Node
        },
        promptScrollView: {
          default: null,
          type: cc.Node
        },
        selection: {
          default: null,
          type: cc.Node
        },
        disCardBtn: {
          default: null,
          type: cc.Button
        },
        reelectBtn: {
          default: null,
          type: cc.Button
        },
        cardGroup: {
          default: null,
          type: cc.Node
        },
        timeNode: {
          default: null,
          type: cc.Node
        },
        peculiarBtn: {
          default: null,
          type: cc.Button
        },
        roomEndClear: {
          default: null,
          type: cc.Node
        },
        kaiguancao: cc.Node,
        kai: cc.Node,
        guan: cc.Node,
        timer: cc.Label
      },
      onLoad: function onLoad() {
        WriteLog("onLoad");
        this.declareParam();
        this.setMANNER(this._recommendManner.BTN_MANNER);
        this.readyBtnAndQuitBtnControl();
        this.showPlayers();
        this.showReady();
        registEvent("13-RoomBaseInfo", this, this.showPlayers);
        registEvent("13-GameStart", this, this.showCards);
        registEvent("onRoomReadyInfo", this, this.showReadyInfo);
        registEvent("13-ShowReadyUI", this, this.showReady);
        registEvent("13-PlayerCards", this, this.refreshCard);
        registEvent("13-RoomResult", this, this.showRoomResult);
        registEvent("13-Discard", this, this.showDisCardReady);
        registEvent("13-GameEnd", this, this.showGameEnd);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("13-DiscardInfo", this, this.showConnectDisCardInfo);
        registEvent("13-SelfDiscard", this, this.showConnectDisCard);
        registEvent("againReady", this, this.againReady);
        this.onShow();
      },
      onShow: function onShow() {
        WriteLog("onShow");
        this.clearArray(cardPoker13.up);
        this.clearArray(cardPoker13.mid);
        this.clearArray(cardPoker13.down);
        this.showPeculiarBtn(false);
        this.showWaitNode(true);
        this.showUpResetBtn(false);
        this.showMidResetBtn(false);
        this.showDownResetBtn(false);
        this.showNeatenNode(false);
        this.showRoomEndClear(false);
        this.registTouchEvent();
        this.setRoundNum();
        this.connectRecurrence();
        this._playerSex = GameData13.getPlayerSexByUid(GameData.player.uid);
        var disCardNode = cc.find("disCard", this.poker_1);
        disCardNode.y = this._disCardNodePosYList[0];
      },
      onDestroy: function onDestroy() {
        WriteLog("onDestroy");
        unregistEvent("13-RoomBaseInfo", this, this.showPlayers);
        unregistEvent("13-GameStart", this, this.showCards);
        unregistEvent("onRoomReadyInfo", this, this.showReadyInfo);
        unregistEvent("13-ShowReadyUI", this, this.showReady);
        unregistEvent("13-PlayerCards", this, this.refreshCard);
        unregistEvent("13-RoomResult", this, this.showRoomResult);
        unregistEvent("13-Discard", this, this.showDisCardReady);
        unregistEvent("13-GameEnd", this, this.showGameEnd);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("13-DiscardInfo", this, this.showConnectDisCardInfo);
        unregistEvent("13-SelfDiscard", this, this.showConnectDisCard);
        unregistEvent("againReady", this, this.againReady);
        this.unregistTouchEvent();
      },
      registTouchEvent: function registTouchEvent() {
        this.promptScrollView.on("touch-up", this.lightFrame, this);
        this.upCardNode.on(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.upCardNode.on(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.upCardNode.on(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.midCardNode.on(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.midCardNode.on(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.midCardNode.on(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.downCardNode.on(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.downCardNode.on(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.downCardNode.on(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.kaiguancao.on(cc.Node.EventType.TOUCH_START, this.onPauseEvent, this);
        this.kaiguancao.on(cc.Node.EventType.TOUCH_MOVE, function() {}, this);
        this.kaiguancao.on(cc.Node.EventType.TOUCH_END, function() {}, this);
        this.neatenNode.on(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.neatenNode.on(cc.Node.EventType.TOUCH_MOVE, function() {}, this);
        this.neatenNode.on(cc.Node.EventType.TOUCH_END, function() {}, this);
        this.roomEndClear.on(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.roomEndClear.on(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.roomEndClear.on(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.nodeMask.on(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.nodeMask.on(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.nodeMask.on(cc.Node.EventType.TOUCH_START, function() {}, this);
      },
      unregistTouchEvent: function unregistTouchEvent() {
        this.promptScrollView.off("touch-up", this.lightFrame, this);
        this.upCardNode.off(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.upCardNode.off(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.upCardNode.off(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.midCardNode.off(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.midCardNode.off(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.midCardNode.off(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.downCardNode.off(cc.Node.EventType.TOUCH_START, this.startTouch, this);
        this.downCardNode.off(cc.Node.EventType.TOUCH_MOVE, this.moveTouch, this);
        this.downCardNode.off(cc.Node.EventType.TOUCH_END, this.endTouch, this);
        this.kaiguancao.off(cc.Node.EventType.TOUCH_START, this.onPauseEvent, this);
        this.kaiguancao.off(cc.Node.EventType.TOUCH_MOVE, function() {}, this);
        this.kaiguancao.off(cc.Node.EventType.TOUCH_END, function() {}, this);
        this.neatenNode.off(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.neatenNode.off(cc.Node.EventType.TOUCH_MOVE, function() {}, this);
        this.neatenNode.off(cc.Node.EventType.TOUCH_END, function() {}, this);
        this.roomEndClear.off(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.roomEndClear.off(cc.Node.EventType.TOUCH_MOVE, function() {}, this);
        this.roomEndClear.off(cc.Node.EventType.TOUCH_END, function() {}, this);
        this.nodeMask.off(cc.Node.EventType.TOUCH_START, function() {}, this);
        this.nodeMask.off(cc.Node.EventType.TOUCH_MOVE, function() {}, this);
        this.nodeMask.off(cc.Node.EventType.TOUCH_END, function() {}, this);
      },
      declareParam: function declareParam() {
        this._playerSex = 0;
        this._handSize = GameData13.handSize;
        this._cardHandList = [];
        this._lastCardHand = [];
        this._checkedCardList = [];
        this._cardRowList = [ [], [], [] ];
        this._groupTypeList = [];
        this._firstScrollViewPos = 0;
        this._specialTypeOfPlayer = 0;
        this._specialNum = 0;
        this._playSpecialNum = 0;
        this._roundAllScore = 0;
        this._quanLeiDaGunScore = 0;
        this._gunNum = 0;
        this._shootCount = 0;
        this._specialAnimation;
        this._playQuanLeiDaNum = 0;
        this._jettonIndex = 0;
        this._jettonCount = 14;
        this._winnerIndex = 0;
        this._gunAnimation;
        this._gunPlayerUid = [];
        this._holeList = [];
        this._winnerToLoser = {
          winner: [],
          loser: []
        };
        this._gameTimer;
        this._disCardFunc;
        this._clearFunc;
        this._readyFunc;
        this._isDisCardEnd = false;
        this._isBiPaiEnd = false;
        this._isGunEnd = false;
        this._isSpecialEnd = false;
        this._isClearEnd = false;
        this._isLoserClear = true;
        this._isWinnerClear = true;
        this._isQuanLeiDa = false;
        this._jettonList = [];
        this._disCardNodePosYList = [ -25, -10, -10, -2, -7 ];
        this._specialName = [ "couyise", "liuduiban", "quanda", "quanxiao", "sanhuangwudi", "sanshunzi", "santonghua", "santonghuashun", "shierhuangzu", "wuduisantiao" ];
        this._recommendManner = {
          SCROLL_MANNER: "scrollManner",
          BTN_MANNER: "btnManner"
        };
        this._MANNER;
      },
      initParam: function initParam() {
        this.showPeculiarBtn(false);
        this.showWaitNode(false);
        this.showUpResetBtn(false);
        this.showMidResetBtn(false);
        this.showDownResetBtn(false);
        this.setRoundNum();
        this.concealAllSpecialTypeLabel();
        this.setJettonCount(14);
        0 != moveCard.oneCard && (moveCard.oneCard = 0);
        0 != moveCard.towCard && (moveCard.towCard = 0);
        this.clearArray(this._holeList);
        this.clearArray(this._gunPlayerUid);
        this.clearArray(this._groupTypeList);
        this.clearArray(this._jettonList);
        this.clearArray(GameData13.disCardPlayer);
        this._gunNum = 0;
        this._shootCount = 0;
        this._roundAllScore = 0;
        this._isDisCardEnd = false;
        this._isBiPaiEnd = false;
        this._isGunEnd = true;
        this._isSpecialEnd = true;
        this._isClearEnd = true;
        this._isLoserClear = true;
        this._isWinnerClear = true;
        this._isQuanLeiDa = false;
        this._specialTypeOfPlayer = 0;
        this._specialNum = 0;
        this._playSpecialNum = 0;
        this._gunAnimation;
        this._specialAnimation;
        this._specialPoker = 0;
        this._quanLeiDaGunScore = 0;
        this._playQuanLeiDaNum = 0;
        this._jettonIndex = 0;
        this._winnerIndex = 0;
        GameData13.clearObject(GameData13.roomResult);
      },
      refreshCard: function refreshCard() {
        this.clearArray(this._cardHandList);
        if (0 == (this._cardHandList = GameData13.getCardHand(GameData.player.uid))) return;
        cc.log("cardHand: ", JSON.stringify(this._cardHandList));
        this._cardHandList.length == this._handSize ? this.showCardHand() : cc.log("手牌数量小于或大于" + this._handSize + "个!");
      },
      refreshRecommendType: function refreshRecommendType() {
        var array = [];
        var pokerTypeObj = {};
        for (var i = 0; i < this._lastCardHand.length; i++) array.push(this._lastCardHand[i].card);
        var poker = new poker13(array);
        for (var key in RecommendType) pokerTypeObj = poker.getPokerTypeCards(array.length, RecommendType[key]);
        poker.clearPokerTypeList();
        var parent = cc.find("pokerType", this.cardGroup);
        for (var key in RecommendType) {
          var node = cc.find(key, parent);
          var btn = node.getComponent(cc.Button);
          0 == pokerTypeObj[key].length ? btn.interactable = false : btn.interactable = true;
        }
        var promptCard = this.node.getComponent("SSSPromptCard");
        promptCard.initPromptData(pokerTypeObj, this._cardHandList);
      },
      refreshCheckedCards: function refreshCheckedCards() {
        this.clearArray(this._checkedCardList);
        for (var i = 0; i < this._cardHandList.length; i++) {
          var node = cc.find("card" + i, this.cardHand);
          true == node.getComponent("SSSCard").isSelect && true == node.active && this._checkedCardList.push({
            card: this._cardHandList[i],
            cardId: i
          });
        }
      },
      refreshLastCard: function refreshLastCard() {
        this._lastCardHand = [];
        var index = 0;
        for (var i = 0; i < this._handSize; i++) {
          var node = cc.find("card" + i, this.cardHand);
          if (true == node.active) {
            this._lastCardHand[index] = {
              card: this._cardHandList[i],
              id: i
            };
            index++;
          }
        }
      },
      initCardStatus: function initCardStatus() {
        for (var i = 0; i < this.cardHand.childrenCount; i++) {
          var node = cc.find("card" + i, this.cardHand);
          var card = node.getComponent("SSSCard");
          if (true == card.isSelect) {
            card.isSelect = false;
            node.y = 0;
          }
        }
      },
      initGroupType: function initGroupType() {
        WriteLog("initGroupType");
        var index = 0;
        var groupTypeNum;
        GameData13.player.recommend && (groupTypeNum = GameData13.player.recommend.length);
        var space = 50;
        var distance;
        var node = cc.find("view/content", this.promptScrollView);
        node.childrenCount > 0 && node.removeAllChildren(true);
        var self = this;
        this._firstScrollViewPos = this.promptScrollView.getComponent(cc.ScrollView).getContentPosition();
        for (var i = 0; i < groupTypeNum; i++) cc.loader.loadRes("shisanshui/prefab/groupType", function(err, prefab) {
          if (err) {
            cc.log("err: ", err);
            return;
          }
          var newNode = cc.instantiate(prefab);
          node.addChild(newNode);
          self._groupTypeList[self._groupTypeList.length] = newNode;
          distance = newNode.getContentSize().width + space;
          node.setContentSize(cc.size(2 * (groupTypeNum + 1) * distance, newNode.getContentSize().height + 10));
          self.scrollViewSize = node.getContentSize();
          var groupNode = newNode.getComponent("groupType");
          groupNode.id = index;
          groupNode.showRecommend(GameData13.player.recommend);
          newNode.x = distance * index;
          ++index;
        });
      },
      initDisPos: function initDisPos(show) {
        var iconUrl = "resources/shisanshui/cardUI/Poker_back.png";
        for (var i = 0; i < GameData13.joiners.length; i++) {
          var seat = GameData13.getPosition(GameData13.joiners[i].uid);
          var node = cc.find("poker_" + seat, this.tableNode);
          var zhipai = cc.find("zhipai", node);
          var disCardNode = cc.find("poker_" + seat + "/disCard", this.tableNode);
          disCardNode.y = this._disCardNodePosYList[seat - 1];
          for (var j = 0; j < this._handSize; j++) {
            var card = cc.find("card" + j, zhipai);
            this.setTexture(iconUrl, card);
          }
          zhipai.active = show;
        }
      },
      sortCardHandList: function sortCardHandList() {
        var tempList = [];
        for (var i = 0; i < this._cardHandList.length; i++) 0 != this._cardHandList[i] && (tempList[tempList.length] = this._cardHandList[i]);
        for (var i = 0; i < tempList.length; i++) {
          tempList[i].value = 50 * tempList[i].value;
          tempList[i].type = tempList[i].type + tempList[i].value;
        }
        tempList.sort(function(a, b) {
          return b.type - a.type;
        });
        for (var i = 0; i < tempList.length; i++) {
          tempList[i].type = tempList[i].type - tempList[i].value;
          tempList[i].value = tempList[i].value / 50;
        }
        this.clearArray(this._cardHandList);
        for (var j = 0; j < this._handSize; j++) {
          if (j < tempList.length) {
            this._cardHandList[j] = tempList[j];
            continue;
          }
          this._cardHandList[j] = 0;
        }
        return tempList.length;
      },
      sortCardHand: function sortCardHand() {
        var list_len = this.sortCardHandList();
        var sub = GameData13.handSize - list_len;
        var len = Math.floor(sub / 2);
        for (var i = 0; i < list_len; i++) {
          if (0 == len) break;
          var index = 1;
          var pos = list_len - i;
          while (index <= len) {
            this._cardHandList[pos] = this._cardHandList[pos - 1];
            this._cardHandList[pos - 1] = 0;
            pos++;
            index++;
          }
        }
      },
      showCardHand: function showCardHand() {
        WriteLog("showCardHand");
        var str = "resources/shisanshui/cardUI";
        this.sortCardHand();
        for (var i = 0; i < this._cardHandList.length; i++) {
          var cardNode = cc.find("card" + i, this.cardHand);
          if (0 != this._cardHandList[i]) {
            cardNode.active = true;
            var iconUrl = str + "/" + (this._cardHandList[i].value + 1) + "_" + (this._cardHandList[i].type + 1) + ".png";
            this.setTexture(iconUrl, cardNode);
          } else cardNode.active = false;
        }
        this.refreshLastCard();
        if (0 == this._lastCardHand.length) {
          this.showCardHandLayer(false);
          this._MANNER == this._recommendManner.BTN_MANNER && this.showCardGroupLayer(false);
          return;
        }
        this.refreshRecommendType();
      },
      showSpecialType: function showSpecialType(type) {
        var self = this;
        if (type > 0) {
          this.showPeculiarBtn(true);
          var okFunc = function okFunc() {
            SSSHandler.getInstance().requestDiscard({}, type, function(res) {
              self._specialTypeOfPlayer = type;
              var specialTypeHint = cc.find("zhipai/specialType", self.poker_1);
              specialTypeHint.active = true;
              self.clearCardType();
            });
          };
          for (var _type in SpecialType) if (SpecialType[_type].id == type) {
            poker13MessageBox("", SpecialType[_type].name, ",预计赢取每家" + SpecialType[_type].score, okFunc, function() {});
            return;
          }
        }
      },
      showPlayers: function showPlayers() {
        this.showHead();
        this.setRoomNum(GameData.player.roomid);
      },
      showName: function showName(label, name) {
        isChinese(name) ? label.string = getShortStr(name, 4) : isChinese(name) || (label.string = getShortStr(name, 8));
      },
      showHead: function showHead() {
        var name, score;
        for (var i = 0; i < this.player.length; i++) this.player[i].setLocalZOrder(2);
        for (var key = 0; key < this.player.length; key++) this.player[key].active = false;
        for (var i = 0; i < GameData13.joiners.length; i++) {
          var ready = cc.find("ready", this.player[GameData13.getPosition(GameData13.joiners[i].uid) - 1]);
          var player = this.player[GameData13.getPosition(GameData13.joiners[i].uid) - 1];
          player.active = true;
          var head = cc.find("head", player);
          var headimgurl = GameData13.joiners[i].headimgurl;
          this.setPlayerHead(head, headimgurl);
          this.showOwner(player, GameData13.joiners[i].uid);
          this.showLost(player, GameData13.joiners[i].status);
          name = cc.find("name", player);
          score = cc.find("score", player);
          score.getComponent(cc.Label).string = 0;
          this.showName(name.getComponent(cc.Label), GameData13.joiners[i].name);
          var button = player.getChildByName("button");
          button.setTag(GameData13.joiners[i].uid);
        }
      },
      setPlayerHead: function setPlayerHead(head, headimgurl) {
        if (void 0 == head || void 0 == headimgurl || "" == headimgurl) return;
        var headIcon = head.getComponent(cc.Sprite);
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && headIcon && (headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showOwner: function showOwner(player, uid) {
        cc.find("owner", player).active = false;
        uid == GameData13.owner && (cc.find("owner", player).active = true);
      },
      showLost: function showLost(player, status) {
        cc.find("lost", player).active = false;
        2 == status && (cc.find("lost", player).active = true);
      },
      showHeadScore: function showHeadScore() {
        for (var key = 0; key < GameData13.joiners.length; key++) {
          var uid = GameData13.joiners[key].uid;
          var player = this.player[GameData13.getPosition(uid) - 1];
          var score = cc.find("score", player);
          if (GameData13.playerAllScore[uid]) {
            score.getComponent(cc.Label).string = GameData13.playerAllScore[uid];
            this.scaleEffectsOfNode(score, 2, 2, 1, 1, .3, function() {});
          } else if (!GameData13.isEmptyObject(GameData13.allScores)) {
            score.getComponent(cc.Label).string = GameData13.allScores[uid];
            this.scaleEffectsOfNode(score, 2, 2, 1, 1, .3, function() {});
          }
        }
      },
      showReadyInfo: function showReadyInfo() {
        WriteLog("showReadyInfo");
        for (var i = 0; i < GameData13.joiners.length; i++) if (true == GameData.game.onRoomReadyInfo.data[GameData13.joiners[i].uid]) {
          var index = GameData13.getPosition(GameData13.joiners[i].uid);
          var ready = cc.find("ready", this.player[index - 1]);
          ready.active = true;
        }
      },
      showReady: function showReady() {
        WriteLog("showReady");
        for (var i = 0; i < GameData13.joiners.length; i++) if (true == GameData13.readyInfo[GameData13.joiners[i].uid]) {
          var index = GameData13.getPosition(GameData13.joiners[i].uid);
          var ready = cc.find("ready", this.player[index - 1]);
          ready.active = true;
        }
        this.readyBtnAndQuitBtnControl();
      },
      showCards: function showCards() {
        WriteLog("showCards");
        this.initParam();
        var isGameEnd = GameData13.game.roundNum > GameData13.room.roundmax;
        if (!isGameEnd) {
          var self = this;
          var callback1 = function callback1() {
            self.startAnimation.active = true;
            self.playAnimation(AnimateType.Start, self.startAnimation);
          };
          var callback2 = function callback2() {
            self.startAnimation.active = false;
            soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_7);
            for (var i = 0; i < GameData13.joiners.length; i++) {
              var seat = GameData13.getPosition(GameData13.joiners[i].uid);
              var node = cc.find("poker_" + seat + "/fapai", self.tableNode);
              node.active = true;
              self.dealAction(i);
              var player = self.player[GameData13.getPosition(GameData13.joiners[i].uid) - 1];
              var ready = cc.find("ready", player);
              ready.active = false;
            }
          };
          var callback3 = function callback3() {
            self.showNeatenNode(true);
            self.checkedRecommendManner();
            GameData.player.uid == GameData13.player.uid && self.showSpecialType(GameData13.player.type);
          };
          var CallFunc1 = cc.callFunc(callback1, this);
          var delayTime = cc.delayTime(1);
          var CallFunc2 = cc.callFunc(callback2, this);
          var CallFunc3 = cc.callFunc(callback3, this);
          var seq = cc.sequence(CallFunc1, delayTime, CallFunc2, delayTime, CallFunc3);
          this.tableNode.runAction(seq);
        }
      },
      showCardRow: function showCardRow(row, parent, len) {
        WriteLog("showCardRow");
        var str = "resources/shisanshui/cardUI";
        var index = 0;
        var null_len = len - cardPoker13[row].length;
        if (null_len < this._checkedCardList.length) {
          createSSSMoveMessage("空位不足");
          return;
        }
        for (var i = cardPoker13[row].length; i < len; i++) {
          if (index >= this._checkedCardList.length) break;
          var cardNode = cc.find("card" + i, parent);
          this.hideCardMask(cardNode);
          cardNode.scaleX = .8515;
          cardNode.scaleY = .8515;
          var iconUrl = str + "/" + (this._checkedCardList[index].card.value + 1) + "_" + (this._checkedCardList[index].card.type + 1) + ".png";
          this.setTexture(iconUrl, cardNode);
          cardPoker13[row][i] = this._checkedCardList[index].card;
          index++;
        }
        this.setCheckedCardStatus();
        this.initCardStatus();
        null_len >= this._checkedCardList.length && this.showCardHand();
        cardPoker13[row].length > 0 && ("up" == row ? this.showUpResetBtn(true) : "mid" == row ? this.showMidResetBtn(true) : "down" == row && this.showDownResetBtn(true));
        3 == cardPoker13["up"].length && 5 == cardPoker13["mid"].length && 5 == cardPoker13["down"].length && this.showSelection(true);
        this.clearArray(this._checkedCardList);
        return;
      },
      hideCardMask: function hideCardMask(cardNode) {
        var cardMask = cc.find("cardMask", cardNode);
        cardMask.active = false;
      },
      setCheckedCardStatus: function setCheckedCardStatus() {
        if (this._checkedCardList.length <= 0) return;
        for (var i = 0; i < this._checkedCardList.length; i++) {
          var cardNode = cc.find("card" + this._checkedCardList[i].cardId, this.cardHand);
          this.hideCardMask(cardNode);
          cardNode.active = false;
          cardNode.getComponent(cc.Sprite).spriteFrame = null;
          this._cardHandList[this._checkedCardList[i].cardId] = 0;
        }
      },
      showDisCard: function showDisCard(uid, row, cards) {
        WriteLog("showDisCard");
        var index;
        var str = "resources/shisanshui/cardUI";
        var seat = GameData13.getPosition(uid);
        var idx = GameData13.getDisCardRow(row);
        var node = cc.find("poker_" + seat + "/zhipai", this.tableNode);
        index = 1 == idx ? 0 : 3 + 5 * (idx - 2);
        if (1 == idx) for (var i = index; i < 3; i++) {
          var disCard = cards[i];
          var card = cc.find("card" + i, node);
          var iconUrl = str + "/" + (disCard.value + 1) + "_" + (disCard.type + 1) + ".png";
          this.setTexture(iconUrl, card);
        } else for (var i = index; i < 5 + index; i++) {
          var disCard = cards[i - index];
          var card = cc.find("card" + i, node);
          var iconUrl = str + "/" + (disCard.value + 1) + "_" + (disCard.type + 1) + ".png";
          this.setTexture(iconUrl, card);
        }
      },
      showRoomResult: function showRoomResult() {
        WriteLog("showRoomResult");
        var self = this;
        var index = 0;
        var num_contrast = 1;
        var cardNode = cc.find("zhipai", this.poker_1);
        for (var i = 0; i < this._handSize; i++) {
          var card = cc.find("card" + i, cardNode);
          var texture = cc.textureCache.addImage(cc.url.raw("resources/shisanshui/cardUI/Poker_back.png"));
          card.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
        var playerCards = {
          up: [],
          mid: [],
          down: []
        };
        for (var i = 0; i < GameData13.joiners.length; i++) if (0 == GameData13.roomResult.result.ret[GameData13.joiners[i].uid].special.type) {
          playerCards.up.push({
            uid: GameData13.joiners[i].uid,
            type: GameData13.roomResult.cards[GameData13.joiners[i].uid].up.type
          });
          playerCards.mid.push({
            uid: GameData13.joiners[i].uid,
            type: GameData13.roomResult.cards[GameData13.joiners[i].uid].mid.type
          });
          playerCards.down.push({
            uid: GameData13.joiners[i].uid,
            type: GameData13.roomResult.cards[GameData13.joiners[i].uid].down.type
          });
        }
        playerCards.up.sort(function(a, b) {
          return a.type - b.type;
        });
        playerCards.mid.sort(function(a, b) {
          return a.type - b.type;
        });
        playerCards.down.sort(function(a, b) {
          return a.type - b.type;
        });
        var notSpecial = true;
        var contrastCard = function contrastCard(row, parent, idx, m) {
          var uid = playerCards[row][idx].uid;
          self.disCardAction(uid, row);
          num_contrast == m && 0 == self._specialTypeOfPlayer && self.showScore(parent);
        };
        var timeCallback = function timeCallback(dt) {
          index >= GameData13.room.joinermax - self._specialNum && (index = 0);
          if (num_contrast <= GameData13.room.joinermax - self._specialNum) contrastCard("up", self.up, index, GameData13.room.joinermax - self._specialNum); else if (num_contrast > GameData13.room.joinermax - self._specialNum && num_contrast <= 2 * GameData13.room.joinermax - 2 * self._specialNum) contrastCard("mid", self.mid, index, 2 * GameData13.room.joinermax - 2 * self._specialNum); else if (num_contrast > 2 * GameData13.room.joinermax - 2 * self._specialNum && num_contrast <= 3 * GameData13.room.joinermax - 3 * self._specialNum) contrastCard("down", self.down, index, 3 * GameData13.room.joinermax - 3 * self._specialNum); else if (num_contrast > 3 * GameData13.room.joinermax - 3 * self._specialNum) {
            self._isBiPaiEnd = true;
            self._gunNum > 0 ? self._isGunEnd = false : self._specialNum > 0 ? self._isSpecialEnd = false : self._isClearEnd = false;
            for (var i = 0; i < self._handSize; i++) {
              var node = cc.find("card" + i, self.cardHand);
              node.getComponent("SSSCard").isSelect = false;
              node.y = 0;
            }
            self.clearArray(self._lastCardHand);
            self.clearArray(self._cardHandList);
            self.clearArray(self._cardRowList[0]);
            self.clearArray(self._cardRowList[1]);
            self.clearArray(self._cardRowList[2]);
            self.unschedule(timeCallback);
            self.concealAllSpecialTypeLabel();
            self.gameAnimation();
          }
          ++index;
          ++num_contrast;
        };
        this.playRoomAnimate(timeCallback);
      },
      showScore: function showScore(parent) {
        WriteLog("showScore");
        var self = this;
        var cardScore;
        var base = cc.find("base", parent);
        var extra = cc.find("extra", parent);
        parent.active = true;
        parent == this.up ? cardScore = GameData13.roomResult.result.ret[GameData.player.uid].up : parent == this.mid ? cardScore = GameData13.roomResult.result.ret[GameData.player.uid].mid : parent == this.down && (cardScore = GameData13.roomResult.result.ret[GameData.player.uid].down);
        this.playerRoundAllScore(cardScore.base);
        this.playerRoundAllScore(cardScore.extra);
        cardScore.base >= 0 ? this.scaleEffectsOfNode(base, 1.5, 1.5, 1, 1, .3, function() {
          base.getComponent(cc.Label).string = "+" + cardScore.base;
        }) : this.scaleEffectsOfNode(base, 1.5, 1.5, 1, 1, .3, function() {
          base.getComponent(cc.Label).string = cardScore.base;
        });
        cardScore.extra >= 0 ? this.scaleEffectsOfNode(extra, 1.5, 1.5, 1, 1, .3, function() {
          extra.getComponent(cc.Label).string = "(+" + cardScore.extra + ")";
        }) : this.scaleEffectsOfNode(extra, 1.5, 1.5, 1, 1, .3, function() {
          extra.getComponent(cc.Label).string = "(" + cardScore.extra + ")";
        });
        this.showRoundAllScore();
      },
      showRoundAllScore: function showRoundAllScore() {
        var self = this;
        this.allScore.active = true;
        this._roundAllScore >= 0 ? this.scaleEffectsOfNode(this.allScore, 1.5, 1.5, 1, 1, .3, function() {
          self.allScore.getComponent(cc.Label).string = "总分:+" + self._roundAllScore;
        }) : this.scaleEffectsOfNode(this.allScore, 1.5, 1.5, 1, 1, .3, function() {
          self.allScore.getComponent(cc.Label).string = "总分:" + self._roundAllScore;
        });
      },
      quanLeiDaGunScoreByUid: function quanLeiDaGunScoreByUid(uid) {
        var upScore = GameData13.roomResult.result.ret[uid].up;
        var midScore = GameData13.roomResult.result.ret[uid].mid;
        var downScore = GameData13.roomResult.result.ret[uid].down;
        this._quanLeiDaGunScore = (upScore.base + upScore.extra + midScore.base + midScore.extra + downScore.base + downScore.extra) / 2;
      },
      numuberOfShots: function numuberOfShots() {
        for (var uid in GameData13.roomResult.result.ret) if (GameData13.roomResult.result.ret[uid].gun.length > 0) for (var i = 0; i < GameData13.roomResult.result.ret[uid].gun.length; i++) {
          this._gunNum++;
          this._gunPlayerUid[this._gunPlayerUid.length] = {
            shoot: uid,
            target: GameData13.roomResult.result.ret[uid].gun[i]
          };
        }
      },
      angularByCoord: function angularByCoord(coord1, coord2) {
        var x = coord1.x - coord2.x;
        var y = coord1.y - coord2.y;
        if (x < 0 && y < 0) return 0 - Math.atan(Math.abs(y) / Math.abs(x));
        if (x > 0 && y < 0) return Math.atan(Math.abs(y) / Math.abs(x));
        if (x < 0 && y > 0) return Math.atan(Math.abs(y) / Math.abs(x));
        if (x > 0 && y > 0) return 0 - Math.atan(Math.abs(y) / Math.abs(x));
        if (x > 0 && 0 == y) return Math.atan(Math.abs(y) / Math.abs(x));
        if (x < 0 && 0 == y) return Math.atan(Math.abs(y) / Math.abs(x));
        if (0 == x && y > 0) {
          if (coord1.x < 0) return Math.atan(Math.abs(y) / Math.abs(x));
          if (coord1.x > 0) return 0 - Math.atan(Math.abs(y) / Math.abs(x));
        } else if (0 == x && y < 0) {
          if (coord1.x < 0) return 0 - Math.atan(Math.abs(y) / Math.abs(x));
          if (coord1.x > 0) return Math.atan(Math.abs(y) / Math.abs(x));
        }
        return 0;
      },
      calculateSpecialPlayer: function calculateSpecialPlayer() {
        var specialList = [];
        for (var uid in GameData13.roomResult.cards) if (GameData13.roomResult.cards[uid].special > 0) {
          this._specialNum++;
          var seat = GameData13.getPosition(uid);
          var specialTypeHint = cc.find("poker_" + seat + "/zhipai/specialType", this.tableNode);
          specialTypeHint.active = true;
          for (var _type in SpecialType) if (SpecialType[_type].id == GameData13.roomResult.cards[uid].special) {
            var node = cc.find(_type, this.animation);
            specialList.push({
              id: SpecialType[_type].id,
              type: _type,
              node: node,
              uid: uid,
              score: SpecialType[_type].score
            });
            break;
          }
        }
        specialList.sort(function(a, b) {
          return a.id - b.id;
        });
        return specialList;
      },
      calculateQuanLeiDaPlayer: function calculateQuanLeiDaPlayer() {
        var specialList = [];
        if (0 != GameData13.roomResult.result.homeRun && GameData13.room.joinermax > 2) {
          this._isQuanLeiDa = true;
          this.quanLeiDaGunScoreByUid(GameData13.roomResult.result.homeRun);
          var node = cc.find("QuanLeiDa", this.animation);
          specialList.push({
            id: SpecialType["QuanLeiDa"].id,
            type: "QuanLeiDa",
            node: node,
            uid: GameData13.roomResult.result.homeRun,
            scpre: 0
          });
        }
        return specialList;
      },
      getShootAngular: function getShootAngular() {
        var angular = [];
        if (this._gunNum > 0) for (var i = 0; i < this._gunPlayerUid.length; i++) {
          var coord1 = this.player[GameData13.getPosition(this._gunPlayerUid[i].shoot) - 1].getPosition();
          var coord2 = this.player[GameData13.getPosition(this._gunPlayerUid[i].target) - 1].getPosition();
          angular.push(this.angularByCoord(coord1, coord2) / 3.14159 * 180);
        }
        return angular;
      },
      playRoomAnimate: function playRoomAnimate(timeCallback) {
        WriteLog("playRoomAnimate");
        var self = this;
        var specialList = [];
        var angular = [];
        var isGameEnd = GameData13.game.roundNum == GameData13.room.roundmax;
        this.numuberOfShots();
        specialList = this.calculateQuanLeiDaPlayer();
        angular = this.getShootAngular();
        this._isQuanLeiDa || (specialList = this.calculateSpecialPlayer());
        this._specialNum == GameData13.room.joinermax && (this._isSpecialEnd = false);
        cc.log("quanLeiDa: ", this._isQuanLeiDa);
        cc.log("_gunNum: ", this._gunNum);
        cc.log("_specialNum: ", this._specialNum);
        var disCardFunc = function disCardFunc() {
          if (self._specialNum != GameData13.room.joinermax) {
            soundMngr.instance.playSSSSpeakAudio(SSS_SpeakAudioType.Start, self._playerSex);
            self.schedule(timeCallback, 1.2);
          }
        };
        this._disCardFunc = disCardFunc;
        this.showGunAnimation(angular);
        this.showSpecialAnimation(specialList);
        var clearFunc = function clearFunc() {
          self.showClearAnimation();
        };
        this._clearFunc = clearFunc;
        var playerReadyFunc = function playerReadyFunc() {
          self._specialNum = 0;
          isGameEnd ? self.showGameEnd(1) : sendEvent("againReady");
        };
        this._readyFunc = playerReadyFunc;
        this.gameAnimation();
      },
      gameAnimation: function gameAnimation() {
        WriteLog("gameAnimation");
        if (this._specialNum < GameData13.room.joinermax && this._isDisCardEnd && !this._isBiPaiEnd) this._disCardFunc(); else if (this._shootCount < this._gunNum && !this._isGunEnd) {
          soundMngr.instance.playSSSSpeakAudio(SSS_SpeakAudioType.DaQiang, this._playerSex);
          this._gunAnimation();
        } else this._playSpecialNum < this._specialNum && !this._isSpecialEnd && !this._isQuanLeiDa ? this._specialAnimation() : !this._isSpecialEnd && this._isQuanLeiDa ? this._specialAnimation() : !this._isClearEnd && this._isBiPaiEnd ? this._clearFunc() : this._gunNum > 0 && this._specialNum <= 0 && !this._isQuanLeiDa ? this._isGunEnd && this._isBiPaiEnd && this._isClearEnd && this._readyFunc() : this._gunNum > 0 && this._specialNum > 0 ? this._isGunEnd && this._isSpecialEnd && this._isBiPaiEnd && this._isClearEnd && this._readyFunc() : this._gunNum <= 0 && this._specialNum > 0 ? this._isSpecialEnd && this._isBiPaiEnd && this._isClearEnd && this._readyFunc() : this._gunNum <= 0 && this._specialNum <= 0 ? this._isBiPaiEnd && this._isDisCardEnd && this._isClearEnd && this._readyFunc() : this._gunNum > 0 && this._isQuanLeiDa && this._isBiPaiEnd && this._isDisCardEnd && 1 == this._playQuanLeiDaNum && this._isClearEnd && this._readyFunc();
      },
      showGunScore: function showGunScore(shootCount) {
        if (this._gunPlayerUid[shootCount].shoot == GameData.player.uid) {
          for (var key in GameData13.roomResult.result.ret[GameData.player.uid].playerList) if (this._gunPlayerUid[shootCount].target == key) {
            this._isQuanLeiDa ? this.playerRoundAllScore(this._quanLeiDaGunScore) : this._isQuanLeiDa || this.playerRoundAllScore(GameData13.roomResult.result.ret[GameData.player.uid].playerList[key].score / 2);
            break;
          }
          this.showRoundAllScore();
        } else if (this._gunPlayerUid[shootCount].target == GameData.player.uid) {
          for (var key in GameData13.roomResult.result.ret[GameData.player.uid].playerList) if (this._gunPlayerUid[shootCount].shoot == key) {
            this._isQuanLeiDa ? this.playerRoundAllScore(0 - this._quanLeiDaGunScore) : this._isQuanLeiDa || this.playerRoundAllScore(GameData13.roomResult.result.ret[GameData.player.uid].playerList[key].score / 2);
            break;
          }
          this.showRoundAllScore();
        }
      },
      showLoophole: function showLoophole(shootCount) {
        var seat = GameData13.getPosition(this._gunPlayerUid[shootCount].target);
        var holeNode = cc.find("poker_" + seat + "/holeNode", this.tableNode);
        var hole = cc.find("hole" + this.getRandom(0, 6), holeNode);
        var quit = false;
        while (!quit) if (true == hole.active) {
          hole = cc.find("hole" + this.getRandom(0, 6), holeNode);
          quit = false;
        } else quit = true;
        this._holeList.push(hole);
        hole.active = true;
      },
      showGunAnimation: function showGunAnimation(angular) {
        var self = this;
        var index = 0;
        var gunNode;
        var gunAnimationCallBack;
        if (self._gunNum <= 0) return;
        gunAnimationCallBack = function gunAnimationCallBack() {
          var shootPlayer = self.player[GameData13.getPosition(self._gunPlayerUid[self._shootCount].shoot) - 1];
          var targetPlayer = self.player[GameData13.getPosition(self._gunPlayerUid[self._shootCount].target) - 1];
          gunNode = cc.find("gun", shootPlayer);
          gunNode.active = true;
          gunNode.rotation = angular[self._shootCount];
          soundMngr.instance.playSSSSpeakAudio(SSS_SpeakAudioType.SpecialType["QiangJi"], self._playerSex);
          self.playAnimation(AnimateType.QiangJi, gunNode);
          if (self._gunPlayerUid.length <= 0) return;
          self.showGunScore(self._shootCount);
          self.showLoophole(self._shootCount);
          self._shootCount++;
        };
        this._gunAnimation = gunAnimationCallBack;
      },
      showSpecialScore: function showSpecialScore(index, specialList) {
        var score;
        if (specialList[index].uid == GameData.player.uid) {
          score = specialList[index].id == SpecialType["QuanLeiDa"].id ? GameData13.roomResult.score[GameData.player.uid] : SpecialType[specialList[index].type].score;
          cc.log("特殊牌型加分： ", score);
        } else {
          score = specialList[index].id == SpecialType["QuanLeiDa"].id ? GameData13.roomResult.score[GameData.player.uid] : 0 - SpecialType[specialList[index].type].score;
          cc.log("特殊牌型减分: ", score);
        }
        this.playerRoundAllScore(score);
        if (this._playSpecialNum != this._specialNum - 1 || this._isQuanLeiDa) {
          if (this._isQuanLeiDa) {
            this._roundAllScore = GameData13.roomResult.result.ret[GameData.player.uid].score;
            this.showRoundAllScore();
          }
        } else {
          index == specialList.length - 1 && (this._roundAllScore = GameData13.roomResult.result.ret[GameData.player.uid].score);
          this.showRoundAllScore();
        }
      },
      showSpecialCard: function showSpecialCard(cards, node) {
        var str = "resources/shisanshui/cardUI";
        if (cards.length < this._handSize) {
          cc.log("传入的特殊牌长度小于" + this._handSize + "个");
          return;
        }
        for (var i = 0; i < this._handSize; i++) {
          var disCard = cards[i];
          var card = cc.find("card" + i, node);
          var iconUrl = str + "/" + (disCard.value + 1) + "_" + (disCard.type + 1) + ".png";
          this.setTexture(iconUrl, card);
        }
      },
      restoreCard: function restoreCard() {
        var cards = GameData13.roomResult.cards[GameData.player.uid];
        if (GameData13.roomResult.result.ret[GameData.player.uid].special.type > 0) return;
        if (0 == GameData13.roomResult.result.ret[GameData.player.uid].special.type) {
          this.showDisCard(GameData.player.uid, "up", cards.up.card);
          this.showDisCard(GameData.player.uid, "mid", cards.mid.card);
          this.showDisCard(GameData.player.uid, "down", cards.down.card);
        }
      },
      showSpecialAnimation: function showSpecialAnimation(specialList) {
        WriteLog("show_specialAnimation");
        var str = "resources/shisanshui/cardUI";
        var self = this;
        var specialAnimationCallBack;
        if (this._specialNum <= 0 && !this._isQuanLeiDa) return;
        cc.log("specialList: ", specialList);
        specialAnimationCallBack = function specialAnimationCallBack() {
          WriteLog("specialAnimationCallBack");
          self.showSpecialPlayerName(true);
          if (self._isQuanLeiDa) {
            specialList[0].node && (specialList[0].node.active = true);
            self.showSpecialScore(0, specialList);
            var name = GameData13.getJoinerByUid(specialList[0].uid).name;
            self.showName(self.specialPlayerName, name);
            soundMngr.instance.playSSSSpeakAudio(SSS_SpeakAudioType.SpecialType[specialList[0].type], self._playerSex);
            self.playAnimation(AnimateType[specialList[0].type], specialList[0].node);
            self.showSpecialScore(0, specialList);
            self._playQuanLeiDaNum = 1;
          } else {
            self._playSpecialNum >= 0 && self._playSpecialNum < specialList.length && specialList[self._playSpecialNum].node && (specialList[self._playSpecialNum].node.active = true);
            self.showSpecialScore(self._playSpecialNum, specialList);
            var name = GameData13.getJoinerByUid(specialList[self._playSpecialNum].uid).name;
            self.showName(self.specialPlayerName, name);
            soundMngr.instance.playSSSSpeakAudio(SSS_SpeakAudioType.SpecialType[specialList[self._playSpecialNum].type], self._playerSex);
            self.playAnimation(AnimateType[specialList[self._playSpecialNum].type], specialList[self._playSpecialNum].node);
            var uid = specialList[self._playSpecialNum].uid;
            var seat = GameData13.getPosition(uid);
            var zhipaiNode = cc.find("poker_" + seat + "/zhipai", self.tableNode);
            self.showSpecialCard(GameData13.roomResult.cards[uid].allCards, zhipaiNode);
            self._specialPoker = cc.find("zhipai", self.poker_1);
            self.showSpecialCard(GameData13.roomResult.cards[uid].allCards, self._specialPoker);
          }
          cc.find("animateBg", self.tableNode).active = true;
          ++self._playSpecialNum;
        };
        this._specialAnimation = specialAnimationCallBack;
      },
      loserClearAnimation: function loserClearAnimation() {
        var str = "resources/shisanshui/tableUI/clearing/";
        var self = this;
        for (var i = 0; i < this._winnerToLoser.loser.length; i++) {
          var node;
          var jettonNum = this._jettonIndex + 1;
          if (this.tableNode.getChildByName("jettonNode" + jettonNum)) node = this.tableNode.getChildByName("jettonNode" + jettonNum); else {
            node = cc.instantiate(this.jettonNode);
            node.name = "jettonNode" + jettonNum;
            this.tableNode.addChild(node);
          }
          var localZOrder = this.player[0].getLocalZOrder();
          node.active = true;
          node.setLocalZOrder(localZOrder - 1);
          this._jettonList.push(node);
          var fileName = this.getRandom(1, 5);
          if (5 != fileName) {
            node.scaleX = .26;
            node.scaleY = .26;
          }
          var iconUrl = str + fileName + ".png";
          this.setTexture(iconUrl, node);
          var seat = GameData13.getPosition(this._winnerToLoser.loser[i].uid);
          var player = this.player[seat - 1];
          node.setPosition(player.getPosition());
          var jettonPosX = this.getRandom(-100, 100);
          var jettonPosY = this.getRandom(-100, 100);
          var moveTo = cc.moveTo(.32, cc.p(jettonPosX, jettonPosY));
          node.runAction(moveTo).easing(cc.easeCubicActionOut());
          this._jettonIndex++;
        }
        if (this._jettonIndex >= this._jettonCount * this._winnerToLoser.loser.length) {
          this.unschedule(this.loserClearAnimation);
          this._isWinnerClear = false;
          this.winnerAction();
        }
      },
      winnerJettonCount: function winnerJettonCount() {
        var jettonAllCount = this._jettonCount * this._winnerToLoser.loser.length;
        var _winnerJettonCount = Math.floor(jettonAllCount / this._winnerToLoser.winner.length);
        return _winnerJettonCount;
      },
      winnerClearAnimation: function winnerClearAnimation() {
        var self = this;
        var removeFunc;
        var lastWinner = this._winnerToLoser.winner.length - 1;
        for (var i = 0; i < this._winnerToLoser.loser.length; i++) {
          var jettonNum = this._jettonIndex + 1;
          var moveTo;
          var jettonAction = function jettonAction(num) {
            var seat = GameData13.getPosition(self._winnerToLoser.winner[self._winnerIndex].uid);
            var player = self.player[seat - 1];
            var offset_x = self.getRandom(-50, 50);
            var offset_y = self.getRandom(-50, 50);
            moveTo = cc.moveTo(.5, cc.p(player.getPosition().x + offset_x, player.getPosition().y + offset_y));
            removeFunc = cc.callFunc(function() {
              self._jettonList[num - 1].active = false;
              self.tableNode.removeChild(self._jettonList[num - 1]);
            }, this);
          };
          if (jettonNum <= this.winnerJettonCount() * (this._winnerIndex + 1) && this._winnerIndex < lastWinner) jettonAction(jettonNum); else if (jettonNum > this.winnerJettonCount() * (this._winnerIndex + 1) && this._winnerIndex < lastWinner) {
            this._winnerIndex++;
            jettonAction(jettonNum);
          } else this._winnerIndex == lastWinner && jettonAction(jettonNum);
          var fade = cc.fadeOut(.1);
          var seq = cc.sequence(moveTo, fade, removeFunc);
          this._jettonList[this._jettonIndex].runAction(seq).easing(cc.easeCubicActionOut());
          this._jettonIndex++;
        }
        if (this._jettonIndex >= this._jettonCount * this._winnerToLoser.loser.length) {
          this.unschedule(this.winnerClearAnimation);
          this.showHeadScore();
          this.gameAnimationMngr(AnimateType.JieSuan);
        }
      },
      loserJetton: function loserJetton() {
        this._jettonIndex = 0;
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_2);
        this.schedule(this.loserClearAnimation, .01);
      },
      winnerJetton: function winnerJetton() {
        this._jettonIndex = 0;
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_3);
        this.schedule(this.winnerClearAnimation, .01);
      },
      winnerAction: function winnerAction() {
        var delayTime = cc.delayTime(1);
        var self = this;
        var callFunc = cc.callFunc(function() {
          self.winnerJetton();
        }, this);
        var seq = cc.sequence(delayTime, callFunc);
        this.node.runAction(seq);
      },
      calculateWinnerAndLoser: function calculateWinnerAndLoser() {
        this.clearArray(this._winnerToLoser.winner);
        this.clearArray(this._winnerToLoser.loser);
        for (var uid in GameData13.roomResult.result.ret) GameData13.roomResult.result.ret[uid].score > 0 ? this._winnerToLoser.winner.push({
          uid: uid,
          score: GameData13.roomResult.result.ret[uid].score
        }) : GameData13.roomResult.result.ret[uid].score < 0 && this._winnerToLoser.loser.push({
          uid: uid,
          score: GameData13.roomResult.result.ret[uid].score
        });
      },
      showClearAnimation: function showClearAnimation() {
        WriteLog("showClearAnimation");
        this.calculateWinnerAndLoser();
        this._winnerToLoser.winner.length > 0 && (this._isLoserClear = false);
        if (this._isLoserClear) {
          this._isLoserClear = false;
          this._isWinnerClear = false;
          this.scheduleOnce(this._readyFunc, 1);
        } else this.loserJetton();
      },
      showBiPai: function showBiPai(uid) {
        var seat = GameData13.getPosition(uid);
        var node = cc.find("poker_" + seat, this.tableNode);
        cc.find("fapai/bg", node).active = false;
        cc.find("fapai", node).active = false;
        cc.find("zhipai", node).active = true;
      },
      showDisCardReady: function showDisCardReady() {
        WriteLog("showDisCardReady");
        GameData13.isEmptyObject(GameData13.disCardReady) ? cc.log("function:showDisCardReady.. GameData13.disCardReady is empty.") : this.showBiPai(GameData13.disCardReady.uid);
      },
      showGameEnd: function showGameEnd(data) {
        1 == data ? this.showRoomEndClear(true) : 0 == data && this.showRoomEndClear(false);
      },
      showWaitNode: function showWaitNode(show) {
        this.waitNode.active = show;
      },
      showNeatenNode: function showNeatenNode(show) {
        this.neatenNode.active = show;
      },
      showRoomEndClear: function showRoomEndClear(show) {
        this.roomEndClear.active = show;
        GameData13.game.start = false;
        this.stopGameAction();
      },
      showUpResetBtn: function showUpResetBtn(show) {
        this.upResetBtn.active = show;
      },
      showMidResetBtn: function showMidResetBtn(show) {
        this.midResetBtn.active = show;
      },
      showDownResetBtn: function showDownResetBtn(show) {
        this.downResetBtn.active = show;
      },
      showPeculiarBtn: function showPeculiarBtn(show) {
        this.peculiarBtn.node.active = show;
      },
      showReadyBtn: function showReadyBtn(show) {
        this.readyBtn.active = show;
      },
      showQuitBtn: function showQuitBtn(show) {
        this.quitBtn.active = show;
      },
      showSelection: function showSelection(show) {
        this.selection.active = show;
      },
      showCardHandLayer: function showCardHandLayer(show) {
        this.cardHand.active = show;
      },
      showCardGroupLayer: function showCardGroupLayer(show) {
        this.cardGroup.active = show;
      },
      showSpecialPlayerName: function showSpecialPlayerName(show) {
        this.specialPlayerName.node.active = show;
      },
      showTimeNode: function showTimeNode(_isDisCardEnd, show, open, close) {
        this.timeNode.active = show;
        if (_isDisCardEnd) {
          if (_isDisCardEnd) {
            this.timeNode.x = 0;
            this.timeNode.y = -30;
          }
        } else {
          this.timeNode.x = 215;
          this.timeNode.y = 395;
        }
        if (open) {
          cc.log("运行时间计时器");
          this.openTimer(open);
        } else if (close) {
          cc.log("关闭时间计时器");
          this.closeTimer(close);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        WriteLog("showJoinerLost");
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        WriteLog("showJoinerConnect");
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        WriteLog("showHeaderDisconnect");
        for (var i = 0; i < GameData13.joiners.length; i++) {
          var player = GameData13.joiners[i];
          if (player.uid == uid) {
            var playerNode = this.player[GameData13.getPosition(uid) - 1];
            var disNode = cc.find("lost", playerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showConnectDisCardInfo: function showConnectDisCardInfo() {
        WriteLog("showConnectDisCardInfo");
        var joiners = new Array();
        for (var key = 0; key < GameData13.joiners.length; key++) joiners.push(GameData13.joiners[key]);
        if (!GameData13.isEmptyObject(GameData13.playerConnect.disCardInfo)) {
          GameData13.game.start = true;
          this.readyBtnAndQuitBtnControl();
          for (var i = 0; i < GameData13.playerConnect.disCardInfo.length; i++) GameData.player.uid == GameData13.playerConnect.disCardInfo[i] && (this._isDisCardEnd = true);
          var disCardUid = [];
          for (var i = 0; i < GameData13.joiners.length; i++) for (var j = 0; j < GameData13.playerConnect.disCardInfo.length; j++) if (GameData13.joiners[i].uid == GameData13.playerConnect.disCardInfo[j]) {
            disCardUid.push(GameData13.joiners[i].uid);
            break;
          }
          for (var key = 0; key < joiners.length; key++) for (var num = 0; num < disCardUid.length; num++) if (disCardUid[num] == joiners[key].uid) {
            cc.log("disCardUid and joiners: ", disCardUid[num], joiners[key].uid);
            joiners.splice(key, 1);
          }
          for (var i = 0; i < GameData13.playerConnect.disCardInfo.length; i++) {
            var seat = GameData13.getPosition(GameData13.playerConnect.disCardInfo[i]);
            cc.find("poker_" + seat + "/zhipai", this.tableNode).active = true;
          }
        }
        if (GameData13.game.reday) for (var key = 0; key < joiners.length; key++) {
          var seat = GameData13.getPosition(joiners[key].uid);
          for (var i = 0; i < this._handSize; i++) {
            var card = cc.find("poker_" + seat + "/fapai/card" + i, this.tableNode);
            card.active = true;
          }
        }
        GameData13.clearObject(GameData13.playerConnect.disCardInfo);
      },
      showConnectDisCard: function showConnectDisCard() {
        WriteLog("showConnectDisCard");
        if (GameData13.isEmptyObject(GameData13.playerConnect.disCard)) {
          for (var index = 0; index < GameData13.disCardPlayer.length; index++) this.showBiPai(GameData13.disCardPlayer[index]);
          cc.log("GameData13.playerConnect.disCard is empty");
          return;
        }
        GameData13.game.start = true;
        this.showWaitNode(false);
        this.readyBtnAndQuitBtnControl();
        var disCardNode = cc.find("disCard", this.poker_1);
        disCardNode.y = this._disCardNodePosYList[0];
        if (GameData13.playerConnect.disCard.special > 0) {
          var specialTypeHint = cc.find("zhipai/specialType", this.poker_1);
          specialTypeHint.active = true;
        } else {
          GameData13.playerConnect.disCard.upCards && this.showDisCard(GameData.joinContact.uid, "up", GameData13.playerConnect.disCard.upCards);
          GameData13.playerConnect.disCard.midCards && this.showDisCard(GameData.joinContact.uid, "mid", GameData13.playerConnect.disCard.midCards);
          GameData13.playerConnect.disCard.downCards && this.showDisCard(GameData.joinContact.uid, "down", GameData13.playerConnect.disCard.downCards);
        }
        GameData13.clearObject(GameData13.playerConnect.disCard);
      },
      connectRecurrence: function connectRecurrence() {
        if (!GameData13.isEmptyObject(GameData.joinContact)) {
          this.setRoomNum(GameData13.joiners[0].roomid);
          this.showHeadScore();
          GameData.player.roomid = GameData13.joiners[0].roomid;
        }
        GameData13.readyInfo[GameData.joinContact.uid];
        if (GameData13.game.start) {
          this.ready();
          this.showWaitNode(false);
        }
        if (GameData13.isEmptyObject(GameData13.player)) {
          if (!GameData13.isEmptyObject(GameData13.roomResult)) {
            if (GameData13.isEmptyObject(GameData13.roomResult.result)) for (var i = 0; i < GameData13.joiners.length; i++) {
              var player = this.player[GameData13.getPosition(GameData13.joiners[i].uid) - 1];
              var score = cc.find("score", player);
              score.getComponent(cc.Label).string = GameData13.roomResult.score[GameData13.joiners[i].uid];
            }
            GameData13.game.start = true;
            this.showWaitNode(false);
            this.ready();
            return;
          }
        } else {
          GameData13.game.start = true;
          this.showNeatenNode(true);
          this.checkedRecommendManner();
          this.showWaitNode(false);
          this.refreshCard();
        }
        this.showConnectDisCardInfo();
        this.showConnectDisCard();
      },
      readyBtnAndQuitBtnControl: function readyBtnAndQuitBtnControl() {
        this.showReadyBtn(true);
        this.showQuitBtn(true);
        cc.log("..roundNum:" + GameData13.game.roundNum);
        if (GameData13.game.roundNum > 0) {
          this.showReadyBtn(false);
          this.showQuitBtn(false);
          return;
        }
        for (var uid in GameData13.readyInfo) {
          if (uid != GameData.player.uid) continue;
          this.showReadyBtn(false);
          this.showQuitBtn(false);
          break;
        }
      },
      concealAllSpecialTypeLabel: function concealAllSpecialTypeLabel() {
        for (var num = 1; num <= 5; num++) {
          var specialTypeHint = cc.find("poker_" + num + "/zhipai/specialType", this.tableNode);
          specialTypeHint.active = false;
        }
      },
      stopGameAction: function stopGameAction() {
        this.tableNode.stopAllActions();
        if (this._jettonList.length > 0) for (var i = 0; i < this._jettonList.length; i++) this._jettonList[i] && this._jettonList[i].stopAllActions();
      },
      getRandom: function getRandom(m, n) {
        var num = Math.ceil(Math.random() * (n - m) + m);
        return Math.floor(num);
      },
      setTexture: function setTexture(url, node) {
        var texture2D;
        if (null == url || 0 == url.length || void 0 == url) {
          var spriteComponent;
          if (node.getComponent(cc.Sprite)) {
            spriteComponent = node.getComponent(cc.Sprite);
            spriteComponent.spriteFrame = null;
          }
        } else {
          var textureUrl = cc.url.raw(url);
          textureUrl && (texture2D = cc.textureCache.addImage(textureUrl));
          var spriteComponent;
          if (node.getComponent(cc.Sprite)) {
            spriteComponent = node.getComponent(cc.Sprite);
            spriteComponent.spriteFrame = new cc.SpriteFrame(texture2D);
          }
        }
      },
      setJettonCount: function setJettonCount(count) {
        this._jettonCount = count;
      },
      towMoveCardActive: function towMoveCardActive(parent) {
        0 != moveCard.oneCard && moveCard.oneCard.card.parent == parent && (moveCard.oneCard.card.active = true);
        0 != moveCard.towCard && moveCard.towCard.card.parent == parent && (moveCard.towCard.card.active = true);
      },
      scaleEffectsOfNode: function scaleEffectsOfNode(node, fromScaleX, fromScaleY, toScaleX, toScaleY, time, func) {
        var fromAction = cc.scaleTo(time, fromScaleX, fromScaleY);
        var toAction = cc.scaleTo(time, toScaleX, toScaleY);
        var callFunc = cc.callFunc(func, this);
        var seq = cc.sequence(callFunc, fromAction, toAction);
        node.runAction(seq);
      },
      playerRoundAllScore: function playerRoundAllScore(score) {
        this._roundAllScore += score;
        return this._roundAllScore;
      },
      clearArray: function clearArray(array) {
        array.length > 0 && array.splice(0, array.length);
      },
      clearCardType: function clearCardType() {
        this._isDisCardEnd = true;
        this.showCardHandLayer(true);
        this.showCardGroupLayer(true);
        this.showNeatenNode(false);
        this.clearArray(cardPoker13.up);
        this.clearArray(cardPoker13.mid);
        this.clearArray(cardPoker13.down);
        for (var i = 0; i < 3; i++) {
          var cardNode = cc.find("card" + i, this.upCardNode);
          cardNode.getComponent(cc.Sprite).spriteFrame = null;
          var card = cardNode.getComponent("SSSCard");
          card.isSelect = false;
          this.hideCardMask(cardNode);
        }
        for (var i = 0; i < 5; i++) {
          var cardNode1 = cc.find("card" + i, this.midCardNode);
          var cardNode2 = cc.find("card" + i, this.downCardNode);
          cardNode1.getComponent(cc.Sprite).spriteFrame = null;
          cardNode2.getComponent(cc.Sprite).spriteFrame = null;
          var card1 = cardNode1.getComponent("SSSCard");
          var card2 = cardNode2.getComponent("SSSCard");
          card1.isSelect = false;
          card2.isSelect = false;
          this.hideCardMask(cardNode1);
          this.hideCardMask(cardNode2);
        }
      },
      cutOutArray: function cutOutArray(array, formIdx, toIdx) {
        var tempArr = [];
        if (array.length <= toIdx) return tempArr;
        for (var index = formIdx; index <= toIdx; index++) tempArr.push(array[index]);
        return tempArr;
      },
      openTimer: function openTimer() {
        var index = 0;
        var _Time = GameData13.game.time;
        var time = .05;
        var _idx = 1 / (1 / time * _Time);
        var self = this;
        var node = cc.find("timeBar", this.timeNode);
        var progressBar = node.getComponent(cc.ProgressBar);
        var progress = 1;
        var changeTime = function changeTime(idx) {
          self.timer.string = idx;
        };
        var gameTimer = function gameTimer(dt) {
          ++index;
          if (20 == index) {
            --_Time;
            index = 0;
          }
          if (_Time >= 10) {
            var tens = Math.floor(_Time / 10);
            var ones = _Time % 10;
            changeTime(_Time);
          } else _Time >= 0 && changeTime(_Time);
          if (progress > 0) progress -= _idx; else {
            progress = 0;
            self._groupTypeList[0].getComponent("groupType").showRecommendCard();
            self.onDisCardBtnCliked();
            self.unschedule(_gameTimer);
          }
          progressBar.progress = progress;
        };
        this._gameTimer = _gameTimer;
        this.schedule(gameTimer, time);
      },
      closeTimer: function closeTimer() {
        this.unschedule(this.gameTimer);
      },
      setCheckedCards: function setCheckedCards(cards) {
        this.clearArray(this._checkedCardList);
        for (var i = 0; i < cards.length; i++) for (var j = 0; j < this._cardHandList.length; j++) if (this._cardHandList[j].type == cards[i].type && this._cardHandList[j].value == cards[i].value) {
          var repetition = false;
          for (var n = 0; n < this._checkedCardList.length; n++) if (this._checkedCardList[n].cardId == j) {
            repetition = true;
            break;
          }
          if (repetition) continue;
          this._checkedCardList.push({
            card: this._cardHandList[j],
            cardId: j
          });
          break;
        }
      },
      setResetCard: function setResetCard(parent, row) {
        WriteLog("setResetCard");
        this.clearArray(this._checkedCardList);
        for (var i = 0; i < cardPoker13[row].length; i++) {
          var cardNode = cc.find("card" + i, parent);
          this.hideCardMask(cardNode);
          var card = cardNode.getComponent("SSSCard");
          card.removeAllCards();
          card.isSelect = false;
          this.setTexture(null, cardNode);
          cardNode.active = true;
          for (var j = 0; j < this._cardHandList.length; j++) if (0 == this._cardHandList[j]) {
            this._cardHandList[j] = cardPoker13[row][i];
            break;
          }
        }
        this.showSelection(false);
        this.showCardHandLayer(true);
        this.showCardGroupLayer(true);
        this.showCardHand();
        this.clearArray(cardPoker13[row]);
        this.towMoveCardActive(parent);
        this.initCardStatus();
        "up" == row ? this.showUpResetBtn(false) : "mid" == row ? this.showMidResetBtn(false) : "down" == row && this.showDownResetBtn(false);
      },
      setRoomNum: function setRoomNum(roomid) {
        var self = this;
        var str = "resources/shisanshui/tableUI/";
        var addRoomID = function addRoomID(parent, idx, num) {
          var id = new cc.Node();
          id && parent.addChild(id);
          id.addComponent(cc.Sprite);
          var iconUrl = str + "zhuomian" + num + ".png";
          self.setTexture(iconUrl, id);
          id.x = 15 * idx + 10;
        };
        var divistor = 1e5;
        for (var i = 0; i < 6; i++) {
          var num = Math.floor(roomid / divistor);
          roomid %= divistor;
          divistor /= 10;
          addRoomID(this.roomId, i, num);
        }
      },
      setRoundNum: function setRoundNum() {
        var self = this;
        var roundNum = GameData13.game.roundNum > GameData13.room.roundmax ? GameData13.room.roundmax : GameData13.game.roundNum;
        var str = "resources/shisanshui/tableUI/";
        var addRoundNum = function addRoundNum(parent, idx, num) {
          var round = cc.find("num" + idx, parent);
          var iconUrl = str + "zhuomian" + num + ".png";
          self.setTexture(iconUrl, round);
        };
        if (roundNum >= 0 && roundNum < 10) addRoundNum(this.roundNum, 1, roundNum); else if (roundNum >= 10 && roundNum < 100) {
          cc.find("num1", this.roundNum).active = false;
          var num = Math.floor(roundNum / 10);
          addRoundNum(this.roundNum, 0, num);
          num = roundNum % 10;
          addRoundNum(this.roundNum, 2, num);
        }
      },
      startTouch: function startTouch(e) {
        var cardRowSize = [ {
          width: this.upCardNode.getContentSize().width,
          height: this.upCardNode.getContentSize().height
        }, {
          width: this.midCardNode.getContentSize().width,
          height: this.midCardNode.getContentSize().height
        }, {
          width: this.downCardNode.getContentSize().width,
          height: this.downCardNode.getContentSize().height
        } ];
        var pos1 = this.upCardNode.convertTouchToNodeSpace(e);
        var pos2 = this.midCardNode.convertTouchToNodeSpace(e);
        var pos3 = this.downCardNode.convertTouchToNodeSpace(e);
        if (pos1.x > 0 && pos1.x <= cardRowSize[0].width && pos1.y > 0 && pos1.y <= cardRowSize[0].height) {
          this.refreshCheckedCards();
          this.showCardRow("up", this.upCardNode, 3);
        } else if (pos2.y > 0 && pos2.y <= cardRowSize[1].height) {
          this.refreshCheckedCards();
          this.showCardRow("mid", this.midCardNode, 5);
        } else if (pos3.y > 0 && pos3.y <= cardRowSize[2].height) {
          this.refreshCheckedCards();
          this.showCardRow("down", this.downCardNode, 5);
        }
      },
      moveTouch: function moveTouch(e) {},
      endTouch: function endTouch(e) {},
      dealAction: function dealAction(idx) {
        var node;
        var card;
        if (0 != idx) {
          node = cc.find("poker_" + (idx + 1) + "/fapai", this.tableNode);
          cc.find("bg", node).active = true;
          var startPosX = cc.find("card0", node).getPositionX();
          for (var i = 0; i < this._handSize; i++) {
            card = cc.find("card" + i, node);
            card.x = startPosX - 30;
            card.active = true;
            var actionTo = cc.moveTo(.3, cc.p(startPosX + 15 * i, 0));
            card.runAction(actionTo);
          }
        } else if (0 == idx) {
          node = cc.find("poker_" + (idx + 1) + "/fapai", this.tableNode);
          cc.find("bg", node).active = true;
          var startPosX = cc.find("card0", node).getPositionX();
          for (var i = 0; i < this._handSize; i++) {
            card = cc.find("card" + i, node);
            card.x = startPosX - 30;
            card.active = true;
            var actionTo = cc.moveTo(.3, cc.p(startPosX + 13 * i, 0));
            card.runAction(actionTo);
          }
        }
      },
      disCardAction: function disCardAction(uid, row) {
        var str = "resources/shisanshui/cardUI";
        var index = 0;
        var card = [];
        var cards = [];
        var seat = GameData13.getPosition(uid);
        var line = GameData13.getDisCardRow(row);
        var node = cc.find("poker_" + seat + "/disCard", this.tableNode);
        var commonType = cc.find("poker_" + seat + "/disCard/CommonType", this.tableNode);
        if (GameData13.roomResult.cards[uid].allCards && GameData13.roomResult.cards[uid].special > 0) return;
        node.active = true;
        var self = this;
        var timeCallback = function timeCallback(dt) {
          commonType.active = false;
          node.active = false;
        };
        for (var i = 0; i < 5; i++) {
          card[i] = cc.find("card" + i, node);
          card[i].active = true;
        }
        1 == seat && line - 1 != 0 ? node.y = node.getPositionY() - 90 : 1 != seat && line - 1 != 0 && (node.y = node.getPositionY() - 65);
        for (var i = 0; i < 5; i++) if (1 == line) {
          if (0 == i || 4 == i) {
            card[i].active = false;
            continue;
          }
          var disCard = GameData13.roomResult.cards[uid][row].card[index];
          cards[cards.length] = disCard;
          var iconUrl = str + "/" + (disCard.value + 1) + "_" + (disCard.type + 1) + ".png";
          this.setTexture(iconUrl, card[i]);
          index++;
        } else {
          var disCard = GameData13.roomResult.cards[uid][row].card[i];
          cards[cards.length] = disCard;
          var iconUrl = str + "/" + (disCard.value + 1) + "_" + (disCard.type + 1) + ".png";
          this.setTexture(iconUrl, card[i]);
        }
        var cardType = GameData13.roomResult.cards[uid][row].type;
        for (var type in CommonType) if (cardType == CommonType[type].id) {
          var iconUrl = "resources/shisanshui/cardTypeUI/" + CommonType[type].str + ".png";
          this.setTexture(iconUrl, commonType);
          commonType.active = true;
          soundMngr.instance.playSSSSpeakAudio(SSS_SpeakAudioType.CommonType[type], this._playerSex);
          break;
        }
        1 == seat ? this.playAnimation("bipai1", node) : this.playAnimation("bipai2", node);
        this.scheduleOnce(timeCallback, 1.05);
        this.showDisCard(uid, row, cards);
      },
      ready: function ready() {
        SSSHandler.getInstance().requestReady(function() {});
        for (var i = 0; i < this._holeList.length; i++) this._holeList[i].active = false;
        this.up.active = false;
        this.mid.active = false;
        this.down.active = false;
        this.allScore.active = false;
        this.initDisPos(false);
        var index = GameData13.getPosition(GameData.player.uid);
        var ready = cc.find("ready", this.player[index - 1]);
        ready.active = true;
      },
      againReady: function againReady() {
        this.ready();
      },
      onReadyBtnCliked: function onReadyBtnCliked(evt) {
        this.ready();
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      onDisCardBtnCliked: function onDisCardBtnCliked(evt) {
        this.showSelection(false);
        var self = this;
        var cards = {
          up: 0,
          mid: 0,
          down: 0
        };
        cards.up = cardPoker13["up"];
        cards.mid = cardPoker13["mid"];
        cards.down = cardPoker13["down"];
        SSSHandler.getInstance().requestDiscard(cards, 0, function(res) {
          if (res.result == errorCode.WarningDiscard) {
            self.showSelection(true);
            soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_8);
            createSSSMoveMessage("倒水");
          } else if (res.result == errorCode.Success) {
            self.showDisCard(GameData.player.uid, "up", cardPoker13.up);
            self.showDisCard(GameData.player.uid, "mid", cardPoker13.mid);
            self.showDisCard(GameData.player.uid, "down", cardPoker13.down);
            self.clearCardType();
          }
        });
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      onReelectBtnCliked: function onReelectBtnCliked(evt, customEventData) {
        if (1 == customEventData) this.setResetCard(this.upCardNode, "up"); else if (2 == customEventData) this.setResetCard(this.midCardNode, "mid"); else if (3 == customEventData) this.setResetCard(this.downCardNode, "down"); else if (4 == customEventData) {
          this.setResetCard(this.upCardNode, "up");
          this.setResetCard(this.midCardNode, "mid");
          this.setResetCard(this.downCardNode, "down");
        }
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      onPeculiarBtnCliked: function onPeculiarBtnCliked(evt) {
        this.showSpecialType(GameData13.player.type);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      onShareBtnCliked: function onShareBtnCliked(evt) {
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
        if (inCD(3e3)) return;
        screenShootVertical(wxShareTexture);
      },
      onHeadBtnClicked: function onHeadBtnClicked(evt) {
        for (var i = 0; i < GameData13.joiners.length; i++) {
          var player = this.player[GameData13.getPosition(GameData13.joiners[i].uid) - 1];
          var button = cc.find("button", player);
          button.setTag(GameData13.joiners[i].uid);
        }
        poker13createPlayerInfoPanel(GameData13.getJoinerByUid(evt.target.tag));
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.player.roomid;
        if (roomId > 0) {
          var title = "十三水,房间号:" + GameData.player.roomid + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "十三水 房间号:" + GameData.player.roomid;
        4 == GameData13.room.costType && (title = "十三水 (代开)房间号:" + GameData.player.roomid);
        var des = this.getInviteStr();
        wxShareWeb(title, des);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var inviteStr = getRuleStr13(GameData13.room);
        GameData13.room.joinermax && (inviteStr += "," + GameData13.joiners.length + "等" + (GameData13.room.joinermax - GameData13.joiners.length));
        var str2 = ",请您快速加入对局.";
        var des = str1 + inviteStr + str2;
        console.log("des = " + des);
        return des;
      },
      onDeleteRoom: function onDeleteRoom() {
        RoomHandler.deleteRoom(GameData.player.roomid);
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      onQuitRoom: function onQuitRoom() {
        GameData13.owner == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.player.roomid);
      },
      lightFrame: function lightFrame(e) {
        var scrollView = this.promptScrollView.getComponent(cc.ScrollView);
        if (scrollView.getContentPosition().x == this._firstScrollViewPos.x) for (var i = 0; i < this._groupTypeList.length; i++) {
          var twinkle = cc.find("twinkle", this._groupTypeList[i]);
          true == twinkle.active && (twinkle.active = false);
        }
      },
      onScrollViewEvent: function onScrollViewEvent(evt) {
        cc.log("scrollViewEvent");
        var firstContentSize = cc.find("view", this.promptScrollView).getContentSize();
        var scrollView = this.promptScrollView.getComponent(cc.ScrollView);
        if (scrollView.getContentPosition().x > 0) {
          var content = cc.find("view/content", this.promptScrollView);
          content.setContentSize(firstContentSize);
        } else {
          var content = cc.find("view/content", this.promptScrollView);
          content.setContentSize(this.scrollViewSize);
        }
        this._firstScrollViewPos = scrollView.getContentPosition();
      },
      onPauseEvent: function onPauseEvent() {
        this.kai.active = !this.kai.active;
        this.guan.active = !this.guan.active;
        true == this.kai.active && false == this.guan.active ? cc.director.resume() : false == this.kai.active && true == this.guan.active && cc.director.pause();
      },
      playAnimation: function playAnimation(animate, node) {
        WriteLog("playAnimation");
        var self = this;
        for (var _type in AnimateType) if (AnimateType[_type] == animate) {
          var url = "shisanshui/animation/shisanshui/" + animate;
          cc.loader.loadResDir(url, function(err, assets) {
            if (err) {
              cc.log(err);
              return;
            }
            if (assets.length <= 0) return;
            node.parent.setLocalZOrder(10);
            var armatureDisplay;
            if (node.getComponent(dragonBones.ArmatureDisplay)) {
              cc.log("dragonBones get");
              armatureDisplay = node.getComponent(dragonBones.ArmatureDisplay);
            } else {
              cc.log("dragonBones add");
              armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
            }
            for (var elem in assets) {
              assets[elem] instanceof dragonBones.DragonBonesAsset && armatureDisplay.dragonAsset != assets[elem] && (armatureDisplay.dragonAsset = assets[elem]);
              assets[elem] instanceof dragonBones.DragonBonesAtlasAsset && armatureDisplay.dragonAtlasAsset != assets[elem] && (armatureDisplay.dragonAtlasAsset = assets[elem]);
            }
            if (animate == AnimateType.Start || animate == AnimateType.QuanLeiDa) armatureDisplay.armatureName = "armature"; else {
              armatureDisplay.armatureName = "armature";
              for (var i = 0; i < self._specialName.length; i++) if (animate == self._specialName[i]) {
                armatureDisplay.armatureName = "armature";
                break;
              }
            }
            armatureDisplay.playAnimation("newAnimation", 1);
            armatureDisplay.addEventListener(dragonBones.EventObject.COMPLETE, function() {
              node.active = false;
              cc.find("animateBg", self.tableNode).active = false;
              0 != self._specialPoker && self.restoreCard();
              self.gameAnimationMngr(animate);
              self.showSpecialPlayerName(false);
              self.releaseRes(assets);
            }, this);
          });
          return;
        }
        if (null != node) {
          node.getComponent(cc.Animation).play(animate);
          return;
        }
      },
      gameAnimationMngr: function gameAnimationMngr(animate) {
        var time = .5;
        this.animationStatusMngr();
        animate == AnimateType.Start || animate == AnimateType.QiangJi ? time = .3 : (animate = AnimateType.JieSuan) && (time = 1);
        this.scheduleOnce(this.gameAnimation, time);
      },
      animationStatusMngr: function animationStatusMngr() {
        if (this._shootCount >= this._gunNum) {
          this._isGunEnd = true;
          if (this._playSpecialNum < this._specialNum && !this._isQuanLeiDa) this._isSpecialEnd = false; else if (this._playSpecialNum >= this._specialNum && !this._isQuanLeiDa) {
            if (this._specialNum == GameData13.room.joinermax) {
              this._isBiPaiEnd = true;
              this.concealAllSpecialTypeLabel();
            }
            this._isSpecialEnd = true;
            this._isLoserClear && this._isWinnerClear ? this._isClearEnd = false : this._isLoserClear || this._isWinnerClear || (this._isClearEnd = true);
          } else if (this._isQuanLeiDa && 0 == this._playQuanLeiDaNum) this._isSpecialEnd = false; else if (this._isQuanLeiDa && 1 == this._playQuanLeiDaNum) {
            this._isSpecialEnd = true;
            this._isLoserClear && this._isWinnerClear ? this._isClearEnd = false : this._isLoserClear || this._isWinnerClear || (this._isClearEnd = true);
          }
        }
      },
      setMANNER: function setMANNER(manner) {
        this._MANNER = manner;
      },
      checkedRecommendManner: function checkedRecommendManner() {
        if (this._recommendManner.BTN_MANNER == this._MANNER) {
          this.cardHand.y = -348;
          this.cardGroup.y = -545;
          var scrollView = cc.find("ScrollView", this.cardGroup);
          scrollView.active = false;
          var pokerType = cc.find("pokerType", this.cardGroup);
          pokerType.active = true;
        } else if (this._recommendManner.SCROLL_MANNER == this._MANNER) {
          var scrollView = cc.find("ScrollView", this.cardGroup);
          scrollView.active = true;
          var pokerType = cc.find("pokerType", this.cardGroup);
          pokerType.active = false;
          this.initGroupType();
        }
      },
      checkedArrangeCards: function checkedArrangeCards() {
        var self = this;
        var recommend = GameData13.player.recommend[0];
        var cards_row = function cards_row(cards, length, cardRow, row) {
          if (cardPoker13[row].length <= 0) {
            self.setCheckedCards(cards);
            self.showCardRow(row, cardRow, length);
          }
        };
        this.setResetCard(this.upCardNode, "up");
        this.setResetCard(this.midCardNode, "mid");
        this.setResetCard(this.downCardNode, "down");
        cards_row(recommend[0].cards, 5, this.downCardNode, "down");
        cards_row(recommend[1].cards, 5, this.midCardNode, "mid");
        cards_row(recommend[2].cards, 3, this.upCardNode, "up");
        soundMngr.instance.playSSSAudio(SSS_AudioType.SAT_1);
      },
      releaseRes: function releaseRes(assets) {
        for (var elem in assets) {
          var deps = cc.loader.getDependsRecursively(assets[elem]);
          for (var i = 0; i < deps.length; i++) cc.loader.release(deps[i]);
        }
      }
    });
    module.exports = SSSRoomTable;
    cc._RF.pop();
  }, {
    "../logic/poker13": "poker13",
    SoundMngr: "SoundMngr",
    errorCode: "errorCode",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  SSSSetting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "552d1Ggi91CZ6CZaOIZT1WI", "SSSSetting");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var loginHandler = require("loginHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        dissolveBtn: cc.Button,
        quitBtn: cc.Button,
        musicSlider: cc.Slider,
        soundSlider: cc.Slider,
        musicBtn: cc.Node,
        soundBtn: cc.Node,
        musicProgressbar: cc.ProgressBar,
        soundProgressbar: cc.ProgressBar,
        toggle_tianjin: cc.Toggle,
        toggle_putong: cc.Toggle,
        fangyanLb: cc.Label,
        _musicOpen: true,
        _soundOpen: true,
        _LanguageTypeOpen: true
      },
      onLoad: function onLoad() {
        this._LanguageTypeOpen = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_local;
        this.musicBtn.getChildByName("guan").active = false;
        this.soundBtn.getChildByName("guan").active = false;
        this.soundSlider.node.on("slide", this.adjustSound, this);
        this.musicSlider.node.on("slide", this.adjustMusic, this);
        this.musicBtn.on(cc.Node.EventType.TOUCH_START, this.musicClick, this);
        this.soundBtn.on(cc.Node.EventType.TOUCH_START, this.soundClick, this);
        this.toggle_tianjin.node.on("toggle", this.selectLanguageTypeClick, this);
        this.toggle_putong.node.on("toggle", this.selectLanguageTypeClick, this);
        this._soundOpen = GameData.SetLayerData.soundOpen;
        this._musicOpen = GameData.SetLayerData.musicOpen;
        this.controlBtn();
        this.selectLanguageTypeOpen();
        this.refreshUI();
      },
      controlBtn: function controlBtn() {
        if (GameData.player.roomid > 0) {
          this.dissolveBtn.node.active = true;
          this.quitBtn.node.active = false;
        } else {
          this.dissolveBtn.node.active = false;
          this.quitBtn.node.active = true;
        }
      },
      dissolveClick: function dissolveClick() {
        cc.log("..dissolve");
        if (GameData.player.uid != GameData13.owner && false == GameData13.game.start) {
          createSSSMoveMessage("牌局开始后才允许解散房间");
          closeSSSView(this.node.name);
          return;
        }
        RoomHandler.deleteRoom(GameData.player.roomid, "apply");
        this.closeSetting();
      },
      onQuitGame: function onQuitGame() {
        loginHandler.logout();
      },
      musicClick: function musicClick(event) {
        this._musicOpen = !this._musicOpen;
        this.setMusicOpen();
        GameData.SetLayerData.musicOpen = this._musicOpen;
        var v = true == this._musicOpen ? GameData.SetLayerData.musicVolume : 0;
        soundMngr.instance.bgmVolume(v);
        GameData.saveSetLayerData();
      },
      soundClick: function soundClick(event) {
        this._soundOpen = !this._soundOpen;
        this.setSoundOpen();
        GameData.SetLayerData.soundOpen = this._soundOpen;
        GameData.saveSetLayerData();
      },
      selectLanguageTypeClick: function selectLanguageTypeClick(event) {
        var languageType = GameData.language_local;
        this.toggle_tianjin.isChecked && (languageType = GameData.language_local);
        this.toggle_putong.isChecked && (languageType = GameData.language_putong);
        cc.sys.localStorage.setItem("languageType" + GameData.player.uid, languageType);
      },
      selectLanguageTypeOpen: function selectLanguageTypeOpen() {
        if (this._LanguageTypeOpen == GameData.language_local) {
          this.toggle_tianjin.isChecked = true;
          this.toggle_putong.isChecked = false;
        } else {
          this.toggle_tianjin.isChecked = false;
          this.toggle_putong.isChecked = true;
        }
      },
      setMusicOpen: function setMusicOpen() {
        this.musicBtn.getChildByName("kai").active = this._musicOpen;
        this.musicBtn.getChildByName("guan").active = !this._musicOpen;
      },
      setSoundOpen: function setSoundOpen() {
        this.soundBtn.getChildByName("kai").active = this._soundOpen;
        this.soundBtn.getChildByName("guan").active = !this._soundOpen;
      },
      adjustSound: function adjustSound(event) {
        var slider = event.detail;
        GameData.SetLayerData.soundVolume = slider.progress;
        GameData.SetLayerData.soundOpen = true;
        this._soundOpen = true;
        this.soundProgressbar.progress = slider.progress;
        if (0 == slider.progress) {
          this._soundOpen = false;
          GameData.SetLayerData.soundOpen = false;
        }
        this.setSoundOpen();
        GameData.saveSetLayerData();
      },
      adjustMusic: function adjustMusic(event) {
        var slider = event.detail;
        GameData.SetLayerData.musicVolume = slider.progress;
        soundMngr.instance.bgmVolume(GameData.musicVolume);
        this.musicProgressbar.progress = slider.progress;
        GameData.SetLayerData.musicOpen = true;
        this._musicOpen = true;
        if (0 == slider.progress) {
          this._musicOpen = false;
          GameData.SetLayerData.musicOpen = false;
        }
        var v = slider.progress;
        soundMngr.instance.bgmVolume(v);
        this.setMusicOpen();
        GameData.saveSetLayerData();
      },
      logout: function logout(evt) {
        loginHandler.logout();
      },
      refreshUI: function refreshUI() {
        this.musicSlider.progress = GameData.SetLayerData.musicVolume;
        this.soundSlider.progress = GameData.SetLayerData.soundVolume;
        this.soundBtn.getChildByName("kai").active = GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("guan").active = !GameData.SetLayerData.soundOpen;
        this.musicBtn.getChildByName("kai").active = GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("guan").active = !GameData.SetLayerData.musicOpen;
        this.musicProgressbar.progress = GameData.SetLayerData.musicVolume;
        this.soundProgressbar.progress = GameData.SetLayerData.soundVolume;
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi ? this.fangyanLb.getComponent(cc.Label).string = "闽南话" : GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin && (this.fangyanLb.getComponent(cc.Label).string = "天津话");
      },
      closeSetting: function closeSetting() {
        closeSSSView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    loginHandler: "loginHandler",
    roomHandler: "roomHandler"
  } ],
  SetWeixin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c10f/cWtNK/aH2jRdFL4NW", "SetWeixin");
    "use strict";
    var configMgr = require("configMgr");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        Str1: cc.Label,
        Str2: cc.Label,
        Str3: cc.Label,
        Str1Type: cc.Label,
        Str2Type: cc.Label,
        Str3Type: cc.Label
      },
      onLoad: function onLoad() {
        var WXConfig = configMgr.getAgentWeChat();
        cc.log("..WXConfig:" + JSON.stringify(WXConfig));
        if (WXConfig) {
          this.Str1.string = WXConfig.accounts.number;
          this.Str2.string = WXConfig.agentConsult.number;
          this.Str3.string = WXConfig.gameProblem.number;
          this.Str1Type.string = WXConfig.accounts.type;
          this.Str2Type.string = WXConfig.agentConsult.type;
          this.Str3Type.string = WXConfig.gameProblem.type;
        }
      },
      onCopyNumber1: function onCopyNumber1() {
        if (inCD(1e3)) return;
        soundMngr.instance.playAudioOther("button");
        var number = this.Str1.string;
        textClipboard(number);
        createMoveMessage("已复制。");
        console.log("Copy successed");
      },
      onCopyNumber2: function onCopyNumber2() {
        if (inCD(1e3)) return;
        soundMngr.instance.playAudioOther("button");
        var number = this.Str2.string;
        textClipboard(number);
        createMoveMessage("已复制。");
        console.log("Copy successed");
      },
      onCopyNumber3: function onCopyNumber3(text) {
        if (inCD(1e3)) return;
        soundMngr.instance.playAudioOther("button");
        var number = this.Str3.string;
        textClipboard(number);
        createMoveMessage("已复制。");
        console.log("Copy successed");
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView("kefuweixin");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr"
  } ],
  SettingsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c5f5GMMs1Im5+kU5BhMqDt", "SettingsPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var loginHandler = require("loginHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        musicSlider: cc.Slider,
        soundSlider: cc.Slider,
        musicBtn: cc.Node,
        soundBtn: cc.Node,
        musicProgressbar: cc.ProgressBar,
        soundProgressbar: cc.ProgressBar,
        _musicOpen: true,
        _soundOpen: true,
        _LanguageTypeOpen: true,
        byeRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        toggle_tianjin: cc.Toggle,
        toggle_putong: cc.Toggle,
        musicKuang1: cc.Node,
        musicKuang2: cc.Node,
        soundKuang1: cc.Node,
        soundKuang2: cc.Node,
        areaLb: cc.Label
      },
      onLoad: function onLoad() {
        this._LanguageTypeOpen = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_tianjin;
        cc.log("language_type ==============", cc.sys.localStorage.getItem("languageType" + GameData.player.uid));
        this.musicBtn.getChildByName("guan").active = false;
        this.musicKuang1.active = false;
        this.soundBtn.getChildByName("guan").active = false;
        this.soundKuang1.active = false;
        this.soundSlider.node.on("slide", this.adjustSound, this);
        this.musicSlider.node.on("slide", this.adjustMusic, this);
        this.musicBtn.on(cc.Node.EventType.TOUCH_START, this.musicClick, this);
        this.soundBtn.on(cc.Node.EventType.TOUCH_START, this.soundClick, this);
        this.toggle_tianjin.node.on("toggle", this.selectLanguageTypeClick, this);
        this.toggle_putong.node.on("toggle", this.selectLanguageTypeClick, this);
        var sceneName = cc.director.getScene().name;
        cc.log("..sceneName:", sceneName);
        if ("table" == sceneName || "table-DDZ" == sceneName || "table-shishi" == sceneName || "table-TJDDZ" == sceneName || "table-huadian1" == sceneName || "table-changchun" == sceneName || "table-hz" == sceneName || "home" != sceneName) if (gameDefine.roomType.Room_Match != GameData.room.opts.roomType) {
          this.byeRoomBtn.active = true;
          this.quitRoomBtn.active = false;
        } else {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = false;
        } else {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = true;
        }
        this._soundOpen = GameData.SetLayerData.soundOpen;
        this._musicOpen = GameData.SetLayerData.musicOpen;
        var areaStr = "";
        configMgr.getArea() == gameDefine.AreaType.Area_Test ? areaStr = "测试语言" : configMgr.getArea() == gameDefine.AreaType.Area_HuaDian ? areaStr = "东北话" : configMgr.getArea() == gameDefine.AreaType.Area_TianJin ? areaStr = "天津话" : configMgr.getArea() == gameDefine.AreaType.Area_ShiShi && (areaStr = "闽南话");
        cc.log("地区：" + configMgr.getArea());
        this.areaLb && (this.areaLb.string = areaStr);
        this.selectLanguageTypeOpen();
        this.refreshUI();
      },
      musicClick: function musicClick(event) {
        soundMngr.instance.playAudioOther("button");
        this._musicOpen = !this._musicOpen;
        this.setMusicOpen();
        GameData.SetLayerData.musicOpen = this._musicOpen;
        var v = true == this._musicOpen ? GameData.SetLayerData.musicVolume : 0;
        soundMngr.instance.bgmVolume(v);
        GameData.saveSetLayerData();
      },
      soundClick: function soundClick(event) {
        soundMngr.instance.playAudioOther("button");
        this._soundOpen = !this._soundOpen;
        this.setSoundOpen();
        GameData.SetLayerData.soundOpen = this._soundOpen;
        GameData.saveSetLayerData();
      },
      selectLanguageTypeClick: function selectLanguageTypeClick(event) {
        soundMngr.instance.playAudioOther("button");
        var languageType = GameData.language_tianjin;
        this.toggle_tianjin.isChecked && (languageType = GameData.language_tianjin);
        this.toggle_putong.isChecked && (languageType = GameData.language_putong);
        cc.sys.localStorage.setItem("languageType" + GameData.player.uid, languageType);
        cc.log(languageType);
        cc.log("languageType= ", cc.sys.localStorage.getItem("languageType" + GameData.player.uid));
      },
      selectLanguageTypeOpen: function selectLanguageTypeOpen() {
        cc.log("=============================>", this._LanguageTypeOpen);
        if (this._LanguageTypeOpen == GameData.language_tianjin) {
          this.toggle_tianjin.isChecked = true;
          this.toggle_putong.isChecked = false;
        } else {
          this.toggle_tianjin.isChecked = false;
          this.toggle_putong.isChecked = true;
        }
      },
      setMusicOpen: function setMusicOpen() {
        this.musicBtn.getChildByName("kai").active = this._musicOpen;
        this.musicKuang2.active = this._musicOpen;
        this.musicBtn.getChildByName("guan").active = !this._musicOpen;
        this.musicKuang1.active = !this._musicOpen;
      },
      setSoundOpen: function setSoundOpen() {
        this.soundBtn.getChildByName("kai").active = this._soundOpen;
        this.soundKuang2.active = this._soundOpen;
        this.soundBtn.getChildByName("guan").active = !this._soundOpen;
        this.soundKuang1.active = !this._soundOpen;
      },
      adjustSound: function adjustSound(event) {
        var slider = event.detail;
        GameData.SetLayerData.soundVolume = slider.progress;
        GameData.SetLayerData.soundOpen = true;
        this._soundOpen = true;
        this.soundProgressbar.progress = slider.progress;
        if (0 == slider.progress) {
          this._soundOpen = false;
          GameData.SetLayerData.soundOpen = false;
        }
        this.setSoundOpen();
        GameData.saveSetLayerData();
      },
      adjustMusic: function adjustMusic(event) {
        var slider = event.detail;
        GameData.SetLayerData.musicVolume = slider.progress;
        soundMngr.instance.bgmVolume(GameData.musicVolume);
        this.musicProgressbar.progress = slider.progress;
        GameData.SetLayerData.musicOpen = true;
        this._musicOpen = true;
        if (0 == slider.progress) {
          this._musicOpen = false;
          GameData.SetLayerData.musicOpen = false;
        }
        var v = slider.progress;
        soundMngr.instance.bgmVolume(v);
        this.setMusicOpen();
        GameData.saveSetLayerData();
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      },
      requestDissolve: function requestDissolve() {
        if (!GameData.room.opts) return;
        if (GameData.player.uid != GameData.joiners[0].uid && GameData.joiners.length < GameData.room.opts.joinermax) {
          createMoveMessage("牌局开始后才允许解散房间");
          closeView(this.node.name);
          return;
        }
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ && RoomHandler.deleteRoom(GameData.room.id, "apply");
        closeView(this.node.name);
        switch (GameData.client.gameType) {
         case gameDefine.GameType.Game_Poker_DDZ:
          this.node.parent.getComponent("DDZ-roomMain").showdissolveLayer(1, 1);
          this.node.parent.getComponent("DDZ-roomDissolve").showPlayers();
          this.node.parent.getComponent("DDZ-roomDissolve").alreadyAgree();
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          this.node.parent.getComponent("TJDDZ-roomMain").showdissolveLayer(1, 1);
          this.node.parent.getComponent("TJDDZ-roomDissolve").showPlayers();
          this.node.parent.getComponent("TJDDZ-roomDissolve").alreadyAgree();
          break;

         case gameDefine.GameType.Game_Mj_Tianjin:
          this.node.parent.getComponent("roomMain").showdissolveLayer(1, 1);
          this.node.parent.getComponent("roomDissolve").showPlayers();
          this.node.parent.getComponent("roomDissolve").alreadyAgree();
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          this.node.parent.getComponent("roomMain-shishi").showdissolveLayer(1, 1);
          this.node.parent.getComponent("roomDissolve-shishi").showPlayers();
          this.node.parent.getComponent("roomDissolve-shishi").alreadyAgree();
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          this.node.parent.getComponent("roomMain_huadian").showdissolveLayer(1, 1);
          this.node.parent.getComponent("roomDissolve_huadian").showPlayers();
          this.node.parent.getComponent("roomDissolve_huadian").alreadyAgree();
          break;

         case gameDefine.GameType.Game_Mj_CC:
          this.node.parent.getComponent("roomMain_changchun").showdissolveLayer(1, 1);
          this.node.parent.getComponent("roomDissolve_changchun").showPlayers();
          this.node.parent.getComponent("roomDissolve_changchun").alreadyAgree();
        }
      },
      logout: function logout(evt) {
        soundMngr.instance.playAudioOther("button");
        loginHandler.logout();
      },
      refreshUI: function refreshUI() {
        this.musicSlider.progress = GameData.SetLayerData.musicVolume;
        this.soundSlider.progress = GameData.SetLayerData.soundVolume;
        this.soundBtn.getChildByName("kai").active = GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("guan").active = !GameData.SetLayerData.soundOpen;
        this.soundKuang1.active = !GameData.SetLayerData.soundOpen;
        this.soundKuang2.active = GameData.SetLayerData.soundOpen;
        this.musicBtn.getChildByName("kai").active = GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("guan").active = !GameData.SetLayerData.musicOpen;
        this.musicProgressbar.progress = GameData.SetLayerData.musicVolume;
        this.soundProgressbar.progress = GameData.SetLayerData.soundVolume;
        this.musicKuang2.active = GameData.SetLayerData.musicOpen;
        this.musicKuang1.active = !GameData.SetLayerData.musicOpen;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    loginHandler: "loginHandler",
    roomHandler: "roomHandler"
  } ],
  SharePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce14cP2tA5JzaSp4lYLr8OK", "SharePanel");
    "use strict";
    var configMgr = require("configMgr");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      onClose: function onClose() {
        closeView(this.node.name);
      },
      onShareWeixin: function onShareWeixin() {
        soundMngr.instance.playAudioOther("button");
        cc.log("share weixin");
        var title = configMgr.getGameName();
        var text = configMgr.getWxWelcomeText();
        wxShareWeb(title, text);
      },
      onSharePengyouQuan: function onSharePengyouQuan() {
        soundMngr.instance.playAudioOther("button");
        cc.log("share peng youquan");
        var title = configMgr.getGameName();
        wxShareTimeline(title, "玩家ID：" + GameData.player.uid + "邀请您加入【" + title + "】，点击分享信息后，进入该产品下载界面。");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr"
  } ],
  SoundMngr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97a18b8RCZFNLbM0Mp+bjrL", "SoundMngr");
    "use strict";
    var gameDefine = require("gameDefine");
    var SoundMngr = cc.Class({
      extends: cc.Component,
      properties: {
        displayId: 0,
        displayUrl: "",
        displayAudio: {
          url: cc.AudioClip,
          default: null
        }
      },
      statics: {
        instance: null
      },
      onLoad: function onLoad() {
        cc.game.addPersistRootNode(this.node);
        SoundMngr.instance = this;
      },
      stopAll: function stopAll() {
        this.displayId = 0;
        this.displayUrl = "";
        cc.audioEngine.stopAll();
      },
      playMusic: function playMusic(url) {
        if (this.displayUrl == url) return;
        var self = this;
        this.displayUrl = url;
        cc.audioEngine.stop(this.displayId);
        cc.loader.loadRes(url, cc.AudioClip, function(err, audioClip) {
          var volume = true == GameData.SetLayerData.musicOpen ? GameData.SetLayerData.musicVolume : 0;
          self.displayAudio = audioClip;
          self.displayId = cc.audioEngine.play(self.displayAudio, true, volume);
          cc.audioEngine.setVolume(self.displayId, volume);
        });
      },
      bgmVolume: function bgmVolume(v) {
        cc.audioEngine.setVolume(this.displayId, v);
      },
      playAudio: function playAudio(type, card, sex) {
        cc.log("...type, card, sex:" + type, card, sex);
        var resAudio = "";
        var LanguageType = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_tianjin;
        switch (type) {
         case "dis":
          resAudio = "card_" + card;
          break;

         case "peng":
          resAudio = "peng";
          break;

         case "gang":
          resAudio = "gang";
          break;

         case "hu":
          resAudio = "hu";
          break;

         case "chi":
          resAudio = "chi";
          break;

         default:
          return;
        }
        var LanguagePath = "";
        LanguageType == GameData.language_putong ? LanguagePath = 1 == sex ? "putong/boy/" : "putong/girl/" : LanguageType == GameData.language_tianjin && (LanguagePath = 1 == sex ? "tianjin/boy/" : "tianjin/girl/");
        var audioUrl = "resources/sound/" + LanguagePath + resAudio + ".mp3";
        cc.log("...play audio " + resAudio);
        cc.log("...audioUrl " + audioUrl);
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw(audioUrl);
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioChat: function playAudioChat(data, sex) {
        console.log("GameData.client.sex,GameData.player.uid", GameData.client.sex, GameData.player.uid, GameData.player.sex);
        var resAudio = "";
        var LanguagePath = "";
        if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin) LanguagePath = 1 == sex ? "resources/sound/tianjin/boy/" : "resources/sound/tianjin/girl/"; else if (GameData.client.gameType == gameDefine.GameType.Game_niu_niu || GameData.client.gameType == gameDefine.GameType.Game_Niu_Niu_10) {
          cc.log("..niuniu");
          LanguagePath = 1 == sex ? "resources/sound/niuniu/nan/" : "resources/sound/niuniu/nv/";
        } else if (GameData.client.gameType == gameDefine.GameType.Game_TDK) {
          cc.log("..tdk");
          LanguagePath = 1 == sex ? "resources/TDK/sound/man/" : "resources/TDK/sound/woman/";
        } else if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi) {
          cc.log("..shishi");
          LanguagePath = 1 == sex ? "resources/shishi/sound/shishi_fangyan/man/" : "resources/shishi/sound/shishi_fangyan/woman/";
        } else if (GameData.client.gameType == gameDefine.GameType.Game_MJ_HuaDian || GameData.client.gameType == gameDefine.GameType.Game_Mj_CC || GameData.client.gameType == gameDefine.GameType.Game_Mj_Heb) {
          cc.log("..huadian or changchun or heb");
          LanguagePath = 1 == sex ? "resources/huadian/sound/boy/" : "resources/huadian/sound/girl/";
        } else if (GameData.client.gameType == gameDefine.GameType.Game_Poker_ZJH) {
          cc.log("..ZJH");
          LanguagePath = 1 == sex ? "resources/zjh/sound/man/" : "resources/zjh/sound/women/";
        }
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw(LanguagePath + data + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioOther: function playAudioOther(data) {
        var resAudio = "";
        switch (data) {
         case "click":
          resAudio = "card_click";
          break;

         case "out":
          resAudio = "card_out";
          break;

         case "countdown":
          resAudio = "countdown";
          break;

         case "button":
          resAudio = "button";
          break;

         default:
          return;
        }
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/sound/" + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioHu: function playAudioHu(data, sex) {
        var resAudio = "";
        var audioDis = new cc.AudioSource();
        var temp = null;
        var HuTypeStr = "";
        var SexPath = "";
        SexPath = 1 == sex ? "tianjin/boy/" : "tianjin/girl/";
        data.type.sort(function(a, b) {
          return a - b;
        });
        HuTypeStr = data.type.toString();
        switch (HuTypeStr) {
         case "2":
          resAudio = "1";
          break;

         case "3":
          resAudio = "2";
          break;

         case "2,10":
          resAudio = "3";
          break;

         case "5":
          resAudio = "4";
          break;

         case "6":
          resAudio = "5";
          break;

         case "3,10":
          resAudio = "6";
          break;

         case "2,10":
          resAudio = "7";
          break;

         case "4,5":
          resAudio = "8";
          break;

         case "2,5":
          resAudio = "9";
          break;

         case "5,10":
          resAudio = "10";
          break;

         case "5,6":
          resAudio = "11";
          break;

         case "7":
          resAudio = "12";
          break;

         case "3,6":
          resAudio = "13";
          break;

         case "3,7":
          resAudio = "14";
          break;

         case "2,6":
          resAudio = "15";
          break;

         case "6,10":
          resAudio = "16";
          break;

         case "4,5,10":
          resAudio = "17";
          break;

         case "2,5,10":
          resAudio = "18";
          break;

         case "4,5,6":
          resAudio = "19";
          break;

         case "5,7":
          resAudio = "20";
          break;

         case "2,5,6":
          resAudio = "21";
          break;

         case "5,6,10":
          resAudio = "22";
          break;

         case "7,10":
          resAudio = "23";
          break;

         case "3,6,10":
          resAudio = "24";
          break;

         case "2,6,10":
          resAudio = "25";
          break;

         case "2,7":
          resAudio = "26";
          break;

         case "4,5,7":
          resAudio = "27";
          break;

         case "2,5,6,10":
          resAudio = "28";
          break;

         case "5,7,10":
          resAudio = "29";
          break;

         case "2,5,7":
          resAudio = "30";
          break;

         case "3,7,10":
          resAudio = "31";
          break;

         case "2,7,10":
          resAudio = "32";
          break;

         case "2,5,7,10":
          resAudio = "33";
          break;

         case "8":
          resAudio = "34";
          break;

         case "4":
          resAudio = "2";
          break;

         default:
          return;
        }
        audioDis.clip = cc.url.raw("resources/sound/" + SexPath + "card_h_" + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioPokerDisType: function playAudioPokerDisType(data, sex, bool) {
        var resAudio = "";
        var audioDis = new cc.AudioSource();
        var SexPath = "";
        var pokerDisTypeStr = data.detail.type;
        SexPath = 1 == sex ? "boy/" : 2 == sex ? "girl/" : "boy/";
        switch (pokerDisTypeStr) {
         case "straights":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "shunzi";
          break;

         case "threeAndOne":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "sandaiyi";
          break;

         case "threeAndTwo":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "sandaier";
          break;

         case "fourAndTwo":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "sidaier";
          break;

         case "fourAndFour":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "sidailiangdui";
          break;

         case "doublestraights":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "liandui";
          break;

         case "bomb":
          resAudio = "zhadan";
          break;

         case "jokerBomb":
          resAudio = "wangzha";
          break;

         case "aircraft":
         case "aircraft2":
         case "aircraft3":
         case "aircraft4":
         case "aircraft5":
         case "aircraft6":
         case "aircraft7":
         case "aircraft8":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "feiji";
          break;

         case "singleCard":
          resAudio = "dan" + data.detail.card;
          break;

         case "doubleCards":
          resAudio = "dui" + data.detail.card;
          break;

         case "threeCards":
          resAudio = bool ? "dani" + Math.floor(3 * Math.random() + 1) : "san" + data.detail.card;
          break;

         default:
          return;
        }
        audioDis.clip = cc.url.raw("resources/ddz/sound/" + SexPath + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playOtherAudioPoker: function playOtherAudioPoker(str, sex) {
        var resAudio = "";
        var audioDis = new cc.AudioSource();
        var SexPath = "";
        cc.log("sex " + sex);
        SexPath = 1 == sex ? "boy/" : 2 == sex ? "girl/" : "";
        switch (str) {
         case "buyao":
          resAudio = "buyao" + Math.floor(4 * Math.random() + 1);
          break;

         case "pdk-buyao":
          resAudio = "buyao4";
          break;

         case "baojing1":
          resAudio = "baojing1";
          break;

         case "baojing2":
          resAudio = "baojing2";
          break;

         case "baojing":
          resAudio = "baojing";
          break;

         case "yifen":
          resAudio = "yifen";
          break;

         case "liangfen":
          resAudio = "liangfen";
          break;

         case "sanfen":
          resAudio = "sanfen";
          break;

         case "bujiao":
          resAudio = "bujiao";
          break;

         case "bomb":
          resAudio = "bomb";
          break;

         case "chuntian":
          resAudio = "chuntian";
          break;

         case "plane":
          resAudio = "plane";
          break;

         case "shengli":
          resAudio = "shengli";
          break;

         case "shibai":
          resAudio = "shibai";
          break;

         case "click":
          resAudio = "click";
          break;

         case "discard":
          resAudio = "discard";
          break;

         default:
          return;
        }
        WriteLog("resAudio" + resAudio);
        WriteLog("SexPath" + SexPath);
        audioDis.clip = cc.url.raw("resources/ddz/sound/" + SexPath + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioPokerChat: function playAudioPokerChat(data, sex) {
        var resAudio = "";
        var SexPath = "";
        SexPath = 1 == sex ? "boy/" : "girl/";
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/ddz/sound/" + SexPath + data + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playNiuNiuAudio: function playNiuNiuAudio(pokerType, sex) {
        sex = sex || 1;
        var LanguagePath = "";
        LanguagePath = 1 == parseInt(sex) ? "nan/niu_" : "nv/niu_";
        var audioUrl = "resources/sound/niuniu/" + LanguagePath + pokerType + ".mp3";
        -1 == pokerType && (audioUrl = "resources/sound/niuniu/startgame.mp3");
        -2 == pokerType && (audioUrl = "resources/sound/niuniu/xitongfapai.mp3");
        -3 == pokerType && (audioUrl = "resources/sound/niuniu/niu_win.mp3");
        -4 == pokerType && (audioUrl = "resources/sound/niuniu/niu_lose.mp3");
        -5 == pokerType && (audioUrl = "resources/sound/niuniu/jinbi.mp3");
        -6 == pokerType && (audioUrl = "resources/sound/niuniu/lunzhuang.mp3");
        -7 == pokerType && (audioUrl = "resources/sound/niuniu/dingzhuang.mp3");
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw(audioUrl);
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playSSSAudio: function playSSSAudio(data) {
        if (void 0 == data || data.length <= 0) return;
        var resAudio = data;
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/shisanshui/sound/" + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playSSSSpeakAudio: function playSSSSpeakAudio(data, sex) {
        if (void 0 == data || void 0 == sex || data.length <= 0) return;
        var resAudio = data;
        var LanguagePath = "";
        LanguagePath = 1 == sex ? "man/" + resAudio : "woman/" + resAudio + "_n";
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/shisanshui/sound/" + LanguagePath + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playTDKAudio: function playTDKAudio(type, sex) {
        var resAudio = "";
        var LanguagePath = "";
        LanguagePath = 1 == sex ? "man/0_" : "woman/1_";
        switch (type) {
         case 2:
          resAudio = "kou" + Math.floor(2 * Math.random() + 1);
          break;

         case 3:
          resAudio = "xz1";
          break;

         case 4:
          resAudio = "gen" + Math.floor(2 * Math.random() + 1);
          break;

         case 5:
          resAudio = "ti" + Math.floor(2 * Math.random() + 1);
          break;

         case 6:
          resAudio = "bt" + Math.floor(2 * Math.random() + 1);
          break;

         case 7:
          resAudio = "ft" + Math.floor(2 * Math.random() + 1);
          break;

         case 8:
          resAudio = "quanxia";
          break;

         case "kaipai":
          resAudio = "bp" + Math.floor(2 * Math.random() + 1);
        }
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/TDK/sound/" + LanguagePath + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playTDKOther: function playTDKOther(type) {
        var resAudio = "";
        switch (type) {
         case "fapai":
          resAudio = "card";
          break;

         case "chouma":
          resAudio = "chip_end";
          break;

         case "start":
          resAudio = "start";
          break;

         case "languo":
          resAudio = "languo";
          break;

         case "win":
          resAudio = "dayingjia";
          break;

         case "lost":
          resAudio = "lost";
          break;

         case "xiaguo":
          resAudio = "chip_add";
        }
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/TDK/sound/" + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioShiShi: function playAudioShiShi(type, card, sex) {
        var resAudio = "";
        var LanguageType = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_tianjin;
        switch (type) {
         case "dis":
          resAudio = "card_" + card;
          break;

         case "peng":
          resAudio = "peng";
          break;

         case "gang":
          resAudio = "gang";
          break;

         case "hu":
          resAudio = "hu";
          break;

         case "chi":
          resAudio = "chi";
          break;

         case "buhua":
          resAudio = "buhua";
          break;

         default:
          return;
        }
        var LanguagePath = "";
        LanguageType == GameData.language_putong ? LanguagePath = 1 == sex ? "shishi_putong/man/" : "shishi_putong/woman/" : LanguageType == GameData.language_tianjin && (LanguagePath = 1 == sex ? "shishi_fangyan/man/" : "shishi_fangyan/woman/");
        cc.log("play audio " + resAudio);
        var audioDis = new cc.AudioSource();
        console.log("LanguagePath " + LanguagePath);
        audioDis.clip = cc.url.raw("resources/shishi/sound/" + LanguagePath + resAudio + ".mp3");
        cc.log(LanguagePath);
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioHD: function playAudioHD(type, card, sex) {
        var resAudio = "";
        var LanguageType = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_tianjin;
        console.log("LanguageType:" + cc.sys.localStorage.getItem("languageType" + GameData.player.uid));
        switch (type) {
         case "dis":
          resAudio = "card_" + card;
          break;

         case "cha":
          resAudio = "cha";
          break;

         case "andan":
          resAudio = "andan";
          break;

         case "mingdan":
          resAudio = "mingdan";
          break;

         case "hu":
          resAudio = "hu";
          break;

         case "chi":
          resAudio = "chi";
          break;

         case "buhua":
          resAudio = "buhua";
          break;

         case "ting":
          resAudio = "ting";
          break;

         default:
          return;
        }
        var LanguagePath = "";
        LanguageType == GameData.language_putong ? LanguagePath = 1 == sex ? "sound/putong/boy/" : "sound/putong/girl/" : LanguageType == GameData.language_tianjin && (LanguagePath = 1 == sex ? "huadian/sound/boy/" : "huadian/sound/girl/");
        var audioDis = new cc.AudioSource();
        console.log("LanguagePath " + LanguagePath);
        audioDis.clip = cc.url.raw("resources/" + LanguagePath + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioCC: function playAudioCC(type, data, sex) {
        var resAudio = "";
        var LanguageType = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_tianjin;
        console.log("LanguageType:" + cc.sys.localStorage.getItem("languageType" + GameData.player.uid));
        switch (type) {
         case "dis":
          resAudio = "card_" + data;
          break;

         case "cha":
          resAudio = "cha";
          break;

         case "andan":
          resAudio = "andan";
          break;

         case "mingdan":
          resAudio = "mingdan";
          break;

         case "hu":
          resAudio = "hu";
          break;

         case "chi":
          resAudio = "chi";
          break;

         case "ting":
          resAudio = "ting";
          break;

         case "dan":
          resAudio = "dan";
          break;

         default:
          return;
        }
        var LanguagePath = "";
        LanguageType == GameData.language_putong ? LanguagePath = 1 == sex ? "changchun/sound/putong/boy/" : "changchun/sound/putong/girl/" : LanguageType == GameData.language_tianjin && (LanguagePath = 1 == sex ? "changchun/sound/local/boy/" : "changchun/sound/local/girl/");
        var audioDis = new cc.AudioSource();
        console.log("LanguagePath " + LanguagePath);
        audioDis.clip = cc.url.raw("resources/" + LanguagePath + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playAudioZJH: function playAudioZJH(soundName, sex) {
        var resAudio = "";
        null != sex && (resAudio += 1 == sex ? "man/" : "women/");
        resAudio += soundName;
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/zjh/sound/" + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      },
      playTableDynAudio: function playTableDynAudio(key, type) {
        if (void 0 == key || void 0 == type) return;
        var str1 = void 0, str2 = void 0;
        switch (parseInt(key)) {
         case 0:
          str1 = "FW_";
          break;

         case 1:
          str1 = "ZD_";
          break;

         case 2:
          str1 = "JD_";
          break;

         case 3:
          str1 = "MG_";
          break;

         case 4:
          str1 = "BZ_";
          break;

         case 5:
          str1 = "PJ_";
        }
        switch (parseInt(type)) {
         case 0:
          str2 = "feixing";
          break;

         case 1:
          str2 = "xiaoguo";
        }
        var audioRes = cc.url.raw("resources/sound/dyn/" + str1 + str2 + ".mp3");
        if (audioRes) {
          var audioDis = new cc.AudioSource();
          audioDis.clip = audioRes;
          false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
          audioDis.play();
        }
      },
      playHundredOther: function playHundredOther(type) {
        var resAudio = "";
        switch (type) {
         case "fapai":
          resAudio = "fapai";
          break;

         case "chouma":
          resAudio = "chouma";
          break;

         case "result":
          resAudio = "coinsfly";
          break;

         case "winsign":
          resAudio = "winsign";
          break;

         case "stop":
          resAudio = "tingzhixiazhu";
          break;

         case "start":
          resAudio = "kaishixiazhu";
          break;

         case "countDown":
          resAudio = "daojishi";
          break;

         case "baozhuang":
          resAudio = "baozhuang";
          break;

         case "guide":
          resAudio = "shensuanzibaoxing";
          break;

         case "shangzhuang":
          resAudio = "shangzhuang";
          break;

         case "zhuangWin":
          resAudio = "zhuangjiatongchi";
          break;

         case "zhuangLose":
          resAudio = "zhuangjiatongpei";
        }
        var audioDis = new cc.AudioSource();
        audioDis.clip = cc.url.raw("resources/hundredNiuNiu/uiResources/sound/" + resAudio + ".mp3");
        false == GameData.SetLayerData.soundOpen ? audioDis.volume = 0 : audioDis.volume = GameData.SetLayerData.soundVolume;
        audioDis.play();
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  SpecialTypeAnimatePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "83fd2v/o5lIUZmDndM6sAiq", "SpecialTypeAnimatePanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        specialName: {
          default: null,
          type: cc.Label
        },
        animation: {
          default: null,
          type: cc.Node
        },
        poker: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {},
      showCards: function showCards() {
        var str = "resources/shisanshui/cardUI";
        var special = this.id;
        var cardHand = [];
        for (var uid in GameData13.roomResult.cards) {
          cc.log("special and uid: ", uid, special);
          if (GameData13.roomResult.cards[uid].special == special) {
            cc.log("allCards: ", GameData13.roomResult.cards[uid].allCards);
            cardHand = GameData13.roomResult.cards[uid].allCards;
            break;
          }
        }
        for (var i = 0; i < GameData13.handSize; i++) {
          var card = cc.find("cardhand/card" + i, this.poker);
          if (cardHand.length <= 0) {
            cc.log("special cardHand of null");
            return;
          }
          var iconUrl = str + "/" + (cardHand[i].value + 1) + "_" + (cardHand[i].type + 1) + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          card.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      play: function play() {},
      setSpecialName: function setSpecialName(name, id) {
        this.id = id;
        this.specialName.string = name;
      }
    });
    cc._RF.pop();
  }, {} ],
  "TDK-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef4bdf7QH1E/6pnn1FHfq+Z", "TDK-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var tdk_roomData = require("tdkRoomData");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round15_tdk: cc.Toggle,
        round30_tdk: cc.Toggle,
        player3_tdk: cc.Toggle,
        player4_tdk: cc.Toggle,
        player5_tdk: cc.Toggle,
        player6_tdk: cc.Toggle,
        pay1_tdk: cc.Toggle,
        pay2_tdk: cc.Toggle,
        pay3_tdk: cc.Toggle,
        qi9_tdk: cc.Toggle,
        qi10_tdk: cc.Toggle,
        daiwang_tdk: cc.Toggle,
        languofanbei_tdk: cc.Toggle,
        quanya1_tdk: cc.Toggle,
        quanya2_tdk: cc.Toggle,
        quanya3_tdk: cc.Toggle,
        spendUI_tdk: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray_tdk: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.modeType = 1;
        this.spendData = void 0;
        this.refreshUI();
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      createRoom: function createRoom() {
        GameData.setGameType(gameDefine.GameType.Game_TDK);
        this.saveRuleFromUI();
        var createData = {
          gameType: gameDefine.GameType.Game_TDK,
          roundType: 1,
          roundMax: tdk_roomData.createRoomOpts.roundMax,
          roundRule: tdk_roomData.createRoomOpts.roundRule,
          joinermax: tdk_roomData.createRoomOpts.player,
          roomType: 0,
          costType: tdk_roomData.createRoomOpts.costType,
          cardType: tdk_roomData.createRoomOpts.playType,
          allin: tdk_roomData.createRoomOpts.quanya,
          king: tdk_roomData.createRoomOpts.king,
          nextDouble: tdk_roomData.createRoomOpts.nextDouble,
          clubId: 0,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_TDK) return createData;
        createData.currencyType = modeTypeData.Game_TDK.CurrencyType;
        createData.settleType = modeTypeData.Game_TDK.SettleType;
        tdk_roomData.onRoomReadyInfo = {};
        return createData;
      },
      saveRuleFromUI: function saveRuleFromUI() {
        this.player3_tdk.isChecked ? tdk_roomData.createRoomOpts.player = 3 : this.player4_tdk.isChecked ? tdk_roomData.createRoomOpts.player = 4 : this.player5_tdk.isChecked ? tdk_roomData.createRoomOpts.player = 5 : this.player6_tdk.isChecked && (tdk_roomData.createRoomOpts.player = 6);
        if (this.round15_tdk.isChecked) {
          tdk_roomData.createRoomOpts.roundMax = 15;
          tdk_roomData.createRoomOpts.roundRule = 71;
        } else if (this.round30_tdk.isChecked) {
          tdk_roomData.createRoomOpts.roundMax = 30;
          tdk_roomData.createRoomOpts.roundRule = 72;
        }
        this.pay1_tdk.isChecked ? tdk_roomData.createRoomOpts.costType = 1 : this.pay2_tdk.isChecked ? tdk_roomData.createRoomOpts.costType = 2 : this.pay3_tdk.isChecked && (tdk_roomData.createRoomOpts.costType = 3);
        this.qi9_tdk.isChecked ? tdk_roomData.createRoomOpts.playType = 1 : this.qi10_tdk.isChecked && (tdk_roomData.createRoomOpts.playType = 2);
        this.quanya1_tdk.isChecked ? tdk_roomData.createRoomOpts.quanya = 0 : this.quanya2_tdk.isChecked ? tdk_roomData.createRoomOpts.quanya = 30 : this.quanya3_tdk.isChecked && (tdk_roomData.createRoomOpts.quanya = 60);
        tdk_roomData.createRoomOpts.king = this.daiwang_tdk.isChecked;
        tdk_roomData.createRoomOpts.nextDouble = this.languofanbei_tdk.isChecked;
        tdk_roomData.saveCreateRoomOpts();
      },
      refreshUI: function refreshUI() {
        cc.log("tdk_roomData.createRoomOpts = " + JSON.stringify(tdk_roomData.createRoomOpts));
        this.round15_tdk.isChecked = 15 == tdk_roomData.createRoomOpts.roundMax;
        this.round30_tdk.isChecked = 30 == tdk_roomData.createRoomOpts.roundMax;
        this.player3_tdk.isChecked = 3 == tdk_roomData.createRoomOpts.player;
        this.player4_tdk.isChecked = 4 == tdk_roomData.createRoomOpts.player;
        this.player5_tdk.isChecked = 5 == tdk_roomData.createRoomOpts.player;
        this.player6_tdk.isChecked = 6 == tdk_roomData.createRoomOpts.player;
        this.qi9_tdk.isChecked = 1 == tdk_roomData.createRoomOpts.playType;
        this.qi10_tdk.isChecked = 2 == tdk_roomData.createRoomOpts.playType;
        this.pay1_tdk.isChecked = true;
        this.pay2_tdk.isChecked = false;
        this.pay3_tdk.isChecked = false;
        this.quanya1_tdk.isChecked = 0 == tdk_roomData.createRoomOpts.quanya;
        this.quanya2_tdk.isChecked = 30 == tdk_roomData.createRoomOpts.quanya;
        this.quanya3_tdk.isChecked = 60 == tdk_roomData.createRoomOpts.quanya;
        this.daiwang_tdk.isChecked = tdk_roomData.createRoomOpts.king;
        this.languofanbei_tdk.isChecked = tdk_roomData.createRoomOpts.nextDouble;
        this.showSpendUI_tdk();
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI_tdk();
      },
      showSpendUI_tdk: function showSpendUI_tdk() {
        cc.log("..mode..tdk");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_TDK) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_TDK.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_TDK];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_TDK];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            var cost = this.spendData[key + 71].cost;
            var number = 3;
            this.player3_tdk.isChecked ? number = 3 : this.player4_tdk.isChecked ? number = 4 : this.player5_tdk.isChecked ? number = 5 : this.player6_tdk.isChecked && (number = 6);
            final = cost[number].final;
            if (this.pay2_tdk.isChecked) {
              final = Math.ceil(final / number);
              str2 = "/人";
            }
          } else final = this.spendData[key].cost;
          this.drowArray_tdk[key].active = 0 == final;
          this.spendUI_tdk[key].string = "（" + str1 + "*" + final + str2 + "）";
        }
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    tdkRoomData: "tdkRoomData"
  } ],
  "TDK-playerTemplate": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f3a4YHYbVOYo07dh45pKX/", "TDK-playerTemplate");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: 0,
        headBtn: cc.Button,
        headIcon: cc.Sprite,
        zhuangIcon: cc.Sprite,
        zhuangNumIcon: cc.Sprite,
        nameLabel: cc.Label,
        score: cc.Node,
        _player: null,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {},
      setPlayer: function setPlayer(data) {
        this._player = data;
        this.uid = this._player.uid;
      },
      setName: function setName(name) {
        this.nameLabel.string = getShortStr(name, 4);
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          this.headIcon.spriteFrame = null;
          return;
        }
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showPlayerIdentity: function showPlayerIdentity(show, type) {
        this.setIsPlayerIcon(show);
        if (1 == type) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/ddz/UI/common/icon/dizhu_icon.png"));
          this.zhuangIcon.spriteFrame = new cc.SpriteFrame(texture);
        } else if (2 == type) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/ddz/UI/common/icon/nongmin_icon.png"));
          this.zhuangIcon.spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      setIsPlayerIcon: function setIsPlayerIcon(show) {
        this.zhuangIcon.node.active = show;
      },
      setNamePositionByDir: function setNamePositionByDir(direction) {
        if ("right" == direction) {
          this.nameLabel.node.x = -57;
          this.score.x = -53;
          this.zhuangIcon.node.x = 33;
          console.log("this.nameLabel:" + this.nameLabel.horizontalAlign);
          this.nameLabel.horizontalAlign = 3;
          this.nameLabel.node.anchorX = 1;
          this.score.horizontalAlign = 3;
          this.score.anchorX = 1;
        }
      },
      showZhuang: function showZhuang(show) {
        this.zhuangIcon.node.active = show;
      },
      showZhuangNum: function showZhuangNum(zhuang, num) {},
      enableHeadBtn: function enableHeadBtn(flag) {
        this.headBtn.node.active = flag;
      },
      onHeadBtnClicked: function onHeadBtnClicked(evt) {
        var sceneName = cc.director.getScene().name;
        cc.log("..sceneName:", sceneName);
        if ("home" == sceneName) createPlayerInfoPanel(this._player); else {
          var self = this;
          var fun = function fun(panel) {
            if (panel) {
              var template = panel.getComponent("uiRoomPlayerInfo");
              template && template.onShow(self._player);
            }
          };
          var roomData = RoomHandler.getRoomData();
          if (roomData && roomData.opts && roomData.opts.gameType) {
            cc.log("..gameType:" + roomData.opts.gameType);
            openPlayerInfoView(roomData.opts.gameType, fun);
          }
        }
      },
      setCoin: function setCoin(value) {
        var coinNode = cc.find("coin", this.node);
        var showStr = "";
        value > 0 ? showStr = "+" + value : value < 0 ? showStr = value : 0 == value && (showStr = value);
        coinNode.getComponent(cc.Label).string = showStr;
      },
      getLiuGuang: function getLiuGuang(isPlay) {
        var liuguang = cc.find("liuguang", this.node);
        liuguang.active = isPlay;
      },
      setIsOnline: function setIsOnline(userId) {
        var disConncetNode = cc.find("Disconnect", this.node);
        var isOnlin = RoomHandler.isPlayerOnline(userId);
        disConncetNode.active = !isOnlin;
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  "TDK-poker": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "195c5vSPb9CfYGl4KhXWWiD", "TDK-poker");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerId: 0,
        index: 0
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  "TDK-roomDissolve": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78ad6z60+hCU43thoIz8uxU", "TDK-roomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        if (null != GameData.game.onRoomDissolve) {
          cc.log("GameData.game.onRoomDissolve = " + JSON.stringify(GameData.game.onRoomDissolve));
          sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        }
        this.openDisAgree = false;
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showHeaderConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showHeaderConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 190 * (i + 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            var isOnLine = RoomHandler.isPlayerOnline(uid);
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = !isOnLine;
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        var iconNode = cc.find("header_" + index + "/headimg", this.headerNode.parent);
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          iconNode.getComponent(cc.Sprite).spriteFrame = null;
          return;
        }
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            NiuNiuMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("TDK-roomMain").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("TDK-roomMain").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("TDK-roomMain").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("TDK-roomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      },
      showHeaderConnect: function showHeaderConnect() {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userId = GameData.joiners[i].uid;
          var isOnLine = RoomHandler.isPlayerOnline(userId);
          var index = i + 1;
          var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
          disNode.active = !isOnLine;
        }
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  "TDK-roomMain": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2c65fOzAT1CM5tVf6zcxPFV", "TDK-roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        cc.log("22222222222");
        registEvent("onRoomInfo", this, this.showLayer);
        this.showLayer();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(1e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnMovePos = this.convertToNodeSpace(movePos);
          var radius = {
            x: this.getContentSize().width / 2,
            y: this.getContentSize().height / 2
          };
          var distance = cc.pDistance(talkBtnMovePos, radius);
          if (distance > this.getContentSize().width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
      },
      onEnable: function onEnable() {},
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        GameData.initRoomData();
      },
      showLayer: function showLayer() {
        cc.log("GameData.room.status = " + GameData.room.status);
        GameData.room.status > TDKPokerCard.STATUS.WAITING ? this.showTableLayer() : this.showWaitLayer();
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("TDK/sound/backGround");
      },
      showTableLayer: function showTableLayer() {
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("TDK/sound/backGround");
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        if (1 == data) {
          this.settingLayer.active = true;
          this.settingLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.resultLayer.active = true;
        this.dissolveLayer.active = false;
        GameData.realNum = 0;
        this.resultLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("TDKChatPanel", gameDefine.GameType.Game_TDK);
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      },
      AnimationDelayTime: function AnimationDelayTime(data) {
        this._AnimationDelayTime = data.detail;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  "TDK-roomSummary": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ece2ffqz9OOpUXUD8GMYyB", "TDK-roomSummary");
    "use strict";
    var RoomHandler = require("roomHandler");
    var tdk_roomData = require("tdkRoomData");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerRender: cc.Prefab,
        content: cc.Node,
        panel: cc.Node
      },
      onLoad: function onLoad() {
        this._roomInfo = RoomHandler;
        this.handlerMsg();
        registEvent("onGameAllResult", this, this.initUI);
        Object.keys(tdk_roomData.resultData).length > 0 && this.initUI();
      },
      oonEnable: function oonEnable() {
        unregistEvent("onGameAllResult", this, this.initUI);
      },
      initUI: function initUI() {
        this.showTime(this._roomInfo.room.createtime, this._roomInfo.room.id);
        this.content.removeAllChildren();
        for (var i = 0; i < 6; i++) {
          var playerRender = cc.instantiate(this.playerRender);
          playerRender.x = 6 + 212 * i;
          this.content.addChild(playerRender);
        }
        var child = this.content.children;
        for (var i = 0; i < child.length; i++) {
          var playsLen = this._roomInfo.players.length;
          if (i < playsLen) {
            var playerRender = child[i];
            playerRender.getComponent("tdk-ResultRender").initData(this._roomInfo.players[i]);
            playerRender.getComponent("tdk-ResultRender").getActiveNode().active = true;
          } else {
            var playerRender = child[i];
            playerRender.getComponent("tdk-ResultRender").getActiveNode().active = false;
          }
        }
      },
      showTime: function showTime(createTime, roomId) {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(createTime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + roomId;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        GameData.joiners = [];
        GameData.game.onRoomDissolve = null;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      },
      handlerMsg: function handlerMsg() {},
      onDestroy: function onDestroy() {}
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler",
    tdkRoomData: "tdkRoomData"
  } ],
  "TDK-roomWait": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62c1dPE6hVBHK57V07da30O", "TDK-roomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var tdk_roomData = require("tdkRoomData");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        roomNode: cc.Node,
        readyNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        playerNodes: {
          default: [],
          type: cc.Node
        },
        ruleNode: cc.Node,
        readyBtn: cc.Node,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.initPlayers(this);
        registEvent("onTurner", this, this.onGameTurn);
        registEvent("onRoomInfo", this, this.initPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("onPlayerIncScore", this, this.initPlayers);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("onIncScore", this, this.getConnectChipsScore);
        registEvent("onPlayerIncScore", this, this.getEveryOneScore);
        registEvent("onPlayerInitScore", this, this.getEveryOneScore);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        registEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        registEvent("dynChat", this, this.dynChatHandler);
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        var isCreator = GameData.player.uid == GameData.room.creator;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.active = !isCreator;
        this.getConnectChipsScore();
        this.onGameTurn();
        this.addDynAnimation();
      },
      onEnable: function onEnable() {},
      onDestroy: function onDestroy() {
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        unregistEvent("yunwaUploaded", this, this.onYunwaUploaded);
        unregistEvent("HideReadyNode", this, this.HideReadyNode);
        unregistEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        unregistEvent("onRoomInfo", this, this.initPlayers);
        unregistEvent("onTurner", this, this.onGameTurn);
        unregistEvent("onPlayerIncScore", this, this.getEveryOneScore);
        unregistEvent("onPlayerInitScore", this, this.getEveryOneScore);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onGameScoreHandler: function onGameScoreHandler(data) {},
      HideReadyNode: function HideReadyNode() {},
      showRule: function showRule(data) {
        var rule1 = cc.find("ruleNode1/rule1", this.ruleNode);
        var playerNum = cc.find("ruleNode2/playerNum", this.ruleNode);
        var king = cc.find("ruleNode2/king", this.ruleNode);
        var keng = cc.find("ruleNode2/keng", this.ruleNode);
        var languo = cc.find("ruleNode2/languo", this.ruleNode);
        var moti = cc.find("ruleNode2/moti", this.ruleNode);
        var quanya = cc.find("ruleNode2/quanya", this.ruleNode);
        rule1.getComponent(cc.Label).string = "填大坑  共" + data.roundMax + "局";
        playerNum.getComponent(cc.Label).string = data.joinermax + "人局";
        1 === data.cardType ? keng.getComponent(cc.Label).string = "半坑(9起)" : 2 === data.cardType && (keng.getComponent(cc.Label).string = "半坑(10起)");
        true === data.king ? king.getComponent(cc.Label).string = "带王" : king.getComponent(cc.Label).string = "不带王";
        true === data.nextDouble ? languo.getComponent(cc.Label).string = "烂锅翻倍" : languo.getComponent(cc.Label).string = "烂锅不翻倍";
        0 === data.allin ? quanya.getComponent(cc.Label).string = "不带全压" : 30 === data.allin ? quanya.getComponent(cc.Label).string = "全压30倍" : 60 === data.allin && (quanya.getComponent(cc.Label).string = "全压60倍");
        var roundNum = RoomHandler.room.roundNum;
        var opts = RoomHandler.room.opts;
        var lastRoundNum = cc.find("roundBg/txt", this.roomNode);
        var nowRoundNum = roundNum > opts.roundMax ? opts.roundMax : roundNum;
        lastRoundNum.getComponent(cc.Label).string = "局数:" + nowRoundNum + "/" + opts.roundMax;
        var quanYa = cc.find("quanya/txt", this.roomNode);
        quanYa.getComponent(cc.Label).string = "全压:" + GameData.room.opts.allin;
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) ;
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("TDK-playerTemplate").uid == uid) {
            var chatNode = cc.find("chat", headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                cc.log("animationName:" + animationName);
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("TDK-playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      initPlayers: function initPlayers() {
        this.headers = [];
        for (var i = 0; i < this.playerNodes.length; i++) this.playerNodes[i].active = false;
        cc.log("joinersNum:" + GameData.joiners.length);
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j]) {
          var userId = GameData.joiners[j].uid;
          var userInfo = tdk_roomData.getPlayerInfoByUid(userId);
          var localIdx = tdk_roomData.getLocalPosition(j);
          cc.log("localIdx:" + localIdx);
          var headNode = this.playerNodes[localIdx].getChildByName("TableTDKPlayerTemplate");
          headNode.parent.active = true;
          var playerHeadScp = headNode.getComponent("TDK-playerTemplate");
          playerHeadScp.setPlayer(userInfo);
          playerHeadScp.setHeadIcon(userInfo.headimgurl);
          playerHeadScp.setName(userInfo.name);
          playerHeadScp.setIsOnline(userId);
          this.headers.push(headNode);
        }
        this.setRoomNum();
        this.onRoomReadyInfoHandler();
        this.showRule(GameData.room.opts);
      },
      onReadyBtnClick: function onReadyBtnClick() {
        var self = this;
        GameNet.getInstance().request("room.roomHandler.ready", {}, function(rtn) {
          self.readyBtn.active = false;
        });
      },
      ruleClick: function ruleClick() {},
      isRuleBtn: function isRuleBtn() {},
      onShowPlayIntrClick: function onShowPlayIntrClick() {},
      showPlayIntroduce: function showPlayIntroduce(size) {},
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler() {
        cc.log("tdk_roomData.onRoomReadyInfo = " + JSON.stringify(tdk_roomData.onRoomReadyInfo));
        var continueBtn = this.readyNode.parent.getChildByName("againBtn");
        var cantReady = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userid = GameData.joiners[i].uid;
          for (var key in tdk_roomData.onRoomReadyInfo) if (key == userid && false == tdk_roomData.onRoomReadyInfo[key]) {
            cc.log("cantReady = " + cantReady);
            cantReady++;
          }
        }
        if (cantReady == GameData.room.opts.joinermax && GameData.room.status > TDKPokerCard.STATUS.WAITING) {
          continueBtn.active = true;
          return;
        }
        this.readyNode.active = true;
        var readyChild = this.readyNode.children;
        for (var i = 0; i < readyChild.length; i++) readyChild[i].active = false;
        var readyData = tdk_roomData.onRoomReadyInfo;
        for (var key in readyData) {
          var playerInfo = tdk_roomData.getPlayerInfoByUid(key);
          playerInfo || delete readyData[key];
        }
        cc.log("readyData = " + JSON.stringify(readyData));
        for (var i = 0; i < GameData.joiners.length; i++) if (null != GameData.joiners[i]) {
          var uid = GameData.joiners[i].uid;
          if (true == readyData[uid]) {
            var index = tdk_roomData.getLocalPosition(i);
            this.showReadyIcon(index, true, false);
            if (uid === GameData.player.uid) {
              this.readyBtn.active = false;
              continueBtn.active = false;
            }
          } else {
            var index = tdk_roomData.getLocalPosition(i);
            this.showReadyIcon(index, false, true);
            GameData.room.status > TDKPokerCard.STATUS.WAITING && uid === GameData.player.uid && (continueBtn.active = true);
          }
        } else {
          var index = tdk_roomData.getLocalPosition(i);
          this.showReadyIcon(index, false, false);
        }
        var readyArray = [];
        for (var index in readyData) true === readyData[index] && readyArray.push(readyData[index]);
        readyArray.length === GameData.room.opts.joinermax && (this.readyNode.active = false);
      },
      showJoinerLost: function showJoinerLost(data) {
        this.showHeaderDisconnect(data.detail.uid, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
      },
      showJoinerConnect: function showJoinerConnect() {
        this.initPlayers();
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("TDK-playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      setRoomNum: function setRoomNum() {
        if (!GameData.room.id) return;
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitMjRoom(GameData.room.id);
      },
      startGameClick: function startGameClick() {
        TDKHandler.getInstance().requestStartGame();
        cc.log("开始游戏");
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "填大坑 房间号:" + GameData.room.id;
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var str2 = "请您快速加入对局.";
        var des = str1 + getRuleStrTDK(GameData.room.opts) + str2;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {},
      onShareFriend: function onShareFriend() {},
      onDeleteRoom: function onDeleteRoom() {
        NiuNiuMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id, "apply");
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        cc.log("111111");
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? NiuNiuMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onGameTurn: function onGameTurn() {
        this.scheduleOnce(this.showTurnEffect, .1);
      },
      showTurnEffect: function showTurnEffect() {
        if (0 == tdk_roomData.turn) return;
        this.gotoShowTurnEffect(tdk_roomData.turn);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j]) {
          var userId = GameData.joiners[j].uid;
          var localIdx = tdk_roomData.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("TableTDKPlayerTemplate");
          var playerHeadScp = headNode.getComponent("TDK-playerTemplate");
          uid === userId ? playerHeadScp.getLiuGuang(true) : playerHeadScp.getLiuGuang(false);
        }
        tdk_roomData.turn = 0;
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "填大坑,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      },
      getEveryOneScore: function getEveryOneScore(data) {
        var turnerscore = data.detail;
        for (var j = 0; j < GameData.joiners.length; j++) for (var i = 0; i < turnerscore.length; i++) {
          var turnerId = turnerscore[i].uid;
          var score = turnerscore[i].score;
          if (null != GameData.joiners[j] && GameData.joiners[j].uid === turnerId) {
            var localIdx = tdk_roomData.getLocalPosition(j);
            cc.log("localIdx:" + localIdx);
            var headNode = this.playerNodes[localIdx].getChildByName("nowChipsNum");
            headNode.active = true;
            headNode.getChildByName("Num").getComponent(cc.Label).string = score;
          }
        }
      },
      getConnectChipsScore: function getConnectChipsScore() {
        if (Object.keys(tdk_roomData.incPokerData).length <= 0) return;
        var turnerscore = tdk_roomData.incPokerData;
        for (var j = 0; j < GameData.joiners.length; j++) for (var key in turnerscore) if (null != GameData.joiners[j] && GameData.joiners[j].uid === parseInt(key)) {
          var localIdx = tdk_roomData.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("nowChipsNum");
          var turnerScore = arraySum(turnerscore[key]);
          cc.log("turnerScore = " + turnerScore);
          headNode.getChildByName("Num").getComponent(cc.Label).string = turnerScore;
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    roomHandler: "roomHandler",
    tdkRoomData: "tdkRoomData"
  } ],
  "TDK-roomtable": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aac20cW5dFM0KjH7mOU6hjz", "TDK-roomtable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var tdk_roomData = require("tdkRoomData");
    var gameDefine = require("gameDefine");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        operationBtns: cc.Node,
        pokersNode: cc.Node,
        escapeNode: cc.Node,
        chips: [ cc.Node ],
        chipsNode: cc.Node,
        clipSlider: cc.Slider,
        isMask: cc.Node,
        _clipNum: 0,
        allScore: cc.Label,
        _spaces: 68.1,
        playerNodes: {
          default: [],
          type: cc.Node
        },
        operationNode: cc.Node,
        pokerType: 0,
        genNum: cc.Label,
        languo: cc.Node,
        scoreNode: cc.Prefab,
        scoreParent: cc.Node,
        winShow: cc.Node,
        continueBtn: cc.Node,
        borrowPokerPre: cc.Prefab
      },
      onLoad: function onLoad() {
        this.dropPokersInfo = {};
        this.pokerScore = {};
        this.initUI();
        this.registListenr();
        this.isSeePoker = false;
        this.seePokerClick1 = false;
        if (GameData.room.status != TDKPokerCard.STATUS.WAITING) {
          if (GameData.room.status === TDKPokerCard.STATUS.READY) {
            this.initPokerNode();
            this.initBtn();
          } else {
            this.onShow();
            this.otherActionEffect();
            this.showObtainNode();
            this.showConnectDrop();
          }
          this.addChips();
          this.changeSumScore();
        }
      },
      registListenr: function registListenr() {
        var self = this;
        this.isMask.on(cc.Node.EventType.TOUCH_END, function() {
          self.closeClipSlider();
        });
        registEvent("onPlayerInitScore", this, this.basicScore);
        registEvent("onPlayerCards", this, this.onShow);
        registEvent("onActionBtn", this, this.showObtainNode);
        registEvent("onTurner", this, this.initBtn);
        registEvent("onTurnerAction", this, this.otherActionEffect);
        registEvent("onGameResult", this, this.gameResult);
        registEvent("onPrepareInfo", this, this.initUI);
        registEvent("onIncScore", this, this.addChips);
        registEvent("onDropPlayerInfo", this, this.showConnectDrop);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPlayerInitScore", this, this.basicScore);
        unregistEvent("onPlayerCards", this, this.onShow);
        unregistEvent("onActionBtn", this, this.showObtainNode);
        unregistEvent("onTurner", this, this.initBtn);
        unregistEvent("onTurnerAction", this, this.otherActionEffect);
        unregistEvent("onGameResult", this, this.gameResult);
        unregistEvent("onPrepareInfo", this, this.initUI);
        unregistEvent("onIncScore", this, this.addChips);
        unregistEvent("onDropPlayerInfo", this, this.showConnectDrop);
      },
      initUI: function initUI() {
        this.changeSumScore();
        var cantReady = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userid = GameData.joiners[i].uid;
          for (var key in tdk_roomData.onRoomReadyInfo) if (key == userid && false == tdk_roomData.onRoomReadyInfo[key]) {
            cc.log("cantReady = " + cantReady);
            cantReady++;
          }
        }
        if (cantReady == GameData.room.opts.joinermax && GameData.room.status > TDKPokerCard.STATUS.WAITING) return;
        this._clipNum = 0;
        this.dropPokersInfo = {};
        this.initPokerNode();
        this.initBtn();
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j]) {
          var userId = GameData.joiners[j].uid;
          var localIdx = tdk_roomData.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("pokerBg");
          var chipNum = this.playerNodes[localIdx].getChildByName("nowChipsNum");
          chipNum.active = false;
          headNode.active = false;
        }
        for (var i = 0; i < this.winShow.children.length; i++) this.winShow.children[i].active = false;
      },
      initBtn: function initBtn() {
        for (var i = 0; i < this.operationNode.children.length; i++) this.operationNode.children[i].active = false;
        this.clipSlider.node.active = false;
      },
      initPokerNode: function initPokerNode() {
        for (var key in this.pokersNode.children) this.hideNodeChild(this.pokersNode.children[key]);
        for (var key in this.escapeNode.children) this.escapeNode.children[key].active = false;
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      onShow: function onShow() {
        this.showPokers();
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j]) {
          var userId = GameData.joiners[j].uid;
          var localIdx = tdk_roomData.getLocalPosition(j);
          var chipNum = this.playerNodes[localIdx].getChildByName("nowChipsNum");
          chipNum.active = true;
        }
      },
      showPokers: function showPokers() {
        this.pokerScore = {};
        this.revealPoker = 0;
        this.darkPoker = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userId = GameData.joiners[i].uid;
          for (var key in tdk_roomData.pokers) if (tdk_roomData.pokers[userId]) if (this.dropPokersInfo[userId]) {
            var isDrop = this.dropPokersInfo[userId];
            true === isDrop || this.delayShowPoker(i);
          } else this.delayShowPoker(i);
        }
        var self = this;
        var joinLen = 150 * GameData.joiners.length;
        setTimeout(function() {
          self.showPokerScore(false);
        }, joinLen);
      },
      delayShowPoker: function delayShowPoker(index) {
        var j = index;
        var self = this;
        setTimeout(function() {
          var uid = GameData.joiners[j].uid;
          var handPoker = tdk_roomData.getHandPokerByUid(uid);
          var scoreSum = TDKPokerCard.calcScore(handPoker);
          self.pokerScore[uid] || (self.pokerScore[uid] = scoreSum);
          soundMngr.instance.playTDKOther("fapai");
          var localIdx = tdk_roomData.getLocalPosition(j);
          GameData.joiners[j].uid === GameData.player.uid ? self.showMyHandPokers(handPoker, self.pokersNode.children[localIdx]) : self.showOtherHandPokers(handPoker, self.pokersNode.children[localIdx]);
        }, 150 * index);
      },
      showMyHandPokers: function showMyHandPokers(poker, parent) {
        var showArray = [];
        var darkArray = [];
        for (var i = 0; i < poker.length; i++) {
          parent.children[i].active = true;
          if (i < 2) {
            darkArray.push(poker[i]);
            this.showPokerContent(parent.children[i], "0");
          } else {
            showArray.push(poker[i]);
            this.showPokerContent(parent.children[i], poker[i]);
          }
        }
        this.darkPoker = TDKPokerCard.calcScore(darkArray);
        this.revealPoker = TDKPokerCard.calcScore(showArray);
      },
      showOtherHandPokers: function showOtherHandPokers(poker, parent) {
        for (var i = 0; i < poker.length; i++) {
          parent.children[i].active = true;
          this.showPokerContent(parent.children[i], poker[i]);
        }
      },
      continueClick: function continueClick() {
        for (var i = 0; i < this.scoreParent.children.length; i++) this.scoreParent.children[i].removeAllChildren();
        this.unscheduleAllCallbacks();
        this.changeSumScore();
        this.continueBtn.active = false;
        if (tdk_roomData.close) this.node.getComponent("TDK-roomMain").showSummaryLayer(); else {
          var resultData = tdk_roomData.gameResult;
          var winner = resultData.winner;
          if (winner && winner > 0 || tdk_roomData.connectWin > 0) {
            this.initUI();
            this.chipsNode.removeAllChildren();
          }
          GameNet.getInstance().request("room.roomHandler.ready", {}, function(rtn) {});
        }
      },
      showObtainNode: function showObtainNode() {
        cc.log("111");
        if (null === tdk_roomData.actionBtn || Object.keys(tdk_roomData.actionBtn).length <= 0) return;
        var actionData = tdk_roomData.actionBtn;
        var action = actionData.action;
        var score = actionData.score;
        if (true === tdk_roomData.addpokersRight) {
          var self = this;
          var joinLen = 150 * GameData.joiners.length;
          setTimeout(function() {
            for (var j = 0; j < action.length; j++) {
              self.operationNode.getChildByName("operationBtn" + action[j]).active = true;
              4 === action[j] && (self.genNum.string = score);
            }
          }, joinLen);
          tdk_roomData.addpokersRight = false;
        } else for (var j = 0; j < action.length; j++) {
          this.operationNode.getChildByName("operationBtn" + action[j]).active = true;
          4 === action[j] && (this.genNum.string = score);
        }
        tdk_roomData.actionBtn = {};
      },
      seePokerClick: function seePokerClick() {
        cc.log("seePokerClick");
        this.isSeePoker = !this.isSeePoker;
        var myPokerNode = cc.find("handCard0", this.pokersNode);
        var changePokerNum = 2;
        var myPoker = tdk_roomData.getHandPokerByUid(GameData.player.uid);
        for (var i = 0; i < changePokerNum; i++) if (this.isSeePoker) {
          this.showPokerContent(myPokerNode.children[i], myPoker[i]);
          this.showPokerScore(true);
        } else {
          this.showPokerContent(myPokerNode.children[i], "0");
          this.showPokerScore(false);
        }
      },
      showPokerContent: function showPokerContent(cardNode, pokerId) {
        var pokerNum = 0;
        pokerNum = pokerId > 1e3 ? pokerId - 1e3 : pokerId;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/TDK/UI/poker/poker_" + pokerNum + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.showBorrowPoker(cardNode, pokerId);
      },
      showBorrowPoker: function showBorrowPoker(pokerNode, pokerId) {
        var show = false;
        pokerId > 1e3 && (show = true);
        var borrowNode = pokerNode.getChildByName(pokerNode.name + "_borrow");
        if (null == borrowNode) {
          if (true == show) {
            borrowNode = cc.instantiate(this.borrowPokerPre);
            cc.find("borrow", borrowNode).active = true;
            pokerNode.addChild(borrowNode);
            borrowNode.name = pokerNode.name + "_borrow";
          }
        } else borrowNode.active = show;
      },
      showConnectDrop: function showConnectDrop() {
        var dropInfo = tdk_roomData.DropPlayerInfo;
        var self = this;
        var index = GameData.joiners.length;
        setTimeout(function() {
          for (var i = 0; i < GameData.joiners.length; i++) {
            var userId = GameData.joiners[i].uid;
            var localIdx = tdk_roomData.getLocalPosition(i);
            var parent = self.pokersNode.children[localIdx];
            for (var key in dropInfo) if (dropInfo[userId]) {
              self.dropPokersInfo[userId], self.dropPokersInfo[userId] = true;
              cc.log("dropInfo[userId] = " + dropInfo[userId]);
              cc.log("tdk_roomData.pokers[userId] = " + JSON.stringify(tdk_roomData.pokers[userId]));
              var pokerDrop = tdk_roomData.pokers[userId];
              for (var len = 0; len < pokerDrop.length; len++) {
                cc.log("len = " + len);
                parent.children[len].active = true;
                self.showPokerContent(parent.children[len], "0");
              }
              self.escapeNode.children[localIdx].active = true;
            }
          }
        }, 150 * index);
      },
      escapePoker: function escapePoker(escapeUid) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var uid = GameData.joiners[i].uid;
          var handPoker = tdk_roomData.getHandPokerByUid(uid);
          var localIdx = tdk_roomData.getLocalPosition(i);
          if (GameData.joiners[i].uid === escapeUid) {
            this.dropPokersInfo[uid], this.dropPokersInfo[uid] = true;
            for (var i = 0; i < handPoker.length; i++) {
              this.showPokerContent(this.pokersNode.children[localIdx].children[i], "0");
              this.escapeNode.children[localIdx].active = true;
            }
            return;
          }
        }
      },
      escapeClick: function escapeClick() {
        var self = this;
        NiuNiuMessageBox("您确认要扣牌吗？", function() {
          TDKHandler.getInstance().requestDrop();
          self.turnerActionEffect(2, null, GameData.player.uid);
        }, function() {});
      },
      PassClick: function PassClick() {
        this.turnerActionEffect(6, null, GameData.player.uid);
        TDKHandler.getInstance().requestPass();
      },
      allInClick: function allInClick() {
        this.turnerActionEffect(8, tdk_roomData.allInscore, GameData.player.uid);
        TDKHandler.getInstance().requestAllInc();
      },
      followClick: function followClick() {
        this.turnerActionEffect(4, tdk_roomData.maxScore, GameData.player.uid);
        TDKHandler.getInstance().requestFollowBet();
      },
      showClipSlider: function showClipSlider(eve, data) {
        this.pokerType = parseInt(data);
        this.initClipViewLen();
        this.clipSlider.node.active = true;
      },
      initClipViewLen: function initClipViewLen() {
        var sumScore = tdk_roomData.maxScore;
        this.clipSlider.progress = 1;
        var nowclick = Math.ceil(this.clipSlider.progress * sumScore);
        var handle = this.clipSlider.node.getChildByName("Handle");
        var clipLable = this.clipSlider.node.getChildByName("clipNum");
        clipLable.getComponent(cc.Label).string = nowclick;
        var back = this.clipSlider.node.getChildByName("beijing");
        back.height = 173.5 + handle.y;
        this._clipNum = nowclick;
      },
      onSliderHEvent: function onSliderHEvent(sender, eventType) {
        var nowclick = Math.ceil(sender.progress * tdk_roomData.maxScore);
        0 === nowclick && (nowclick = 1);
        var handle = this.clipSlider.node.getChildByName("Handle");
        var clipLable = this.clipSlider.node.getChildByName("clipNum");
        clipLable.getComponent(cc.Label).string = nowclick;
        var back = this.clipSlider.node.getChildByName("beijing");
        back.height = 173.5 + handle.y;
        this._clipNum = nowclick;
      },
      basicScore: function basicScore() {
        for (var i = 0; i < tdk_roomData.initScore.length; i++) {
          var score = tdk_roomData.initScore[i].score;
          this.clipClick(score, tdk_roomData.initScore[i].uid);
        }
      },
      addChips: function addChips() {
        cc.log("tdk_roomData.incPokerData = " + JSON.stringify(tdk_roomData.incPokerData));
        this.chipsNode.removeAllChildren();
        if (Object.keys(tdk_roomData.incPokerData).length <= 0) return;
        var chipsData = tdk_roomData.incPokerData;
        for (var key in chipsData) {
          var chipsArr = chipsData[key];
          for (var i = 0; i < chipsArr.length; i++) this.clipClick(chipsArr[i], key);
        }
      },
      clipClick: function clipClick(data, turnerUid) {
        var score = data;
        var clip1Num = 0;
        var clip2Num = 0;
        var clip5Num = 0;
        var clip10Num = 0;
        var scoreArry = [ clip10Num, clip5Num, clip2Num, clip1Num ];
        for (var i = 0; i < scoreArry.length; i++) scoreArry[i] = this.spliceScore(score)[i];
        for (var i = 0; i < scoreArry.length; i++) for (var j = 0; j < scoreArry[i]; j++) {
          for (var index = 0; index < GameData.joiners.length; index++) {
            var localIdx = tdk_roomData.getLocalPosition(index);
            if (GameData.joiners[index].uid === turnerUid) {
              var handenode = this.pokersNode.children[localIdx];
              this.chips[i].x = handenode.x;
              this.chips[i].y = handenode.y;
            }
          }
          var clipNode = cc.instantiate(this.chips[i]);
          clipNode.parent = this.chipsNode;
          clipNode.x = this.chips[i].x;
          clipNode.y = this.chips[i].y;
          clipNode.active = true;
          this.clipFlyToTableAnimation(clipNode);
        }
        cc.log("筹码数量：" + this.chipsNode.childrenCount);
      },
      clipFlyToTableAnimation: function clipFlyToTableAnimation(node) {
        var x = this.randomNum(0, 400) - 200;
        var y = this.randomNum(0, 100) - 100;
        var action1 = cc.moveTo(.3, cc.p(x, y));
        var action3 = cc.callFunc(function() {
          node.removeFromParent(true);
        }, node);
        var action4 = cc.fadeOut(.1);
        soundMngr.instance.playTDKOther("xiaguo");
        this.chipsNode.childrenCount > 80 ? node.runAction(cc.sequence(action1, action4, action3)).easing(cc.easeCubicActionOut()) : node.runAction(action1).easing(cc.easeCubicActionOut());
      },
      spliceScore: function spliceScore(score) {
        var clip1 = 1;
        var clip2 = 2;
        var clip5 = 5;
        var clip10 = 10;
        var arry = [];
        var coinArry = [ clip10, clip5, clip2, clip1 ];
        for (var i = 0; i < coinArry.length; i++) {
          var num = Math.floor(score / coinArry[i]);
          arry.push(num);
          score -= Math.floor(score / coinArry[i]) * coinArry[i];
        }
        return arry;
      },
      randomNum: function randomNum(min, max) {
        var distance = max - min;
        var num = Math.random() * distance + min;
        return parseInt(num, 10);
      },
      clipSliderOKClick: function clipSliderOKClick() {
        this.closeClipSlider();
        this.turnerActionEffect(this.pokerType, this._clipNum, GameData.player.uid);
        TDKHandler.getInstance().requestIncBet(this._clipNum);
      },
      closeClipSlider: function closeClipSlider() {
        this.clipSlider.node.active = false;
      },
      playOnePokerAnimation: function playOnePokerAnimation(node, space) {
        var deafultX = node.x;
        node.x += space;
        node.active = true;
        var action1 = cc.moveTo(.2, cc.p(deafultX, node.y));
        var action2 = cc.delayTime(2);
        var action3 = cc.callFunc(function() {
          node.active = false;
        }, node);
        node.runAction(cc.sequence(action1, action2, action3));
      },
      testAnimation: function testAnimation() {
        for (var key in this.pokersNode.children) {
          var node = cc.find("poker3", this.pokersNode.children[key]);
          this.seePokerClick1 && (node = cc.find("poker4", this.pokersNode.children[key]));
          this.playOnePokerAnimation(node, this._spaces);
        }
        this.seePokerClick1 = !this.seePokerClick1;
      },
      otherActionEffect: function otherActionEffect() {
        if (null === tdk_roomData.turnerAction || Object.keys(tdk_roomData.turnerAction).length <= 0) return;
        var uid = tdk_roomData.turnerAction.uid;
        var playerSex = tdk_roomData.getPlayerSexByUid(uid);
        var score = tdk_roomData.turnerAction.score;
        var action = tdk_roomData.turnerAction.action;
        this.turnerActionEffect(action, score, uid);
        tdk_roomData.turnerAction = {};
      },
      turnerActionEffect: function turnerActionEffect(action, score, uid) {
        var playerSex = tdk_roomData.getPlayerSexByUid(uid);
        soundMngr.instance.playTDKAudio(action, playerSex);
        this.showActionType(uid, action);
        2 === action ? this.escapePoker(uid) : 6 === action ? cc.log("buti") : this.clipClick(score, uid);
        this.initBtn();
      },
      showActionType: function showActionType(turnerId, action) {
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j] && GameData.joiners[j].uid === turnerId) {
          var localIdx = tdk_roomData.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("actionType");
          for (var i = 0; i < headNode.children.length; i++) {
            var index = i + 2;
            headNode.getChildByName("action" + index).active = index === action;
          }
          this.scheduleOnce(function() {
            for (var i = 0; i < headNode.children.length; i++) {
              var index = i + 2;
              headNode.getChildByName("action" + index).active = false;
            }
          }, 1);
        }
      },
      showPokerScore: function showPokerScore(isSee) {
        var self = this;
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var maxScore = [];
          for (var key in self.pokerScore) if (parseInt(key) === GameData.player.uid) {
            var score = self.revealPoker;
            maxScore.push(score);
          } else maxScore.push(self.pokerScore[key]);
          var index = 0;
          for (var i = 1; i < maxScore.length; i++) maxScore[i] && maxScore[i] > maxScore[index] && (index = i);
          return maxScore[index];
        };
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j]) {
          var userId = GameData.joiners[j].uid;
          var localIdx = tdk_roomData.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("pokerBg");
          var pokerLb = headNode.getChildByName("pokerScore");
          headNode.active = true;
          var define;
          if (this.pokerScore[userId]) if (userId === GameData.player.uid) if (isSee) {
            define = this.darkPoker;
            pokerLb.getComponent(cc.Label).string = this.pokerScore[userId] + "(" + define + ")";
          } else {
            define = this.revealPoker - GetScoreMaxUid();
            pokerLb.getComponent(cc.Label).string = this.revealPoker + "(" + define + ")";
          } else {
            define = this.pokerScore[userId] - GetScoreMaxUid();
            pokerLb.getComponent(cc.Label).string = this.pokerScore[userId] + "(" + define + ")";
          }
        }
      },
      gameResult: function gameResult() {
        this.initBtn();
        if (null === tdk_roomData.gameResult || Object.keys(tdk_roomData.gameResult).length <= 0) return;
        var resultData = tdk_roomData.gameResult;
        var winner = resultData.winner;
        var posX, posY;
        if (resultData.cards) {
          var mingCards = resultData.cards;
          this.resultMingPokerScore(mingCards);
        }
        if (0 === winner) {
          this.languo.active = true;
          var armDisp = this.languo.getComponent(dragonBones.ArmatureDisplay);
          armDisp.playAnimation("newAnimation", 1);
          this.scheduleOnce(function() {
            this.initUI();
          }, 3);
          return;
        }
        var self = this;
        this.scheduleOnce(function() {
          for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j] && GameData.joiners[j].uid === winner) {
            var localIdx = tdk_roomData.getLocalPosition(j);
            var headPos = self.playerNodes[localIdx].position;
            posX = headPos.x;
            posY = headPos.y;
            self.winShow.children[localIdx].active = true;
            var armDisp = self.winShow.children[localIdx].getComponent(dragonBones.ArmatureDisplay);
            armDisp.playAnimation("newAnimation", 1);
          }
          winner === GameData.player.uid ? soundMngr.instance.playTDKOther("win") : soundMngr.instance.playTDKOther("lost");
        }, 1);
        this.scheduleOnce(function() {
          for (var i = 0; i < self.chipsNode.children.length; i++) {
            var childNode = self.chipsNode.children[i];
            var flyPos = {};
            cc.log("posX = " + posX + ",posY = " + posY);
            flyPos.x = posX + (this.randomNum(0, 180) - 90);
            flyPos.y = posY + (this.randomNum(0, 90) - 45);
            self.resultChipsAnimation(childNode, flyPos);
          }
          self.moveAboutScore(resultData.winner);
        }, 3);
        return;
      },
      moveAboutScore: function moveAboutScore(winner) {
        var preScore = tdk_roomData.presentScore;
        var self = this;
        this.scheduleOnce(function() {
          for (var j = 0; j < GameData.joiners.length; j++) {
            var userId = GameData.joiners[j].uid;
            var localIdx = tdk_roomData.getLocalPosition(j);
            var headNode = self.scoreParent.getChildByName("score" + localIdx);
            var playerGetScore = headNode.getChildByName("resultScore");
            if (null == playerGetScore) {
              playerGetScore = cc.instantiate(self.scoreNode);
              if (winner === userId) {
                var winscore = 0;
                for (var key in preScore) key != winner && (winscore += preScore[key]);
                playerGetScore.getComponent("tdk-resultFlyScore").getScoreColor(winscore);
              } else playerGetScore.getComponent("tdk-resultFlyScore").getScoreColor(0 - preScore[userId]);
              playerGetScore.active = true;
              headNode.addChild(playerGetScore);
            }
            var move1 = cc.moveBy(.75, cc.p(0, 60));
            playerGetScore.runAction(move1);
          }
        }, .5);
        this.scheduleOnce(function() {
          for (var i = 0; i < self.scoreParent.children.length; i++) self.scoreParent.children[i].removeAllChildren();
          self.changeSumScore();
        }, 1.5);
      },
      resultChipsAnimation: function resultChipsAnimation(node, position) {
        soundMngr.instance.playTDKOther("chouma");
        var action1 = cc.moveTo(.4, position);
        var action2 = cc.callFunc(function() {
          node.active = false;
          node.destroy();
        }, node);
        node.runAction(cc.sequence(action1, action2));
      },
      changeSumScore: function changeSumScore() {
        for (var j = 0; j < GameData.joiners.length; j++) if (null != GameData.joiners[j]) {
          var userId = GameData.joiners[j].uid;
          var userInfo = tdk_roomData.getPlayerInfoByUid(userId);
          var localIdx = tdk_roomData.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("TableTDKPlayerTemplate");
          var playerHeadScp = headNode.getComponent("TDK-playerTemplate");
          var scoreData;
          var eveScore = 0;
          if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) eveScore = GameData.joiners[j].coin; else if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Card) {
            scoreData = RoomHandler.scores;
            scoreData[userId] && (eveScore = scoreData[userId]);
          }
          cc.log("eveScore = " + eveScore);
          playerHeadScp.setCoin(eveScore);
        }
      },
      resultMingPokerScore: function resultMingPokerScore(mingCards) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userId = GameData.joiners[i].uid;
          for (var key in mingCards) if (mingCards[userId]) {
            var scoreSum = TDKPokerCard.calcScore(mingCards[userId]);
            this.pokerScore[userId] || (this.pokerScore[userId] = []);
            this.pokerScore[userId] = scoreSum;
            var localIdx = tdk_roomData.getLocalPosition(i);
            this.showResultHandPokers(mingCards[userId], this.pokersNode.children[localIdx]);
          }
          var posIndex = tdk_roomData.getLocalPosition(i);
          var headNode = this.playerNodes[posIndex].getChildByName("pokerBg");
          var pokerLb = headNode.getChildByName("pokerScore");
          headNode.active = true;
          if (this.pokerScore[userId]) {
            var define = this.darkPoker;
            pokerLb.getComponent(cc.Label).string = this.pokerScore[userId] + "(" + define + ")";
          }
        }
      },
      showResultHandPokers: function showResultHandPokers(pokers, parent) {
        var showArray = [];
        var darkArray = [];
        for (var i = 0; i < pokers.length; i++) {
          parent.children[i].active = true;
          if (i < 2) {
            darkArray.push(pokers[i]);
            this.showPokerContent(parent.children[i], pokers[i]);
          } else {
            showArray.push(pokers[i]);
            this.showPokerContent(parent.children[i], pokers[i]);
          }
        }
        this.darkPoker = TDKPokerCard.calcScore(darkArray);
        this.revealPoker = TDKPokerCard.calcScore(showArray);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    tdkRoomData: "tdkRoomData"
  } ],
  "TDK-setting": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "132077LettFApO9JQFsTOu+", "TDK-setting");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var loginHandler = require("loginHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        musicSlider: cc.Slider,
        soundSlider: cc.Slider,
        musicBtn: cc.Node,
        soundBtn: cc.Node,
        musicProgressbar: cc.ProgressBar,
        soundProgressbar: cc.ProgressBar,
        _musicOpen: true,
        _soundOpen: true,
        _LanguageTypeOpen: true,
        byeRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        toggle_tianjin: cc.Toggle,
        toggle_putong: cc.Toggle,
        fangyanLb: cc.Label
      },
      onLoad: function onLoad() {
        this._LanguageTypeOpen = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_local;
        this.musicBtn.getChildByName("guan").active = false;
        this.soundBtn.getChildByName("guan").active = false;
        this.soundSlider.node.on("slide", this.adjustSound, this);
        this.musicSlider.node.on("slide", this.adjustMusic, this);
        this.musicBtn.on(cc.Node.EventType.TOUCH_START, this.musicClick, this);
        this.soundBtn.on(cc.Node.EventType.TOUCH_START, this.soundClick, this);
        this.toggle_tianjin.node.on("toggle", this.selectLanguageTypeClick, this);
        this.toggle_putong.node.on("toggle", this.selectLanguageTypeClick, this);
        var sceneName = cc.director.getScene().name;
        var sceneName = cc.director.getScene().name;
        if ("home" == sceneName) {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = true;
        } else {
          this.byeRoomBtn.active = true;
          this.quitRoomBtn.active = false;
        }
        this._soundOpen = GameData.SetLayerData.soundOpen;
        this._musicOpen = GameData.SetLayerData.musicOpen;
        this.selectLanguageTypeOpen();
        this.refreshUI();
      },
      onEnable: function onEnable() {},
      musicClick: function musicClick(event) {
        this._musicOpen = !this._musicOpen;
        this.setMusicOpen();
        GameData.SetLayerData.musicOpen = this._musicOpen;
        var v = true == this._musicOpen ? GameData.SetLayerData.musicVolume : 0;
        soundMngr.instance.bgmVolume(v);
        GameData.saveSetLayerData();
      },
      soundClick: function soundClick(event) {
        this._soundOpen = !this._soundOpen;
        this.setSoundOpen();
        GameData.SetLayerData.soundOpen = this._soundOpen;
        GameData.saveSetLayerData();
      },
      selectLanguageTypeClick: function selectLanguageTypeClick(event) {
        var languageType = GameData.language_local;
        this.toggle_tianjin.isChecked && (languageType = GameData.language_local);
        this.toggle_putong.isChecked && (languageType = GameData.language_putong);
        cc.sys.localStorage.setItem("languageType" + GameData.player.uid, languageType);
      },
      selectLanguageTypeOpen: function selectLanguageTypeOpen() {
        if (this._LanguageTypeOpen == GameData.language_local) {
          this.toggle_tianjin.isChecked = true;
          this.toggle_putong.isChecked = false;
        } else {
          this.toggle_tianjin.isChecked = false;
          this.toggle_putong.isChecked = true;
        }
      },
      setMusicOpen: function setMusicOpen() {
        this.musicBtn.getChildByName("kai").active = this._musicOpen;
        this.musicBtn.getChildByName("guan").active = !this._musicOpen;
        this.musicBtn.getChildByName("base").active = this._musicOpen;
      },
      setSoundOpen: function setSoundOpen() {
        this.soundBtn.getChildByName("kai").active = this._soundOpen;
        this.soundBtn.getChildByName("guan").active = !this._soundOpen;
        this.soundBtn.getChildByName("base").active = this._soundOpen;
      },
      adjustSound: function adjustSound(event) {
        var slider = event.detail;
        GameData.SetLayerData.soundVolume = slider.progress;
        GameData.SetLayerData.soundOpen = true;
        this._soundOpen = true;
        this.soundProgressbar.progress = slider.progress;
        if (0 == slider.progress) {
          this._soundOpen = false;
          GameData.SetLayerData.soundOpen = false;
        }
        this.setSoundOpen();
        GameData.saveSetLayerData();
      },
      adjustMusic: function adjustMusic(event) {
        var slider = event.detail;
        GameData.SetLayerData.musicVolume = slider.progress;
        soundMngr.instance.bgmVolume(GameData.musicVolume);
        this.musicProgressbar.progress = slider.progress;
        GameData.SetLayerData.musicOpen = true;
        this._musicOpen = true;
        if (0 == slider.progress) {
          this._musicOpen = false;
          GameData.SetLayerData.musicOpen = false;
        }
        var v = slider.progress;
        soundMngr.instance.bgmVolume(v);
        this.setMusicOpen();
        GameData.saveSetLayerData();
      },
      onClose: function onClose() {
        closeView(this.node.name);
      },
      requestDissolve: function requestDissolve() {
        if (!GameData.room.opts) return;
        if (GameData.player.uid != GameData.joiners[0].uid && GameData.room.status === TDKPokerCard.STATUS.WAITING) {
          createMoveMessage("牌局开始后才允许解散房间");
          closeView(this.node.name);
          return;
        }
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        closeView(this.node.name);
        if (GameData.gameType == gameDefine.GameType.Game_TDK) {
          this.node.parent.getComponent("TDK-roomMain").showdissolveLayer(1, 1);
          this.node.parent.getComponent("TDK-roomDissolve").showPlayers();
          this.node.parent.getComponent("TDK-roomDissolve").alreadyAgree();
          return;
        }
      },
      logout: function logout(evt) {
        loginHandler.logout();
      },
      refreshUI: function refreshUI() {
        this.musicSlider.progress = GameData.SetLayerData.musicVolume;
        this.soundSlider.progress = GameData.SetLayerData.soundVolume;
        this.soundBtn.getChildByName("kai").active = GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("guan").active = !GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("base").active = GameData.SetLayerData.soundOpen;
        this.musicBtn.getChildByName("kai").active = GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("guan").active = !GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("base").active = GameData.SetLayerData.musicOpen;
        this.musicProgressbar.progress = GameData.SetLayerData.musicVolume;
        this.soundProgressbar.progress = GameData.SetLayerData.soundVolume;
        this.fangyanLb.getComponent(cc.Label).string = "东北话";
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    loginHandler: "loginHandler",
    roomHandler: "roomHandler"
  } ],
  "TJDDZ-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a7dfjLUVlOYbeLgMIgh0dA", "TJDDZ-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round6: cc.Toggle,
        round10: cc.Toggle,
        round20: cc.Toggle,
        fanshu2: cc.Toggle,
        fanshu3: cc.Toggle,
        fanshu4: cc.Toggle,
        wuxianfan: cc.Toggle,
        payNode: cc.Node,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        timesNode: cc.Node,
        times1: cc.Toggle,
        times2: cc.Toggle,
        times5: cc.Toggle,
        scoreNode: cc.Node,
        score1: cc.Toggle,
        score2: cc.Toggle,
        score3: cc.Toggle,
        limitLabel: cc.Label,
        jiaofen: {
          default: null,
          type: cc.Toggle
        },
        roundJiaofen: {
          default: null,
          type: cc.Toggle
        },
        tiChuai: {
          default: null,
          type: cc.Toggle
        },
        daiNiEr: {
          default: null,
          type: cc.Toggle
        },
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.refreshUI();
        this.modeType = 1;
        this.spendData = void 0;
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      createRoom: function createRoom() {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Poker_TianjinDDZ);
        var createData = {
          gameType: gameDefine.GameType.Game_Poker_TianjinDDZ,
          roomType: 0,
          roundType: GameDataTJDDZ.createRoomOpts.roundType,
          playType: GameDataTJDDZ.createRoomOpts.playType,
          roundMax: GameDataTJDDZ.createRoomOpts.roundMax,
          roundRule: GameDataTJDDZ.createRoomOpts.roundMax,
          fanshu: GameDataTJDDZ.createRoomOpts.fanshu,
          joinermax: 3,
          clubId: 0,
          costType: GameDataTJDDZ.createRoomOpts.costType,
          jiaofenType: GameDataTJDDZ.createRoomOpts.jiaofenType,
          mud: GameDataTJDDZ.createRoomOpts.mud,
          kicking: GameDataTJDDZ.createRoomOpts.kicking,
          score: GameDataTJDDZ.createRoomOpts.score,
          times: GameDataTJDDZ.createRoomOpts.times,
          scorelv: GameDataTJDDZ.createRoomOpts.score,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_TianjinDDZ) return createData;
        createData.currencyType = modeTypeData.Game_Poker_TianjinDDZ.CurrencyType;
        createData.settleType = modeTypeData.Game_Poker_TianjinDDZ.SettleType;
        return createData;
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..ddz..TJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_TianjinDDZ) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Poker_TianjinDDZ.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Poker_TianjinDDZ];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Poker_TianjinDDZ];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        var cost;
        var number = 3;
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            0 === key ? cost = this.spendData[6].cost : 1 === key ? cost = this.spendData[10].cost : 2 === key && (cost = this.spendData[20].cost);
            final = cost[number].final;
            this.pay2.isChecked;
            this.spendUI[key].string = "（" + str1 + "*" + final + str2 + "）";
          } else {
            cost = this.spendData[key].cost;
            final = cost[number].final;
            str2 = "/局";
            this.spendUI[key].string = "";
          }
          this.drowArray[key].active = 0 == final;
        }
      },
      selectRoomType: function selectRoomType(evt, data) {},
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.round6.isChecked) {
          GameDataTJDDZ.createRoomOpts.roundMax = 6;
          GameDataTJDDZ.createRoomOpts.roundType = gameDefine.roundType.round;
        } else if (this.round10.isChecked) {
          GameDataTJDDZ.createRoomOpts.roundMax = 10;
          GameDataTJDDZ.createRoomOpts.roundType = gameDefine.roundType.round;
        } else if (this.round20.isChecked) {
          GameDataTJDDZ.createRoomOpts.roundMax = 20;
          GameDataTJDDZ.createRoomOpts.roundType = gameDefine.roundType.round;
        }
        this.fanshu2.isChecked ? GameDataTJDDZ.createRoomOpts.fanshu = 2 : this.fanshu3.isChecked ? GameDataTJDDZ.createRoomOpts.fanshu = 3 : this.fanshu4.isChecked ? GameDataTJDDZ.createRoomOpts.fanshu = 4 : this.wuxianfan.isChecked && (GameDataTJDDZ.createRoomOpts.fanshu = 15);
        this.pay1.isChecked ? GameDataTJDDZ.createRoomOpts.costType = 1 : this.pay2.isChecked ? GameDataTJDDZ.createRoomOpts.costType = 2 : this.pay3.isChecked && (GameDataTJDDZ.createRoomOpts.costType = 3);
        this.jiaofen.isChecked ? GameDataTJDDZ.createRoomOpts.jiaofenType = 1 : this.roundJiaofen.isChecked && (GameDataTJDDZ.createRoomOpts.jiaofenType = 2);
        this.tiChuai.isChecked ? GameDataTJDDZ.createRoomOpts.kicking = true : GameDataTJDDZ.createRoomOpts.kicking = false;
        this.daiNiEr.isChecked ? GameDataTJDDZ.createRoomOpts.mud = true : GameDataTJDDZ.createRoomOpts.mud = false;
        this.score1.isChecked ? GameDataTJDDZ.createRoomOpts.score = 0 : this.score2.isChecked ? GameDataTJDDZ.createRoomOpts.score = 1 : this.score3.isChecked && (GameDataTJDDZ.createRoomOpts.score = 2);
        GameDataTJDDZ.saveCreateRoomOpts();
      },
      selectRoundRuleClick: function selectRoundRuleClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 6:
          this.round6.isChecked = true;
          this.round10.isChecked = false;
          this.round20.isChecked = false;
          break;

         case 10:
          this.round10.isChecked = true;
          this.round6.isChecked = false;
          this.round20.isChecked = false;
          break;

         case 20:
          this.round20.isChecked = true;
          this.round6.isChecked = false;
          this.round10.isChecked = false;
        }
        this.round6.isChecked ? GameDataTJDDZ.createRoomOpts.roundMax = 6 : this.round10.isChecked ? GameDataTJDDZ.createRoomOpts.roundMax = 10 : this.round20.isChecked && (GameDataTJDDZ.createRoomOpts.roundMax = 20);
        this.showSpendUI();
        this.refreshTimesScore();
      },
      selectTimesClick: function selectTimesClick(evt, data) {
        GameDataTJDDZ.createRoomOpts.times = data;
        this.showSpendUI();
        this.refreshTimesScore();
      },
      onTiChuaiChecked: function onTiChuaiChecked() {
        cc.log("tiChuai isChecked: ", this.tiChuai.isChecked);
      },
      onDaiNiErChecked: function onDaiNiErChecked() {
        cc.log("daiNiEr isChecked: ", this.daiNiEr.isChecked);
      },
      refreshUI: function refreshUI() {
        this.round6.isChecked = 6 == GameDataTJDDZ.createRoomOpts.roundMax;
        this.round10.isChecked = 10 == GameDataTJDDZ.createRoomOpts.roundMax;
        this.round20.isChecked = 20 == GameDataTJDDZ.createRoomOpts.roundMax;
        this.fanshu2.isChecked = 2 == GameDataTJDDZ.createRoomOpts.fanshu;
        this.fanshu3.isChecked = 3 == GameDataTJDDZ.createRoomOpts.fanshu;
        this.fanshu4.isChecked = 4 == GameDataTJDDZ.createRoomOpts.fanshu;
        this.wuxianfan.isChecked = 15 == GameDataTJDDZ.createRoomOpts.fanshu;
        this.pay1.isChecked = 1 == GameDataTJDDZ.createRoomOpts.costType;
        this.pay2.isChecked = 2 == GameDataTJDDZ.createRoomOpts.costType;
        this.pay3.isChecked = 3 == GameDataTJDDZ.createRoomOpts.costType;
        this.jiaofen.isChecked = 1 == GameDataTJDDZ.createRoomOpts.jiaofenType;
        this.roundJiaofen.isChecked = 2 == GameDataTJDDZ.createRoomOpts.jiaofenType;
        this.tiChuai.isChecked = true == GameDataTJDDZ.createRoomOpts.kicking;
        this.daiNiEr.isChecked = true == GameDataTJDDZ.createRoomOpts.mud;
        this.score1.isChecked = 0 == GameDataTJDDZ.createRoomOpts.score;
        this.score2.isChecked = 1 == GameDataTJDDZ.createRoomOpts.score;
        this.score3.isChecked = 2 == GameDataTJDDZ.createRoomOpts.score;
        this.showSpendUI();
        this.refreshTimesScore();
      },
      refreshTimesScore: function refreshTimesScore() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.scoreNode.active = false;
          this.timesNode.active = false;
          this.payNode.active = true;
          return;
        }
        this.scoreNode.active = true;
        this.timesNode.active = false;
        this.payNode.active = false;
        var index = 0;
        switch (GameDataTJDDZ.createRoomOpts.roundMax) {
         case 6:
          index = 0;
          break;

         case 10:
          index = 1;
          break;

         case 20:
          index = 2;
        }
        void 0 == GameDataTJDDZ.createRoomOpts.times && (GameDataTJDDZ.createRoomOpts.times = 1);
        var number = 3;
        var cost = this.spendData[index].cost;
        var costFinal = cost[number];
        var enter = this.spendData[index].enter;
        var enterFinal = enter[number];
        this.score1.isChecked ? GameDataTJDDZ.createRoomOpts.score = 0 : this.score2.isChecked ? GameDataTJDDZ.createRoomOpts.score = 1 : this.score3.isChecked && (GameDataTJDDZ.createRoomOpts.score = 2);
        var times1Label = cc.find("label", this.score1.node);
        var times2Label = cc.find("label", this.score2.node);
        var times5Label = cc.find("label", this.score3.node);
        times1Label.getComponent(cc.Label).string = "初级场：台费" + costFinal[0] + " 进入条件≥" + enterFinal[0] + " 倍数 100";
        times2Label.getComponent(cc.Label).string = "中级场：台费" + costFinal[1] + " 进入条件≥" + enterFinal[1] + " 倍数 200";
        times5Label.getComponent(cc.Label).string = "高级场：台费" + costFinal[2] + " 进入条件≥" + enterFinal[2] + " 倍数 500";
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "TJDDZ-poker": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0105b4B64dIFapF90c9aNrZ", "TJDDZ-poker");
    "use strict";
    var cardTypes = {
      straights: {
        level: 1,
        colorFormat: false,
        numFormat: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],
        allowedLength: [ 5, 6, 7, 8, 9, 10, 11, 12 ],
        notAllowedCard: [ 15 ]
      }
    };
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerParent: {
          default: null,
          type: cc.Node
        },
        cardMask: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        this.cards = this.pokerParent.children;
        for (var key in this.pokerParent.children) this.cardInitY = this.cards[key].y;
        this.touchedCards = [];
        this.selectedCards = [];
        this.addTouchEvent();
      },
      start: function start() {},
      onDestroy: function onDestroy() {},
      addTouchEvent: function addTouchEvent() {
        this.pokerParent.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("pokerParent TOUCH_START");
          var card = event.target;
          this.touchStartLocation = this.cards[0].convertTouchToNodeSpace(event);
          var index = 0;
          for (var i = 0; i < this.cards.length; i++) {
            var c = this.cards[i];
            if (c.name == card.name) {
              index = i;
              break;
            }
          }
          if ("handLayout" == card.name) {
            this.firstTouchedCard = void 0;
            this.clearTouchedCards();
            return;
          }
          var touchedCard = {
            index: index,
            card: card
          };
          cc.log("card.active:" + card.active, card.name);
          this.firstTouchedCard = touchedCard;
          this.pushTouchedCards(touchedCard.index, touchedCard.card);
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("pokerParent TOUCH_MOVE");
          this.clearTouchedCards();
          if (void 0 == this.firstTouchedCard) return;
          this.pushTouchedCards(this.firstTouchedCard.index, this.firstTouchedCard.card);
          var nodeLocation = this.cards[0].convertTouchToNodeSpace(event);
          var x = nodeLocation.x;
          var y = nodeLocation.y;
          var startTouchLocation = this.touchStartLocation;
          for (var i = 0; i < this.cards.length; i++) {
            var card = this.cards[i];
            var cardX = card.x + 20;
            var min, max;
            if (startTouchLocation.x < nodeLocation.x) {
              min = startTouchLocation.x;
              max = nodeLocation.x;
            } else {
              min = nodeLocation.x;
              max = startTouchLocation.x;
            }
            min <= cardX && cardX <= max && card.active && this.pushTouchedCards(i, card);
          }
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("pokerParent TOUCH_END");
          this.doSelectCard();
        }, this);
        this.pokerParent.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          console.log("pokerParent TOUCH_CANCEL");
          this.doSelectCard();
        }, this);
        for (var i = 0; i < this.cards.length; i++) {
          var cards = this.cards;
          (function(i) {
            var card = cards[i];
            card.on(cc.Node.EventType.TOUCH_START, function(event) {
              console.log("card TOUCH_START");
            }, card);
            card.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
              console.log("card TOUCH_MOVE");
            }, card);
            card.on(cc.Node.EventType.TOUCH_END, function(event) {
              console.log("card TOUCH_END");
              card.active && soundMngr.instance.playOtherAudioPoker("click", null);
            }, card);
            card.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
              console.log("card TOUCH_CANCEL");
              card.active && soundMngr.instance.playOtherAudioPoker("click", null);
            }, card);
          })(i);
        }
      },
      pushTouchedCards: function pushTouchedCards(index, card) {
        var cardObj = {
          index: index,
          name: card.name,
          isSelected: card.y != this.cardInitY
        };
        var existCard = this.touchedCards.find(function(obj) {
          return obj.name == card.name ? obj : null;
        });
        if (!existCard) {
          this.touchedCards.push(cardObj);
          this.addCardMask(card);
        }
      },
      clearTouchedCards: function clearTouchedCards() {
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardIndex = this.touchedCards[i].index;
          var card = this.cards[cardIndex];
          card.removeChildByTag(100);
        }
        this.touchedCards = [];
      },
      doSelectCard: function doSelectCard() {
        this.selectedCards = [];
        this.pokerTypeArry = [];
        this.shunziArry = [];
        var tempPokerArr = [];
        var flag = true;
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardObj = this.touchedCards[i];
          var card = this.cards[cardObj.index];
          var cardId = card.getComponent("Card").id;
          this.pokerTypeArry.push(cardId);
          tempPokerArr.push(cardId % 100);
        }
        for (var j = 0; j < this.pokerTypeArry.length; j++) for (var k = 0; k < this.pokerTypeArry.length; k++) k != j && this.pokerTypeArry[k] % 100 == this.pokerTypeArry[j] % 100 && this.pokerTypeArry.splice(k, 1);
        console.log("1111111111111111```" + this.pokerTypeArry);
        var bool = this.getCardsType(this.pokerTypeArry);
        console.log("1111111111111111```" + bool);
        if (bool) {
          var pokerArr = [];
          for (var j = 0; j < this.pokerTypeArry.length; j++) {
            pokerArr.push(this.pokerTypeArry[j] % 100);
            pokerArr.push(this.pokerTypeArry[j] % 100);
          }
          pokerArr.sort(function(a, b) {
            return a - b;
          });
          tempPokerArr.sort(function(a, b) {
            return a - b;
          });
          this.contain(pokerArr, tempPokerArr) && (flag = false);
        }
        if (flag && "straights" == bool) for (var j = 0; j < this.pokerTypeArry.length; j++) {
          var exist = true;
          for (var k = 0; k < this.shunziArry.length; k++) this.pokerTypeArry[j] % 100 == this.shunziArry[k] % 100 && (exist = false);
          exist && this.shunziArry.push(this.pokerTypeArry[j]);
        }
        for (var i = 0; i < this.touchedCards.length; i++) {
          var cardObj = this.touchedCards[i];
          var card = this.cards[cardObj.index];
          var cardId = card.getComponent("Card").id;
          cc.log("card:" + card.name);
          for (var j = 0; j < this.shunziArry.length; j++) cardId == this.shunziArry[j] && (cardObj.isSelected ? card.y = card.y - 30 : card.y = card.y + 30);
          0 == this.shunziArry.length && (cardObj.isSelected ? card.y = card.y - 30 : card.y = card.y + 30);
        }
        this.clearTouchedCards();
        this.showSelectedCards();
      },
      addCardMask: function addCardMask(card) {
        var cardMask = cc.instantiate(this.cardMask);
        cardMask.setTag(100);
        cardMask.setPosition(cc.p(0, 0));
        card.addChild(cardMask);
      },
      showSelectedCards: function showSelectedCards() {
        this.selectedCards = [];
        for (var i = 0; i < this.cards.length; i++) {
          var card = this.cards[i];
          var isSelected = card.y != this.cardInitY;
          isSelected && this.selectedCards.push(card.name);
        }
        sendEvent("tjddz-disPokerArry", this.selectedCards);
      },
      contain: function contain(arr, obj) {
        if (arr.toString() == obj.toString()) return true;
        return false;
      },
      getCardsType: function getCardsType(cards) {
        for (var key in cardTypes) {
          var type = cardTypes[key];
          var lengthmatch = false;
          for (var i = 0; i < type.allowedLength.length; i++) type.allowedLength[i] == cards.length && (lengthmatch = true);
          if (!lengthmatch) continue;
          var numbers = this.createSortedCardNumbers(cards);
          cc.log("numbers = " + numbers);
          var fatch = true;
          if (type.notAllowedCard) for (var i = 0; i < numbers.length; i++) for (var j = 0; j < type.notAllowedCard.length; j++) numbers[i] == type.notAllowedCard[j] && (fatch = false);
          var count1 = 0, count2 = 0;
          if ("aircraft" == key.substring(0, key.length - 1) || "aircraft" == key) for (var i = 0; i < cards.length; i++) {
            115 == cards[i] || 215 == cards[i] || 315 == cards[i] || 415 == cards[i] ? count1++ : 114 != cards[i] && 214 != cards[i] && 314 != cards[i] && 414 != cards[i] || count2++;
            3 == count1 && 3 == count2 && (fatch = false);
          }
          if (!fatch) continue;
          var formatMacth = true;
          var format = type.numFormat;
          var cutNum = null;
          var startNum = [];
          for (var j = 0; j < numbers.length; j++) for (var k = 0; k < numbers.length; k++) k != j && numbers[k] == numbers[j] && numbers.splice(k, 1);
          numbers.sort(function(a, b) {
            return a - b;
          });
          cc.log("numbers = " + numbers);
          for (var i = 0; i < numbers.length; i++) {
            if (0 == format[i]) continue;
            if (format[i] < 0) if (startNum[-format[i]]) {
              if (startNum[-format[i]] != numbers[i]) {
                formatMacth = false;
                break;
              }
            } else startNum[-format[i]] = numbers[i]; else if (null == cutNum) cutNum = numbers[i] - format[i]; else if (cutNum != numbers[i] - format[i]) {
              formatMacth = false;
              break;
            }
          }
          if (formatMacth && numbers.length >= 5) return key;
        }
        return false;
      },
      createSortedCardNumbers: function createSortedCardNumbers(cards) {
        var numbers = [];
        for (var i = 0; i < cards.length; i++) numbers[i] = cards[i] % 100;
        return numbers;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  "TJDDZ-roomDissolve": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "572f5CYJVxJAaiA3WR6bQZh", "TJDDZ-roomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        null != GameData.game.onRoomDissolve && GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.openDisAgree = false;
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        var flag = false;
        GameData.room.opts && (flag = true);
        if (!flag) return;
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 200 * (i + 1);
        }
      },
      showPlayers: function showPlayers() {
        var flag = false;
        GameData.room.opts && (flag = true);
        if (!flag) return;
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            var isOnLine = RoomHandler.isPlayerOnline(uid);
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = !isOnLine;
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("TJDDZ-roomMain").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("TJDDZ-roomMain").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("TJDDZ-roomMain").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("TJDDZ-roomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "TJDDZ-roomMain": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e89a2jm3ylPkKLHp91I6LcT", "TJDDZ-roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("tjddz-onGameStart", this, this.showTableLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("AnimationDelayTime", this, this.showResultLayer);
        registEvent("onServerNotice", this, handlerServerNotice);
        scheduleLamp(this);
        GameDataTJDDZ.game.gameStart ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        1 == GameDataTJDDZ.openScore && this.showResultDirectly();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(1e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnMovePos = this.convertToNodeSpace(movePos);
          var radius = {
            x: this.getContentSize().width / 2,
            y: this.getContentSize().height / 2
          };
          var distance = cc.pDistance(talkBtnMovePos, radius);
          if (distance > this.getContentSize().width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        GameDataTJDDZ.game.initcards ? this.showTableUI(true) : this.showTableUI(false);
      },
      onDestroy: function onDestroy() {
        unregistEvent("tjddz-onGameStart", this, this.showTableLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("AnimationDelayTime", this, this.showResultLayer);
        unregistEvent("onServerNotice", this, handlerServerNotice);
        GameData.initGameData();
        GameDataTJDDZ.initRoomData();
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("ddz/sound/ddz_bg");
      },
      showTableLayer: function showTableLayer() {
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("ddz/sound/ddz_bg");
      },
      showResultLayer: function showResultLayer(data) {
        var AnimationDelayTime = data.detail;
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, AnimationDelayTime);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        WriteLog("-----------------showResultDirectly------------------------");
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        if (true == GameData.contact && GameData.joinContact.uid == GameData.player.uid) GameData.contact = false; else {
          GameData.contact = false;
          GameData.realNum++;
        }
        this.node.getComponent("TJDDZ-roomResult").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("DDZ-SettingsPanel", gameDefine.GameType.Game_Poker_TianjinDDZ) : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        GameData.realNum = 0;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      },
      AnimationDelayTime: function AnimationDelayTime(data) {
        this._AnimationDelayTime = data.detail;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  "TJDDZ-roomResult": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1e5fZc1p9NVKpspMquxUzS", "TJDDZ-roomResult");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        resultIcon: cc.Sprite,
        isMark: 0,
        roomid: cc.Label,
        createTime: cc.Label,
        roundNum: cc.Label,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        if (GameData.room.opts.joinermax) {
          this.hideTiChuai();
          for (var i = 0; i < GameData.room.opts.joinermax; i++) {
            this.showPlayer(i);
            this.showScore(i);
            this.showDetail(i);
            this.showWinIcon(i);
            this.showPoker(i);
            this.showPlayerTiChuai(i);
          }
          this.showResultIcon();
          this.showRoomDetail();
        }
      },
      initResultLayer: function initResultLayer() {
        if (!GameDataTJDDZ.isEmptyObject(GameDataTJDDZ.game.onRoomReadyInfo)) for (var key in GameDataTJDDZ.game.onRoomReadyInfo) if (true == GameDataTJDDZ.game.onRoomReadyInfo[key] && key == GameData.player.uid) {
          this.resultLayer.active = false;
          break;
        }
      },
      showName: function showName(label, name) {
        isChinese(name) ? label.string = getShortStr(name, 4) : isChinese(name) || (label.string = getShortStr(name, 8));
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var idNode = cc.find("panel/player_" + (index + 1) + "/headNode/playerID", this.resultLayer);
        var nameNode = cc.find("panel/player_" + (index + 1) + "/headNode/name", this.resultLayer);
        var headpicNode = cc.find("panel/player_" + (index + 1) + "/headNode/head", this.resultLayer);
        var identityNode = cc.find("panel/player_" + (index + 1) + "/headNode/identity_icon", this.resultLayer);
        this.showName(nameNode.getComponent(cc.Label), player.name);
        idNode.getComponent(cc.Label).string = "ID:" + player.uid;
        identityNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/common/dizhu_icon.png";
        iconUrl = player.uid == GameDataTJDDZ.game.dizhuUid ? "resources/ddz/UI/common/icon/dizhu_icon.png" : "resources/ddz/UI/common/icon/nongmin_icon.png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        identityNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            cc.log("result:" + player.headimgurl);
            headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var difen = cc.find("panel/player_" + (index + 1) + "/difen/label", this.resultLayer);
        var beishu = cc.find("panel/player_" + (index + 1) + "/beishu/label", this.resultLayer);
        difen.getComponent(cc.Label).string = GameDataTJDDZ.resultData.remainFen;
        beishu.getComponent(cc.Label).string = GameDataTJDDZ.resultData.boomNum;
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("panel/player_" + (index + 1) + "/field_num1", this.resultLayer);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[uid] && (score = coinData.coin[uid]);
        } else GameDataTJDDZ.resultData.score && (score = GameDataTJDDZ.resultData.score[uid]);
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
          scoreNode.getComponent("cc.Label").string = "+" + score;
        } else if (0 == score) {
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
          scoreNode.getComponent("cc.Label").string = "+" + score;
        } else {
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
          scoreNode.getComponent("cc.Label").string = score;
        }
      },
      hideTiChuai: function hideTiChuai() {
        for (var index = 0; index < GameData.room.opts.joinermax; index++) {
          var player = cc.find("panel/player_" + (index + 1), this.resultLayer);
          var tiIcon = cc.find("tiIcon", player);
          var chuaiIcon = cc.find("chuaiIcon", player);
          tiIcon.active = false;
          chuaiIcon.active = false;
        }
      },
      showPlayerTiChuai: function showPlayerTiChuai(index) {
        var uid = GameData.joiners[index].uid;
        if (GameDataTJDDZ.isEmptyObject(GameDataTJDDZ.kicking)) return;
        for (var key in GameDataTJDDZ.kicking.kicking) if (key == uid && uid != GameDataTJDDZ.kicking.dizhu) {
          if (1 == GameDataTJDDZ.kicking.kicking[key]) {
            var tiIcon = cc.find("panel/player_" + (index + 1) + "/tiIcon", this.resultLayer);
            tiIcon.active = true;
          }
        } else if (key == uid && uid == GameDataTJDDZ.kicking.dizhu && 1 == GameDataTJDDZ.kicking.kicking[key]) {
          var chuaiIcon = cc.find("panel/player_" + (index + 1) + "/chuaiIcon", this.resultLayer);
          chuaiIcon.active = true;
        }
      },
      showWinIcon: function showWinIcon(index) {},
      showPoker: function showPoker(index) {
        var pokerNode = cc.find("panel/player_" + (index + 1) + "/cardsNoe", this.resultLayer);
        for (var key in pokerNode.children) pokerNode.children[key].active = false;
        var uid = GameData.joiners[index].uid;
        var cards = GameDataTJDDZ.getHandCards(uid);
        if (void 0 == cards) return;
        for (var i = 0; i < cards.length; i++) {
          var node = cc.find("card_" + i, pokerNode);
          node.active = true;
          node.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/ddz/UI/pokers/poker_" + cards[i] + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      showResultIcon: function showResultIcon() {
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[GameData.player.uid] && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameDataTJDDZ.resultData.score[GameData.player.uid];
        var iconUrl = "";
        void 0 == myScore ? myScore = 0 : null;
        myScore > 0 ? iconUrl = "resources/ddz/UI/result/woyingle.png" : myScore < 0 && (iconUrl = "resources/ddz/UI/result/shibaile.png");
        this.resultIcon.getComponent(cc.Sprite).spriteFrame = null;
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        this.resultIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showRoomDetail: function showRoomDetail() {
        this.roomid.string = "房间号:" + GameData.room.id;
        this.createTime.string = getDate(GameData.room.createtime);
        this.roundNum.string = "第 " + GameData.room.roundNum + "/" + GameData.room.opts.roundMax + " 局";
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("TJDDZ-roomMain").showSummaryLayer();
        } else {
          TJDDZHandler.getInstance().requestReady(function(res) {});
          this.resultLayer.active = false;
          GameDataTJDDZ.game.dizhuUid = 0;
          sendEvent("tjddz-onGameStart");
          sendEvent("initTableNode");
        }
        GameDataTJDDZ.clearObject(GameDataTJDDZ.kicking);
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "TJDDZ-roomSummary": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33cedLpBFlMU4I2H9HLW5pt", "TJDDZ-roomSummary");
    "use strict";
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        },
        lostNode: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        this.showTime();
        this.hideLostNode();
        for (var i = 0; i < GameData.joiners.length; i++) this.showPlayer(GameData.joiners[i], i + 1);
      },
      hideLostNode: function hideLostNode() {
        for (var key in this.lostNode.children) this.lostNode.children[key].active = false;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        cc.log("..showPlayer." + player);
        if (!player) return;
        var joinermax = GameData.room.opts.joinermax;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreTxtNode = cc.find("player_" + idx + "/field_text1", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var maxScore = cc.find("player_" + idx + "/maxScore", this.panel);
        var maxBobm = cc.find("player_" + idx + "/maxBobm", this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        var owner = cc.find("player_" + idx + "/owner", this.panel);
        owner.active = GameData.room.creator == player.uid;
        isChinese(player.name) ? nameNode.getComponent("cc.Label").string = getShortStr(player.name, 5) : nameNode.getComponent("cc.Label").string = getShortStr(player.name, 9);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        if (GameDataTJDDZ.roomsummaryData && 0 != Object.keys(GameDataTJDDZ.roomsummaryData).length) {
          0 != Object.keys(GameDataTJDDZ.roomsummaryData.maxFen).length && (maxScore.getComponent("cc.Label").string = "单局最高分:" + GameDataTJDDZ.roomsummaryData.maxFen[player.uid]);
          0 != Object.keys(GameDataTJDDZ.roomsummaryData.maxBoom).length && (maxBobm.getComponent("cc.Label").string = "打出炸弹数:" + GameDataTJDDZ.roomsummaryData.maxBoom[player.uid]);
        }
        null != player.headimgurl && "" != player.headimgurl && player.headimgurl.length > 0 && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            cc.log("player.headimgurl:" + player.headimgurl);
            headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
          }
        });
        var winNode = cc.find("player_" + idx + "/win", this.panel);
        winNode.active = false;
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          scoreTxtNode.active = false;
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[player.uid] && (score = coinData.coins[player.uid]);
        } else if (null != GameDataTJDDZ.roomsummaryData.score) {
          score = GameDataTJDDZ.roomsummaryData.score[player.uid];
          var GetScoreMaxUid = function GetScoreMaxUid() {
            var tempUid;
            tempUid = GameData.joiners[0].uid;
            for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && GameDataTJDDZ.roomsummaryData.score[GameData.joiners[i].uid] > GameDataTJDDZ.roomsummaryData.score[tempUid] && (tempUid = GameData.joiners[i].uid);
            return tempUid;
          };
          GameDataTJDDZ.roomsummaryData.score[GetScoreMaxUid()] == GameDataTJDDZ.roomsummaryData.score[player.uid];
        }
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
        cc.log("...score:" + score);
        if (GameData.room.creator == player.uid) {
          var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
          ownerNode.active = true;
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "TJDDZ-roomWait": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d74a41zc2xJ9I+QMq2JBHv4", "TJDDZ-roomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        readyBtn: cc.Node,
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        WriteLog("TJDDZ-roomWait onLoad");
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers(this);
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("tjddz-onReady", this, this.onReady);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("tjddz-onDiZhu", this, this.showPlayers);
        registEvent("initTableNode", this, this.showPlayers);
        registEvent("onPrepareInfo", this, this.onPrepareInfo);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("tjddz-onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("tjddz-onGameStart", this, this.onGameStartHandler);
        registEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("HideReadyNode", this, this.HideReadyNode);
        registEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        registEvent("tjddz-showKicking", this, this.showKicking);
        registEvent("dynChat", this, this.dynChatHandler);
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
        TJDDZHandler.getInstance().requestReady();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameDataTJDDZ.game.gameStart;
        GameData.game.onRoomReadyInfo.data;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("tjddz-onReady", this, this.onReady);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("tjddz-onDiZhu", this, this.showPlayers);
        unregistEvent("initTableNode", this, this.showPlayers);
        unregistEvent("onPrepareInfo", this, this.onPrepareInfo);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("tjddz-onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("tjddz-onGameStart", this, this.onGameStartHandler);
        unregistEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        unregistEvent("tjddz-onGameScore", this, this.onGameScoreHandler);
        unregistEvent("yunwaUploaded", this, this.onYunwaUploaded);
        unregistEvent("HideReadyNode", this, this.HideReadyNode);
        unregistEvent("AnimationDelayTime", this, this.onGameScoreHandler);
        unregistEvent("tjddz-showKicking", this, this.showKicking);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onReady: function onReady() {
        GameDataTJDDZ.clearObject(GameDataTJDDZ.kicking);
        sendEvent("initTableNode");
        TJDDZHandler.getInstance().requestReady();
      },
      onGameScoreHandler: function onGameScoreHandler(data) {
        var AnimationDelayTime = data.detail;
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, AnimationDelayTime);
      },
      HideReadyNode: function HideReadyNode() {
        this.readyNode.active = false;
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("DDZ-playerTemplate");
          var uid = playerTemplate.uid;
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[uid] && playerTemplate.setGold(GameData.players[uid].coin); else {
            var score = void 0 == GameDataTJDDZ.allScores[uid] ? 0 : GameDataTJDDZ.allScores[uid];
            playerTemplate.setCoin(score, 1);
          }
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioPokerChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                cc.log("animationName:" + animationName);
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("DDZ-playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      hideAllReadyStatus: function hideAllReadyStatus() {
        cc.find("ready_hand_left", this.readyNode).active = false;
        cc.find("readying_left", this.readyNode).active = false;
        cc.find("ready_hand_right", this.readyNode).active = false;
        cc.find("readying_right", this.readyNode).active = false;
        cc.find("ready_hand_down", this.readyNode).active = false;
        cc.find("readying_down", this.readyNode).active = false;
      },
      onPrepareInfo: function onPrepareInfo(data) {
        this.hideAllReadyStatus();
        this.readyNode.active = true;
        this.hideTiChuai();
        for (var key in GameDataTJDDZ.game.onRoomReadyInfo) if (true == GameDataTJDDZ.game.onRoomReadyInfo[key]) {
          var tablePos = GameDataTJDDZ.getPosByUid(key);
          this.showReadyIcon(tablePos, true, false);
        }
        this.onRoomReadyInfoHandler(data);
      },
      showPlayers: function showPlayers() {
        WriteLog("showPlayers");
        this.headers = [];
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("left", this.play_left_player);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.x = isCreator ? 107 : 6;
        this.connectRecurrence();
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {},
      showPlayer: function showPlayer(direction, parent) {
        WriteLog("showPlayer");
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          cc.log("playerNode:", playerNode);
          playerNode.getComponent("DDZ-playerTemplate").setPlayer(player);
          playerNode.getComponent("DDZ-playerTemplate").setName(player.name);
          playerNode.getComponent("DDZ-playerTemplate").setHeadIcon(player.headimgurl);
          playerNode.getComponent("DDZ-playerTemplate").setNamePositionByDir(direction);
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) playerNode.getComponent("DDZ-playerTemplate").setGold(player.coin); else {
            var score = 0;
            void 0 != GameDataTJDDZ.roomsummaryData.score && (score = void 0 == GameDataTJDDZ.roomsummaryData.score[player.uid] ? 0 : GameDataTJDDZ.roomsummaryData.score[player.uid]);
            playerNode.getComponent("DDZ-playerTemplate").setCoin(score, 1);
          }
          playerNode.getComponent("DDZ-playerTemplate").setIsPlayerIcon(false);
          if (0 != GameDataTJDDZ.game.dizhuUid) {
            var isdizhu = GameDataTJDDZ.game.dizhuUid == player.uid;
            isdizhu ? playerNode.getComponent("DDZ-playerTemplate").showPlayerIdentity(true, 1) : playerNode.getComponent("DDZ-playerTemplate").showPlayerIdentity(true, 2);
          }
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          playerNode.setTag(player.uid);
          2 == player.status && this.showReadyIcon(direction, false, false);
          var isOnLine = RoomHandler.isPlayerOnline(player.uid);
          var disHanderNode = cc.find("Disconnect", playerNode);
          var disNode = cc.find("lost_" + direction, this.lostNode);
          disNode.active = !isOnLine;
          disHanderNode.active = !isOnLine;
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      hideTiChuai: function hideTiChuai() {
        for (var index = 0; index < this.headers.length; index++) {
          var tiChuaiNode = cc.find("tiChuaiNode", this.headers[index]);
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          tiIcon.active = false;
          chuaiIcon.active = false;
        }
      },
      showPlayerTiChuai: function showPlayerTiChuai(parent, dizhuUid, uid) {
        var playerNode = parent.getChildByName("TablePlayerTemplate");
        var tiChuaiNode = cc.find("tiChuaiNode", playerNode);
        if (1 == GameDataTJDDZ.kicking.kicking[uid] && uid != dizhuUid) {
          var tiIcon = cc.find("tiIcon", tiChuaiNode);
          tiIcon.active = true;
          parent == this.play_right_player && (tiIcon.x = -67);
        } else if (1 == GameDataTJDDZ.kicking.kicking[uid] && uid == dizhuUid) {
          var chuaiIcon = cc.find("chuaiIcon", tiChuaiNode);
          chuaiIcon.active = true;
          parent == this.play_right_player && (chuaiIcon.x = -67);
        }
      },
      showKicking: function showKicking() {
        for (var key in GameDataTJDDZ.kicking.kicking) {
          var pos = GameDataTJDDZ.getPosByUid(key);
          "down" == pos ? this.showPlayerTiChuai(this.play_down_player, GameDataTJDDZ.kicking.dizhu, key) : "right" == pos && this.showPlayerTiChuai(this.play_right_player, GameDataTJDDZ.kicking.dizhu, key);
          "left" == pos && this.showPlayerTiChuai(this.play_left_player, GameDataTJDDZ.kicking.dizhu, key);
        }
      },
      connectRecurrence: function connectRecurrence() {
        this.showKicking();
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showPlayers();
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("DDZ-playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameDataTJDDZ.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (connectInfo.uid != isReadyUid || 0 == connectInfo.uid) {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          }
        }
        cc.log("direction :" + direction + isDisconnect);
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      setRoomNum: function setRoomNum() {
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : TJDDZHandler.getInstance().quitMjRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "天津斗地主 房间号:" + GameData.room.id;
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var gameTypeStr = "";
        var limitStr = "";
        var str = "玩法:";
        var costTypeArr = [ "房主付,", "AA制,", "赢家付,", "代开房付费,", "" ];
        str += costTypeArr[GameData.room.opts.costType - 1];
        if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          gameTypeStr = "金币场 ";
          var serverConfig = configMgr.getServerConfig();
          if (serverConfig && serverConfig.roomCoin) {
            var spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Poker_TianjinDDZ];
            if (spendData) {
              var index = 0;
              switch (GameData.room.opts.roundMax) {
               case 6:
                index = 0;
                break;

               case 10:
                index = 1;
                break;

               case 20:
                index = 2;
              }
              if (spendData[index]) {
                var cost = spendData[index].enter;
                var final = cost[GameData.room.opts.joinermax];
                final && (limitStr = "进入条件：" + final[GameData.room.opts.scorelv]);
              }
            }
          }
        }
        1 == GameData.room.opts.jiaofenType ? str += "赢家叫分," : 2 == GameData.room.opts.jiaofenType && (str += "轮庄叫分,");
        true == GameData.room.opts.mud && (str += "带泥儿,");
        true == GameData.room.opts.kicking && (str += "带踢踹,");
        str += "局数:" + GameData.room.opts.roundMax + "局,";
        var str2 = "请您快速加入对局.";
        var fanshu = 15 == GameData.room.opts.fanshu ? "无限番" : GameData.room.opts.fanshu + "番";
        var des = gameTypeStr + limitStr + str + str2 + fanshu;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("天津斗地主", "我在天津斗地主等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("天津斗地主", "我在天津斗地主等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {},
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        this.readyNode.active = !GameDataTJDDZ.game.gameStart;
        this.hideAllReadyStatus();
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "TJDDZ-roomtable": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac64cG4J/NMJY6q4CZcXHY0", "TJDDZ-roomtable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        ruleLb: cc.Label,
        handCardLayOut: cc.Node,
        cardsNode: cc.Node,
        actionLayer: cc.Node,
        jiaofenNode: cc.Node,
        HoleCardsNode: cc.Node,
        clockNodes: cc.Node,
        buchuNodes: cc.Node,
        warningNode: cc.Node,
        multipleNode: cc.Node,
        _countdown_index: 0,
        _currClockNodes: cc.Node,
        lastRoundLabel: cc.Label,
        dragonAnimations: cc.Node,
        winAnimation: cc.Node,
        loseAnimation: cc.Node,
        planeNode: cc.Node,
        chuntianNode: cc.Node,
        bobmAinmation: cc.Node,
        huojianAinmation: cc.Node,
        _effcetFlag: false,
        maskNode: cc.Node,
        _currTime: null,
        dizhuSign: {
          default: null,
          type: cc.Prefab
        },
        tiBtnNode: {
          default: null,
          type: cc.Node
        },
        chuaiBtnNode: {
          default: null,
          type: cc.Node
        },
        chuaiIcon_right: {
          default: null,
          type: cc.Node
        },
        chuaiIcon_left: {
          default: null,
          type: cc.Node
        },
        tiIcon_right: {
          default: null,
          type: cc.Node
        },
        tiIcon_left: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        WriteLog("TJDDZ-roomtable onLoad");
        this.initData();
        this.initUI();
        this.registListenr();
        for (var key in this.handCardLayOut.children) this.defaultPokerY = this.handCardLayOut.children[key].y;
        if (GameDataTJDDZ.game.initcards) {
          this.cardsNode.active = true;
          this._dealEnd = true;
          this.onShow();
        }
        null != GameDataTJDDZ.currJiaofenPlayerData && this.showJiaoFenNode();
        if (GameDataTJDDZ.game.gameStartDizhu) {
          this.showDizhuInfo();
          this.showObtainNode();
          this.showDisPoker();
          this.showBuchuNode();
          this.reconneShowWarning();
        }
        this.connectRecurrence();
      },
      registListenr: function registListenr() {
        registEvent("onPrepareInfo", this, this.showRoomRule);
        registEvent("tjddz-onGameInfo", this, this.onShow);
        registEvent("tjddz-onDiZhu", this, this.showDizhuInfo);
        registEvent("tjddz-initCardHands", this, this.onShow);
        registEvent("tjddz-initCardHand", this, this.initCardHand);
        registEvent("tjddz-initCardHandNum", this, this.showCardNum);
        registEvent("tjddz-initCardHandNums", this, this.showCardNum);
        registEvent("tjddz-onGameStart", this, this.handleGameStart);
        registEvent("tjddz-onJiaoFen", this, this.showJiaoFenNode);
        registEvent("tjddz-jiaoFencb", this, this.playJiaofenEffect);
        registEvent("tjddz-onShowObtainNode", this, this.showObtainNode);
        registEvent("tjddz-showDisPoker", this, this.showDisPoker);
        registEvent("initTableNode", this, this.initTableNode);
        registEvent("tjddz-onGameScore", this, this.showWinNode);
        registEvent("tjddz-cardWarning", this, this.showWarningNode);
        registEvent("tjddz-onDiscardType", this, this.showDisCardType);
        registEvent("tjddz-disPokerArry", this, this.setDisPokerArry);
        registEvent("tjddz-passcb", this, this.playPassEffect);
        registEvent("tjddz-hintCard", this, this.showHintCard);
        registEvent("tjddz-hideCard", this, this.hidePlayerCard);
        registEvent("onShowSummary", this, this.stopClockMusic);
        registEvent("tjddz-startTi", this, this.showTiChuai);
        registEvent("tjddz-startChuai", this, this.showTiChuai);
        registEvent("tjddz-showKicking", this, this.showKicking);
        registEvent("tjddz-showWatch", this, this.showWatch);
        registEvent("tjddz-reconnectionInfo", this, this.reconnectionInfo);
        registEvent("coinEndEvent", this, this.coinEndEvent);
        var self = this;
        this.maskNode.on(cc.Node.EventType.TOUCH_END, function() {
          self.DoubleClick();
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPrepareInfo", this, this.showRoomRule);
        unregistEvent("tjddz-onGameInfo", this, this.onShow);
        unregistEvent("tjddz-onDiZhu", this, this.showDizhuInfo);
        unregistEvent("tjddz-initCardHands", this, this.onShow);
        unregistEvent("tjddz-initCardHand", this, this.initCardHand);
        unregistEvent("tjddz-initCardHandNum", this, this.showCardNum);
        unregistEvent("tjddz-initCardHandNums", this, this.showCardNum);
        unregistEvent("tjddz-onGameStart", this, this.handleGameStart);
        unregistEvent("tjddz-onJiaoFen", this, this.showJiaoFenNode);
        unregistEvent("tjddz-jiaoFencb", this, this.playJiaofenEffect);
        unregistEvent("tjddz-onShowObtainNode", this, this.showObtainNode);
        unregistEvent("tjddz-showDisPoker", this, this.showDisPoker);
        unregistEvent("initTableNode", this, this.initTableNode);
        unregistEvent("tjddz-onGameScore", this, this.showWinNode);
        unregistEvent("tjddz-cardWarning", this, this.showWarningNode);
        unregistEvent("tjddz-onDiscardType", this, this.showDisCardType);
        unregistEvent("tjddz-disPokerArry", this, this.setDisPokerArry);
        unregistEvent("tjddz-passcb", this, this.playPassEffect);
        unregistEvent("tjddz-hintCard", this, this.showHintCard);
        unregistEvent("tjddz-hideCard", this, this.hidePlayerCard);
        unregistEvent("onShowSummary", this, this.stopClockMusic);
        unregistEvent("tjddz-startTi", this, this.showTiChuai);
        unregistEvent("tjddz-startChuai", this, this.showTiChuai);
        unregistEvent("tjddz-showKicking", this, this.showKicking);
        unregistEvent("tjddz-showWatch", this, this.showWatch);
        unregistEvent("tjddz-reconnectionInfo", this, this.reconnectionInfo);
        unregistEvent("coinEndEvent", this, this.coinEndEvent);
        var self = this;
        this.maskNode.off(cc.Node.EventType.TOUCH_END, function() {
          self.DoubleClick();
        });
      },
      initData: function initData() {
        this.disCardArry = [];
        this.disPokerArry = [];
        this._dragonAnimtaionNum = 1;
        this._cardHandPosArr = [];
        this._angularArr = [];
        this._dealActionIndex = 0;
        this._flipActionIndex = 0;
        this._cardHand = [];
        this._dealEnd = false;
        this._kickingArr = [];
        this._buJiao = 1;
      },
      initUI: function initUI() {
        this.cardsNode.active = false;
        this.jiaofenNode.active = false;
        this.ruleLb.string = this.getRuleStr();
        this.hideDisCards();
      },
      initTableNode: function initTableNode() {
        var leftLastCardNode = cc.find("lastpokerNum", this.play_layer_left);
        var rightLastCardNode = cc.find("lastpokerNum", this.play_layer_right);
        this.hideNodeChild(leftLastCardNode);
        this.hideNodeChild(rightLastCardNode);
        this.hideDisCards();
        this.hideHandCards();
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        this.actionLayer.active = false;
        this.hideNodeChild(this.clockNodes);
        this.hideNodeChild(this.multipleNode);
        GameDataTJDDZ.game.dizhuUid = 0;
        this.chuntianNode.active = false;
        this.winAnimation.active = false;
        this.loseAnimation.active = false;
        this.planeNode.active = false;
        this.bobmAinmation.active = false;
        this.huojianAinmation.active = false;
        this.hideNodeChild(this.warningNode);
        this.hideNodeChild(this.buchuNodes);
        this.stopClockMusic();
      },
      showRoomRule: function showRoomRule() {
        this.ruleLb.string = this.getRuleStr();
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      handleGameStart: function handleGameStart() {
        GameDataTJDDZ.clearObject(GameDataTJDDZ.hideDisCard);
        GameDataTJDDZ.clearObject(GameDataTJDDZ.currObtainPlayerData);
        this.cardsNode.active = true;
        this.hideHoleCards();
      },
      initCardHand: function initCardHand() {
        GameDataTJDDZ.getMyHandCards().length == GameDataTJDDZ.handCardSize && true == GameDataTJDDZ.deal && (this._firstInit = true);
        this.onShow();
      },
      onShow: function onShow() {
        WriteLog("onShow");
        var downHandCardNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in downHandCardNode.children) downHandCardNode.children[key].y = this.defaultPokerY;
        this.showCards();
        this.cardsNode.active = true;
        this.HoleCardsNode.active = true;
        this.lastRoundLabel.string = "局数:" + GameData.room.roundNum + "/" + GameData.room.opts.roundMax;
      },
      showCards: function showCards() {
        WriteLog("showCards");
        var player = GameData.getPlayerByPos("down");
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this._firstInit ? this.dealActionMngr() : this.showMyHandCards(player, this.play_layer_down);
          this.play_layer_down.active = true;
        } else this.play_layer_down.active = false;
      },
      showCardNum: function showCardNum() {
        var player = GameData.getPlayerByPos("right");
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.showOtherHandCards(player, this.play_layer_right);
          this.play_layer_right.active = true;
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.showOtherHandCards(player, this.play_layer_left);
          this.play_layer_left.active = true;
        } else this.play_layer_left.active = false;
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        WriteLog("showMyHandCards");
        this.resetPokerPos();
        var cardHand = GameDataTJDDZ.getMyHandCards();
        var cardsHandNode = cc.find("cardHand/handLayout", parent);
        for (var key in cardsHandNode.children) cardsHandNode.children[key].active = false;
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(cardHand.length / 2);
        for (var j = 0; j < cardHand.length; j++) {
          var node = cc.find("cardHand/handLayout/hand_" + (i + j), parent);
          node.active = true;
          player.uid == GameDataTJDDZ.game.dizhuUid ? this.addDizhuSign(node) : this.removeDizhuSign(node);
          this.showCardContent(node, cardHand[j]);
        }
      },
      showOtherHandCards: function showOtherHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardHand = GameDataTJDDZ.getHandCardNum(uid);
          var handNumLb = cc.find("lastpokerNum/pokerNum", parent);
          handNumLb.active = true;
          handNumLb.getComponent(cc.Label).string = cardHand;
          var node = cc.find("cardHand/hand_0", parent);
          node.active = true;
        }
      },
      showCardContent: function showCardContent(cardNode, cardId) {
        if (0 == cardId) return;
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showPokerBack: function showPokerBack() {
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in cardsHandNode.children) {
          this.showCardContent(cardsHandNode.children[key], "back");
          cardsHandNode.children[key].active = false;
        }
      },
      showTiChuai: function showTiChuai() {
        true == GameDataTJDDZ.tiFlag ? this.tiBtnNode.active = true : (GameDataTJDDZ.chuaiFlag = true) && (this.chuaiBtnNode.active = true);
      },
      tiChuaiAction: function tiChuaiAction(tiChuaiNode) {
        var callFunc1 = cc.callFunc(function() {
          tiChuaiNode.active = true;
        }, this);
        var callFunc2 = cc.callFunc(function() {
          tiChuaiNode.active = false;
        }, this);
        var delayTime = cc.delayTime(1);
        var seq = cc.sequence(callFunc1, delayTime, callFunc2);
        tiChuaiNode.parent.runAction(seq);
      },
      showPlayerTiChuai: function showPlayerTiChuai(pos, dizhuUid, uid) {
        var that = this;
        1 == GameDataTJDDZ.kicking.kicking[uid] && uid == dizhuUid ? "right" == pos ? this.tiChuaiAction(this.chuaiIcon_right) : "left" == pos && this.tiChuaiAction(this.chuaiIcon_left) : 1 == GameDataTJDDZ.kicking.kicking[uid] && uid != dizhuUid && ("right" == pos ? this.tiChuaiAction(this.tiIcon_right) : "left" == pos && this.tiChuaiAction(this.tiIcon_left));
      },
      showKicking: function showKicking() {
        for (var key in GameDataTJDDZ.kicking.kicking) {
          var uid = 0;
          var flag = false;
          for (var index = 0; index < this._kickingArr.length; index++) key == this._kickingArr[index] && (flag = true);
          if (false == flag) {
            uid = key;
            this._kickingArr.push(key);
          }
          var pos = 0;
          0 != uid && (pos = GameDataTJDDZ.getPosByUid(uid));
          if (0 != pos) {
            this.showPlayerTiChuai(pos, GameDataTJDDZ.kicking.dizhu, uid);
            break;
          }
        }
      },
      dealActionMngr: function dealActionMngr() {
        this._firstInit = false;
        this._cardHandPosArr.splice(0, this._cardHandPosArr.length);
        this._angularArr.splice(0, this._angularArr.length);
        this._dealActionIndex = 0;
        this._flipActionIndex = 0;
        var point = cc.director.getWinSize();
        var midpoint = {
          x: point.width / 2,
          y: point.height
        };
        this._cardHand = GameDataTJDDZ.getMyHandCards();
        var cardHand = GameDataTJDDZ.getMyHandCards();
        this.showPokerBack();
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(cardHand.length / 2);
        this.schedule(this.dealAction, .01);
      },
      dealAction: function dealAction() {
        var handCard_len = GameDataTJDDZ.getMyHandCards().length;
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(handCard_len / 2);
        var cardNode = cc.find("cardHand/handLayout/hand_" + (i + this._dealActionIndex), this.play_layer_down);
        this.removeDizhuSign(cardNode);
        cardNode.active = true;
        cardNode.ratationY = 180;
        this._dealActionIndex++;
        if (this._dealActionIndex >= handCard_len) {
          var that = this;
          this.unschedule(this.dealAction);
          this.scheduleOnce(function() {
            that.runFlipAction();
          }, .5);
        }
      },
      runFlipAction: function runFlipAction() {
        var self = this;
        self.schedule(this.flipAction, .02);
      },
      flipAction: function flipAction() {
        var handCard_len = GameDataTJDDZ.getMyHandCards().length;
        var cardsHandNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var i = Math.ceil(cardsHandNode.childrenCount / 2) - Math.ceil(handCard_len / 2);
        var cardNode = cc.find("cardHand/handLayout/hand_" + (i + this._flipActionIndex), this.play_layer_down);
        cardNode.active = true;
        var rotateTo = cc.rotateTo(.01, 0, 0);
        var that = this;
        var index = this._flipActionIndex;
        var callFunc = cc.callFunc(function() {
          that.removeDizhuSign(cardNode);
          that.showCardContent(cardNode, that._cardHand[index]);
        }, this);
        var seq = cc.sequence(rotateTo, callFunc);
        cardNode.runAction(seq);
        this._flipActionIndex++;
        if (this._flipActionIndex >= handCard_len) {
          this.unschedule(this.flipAction);
          that._dealEnd = true;
          that.showJiaoFenNode();
        }
      },
      angularByCoord: function angularByCoord(coord1, coord2) {
        var pi = 3.14159;
        var radian;
        var x = Math.abs(coord1.x) - Math.abs(coord2.x);
        var y = Math.abs(coord1.y) - Math.abs(coord2.y);
        radian = Math.atan(Math.abs(y) / Math.abs(x));
        return coord1.x < coord2.x ? 90 - radian / pi * 180 : radian / pi * 180;
      },
      showWatch: function showWatch() {
        this.stopClockMusic();
        for (var index = 0; index < GameDataTJDDZ.currtiChuaiPlayerData.length; index++) this.showClock(GameDataTJDDZ.currtiChuaiPlayerData[index]);
      },
      reconnectionInfo: function reconnectionInfo() {
        this._dealEnd = true;
        this.showJiaoFenNode();
      },
      showJiaoFenNode: function showJiaoFenNode() {
        WriteLog("showJiaoFenNode");
        var uid = GameDataTJDDZ.currJiaofenPlayerData.uid;
        var maxNum = GameDataTJDDZ.currJiaofenPlayerData.maxNum;
        if (GameDataTJDDZ.game.isJiaofenAgain) {
          this._dealEnd = false;
          GameDataTJDDZ.game.isJiaofenAgain = !GameDataTJDDZ.game.isJiaofenAgain;
          1 == this._buJiao && createMessageBox(null, function() {}, null, "resources/ddz/UI/common/artword/artword_resendPoker.png");
          this._buJiao++;
        }
        if (false == this._dealEnd) return;
        this.actionLayer.active = false;
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        for (var i = 1; i < 5; i++) {
          var BtnNode = cc.find("btn" + i, this.jiaofenNode);
          BtnNode.getComponent(cc.Button).interactable = true;
        }
        cc.log("GameData.player.uid == uid : " + GameData.player.uid, uid);
        if (GameData.player.uid == uid) {
          this.jiaofenNode.active = true;
          for (;maxNum > 0; maxNum--) {
            var BtnNode1 = cc.find("btn" + maxNum, this.jiaofenNode);
            BtnNode1.getComponent(cc.Button).interactable = false;
          }
        } else this.jiaofenNode.active = false;
        this.stopClockMusic();
        this.showClocks(uid);
        this.showJianfenText(GameDataTJDDZ.currJiaofenPlayerData);
      },
      showJianfenText: function showJianfenText(data) {
        cc.log("data  : " + JSON.stringify(data));
        if (void 0 == data.allJiaoFen || null == data.allJiaoFen || !data.allJiaoFen) return;
        var player = GameData.getPlayerByPos("down");
        var jiaofenNode = cc.find("jiaofenSps/downSp", this.cardsNode);
        var texture;
        if (player && GameDataTJDDZ.cards[player.uid]) {
          if (void 0 != GameDataTJDDZ.getJiaofenNum(player.uid)) {
            jiaofenNode.active = true;
            texture = cc.textureCache.addImage(cc.url.raw(this.getJiaofenImg(GameDataTJDDZ.getJiaofenNum(player.uid))));
            jiaofenNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        } else jiaofenNode.active = false;
        player = GameData.getPlayerByPos("right");
        jiaofenNode = cc.find("jiaofenSps/rightSp", this.cardsNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          if (void 0 != GameDataTJDDZ.getJiaofenNum(player.uid)) {
            jiaofenNode.active = true;
            texture = cc.textureCache.addImage(cc.url.raw(this.getJiaofenImg(GameDataTJDDZ.getJiaofenNum(player.uid))));
            jiaofenNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        } else jiaofenNode.active = false;
        player = GameData.getPlayerByPos("left");
        jiaofenNode = cc.find("jiaofenSps/leftSp", this.cardsNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          if (void 0 != GameDataTJDDZ.getJiaofenNum(player.uid)) {
            jiaofenNode.active = true;
            texture = cc.textureCache.addImage(cc.url.raw(this.getJiaofenImg(GameDataTJDDZ.getJiaofenNum(player.uid))));
            jiaofenNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        } else jiaofenNode.active = false;
      },
      selectScroe: function selectScroe(eve, data) {
        switch (parseInt(data)) {
         case 1:
          TJDDZHandler.getInstance().requestSelectScore(1, function(data) {});
          this.jiaofenNode.active = false;
          break;

         case 2:
          TJDDZHandler.getInstance().requestSelectScore(2, function(data) {});
          this.jiaofenNode.active = false;
          break;

         case 3:
          TJDDZHandler.getInstance().requestSelectScore(3, function(data) {});
          this.jiaofenNode.active = false;
          break;

         case 4:
          TJDDZHandler.getInstance().requestSelectScore(4, function(data) {});
          this.jiaofenNode.active = false;
        }
        this._buJiao = 1;
      },
      playJiaofenEffect: function playJiaofenEffect(data) {
        var uid = data.detail.uid;
        var num = data.detail.num;
        var playerSex = GameData.getPlayerSexByUid(uid);
        var fenStr = "";
        switch (num) {
         case 1:
          fenStr = "yifen";
          break;

         case 2:
          fenStr = "liangfen";
          break;

         case 3:
          fenStr = "sanfen";
          break;

         case 4:
          fenStr = "bujiao";
        }
        soundMngr.instance.playOtherAudioPoker(fenStr, playerSex);
      },
      showDizhuInfo: function showDizhuInfo() {
        var cards = GameDataTJDDZ.gameStartData.cards;
        var multipleNum = GameDataTJDDZ.gameStartData.multiple;
        this.showHoleCards(cards);
        var jiaofenTextNode = cc.find("jiaofenSps", this.cardsNode);
        this.hideNodeChild(jiaofenTextNode);
        this.changeMultiple(multipleNum);
      },
      hideHoleCards: function hideHoleCards() {
        var HoleCardsNode = cc.find("cards", this.HoleCardsNode);
        for (var key in HoleCardsNode.children) this.showHoleCardContent(HoleCardsNode.children[key], "back");
      },
      showHoleCards: function showHoleCards(cards) {
        var _this = this;
        if (void 0 != cards) {
          var HoleCardsNode = cc.find("cards", this.HoleCardsNode);
          var _loop = function _loop(i) {
            var cardNode = cc.find("dipai_card" + i, HoleCardsNode);
            action1 = cc.scaleTo(.3, 0, .5);
            action2 = cc.scaleTo(.3, .5, .5);
            cardNode.runAction(cc.sequence(action1, action2));
            _this.scheduleOnce(function() {
              this.showHoleCardContent(cardNode, cards[i]);
            }, .3);
          };
          for (var i = 0; i < HoleCardsNode.childrenCount; i++) {
            var action1;
            var action2;
            _loop(i);
          }
          this.jiaofenNode.active = false;
        }
      },
      showHoleCardContent: function showHoleCardContent(cardNode, cardId) {
        cc.log("cardNode,cardId:" + cardNode, cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/ddz/UI/pokers/poker_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showObtainNode: function showObtainNode() {
        this.disCardArry = [];
        var uid = GameDataTJDDZ.currObtainPlayerData.uid;
        var isPass = GameDataTJDDZ.currObtainPlayerData.flag;
        var hintFlag = GameDataTJDDZ.currObtainPlayerData.hintFlag;
        this._effcetFlag = isPass;
        var ObtainNode = cc.find("actions", this.cardsNode);
        var passBtn = cc.find("actions/btnPass", this.cardsNode);
        var hintBtn = cc.find("actions/btnTishi", this.cardsNode);
        var disBtn = cc.find("actions/btnDisCard", this.cardsNode);
        if (GameData.player.uid == uid) {
          ObtainNode.active = true;
          if (isPass) {
            passBtn.active = true;
            hintBtn.active = true;
            hintFlag || createMoveMessage("没有大过上家的牌!");
          } else {
            passBtn.active = false;
            hintBtn.active = false;
          }
        } else ObtainNode.active = false;
        this.stopClockMusic();
        this.showClocks(uid);
        var pos = GameData.tablePos[uid];
        cc.log("pos :" + pos);
        var dispokerNode;
        switch (pos) {
         case "down":
          dispokerNode = cc.find("layer_down/cardDis", this.cardsNode);
          break;

         case "right":
          dispokerNode = cc.find("layer_right/cardDis", this.cardsNode);
          break;

         case "left":
          dispokerNode = cc.find("layer_left/cardDis", this.cardsNode);
          break;

         case "up":
          dispokerNode = cc.find("layer_up/cardDis", this.cardsNode);
        }
        this.hidePassNode(pos);
        void 0 != dispokerNode && this.hideNodeChild(dispokerNode);
        var myPokerNum = GameDataTJDDZ.getMyHandCards().length;
        cc.log("myPokerNum:" + myPokerNum, hintBtn.active, passBtn.active);
        if (!passBtn.active && !hintBtn.active && 1 == myPokerNum) for (var key in this.handCardLayOut.children) if (true == this.handCardLayOut.children[key].active && GameData.player.uid == uid && this.handCardLayOut.children[key].y == this.defaultPokerY) {
          this.handCardLayOut.children[key].y += 30;
          this.disPokerArry.push(this.handCardLayOut.children[key]);
        }
      },
      hidePlayerCard: function hidePlayerCard(data) {
        var uid = data.detail.uid;
        var pos = GameDataTJDDZ.getPosByUid(uid);
        var dispokerNode;
        pos && (dispokerNode = cc.find("layer_" + pos + "/cardDis", this.cardsNode));
        void 0 != dispokerNode && this.hideNodeChild(dispokerNode);
      },
      hidePassNode: function hidePassNode(pos) {
        var show = false;
        switch (pos) {
         case "down":
          var node = cc.find("buchuLb0", this.buchuNodes);
          node.active = show;
          break;

         case "right":
          var node = cc.find("buchuLb1", this.buchuNodes);
          node.active = show;
          break;

         case "left":
          var node = cc.find("buchuLb2", this.buchuNodes);
          node.active = show;
        }
      },
      onDisCardClick: function onDisCardClick() {
        var cardsNode = cc.find("cardHand/handLayout", this.play_layer_down);
        this.disCardArry.splice(0, this.disCardArry.length);
        for (var key in this.disPokerArry) {
          var cardId = this.disPokerArry[key].getComponent("Card").id;
          cc.log("cardId " + cardId);
          this.disCardArry.push(cardId);
        }
        TJDDZHandler.getInstance().requestOnDisCard(this.disCardArry, function() {});
        cc.log("disCardArry: ", this.disCardArry);
        cc.log("disPokerArry: ", this.disPokerArry);
        var i = 0;
        for (var key in cardsNode.children) cardsNode.children[key].y == this.defaultPokerY && i++;
        i > 0 && 0 == this.disCardArry.length && createMoveMessage("请选择要出的牌!");
      },
      onPassCardClick: function onPassCardClick() {
        var ObtainNode = cc.find("actions", this.cardsNode);
        ObtainNode.active = false;
        var errorCode = require("errorCode");
        TJDDZHandler.getInstance().requestOnPassCard(function(rtn) {
          rtn.result != errorCode.Success && (ObtainNode.active = true);
        });
        this.resetPokerPos();
      },
      onHintClick: function onHintClick() {
        TJDDZHandler.getInstance().requestOnHintCard(function(data) {});
      },
      playPassEffect: function playPassEffect(data) {
        var uid = data.detail.uid;
        var playerSex = GameData.getPlayerSexByUid(uid);
        soundMngr.instance.playOtherAudioPoker("buyao", playerSex);
        this.showBuchuNode();
      },
      showBuchuNode: function showBuchuNode() {
        var player = GameData.getPlayerByPos("down");
        var cards = GameDataTJDDZ.getDisPoker(player.uid);
        var parent = cc.find("buchuLb0", this.buchuNodes);
        this.showbuchuStr(player, parent, cards);
        player = GameData.getPlayerByPos("right");
        cards = GameDataTJDDZ.getDisPoker(player.uid);
        parent = cc.find("buchuLb1", this.buchuNodes);
        this.showbuchuStr(player, parent, cards);
        player = GameData.getPlayerByPos("left");
        cards = GameDataTJDDZ.getDisPoker(player.uid);
        parent = cc.find("buchuLb2", this.buchuNodes);
        this.showbuchuStr(player, parent, cards);
      },
      showbuchuStr: function showbuchuStr(player, node, cards) {
        if (void 0 == cards) return;
        if (0 == cards[0]) {
          node.active = true;
          GameDataTJDDZ.isEmptyObject(GameDataTJDDZ.currObtainPlayerData) || GameDataTJDDZ.currObtainPlayerData.uid == player.uid && (node.active = false);
        } else 0 == cards.length && (node.active = false);
      },
      showDisPoker: function showDisPoker() {
        var player = GameData.getPlayerByPos("down");
        var cards = GameDataTJDDZ.getDisPoker(player.uid);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.showPokerCards(player, this.play_layer_down, cards);
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        cards = GameDataTJDDZ.getDisPoker(player.uid);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_right.active = true;
          this.showPokerCards(player, this.play_layer_right, cards);
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        cards = GameDataTJDDZ.getDisPoker(player.uid);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_left.active = true;
          this.showPokerCards(player, this.play_layer_left, cards);
        } else this.play_layer_left.active = false;
        this.hideDisPoker();
      },
      hideDisPoker: function hideDisPoker() {
        var disCardNode;
        if (!GameDataTJDDZ.isEmptyObject(GameDataTJDDZ.hideDisCard)) {
          var pos = GameDataTJDDZ.getPosByUid(GameDataTJDDZ.hideDisCard.uid);
          switch (pos) {
           case "down":
            disCardNode = cc.find("cardDis", this.play_layer_down);
            break;

           case "right":
            disCardNode = cc.find("cardDis", this.play_layer_right);
            break;

           case "left":
            disCardNode = cc.find("cardDis", this.play_layer_left);
          }
          this.hideNodeChild(disCardNode);
        }
      },
      showPokerCards: function showPokerCards(player, parent, cards) {
        var uid = GameDataTJDDZ.currObtainPlayerData.uid;
        var cardNode = cc.find("cardDis", parent);
        if (void 0 == cards) return;
        this.hideNodeChild(cardNode);
        if (parent == this.play_layer_down) {
          var i = Math.ceil(cardNode.childrenCount / 2) - Math.ceil(cards.length / 2);
          for (var j = 0; j < cards.length; j++) {
            var node = cc.find("dis_" + (i + j), cardNode);
            0 == cards[0] ? node.active = false : node.active = true;
            player.uid == GameDataTJDDZ.game.dizhuUid ? this.addDizhuSign(node, "dis") : this.removeDizhuSign(node);
            this.showCardContent(node, cards[j]);
          }
        } else for (var k = 0; k < cards.length; k++) {
          var node = cc.find("dis_" + k, cardNode);
          0 == cards[0] ? node.active = false : node.active = true;
          player.uid == GameDataTJDDZ.game.dizhuUid ? this.addDizhuSign(node, "dis") : this.removeDizhuSign(node);
          this.showCardContent(node, cards[k]);
        }
      },
      showClocks: function showClocks(uid) {
        if (void 0 == uid) return;
        var player = GameData.getPlayerByPos("down");
        var clockNodes = cc.find("cloock0", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
        player = GameData.getPlayerByPos("right");
        clockNodes = cc.find("cloock1", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
        player = GameData.getPlayerByPos("left");
        clockNodes = cc.find("cloock2", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
      },
      showClock: function showClock(uid) {
        if (void 0 == uid) return;
        var player = GameData.getPlayerByPos("down");
        var clockNodes = cc.find("cloock0", this.clockNodes);
        this.showClockContent(player, clockNodes, uid);
      },
      showClockContent: function showClockContent(player, parent, uid) {
        if (player.uid == uid) {
          parent.active = true;
          this.PLayerUID = uid;
          this._currClockNodes = parent;
          this.startCoundDown();
        }
      },
      startCoundDown: function startCoundDown() {
        this._countdown_index = 14;
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "", this._currClockNodes);
        if (this._countdown_index <= 0) {
          cc.log("结束");
          this._countdown_index = 15;
        } else {
          var action1 = cc.blink(.5, 3);
          if (3 == this._countdown_index && this.PLayerUID == GameData.player.uid) {
            this._currClockNodes.runAction(action1);
            soundMngr.instance.playAudioOther("countdown");
          }
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num, cloockNode) {
        var timeStr = num;
        var timeLabel = cc.find("timeLb", cloockNode);
        num < 10 && (timeStr = "0" + num);
        timeLabel.getComponent(cc.Label).string = timeStr;
      },
      hideDisCards: function hideDisCards() {
        var downDisCardNode = cc.find("cardDis", this.play_layer_down);
        var leftDisCardNode = cc.find("cardDis", this.play_layer_left);
        var rightDisCardNode = cc.find("cardDis", this.play_layer_right);
        this.hideNodeChild(downDisCardNode);
        this.hideNodeChild(leftDisCardNode);
        this.hideNodeChild(rightDisCardNode);
      },
      hideHandCards: function hideHandCards() {
        var downHandCardNode = cc.find("cardHand/handLayout", this.play_layer_down);
        var leftHandCardNode = cc.find("cardHand", this.play_layer_left);
        var rightHandCardNode = cc.find("cardHand", this.play_layer_right);
        this.hideNodeChild(downHandCardNode);
        this.hideNodeChild(leftHandCardNode);
        this.hideNodeChild(rightHandCardNode);
      },
      showWinNode: function showWinNode(data) {
        WriteLog("showWinNode");
        this._dealEnd = false;
        this._kickingArr.splice(0, this._kickingArr.length);
        this.stopClockMusic();
        this.hideNodeChild(this.warningNode);
        this.hideNodeChild(this.buchuNodes);
        this.actionLayer.active = false;
        sendEvent("HideReadyNode");
        var player = GameData.getPlayerByPos("down");
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameDataTJDDZ.resultData.score[GameData.player.uid];
        myScore > 0 ? soundMngr.instance.playOtherAudioPoker("shengli", null) : soundMngr.instance.playOtherAudioPoker("shibai", null);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.showWinnerIcon(player, data);
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_right.active = true;
          this.showWinnerIcon(player, data);
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_left.active = true;
          this.showWinnerIcon(player, data);
        } else this.play_layer_left.active = false;
      },
      coinEndEvent: function coinEndEvent(data) {
        var chuntianTime = 0;
        true == data.detail.chuntian && (chuntianTime = 2);
        this.scheduleOnce(function() {
          sendEvent("AnimationDelayTime", data.detail);
        }, 4 + 3 * this._dragonAnimtaionNum);
      },
      showWinnerIcon: function showWinnerIcon(player, data) {
        var uid = data.detail.winner;
        var ischuntian = data.detail.chuntian;
        var chuntianTime = 0;
        if (ischuntian) {
          chuntianTime = 2;
          this.scheduleOnce(function() {
            this.chuntianNode.active = true;
            var chuntianAnimation = this.chuntianNode.getComponent(dragonBones.ArmatureDisplay);
            chuntianAnimation.playAnimation("newAnimation", 1);
            soundMngr.instance.playOtherAudioPoker("chuntian", null);
          }, 1.5 * this._dragonAnimtaionNum);
          this.scheduleOnce(function() {
            this.chuntianNode.active = false;
          }, 1.5 * this._dragonAnimtaionNum + 2);
        }
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameDataTJDDZ.resultData.score[GameData.player.uid];
        if (myScore > 0) {
          cc.log("1111111111111111111111111");
          var self = this;
          this.scheduleOnce(function() {
            this.winAnimation.active = true;
            var anim = this.winAnimation.getComponent(dragonBones.ArmatureDisplay);
            anim.playAnimation("newAnimation", 1);
          }, chuntianTime + 1.5 * this._dragonAnimtaionNum);
          this.scheduleOnce(function() {
            self.winAnimation.active = false;
          }, 4.5 + 1.5 * this._dragonAnimtaionNum);
        } else {
          cc.log("22222222222222222222222222222222");
          this.scheduleOnce(function() {
            this.loseAnimation.active = true;
            var anim = this.loseAnimation.getComponent(dragonBones.ArmatureDisplay);
            anim.playAnimation("newAnimation", 1);
          }, chuntianTime + 1.5 * this._dragonAnimtaionNum);
        }
        cc.log("44444444444444444444444: ", this._dragonAnimtaionNum, " 5555: ", myScore);
        var AnimationDelayTime = 3 * this._dragonAnimtaionNum + 2 + chuntianTime;
        sendEvent("AnimationDelayTime", AnimationDelayTime);
      },
      getJiaofenImg: function getJiaofenImg(num) {
        var img = "";
        switch (parseInt(num)) {
         case 1:
          img = "resources/ddz/UI/common/artword/artword_1fen.png";
          break;

         case 2:
          img = "resources/ddz/UI/common/artword/artword_2fen.png";
          break;

         case 3:
          img = "resources/ddz/UI/common/artword/artword_3fen.png";
          break;

         case 4:
          img = "resources/ddz/UI/common/artword/artword_bujiao.png";
        }
        return img;
      },
      showWarningNode: function showWarningNode(data) {
        var player = GameData.getPlayerByPos("down");
        var warningNode = cc.find("warning0", this.warningNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.showWarningContent(player, warningNode, data);
          this.play_layer_down.active = true;
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        warningNode = cc.find("warning1", this.warningNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.showWarningContent(player, warningNode, data);
          this.play_layer_right.active = true;
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        warningNode = cc.find("warning2", this.warningNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.showWarningContent(player, warningNode, data);
          this.play_layer_left.active = true;
        } else this.play_layer_left.active = false;
      },
      showWarningContent: function showWarningContent(player, node, data) {
        var uid = data.detail.uid;
        var playerSex = GameData.getPlayerSexByUid(uid);
        var baodanNum = data.detail.baodan;
        this.scheduleOnce(function() {
          soundMngr.instance.playOtherAudioPoker("baojing" + baodanNum, playerSex);
        }, 1);
        if (uid == player.uid) {
          node.active = true;
          var anima = node.getComponent(cc.Animation);
          anima.play("warningAnimation");
        }
      },
      reconneShowWarning: function reconneShowWarning() {
        var player = GameData.getPlayerByPos("down");
        var warningNode = cc.find("warning0", this.warningNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.reconneShowWarningContent(player, warningNode);
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        warningNode = cc.find("warning1", this.warningNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.reconneShowWarningContent(player, warningNode);
          this.play_layer_right.active = true;
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("left");
        warningNode = cc.find("warning2", this.warningNode);
        if (player && GameDataTJDDZ.cards[player.uid]) {
          this.reconneShowWarningContent(player, warningNode);
          this.play_layer_left.active = true;
        } else this.play_layer_left.active = false;
      },
      reconneShowWarningContent: function reconneShowWarningContent(player, node) {
        var cardNum = GameDataTJDDZ.getHandCardNum(player.uid);
        if (cardNum <= 2 && cardNum > 0) {
          node.active = true;
          var anima = node.getComponent(cc.Animation);
          anima.play("warningAnimation");
        } else node.active = false;
      },
      hideWarningNode: function hideWarningNode(uid) {
        var warningNode;
        var cardNum = GameDataTJDDZ.getHandCardNum(uid);
        var pos = GameDataTJDDZ.getPosByUid(uid);
        switch (pos) {
         case "down":
          warningNode = cc.find("warning0", this.warningNode);
          break;

         case "right":
          warningNode = cc.find("warning1", this.warningNode);
          break;

         case "left":
          warningNode = cc.find("warning2", this.warningNode);
        }
        0 == cardNum && (warningNode.active = false);
      },
      showDisCardType: function showDisCardType(data) {
        var DiscardType = data.detail.type;
        var multiple = data.detail.multiple;
        this.hideWarningNode(data.detail.uid);
        this._dragonAnimtaionNum = 0;
        var playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        soundMngr.instance.playAudioPokerDisType(data, playerSex, this._effcetFlag);
        soundMngr.instance.playOtherAudioPoker("discard", null);
        if ("aircraft" == DiscardType.substring(0, DiscardType.length - 1) || "aircraft" == DiscardType || "tribletraights" == DiscardType) {
          soundMngr.instance.playOtherAudioPoker("plane", null);
          this.planeNode.active = true;
          this._dragonAnimtaionNum++;
          this.DDZplayAnimation(this.planeNode, 1.5);
        }
        if ("bomb" == DiscardType) {
          this._dragonAnimtaionNum++;
          soundMngr.instance.playOtherAudioPoker("bomb", null);
          this.DDZplayAnimation(this.bobmAinmation, 2);
        }
        if ("jokerBomb" == DiscardType) {
          this._dragonAnimtaionNum++;
          soundMngr.instance.playOtherAudioPoker("bomb", null);
          this.DDZplayAnimation(this.huojianAinmation, 1.7);
        }
        this.changeMultiple(multiple);
      },
      changeMultiple: function changeMultiple(num) {
        if (void 0 == num) return;
        var multipleNum = cc.find("multipleNum", this.multipleNode);
        this.showNodeChild(this.multipleNode);
        multipleNum.getComponent(cc.Label).string = "X" + num;
      },
      showNodeChild: function showNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = true;
      },
      setDisPokerArry: function setDisPokerArry(data) {
        var pokerArry = data.detail;
        this.disPokerArry = [];
        cc.log("pokerArry:" + pokerArry);
        for (var i = 0; i < pokerArry.length; i++) {
          var pokerName = pokerArry[i];
          for (var key in this.handCardLayOut.children) pokerName == this.handCardLayOut.children[key].name && true == this.handCardLayOut.children[key].active && this.disPokerArry.push(this.handCardLayOut.children[key]);
        }
      },
      DDZplayAnimation: function DDZplayAnimation(animNode, delaytime) {
        animNode.active = true;
        var anima = animNode.getComponent(dragonBones.ArmatureDisplay);
        anima.playAnimation("newAnimation", 1);
        this.scheduleOnce(function() {
          animNode.active = false;
        }, delaytime);
      },
      resetPokerPos: function resetPokerPos() {
        var cardsNode = cc.find("cardHand/handLayout", this.play_layer_down);
        for (var key in cardsNode.children) cardsNode.children[key].y = this.defaultPokerY;
        this.disPokerArry.splice(0, this.disPokerArry.length);
      },
      DoubleClick: function DoubleClick() {
        var time = new Date().getTime();
        if (time - this._currTime < 500) {
          this.resetPokerPos();
          this.disPokerArry = [];
        }
        this._currTime = time;
      },
      showHintCard: function showHintCard(data) {
        var cards = data.detail.cards;
        var uid = data.detail.uid;
        this.disPokerArry = [];
        var downHandCardNode = cc.find("layer_down/cardHand/handLayout", this.cardsNode);
        for (var key in downHandCardNode.children) downHandCardNode.children[key].y = this.defaultPokerY;
        for (var key in downHandCardNode.children) {
          var card = downHandCardNode.children[key].getComponent("Card");
          for (var i = 0; i < cards.length; i++) if (card.id == cards[i] && true == downHandCardNode.children[key].active) {
            downHandCardNode.children[key].y += 30;
            this.disPokerArry.push(downHandCardNode.children[key]);
          }
        }
      },
      stopClockMusic: function stopClockMusic() {
        this.unschedule(this.runCountDown);
        this.hideNodeChild(this.clockNodes);
      },
      getRuleStr: function getRuleStr() {
        if (GameData.room.opts) return getRuleStrTJDDZ(GameData.room.opts);
      },
      addDizhuSign: function addDizhuSign(node, type) {
        var dizhuSign = cc.instantiate(this.dizhuSign);
        "dis" == type && dizhuSign.setPosition(cc.p(-40, 45));
        node.addChild(dizhuSign);
      },
      removeDizhuSign: function removeDizhuSign(node) {
        node.removeAllChildren(true);
      },
      connectRecurrence: function connectRecurrence() {
        var flag = false;
        GameData.room.opts && (flag = true);
        if (!flag) return;
        true == GameData.room.opts.kicking && this.connectTiChuai();
      },
      connectTiChuai: function connectTiChuai() {
        if (GameDataTJDDZ.isEmptyObject(GameData.joinContact)) return;
        if (GameDataTJDDZ.isEmptyObject(GameDataTJDDZ.kicking)) return;
        if (GameData.joinContact.uid != GameData.player.uid) return;
        for (var key in GameDataTJDDZ.kicking.kicking) if (key == GameData.player.uid) {
          this.tiBtnNode.active = false;
          this.chuaiBtnNode.active = false;
          return;
        }
        if (GameDataTJDDZ.game.dizhuUid == GameData.player.uid) if (2 == GameDataTJDDZ.objectLen(GameDataTJDDZ.kicking.kicking)) {
          this.showWatch();
          var index = 0;
          for (var key in GameDataTJDDZ.kicking.kicking) 0 == GameDataTJDDZ.kicking.kicking[key] && index++;
          this.chuaiBtnNode.active = 2 != index;
        } else true == GameDataTJDDZ.kicking.flag, this.chuaiBtnNode.active = false; else {
          this.showWatch();
          this.tiBtnNode.active = true;
        }
      },
      onTiBtnChecked: function onTiBtnChecked(evt, customEventData) {
        this.tiBtnNode.active = false;
        this.stopClockMusic();
        TJDDZHandler.getInstance().requestTiChuai(customEventData, function(rtn) {
          cc.log("tiBtn rtn: ", rtn);
        });
      },
      onChuaiBtnChecked: function onChuaiBtnChecked(evt, customEventData) {
        this.chuaiBtnNode.active = false;
        this.stopClockMusic();
        TJDDZHandler.getInstance().requestTiChuai(customEventData, function(rtn) {
          cc.log("chuaiBtn rtn: ", rtn);
        });
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "TingTip-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d37fb9UPmNKAb8IDSZkA+GK", "TingTip-shishi");
    "use strict";
    var RuleHandler = require("ruleHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        tingNode: cc.Node,
        bg: cc.Node,
        cardTemplate: cc.Node,
        totalLeftLabel: cc.Label,
        huSprite: cc.Sprite
      },
      onLoad: function onLoad() {
        this.bgHeight = this.bg.height;
        this.huPosition = this.huSprite.node.position;
        this.totalLeftLabelPosition = this.totalLeftLabel.node.position;
        this.cardNodeList = [];
        this.cardTemplate.active = false;
        this.selectCard = -1;
      },
      show: function show(selectCard, tingData) {
        var huCards = [], showCards = [], tempCards = {}, totalLeft = 0;
        for (var i = 0; i < tingData.length; i++) {
          var data = tingData[i];
          if (data.discard == selectCard) {
            huCards = data.ting;
            break;
          }
        }
        if (!(huCards.length > 0)) {
          this.tingNode.active = false;
          return;
        }
        this.tingNode.active = true;
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.destroy();
        }
        this.cardNodeList.splice(0, this.cardNodeList.length);
        for (var t = 0; t < huCards.length; t++) {
          var item = huCards[t];
          var key = item.type.toString();
          "4" === key && (key = "3");
          tempCards[key] = tempCards[key] || [];
          tempCards[key].push(item);
        }
        for (var i in tempCards) {
          var item = tempCards[i];
          if (item.length >= 15) showCards.push({
            obcard: -1,
            score: item[0].score
          }); else for (var n in item) showCards.push({
            obcard: item[n].obcard,
            score: item[n].score
          });
        }
        showCards.sort(function(a, b) {
          return b.score - a.score;
        });
        var anyIdx = -1;
        for (var i = 0; i < showCards.length; i++) {
          if (-1 == showCards[i].obcard) {
            anyIdx = i;
            continue;
          }
          var obcard = showCards[i].obcard;
          var score = showCards[i].score;
          var leftCount = this.leftCard(obcard);
          totalLeft += leftCount;
          this.showCardNode(obcard, score, leftCount);
        }
        if (anyIdx >= 0) {
          var obcard = "renyi";
          var score = showCards[anyIdx].score;
          var leftCount = GameData.game.cardleft - totalLeft;
          totalLeft = GameData.game.cardleft - 16 - GameData.getAllGangNumber();
          this.showCardNode(obcard, score, leftCount);
        }
        var totalLeftLabel = cc.find("totalLeftLabel", this.tingNode);
        totalLeftLabel.getComponent(cc.Label).string = "剩余" + totalLeft + "张";
        var length = this.cardNodeList.length;
        var oneRowCount = length > 4 ? Math.ceil(length / 2) : length;
        var lineCount = Math.ceil(length / oneRowCount);
        this.bg.width = 200 + 90 * oneRowCount;
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.x = this.cardTemplate.x + i % oneRowCount * 90 - 90 * oneRowCount / 2;
          cardNode.y = length > 4 ? this.cardTemplate.y - 154 * Math.floor(i / oneRowCount) + 152 : this.cardTemplate.y - 154 * Math.floor(i / oneRowCount);
        }
        if (length > 4) {
          this.bg.height = 370;
          this.huSprite.node.x = this.huPosition.x - 90 * oneRowCount / 2;
          this.huSprite.node.y = this.huPosition.y + 76;
          this.totalLeftLabel.node.x = this.totalLeftLabelPosition.x - 90 * oneRowCount / 2;
          this.totalLeftLabel.node.y = this.totalLeftLabelPosition.y + 76;
        } else {
          this.bg.height = this.bgHeight;
          this.huSprite.node.x = this.huPosition.x - 90 * oneRowCount / 2;
          this.huSprite.node.y = this.huPosition.y;
          this.totalLeftLabel.node.x = this.totalLeftLabelPosition.x - 90 * oneRowCount / 2;
          this.totalLeftLabel.node.y = this.totalLeftLabelPosition.y;
        }
        this.selectCard = selectCard;
      },
      getTingSelectCard: function getTingSelectCard() {
        return this.selectCard;
      },
      getTingNodeActive: function getTingNodeActive() {
        return this.tingNode.active;
      },
      hide: function hide() {
        this.tingNode.active = false;
        this.selectCard = -1;
      },
      showCardNode: function showCardNode(card, score, left) {
        var cardNode = cc.instantiate(this.cardTemplate);
        var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cc.find("scoreLabel", cardNode).getComponent(cc.Label).string = score + "分";
        cc.find("leftLabel", cardNode).getComponent(cc.Label).string = left + "张";
        cc.find("mask", cardNode).active = 0 == left;
        cardNode.active = true;
        this.tingNode.addChild(cardNode);
        this.cardNodeList.push(cardNode);
      },
      leftCard: function leftCard(obcard) {
        var knowCount = 0;
        var cards = GameData.getMyHandCards();
        for (var key in cards) obcard == key && (knowCount += cards[key]);
        for (var index = 0; index < GameData.joiners.length; index++) {
          var player = GameData.joiners[index];
          if (!player) continue;
          var uid = player.uid;
          var disCards = GameData.getDisCards(uid);
          var chiCards = GameData.getChiCards(uid);
          var pengCards = GameData.getPengCards(uid);
          var gangCards = GameData.getGangCards(uid);
          for (var key in disCards) obcard == disCards[key] && (knowCount += 1);
          for (var key in chiCards) {
            var chiArray = chiCards[key];
            if (void 0 == chiArray || chiArray.length <= 0) continue;
            for (var ii in chiArray) if (obcard == chiArray[ii]) {
              knowCount += 1;
              break;
            }
          }
          for (var key in pengCards) obcard == pengCards[key][0] && (knowCount += 3);
          for (var key in gangCards) {
            if (4 != gangCards[key].length) continue;
            obcard == gangCards[key][0] && (knowCount += 4);
          }
        }
        var leftCount = 4 - knowCount;
        leftCount = leftCount <= 0 ? 0 : leftCount;
        return leftCount;
      }
    });
    cc._RF.pop();
  }, {
    ruleHandler: "ruleHandler"
  } ],
  TingTip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8afciFIxFLYJEUpv18Dm2T", "TingTip");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        tingNode: cc.Node,
        bg: cc.Node,
        nbg: cc.Node,
        cardTemplate: cc.Node
      },
      onLoad: function onLoad() {
        this.bgHeight = this.bg.height;
        this.nbgHeight = this.nbg.height;
        this.cardNodeList = [];
        this.cardTemplate.active = false;
      },
      show: function show(selectCard, tingData) {
        var huCards = [], showCards = [], tempCards = {}, totalLeft = 0;
        for (var i = 0; i < tingData.length; i++) {
          var data = tingData[i];
          if (data.discard == selectCard) {
            huCards = data.ting;
            break;
          }
        }
        if (!(huCards.length > 0)) {
          this.tingNode.active = false;
          return;
        }
        this.tingNode.active = true;
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.destroy();
        }
        this.cardNodeList.splice(0, this.cardNodeList.length);
        for (var t = 0; t < huCards.length; t++) {
          var item = huCards[t];
          var key = item.type.toString();
          "4" === key && (key = "3");
          tempCards[key] = tempCards[key] || [];
          tempCards[key].push(item);
        }
        for (var i in tempCards) {
          var item = tempCards[i];
          if (item.length >= 15) showCards.push({
            obcard: -1,
            score: item[0].score
          }); else for (var n in item) showCards.push({
            obcard: item[n].obcard,
            score: item[n].score
          });
        }
        showCards.sort(function(a, b) {
          return b.score - a.score;
        });
        var anyIdx = -1;
        for (var i = 0; i < showCards.length; i++) {
          if (-1 == showCards[i].obcard) {
            anyIdx = i;
            continue;
          }
          var obcard = showCards[i].obcard;
          var score = showCards[i].score;
          var leftCount = this.leftCard(obcard);
          totalLeft += leftCount;
          this.showCardNode(obcard, score, leftCount);
        }
        if (anyIdx >= 0) {
          var obcard = "renyi";
          var score = showCards[anyIdx].score;
          var leftCount = GameData.game.cardleft - totalLeft;
          totalLeft = GameData.game.cardleft;
          this.showCardNode(obcard, score, leftCount);
        }
        cc.find("totalLeftLabel", this.tingNode).getComponent(cc.Label).string = "剩余" + totalLeft + "张";
        var length = this.cardNodeList.length;
        var oneRowCount = length > 4 ? Math.ceil(length / 2) : length;
        var lineCount = Math.ceil(length / oneRowCount);
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.x = this.cardTemplate.x + i % oneRowCount * 90;
          cardNode.y = this.cardTemplate.y - 154 * Math.floor(i / oneRowCount);
        }
        this.nbg.width = 90 * oneRowCount;
        this.bg.width = 220 + this.nbg.width;
        if (length > 4) {
          this.bg.height = 370;
          this.nbg.height = 300;
        } else {
          this.bg.height = this.bgHeight;
          this.nbg.height = this.nbgHeight;
        }
      },
      hide: function hide() {
        this.tingNode.active = false;
      },
      showCardNode: function showCardNode(card, score, left) {
        var cardNode = cc.instantiate(this.cardTemplate);
        var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cc.find("scoreLabel", cardNode).getComponent(cc.Label).string = score + "分";
        cc.find("leftLabel", cardNode).getComponent(cc.Label).string = left + "张";
        cc.find("mask", cardNode).active = 0 == left;
        cardNode.active = true;
        this.tingNode.addChild(cardNode);
        this.cardNodeList.push(cardNode);
      },
      leftCard: function leftCard(obcard) {
        var knowCount = 0;
        var cards = GameData.getMyHandCards();
        for (var key in cards) obcard == key && (knowCount += cards[key]);
        for (var index = 0; index < GameData.joiners.length; index++) {
          var player = GameData.joiners[index];
          if (!player) continue;
          var uid = player.uid;
          var disCards = GameData.getDisCards(uid);
          var pengCards = GameData.getPengCards(uid);
          var gangCards = GameData.getGangCards(uid);
          for (var key in disCards) obcard == disCards[key] && (knowCount += 1);
          for (var key in pengCards) obcard == pengCards[key][0] && (knowCount += 3);
          for (var key in gangCards) obcard == gangCards[key][0] && (knowCount += 4);
        }
        var leftCount = 4 - knowCount;
        leftCount = leftCount <= 0 ? 0 : leftCount;
        return leftCount;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    ruleHandler: "ruleHandler"
  } ],
  "TuiDaoHu-Data": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48505JJbP1N3pbnGf21JtLz", "TuiDaoHu-Data");
    "use strict";
    var MahjongData = function MahjongData() {
      this.cards = {};
      this.game = {
        roundType: 0,
        roundNum: 0,
        roundmax: 0,
        zhuangUid: 0,
        cardleft: 0,
        turn: 0,
        wildcard: [],
        lastdisUid: 0,
        lastdisCard: 0,
        winnerUid: 0,
        winnerType: 0,
        obtain: 0
      };
      this.passAction = {
        lastUid: 0,
        fromCard: 0,
        action: [],
        checkCards: []
      };
      this.actionType = false;
      this.actionEffect = {
        uid: null,
        card: null,
        action: null
      };
      this.scores = {};
    };
    module.exports = new MahjongData();
    MahjongData.prototype.getGameInfoData = function() {
      return this.game;
    };
    MahjongData.prototype.getPlayerCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid];
    };
    MahjongData.prototype.getChiCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["chi"];
    };
    MahjongData.prototype.getPengCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["peng"];
    };
    MahjongData.prototype.getGangCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["gang"];
    };
    MahjongData.prototype.getHandCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["hand"];
    };
    MahjongData.prototype.getHandCardNum = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["handnum"];
    };
    MahjongData.prototype.getDisCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["dis"];
    };
    MahjongData.prototype.getPassActionsData = function() {
      return this.passAction;
    };
    MahjongData.prototype.getActionsType = function() {
      return this.actionType;
    };
    MahjongData.prototype.getActionEffectData = function() {
      return this.actionEffect;
    };
    MahjongData.prototype.getGameScoreData = function() {
      return this.scores;
    };
    MahjongData.prototype.onGameInfoSetData = function(data) {
      if (void 0 == data) return;
      this.game.roundType = data.roundType;
      this.game.roundNum = data.roundNum;
      this.game.roundmax = data.roundmax;
      this.game.zhuangUid = data.zhuang;
      this.game.cardleft = data.cardleft;
      this.game.turn = data.turn;
      this.game.wildcard = data.wildcard;
      this.game.lastdisUid = data.disuid;
      this.game.lastdisCard = data.discard;
    };
    MahjongData.prototype.onGameStartSetData = function(data) {
      if (void 0 == data) return;
      this.game.gameStart = true;
      this.passAction.lastUid = 0;
      this.passAction.fromCard = 0;
      this.passAction.action = [];
      this.passAction.checkCards = [];
    };
    MahjongData.prototype.onGameScoreSetData = function(data) {
      if (void 0 == data) return;
      this.scores = data;
      this.game.gameStart = false;
    };
    MahjongData.prototype.onGamePassSetData = function(data) {
      if (void 0 == data) return;
      this.passAction.lastUid = data.uid;
      this.passAction.fromCard = data.card;
      this.passAction.action = data.act;
      this.actionType = false;
    };
    MahjongData.prototype.onGameActionSetData = function(data) {
      if (void 0 == data) return;
      this.passAction.action = data.act;
      this.actionType = true;
    };
    MahjongData.prototype.initCardHandSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["hand"] = data.hand;
      this.game.obtain = data.obtain;
    };
    MahjongData.prototype.initCardHandNumSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["handnum"] = data.num;
    };
    MahjongData.prototype.initCardChiSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["chi"] = data.chi;
    };
    MahjongData.prototype.initCardPengSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["peng"] = data.peng;
    };
    MahjongData.prototype.initCardGangSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["gang"] = data.gang;
    };
    MahjongData.prototype.initCardDisSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["dis"] = data.dis;
    };
    MahjongData.prototype.setActionEffect = function(action, data) {
      if (void 0 == action || void 0 == data) return;
      this.actionEffect.uid = data.player;
      this.actionEffect.card = data.card;
      this.actionEffect.action = action;
    };
    MahjongData.prototype.onCardDisSetData = function(data) {
      this.setActionEffect("dis", data);
    };
    MahjongData.prototype.onCardChiSetData = function(data) {
      this.setActionEffect("chi", data);
    };
    MahjongData.prototype.onCardPengSetData = function(data) {
      this.setActionEffect("peng", data);
    };
    MahjongData.prototype.onCardGangMingSetData = function(data) {
      this.setActionEffect("gang", data);
    };
    MahjongData.prototype.onCardGangAnSetData = function(data) {
      this.setActionEffect("gang", data);
    };
    MahjongData.prototype.onCardGangBuSetData = function(data) {
      this.setActionEffect("gang", data);
    };
    MahjongData.prototype.onCardHuSetData = function(data) {
      this.setActionEffect("hu", data);
    };
    cc._RF.pop();
  }, {} ],
  "TuiDaoHu-Protocol": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6229bIJafNBc7+zFYtcP3kp", "TuiDaoHu-Protocol");
    "use strict";
    var game = require("gameConfig");
    var errorCode = require("errorCode");
    var MahjongProtocol = module.exports;
    MahjongProtocol.requestDisCard = function(card, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.discard", {
        card: card
      }, function(rtn) {
        cc.log("room.hzhmjHandler.discard:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestPass = function(callback) {
      GameNet.getInstance().request("room.hzhmjHandler.pass", {}, function(rtn) {
        cc.log("room.hzhmjHandler.pass response:%d", rtn.result);
        rtn.result == errorCode.Fail && createMoveMessage("请等待其他玩家选择");
        callback(rtn);
      });
    };
    MahjongProtocol.requestChiCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.chi", {
        cards: actionData.cards
      }, function(rtn) {
        cc.log("room.hzhmjHandler.chi response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestPengCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.peng", {}, function(rtn) {
        cc.log("room.hzhmjHandler.peng response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestAnGangCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.gangAn", {
        card: actionData.cards
      }, function(rtn) {
        cc.log("room.hzhmjHandler.gangAn response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestMingGangCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.gangMing", {}, function(rtn) {
        cc.log("room.hzhmjHandler.gangMing response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestBuGangCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.gangBu", {
        card: actionData.cards
      }, function(rtn) {
        cc.log("room.hzhmjHandler.gangBu response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestDianPao = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.dianPao", {}, function(rtn) {
        cc.log("room.hzhmjHandler.dianPao response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.requestHu = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.hu", {}, function(rtn) {
        cc.log("room.hzhmjHandler.hu response:%d", rtn.result);
        callback(rtn);
      });
    };
    MahjongProtocol.registMessage = function() {
      GameNet.getInstance().setCallBack("hzhmj-onGameInfo", function(data) {
        game.getGameData().onGameInfoSetData(data);
        sendEvent("onGameInfo", data);
        sendEvent("onGameTurn");
        sendEvent("updateCards");
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardHand", function(data) {
        game.getGameData().initCardHandSetData(data);
        sendEvent("initCardHand", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardHandNum", function(data) {
        game.getGameData().initCardHandNumSetData(data);
        sendEvent("initCardHandNum", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardChi", function(data) {
        game.getGameData().initCardChiSetData(data);
        sendEvent("initCardChi", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardPeng", function(data) {
        game.getGameData().initCardPengSetData(data);
        sendEvent("initCardPeng", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardGang", function(data) {
        game.getGameData().initCardGangSetData(data);
        sendEvent("initCardGang", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardDis", function(data) {
        game.getGameData().initCardDisSetData(data);
        sendEvent("initCardDis", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGamePass", function(data) {
        game.getGameData().onGamePassSetData(data);
        sendEvent("onGamePass", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGameAction", function(data) {
        game.getGameData().onGameActionSetData(data);
        sendEvent("onGameAction", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardDis", function(data) {
        game.getGameData().setActionEffect("dis", data);
        sendEvent("onCardDis", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardChi", function(data) {
        game.getGameData().setActionEffect("chi", data);
        sendEvent("onCardChi", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardPeng", function(data) {
        game.getGameData().setActionEffect("peng", data);
        sendEvent("onCardPeng", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardGangAn", function(data) {
        game.getGameData().setActionEffect("gang", data);
        sendEvent("onCardGangAn", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardGangMing", function(data) {
        game.getGameData().setActionEffect("gang", data);
        sendEvent("onCardGangMing", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardGangBu", function(data) {
        game.getGameData().setActionEffect("gang", data);
        sendEvent("onCardGangBu", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardHu", function(data) {
        game.getGameData().setActionEffect("hu", data);
        sendEvent("onCardHu", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGameStart", function(data) {
        game.getGameData().onGameStartSetData(data);
        sendEvent("onGameStart", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGameScore", function(data) {
        game.getGameData().onGameScoreSetData(data);
        sendEvent("onGameScore", data);
      });
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    gameConfig: "gameConfig"
  } ],
  "TuiDaoHu-Rules": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50c8cfvxZREga2bHXhdvqjS", "TuiDaoHu-Rules");
    "use strict";
    var game = require("gameConfig");
    var roomHandler = require("roomHandler");
    var MjCards = {
      tiao: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
      wan: [ 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
      tong: [ 21, 22, 23, 24, 25, 26, 27, 28, 29 ],
      feng: [ 31, 41, 51, 61 ],
      jian: [ 71, 81, 91 ],
      hua: [ 111, 112, 113, 114, 121, 122, 123, 124 ]
    };
    var Mahjong = module.exports;
    Mahjong.isWildCard = function(card) {
      return -1 != game.getGameData().game.wildcard.indexOf(card);
    };
    Mahjong.getWildCards = function() {
      return game.getGameData().game.wildcard;
    };
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig",
    roomHandler: "roomHandler"
  } ],
  TuiDaoHu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de6a74ynkJIYYD/GfXWL2DT", "TuiDaoHu");
    "use strict";
    var MahjongData = require("TuiDaoHu-Data");
    var MahjongRules = require("TuiDaoHu-Rules");
    var MahjongProtocol = require("TuiDaoHu-Protocol");
    var exp = {
      name: "推到胡麻将",
      language: {
        name: "中国话"
      },
      prefabs: {
        wifiView: "views/room/common/WifiView",
        powerView: "views/room/common/PowerView",
        timeView: "views/room/common/TimeView",
        roomNumView: "views/room/common/RoomNumView",
        ruleView: "views/room/common/RuleView",
        ruleTipsView: "views/room/common/RuleTipsView",
        chatView: "views/common/ChatView",
        talkView: "views/common/TalkView",
        settingView: "views/common/SettingView",
        dissolveView: "views/room/common/DissolveView",
        headView: "views/room/mahjong/HeadView",
        waitView: "views/room/mahjong/WaitView",
        prepareView: "views/room/mahjong/PrepareView",
        cardsView: "views/room/mahjong/CardsView",
        wildCard1View: "views/room/mahjong/WildCard1View",
        directionView: "views/room/mahjong/DirectionView",
        cardActionView: "views/room/mahjong/CardActionView",
        debugView: "views/room/mahjong/DebugView",
        resultView: "views/room/mahjong/ResultView",
        summaryView: "views/room/mahjong/SummaryView"
      },
      views: {
        base: [ "talkView", "wifiView", "powerView", "timeView", "roomNumView", "ruleView" ],
        wait: [ "waitView", "headView", "prepareView", "ruleTipsView" ],
        game: [ "wildCard1View", "directionView", "cardsView", "headView", "ruleTipsView", "cardActionView" ],
        ready: [ "headView", "directionView", "prepareView", "ruleTipsView" ]
      },
      chat: {
        talks: [ "嘛钱不钱的，乐呵乐呵得了。", "哎呀，出错牌了。", "怒了啊，怒了啊。", "今儿运气不错啊，没少赢。", "楞嘛神儿！快点吧，花都谢了。", "我要加油了啊。", "这牌打的没谁了，谢了啊。", "还让不让人活了，我要发威了", "今儿输的太多了，太点背了。", "土豪，咱们做朋友吧。", "等下哈，我考虑考虑出嘛。", "不好意思啊。" ],
        soundKeys: [ "card_K_1", "card_K_2", "card_K_3", "card_K_4", "card_K_5", "card_K_6", "card_K_7", "card_K_8", "card_K_9", "card_K_10", "card_K_11", "card_K_12" ]
      },
      actions: {
        chi: {
          type: "chi",
          icon: "resources/table/action/chi.png",
          spine: "spine/table/chi",
          animate: "a",
          request_fn: "requestChiCard"
        },
        peng: {
          type: "peng",
          icon: "resources/table/action/peng.png",
          spine: "spine/table/peng",
          animate: "animation",
          request_fn: "requestPengCard"
        },
        minggang: {
          type: "gang",
          icon: "resources/table/action/gang.png",
          spine: "spine/table/gang",
          animate: "a",
          request_fn: "requestMingGangCard"
        },
        angang: {
          type: "gang",
          icon: "resources/table/action/gang.png",
          spine: "spine/table/gang",
          animate: "a",
          request_fn: "requestAnGangCard"
        },
        bugang: {
          type: "gang",
          icon: "resources/table/action/gang.png",
          spine: "spine/table/gang",
          animate: "a",
          request_fn: "requestBuGangCard"
        },
        zimo: {
          type: "hu",
          icon: "resources/table/action/hu.png",
          spine: "spine/table/hu",
          animate: "a",
          request_fn: "requestHu"
        },
        dianpao: {
          type: "hu",
          icon: "resources/table/action/hu.png",
          spine: "spine/table/hu",
          animate: "a",
          request_fn: "requestDianPao"
        }
      },
      resources: {
        wildIcon: "resources/newui/huier_icon.png"
      }
    };
    exp.getRuleStr = function(opts) {
      return getRuleStrHongZhong(opts);
    };
    exp.getRuleHandler = function() {
      return MahjongRules;
    };
    exp.getDataHandler = function() {
      return MahjongData;
    };
    exp.getProtocolHandler = function() {
      return MahjongProtocol;
    };
    module.exports = exp;
    cc._RF.pop();
  }, {
    "TuiDaoHu-Data": "TuiDaoHu-Data",
    "TuiDaoHu-Protocol": "TuiDaoHu-Protocol",
    "TuiDaoHu-Rules": "TuiDaoHu-Rules"
  } ],
  UIClub: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33159FAs7ZM04ogH5++Ys0S", "UIClub");
    "use strict";
    var configMgr = require("configMgr");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        inviteNode: cc.Node,
        applyNode: cc.Node,
        clubBtnNode: cc.Node,
        clubHead: cc.Prefab,
        clubHeadNode: cc.Node
      },
      onLoad: function onLoad() {
        this.initUIRule();
        this.registerListener();
        this.operaUIActive(1);
        this.refreshUIMyClub();
      },
      registerListener: function registerListener() {
        registEvent("refreshUIClubData", this, this.refreshUIMyClub);
        registEvent("refreshUIClubInvite", this, this.refreshUIApplyClub);
        registEvent("refreshUIClubApply", this, this.refreshUIApplyClub);
      },
      uiUpDate: function uiUpDate() {},
      initUIRule: function initUIRule() {
        var WXConfig = configMgr.getAgentWeChat();
        if (!WXConfig) return;
        var weixinStr = cc.find("applyClubPanel/BaseFrame1/LabelWeiXin", this.node);
        weixinStr.getComponent("cc.Label").string = WXConfig.agentConsult.number;
      },
      operaUIActive: function operaUIActive(type) {
        var applyClubPanel = cc.find("applyClubPanel", this.node);
        var myClubPanel = cc.find("myClubPanel", this.node);
        var myClubBtn = cc.find("btnTitleBg/myClubBtn", this.node);
        var applyClubBtn = cc.find("btnTitleBg/applyClubBtn", this.node);
        var myClubImg = cc.find("btnTitleBg/myClubImg", this.node);
        var applyClubImg = cc.find("btnTitleBg/applyClubImg", this.node);
        switch (type) {
         case 1:
          myClubBtn.active = true;
          applyClubImg.active = false;
          myClubPanel.active = true;
          applyClubBtn.active = false;
          myClubImg.active = false;
          applyClubPanel.active = false;
          break;

         case 2:
          myClubBtn.active = false;
          applyClubImg.active = false;
          myClubPanel.active = false;
          applyClubBtn.active = true;
          myClubImg.active = true;
          applyClubPanel.active = true;
        }
      },
      onUIMyClub: function onUIMyClub() {
        this.operaUIActive(1);
        this.refreshUIMyClub();
      },
      onUIApplyClub: function onUIApplyClub() {
        this.operaUIActive(2);
        this.refreshUIApplyClub();
      },
      refreshUIMyClub: function refreshUIMyClub() {
        if (!GameData.player.club) return;
        var clubNumber = Object.keys(GameData.player.club).length;
        var noneData = cc.find("myClubPanel/noneData", this.node);
        var clubImg = cc.find("myClubPanel/club_img", this.node);
        var BaseFrame = cc.find("myClubPanel/BaseFrame", this.node);
        var clubBtnScrollView = cc.find("myClubPanel/clubBtnScrollView", this.node);
        noneData.active = false;
        clubImg.active = false;
        BaseFrame.active = false;
        clubBtnScrollView.active = false;
        if (clubNumber <= 0) {
          noneData.active = true;
          return;
        }
        clubImg.active = true;
        BaseFrame.active = true;
        clubBtnScrollView.active = true;
        var clubData = GameData.player.club;
        var bigPanel = this.clubBtnNode.getChildByName("bigNode");
        var smallPanel = this.clubBtnNode.getChildByName("smallNode");
        bigPanel.active = false;
        smallPanel.active = true;
        var clubName = smallPanel.getChildByName("clubName");
        clubName.getComponent("cc.Label").string = clubData.clubName;
        this.refreshMyClubInfo();
      },
      refreshMyClubBtn: function refreshMyClubBtn(event) {
        soundMngr.instance.playAudioOther("button");
        var clubId = parseInt(event.target.tag);
        for (var key in this.clubBtnNode.parent.children) {
          var item = this.clubBtnNode.parent.children[key];
          if (!!item) {
            var bigPanel = item.getChildByName("bigNode");
            var smallPanel = item.getChildByName("smallNode");
            var big_clickImg = bigPanel.getChildByName("clickSprite");
            var small_clickImg = smallPanel.getChildByName("clickSprite");
            big_clickImg.active = false;
            small_clickImg.active = false;
          }
        }
        var clickImg = event.target.parent.getChildByName("clickSprite");
        clickImg.active = true;
        this.refreshMyClubInfo(clubId);
      },
      refreshMyClubInfo: function refreshMyClubInfo() {
        var clubData = GameData.player.club;
        if (null == clubData) {
          cc.log("data is null !! clubId = " + clubId);
          return;
        }
        var myClubPanel = cc.find("myClubPanel", this.node);
        var BaseFrame = cc.find("myClubPanel/BaseFrame", this.node);
        var clubName = cc.find("myClubPanel/BaseFrame/club_name", this.node);
        var clubMainName = cc.find("myClubPanel/BaseFrame/club_main_name", this.node);
        var clubID = cc.find("myClubPanel/BaseFrame/club_ID", this.node);
        var clubNumber = cc.find("myClubPanel/BaseFrame/club_number", this.node);
        var clubNotice = cc.find("myClubPanel/BaseFrame/club_notice", this.node);
        clubName.getComponent("cc.Label").string = clubData.clubName;
        clubMainName.getComponent("cc.Label").string = "代理:" + clubData.clubID;
        clubID.getComponent("cc.Label").string = "ID:" + clubData.clubID;
        clubNumber.getComponent("cc.Label").string = "人数:" + clubData.clubNumber;
        clubNotice.getComponent("cc.Label").string = clubData.clubNotify;
        void 0 != clubData.clubNotify && "null" != clubData.clubNotify || (clubNotice.getComponent("cc.Label").string = "此代理很懒，没有留下任何信息。");
        if (void 0 == this.clubHeadNode) {
          this.clubHeadNode = cc.instantiate(this.clubHead);
          myClubPanel.addChild(this.clubHeadNode);
          this.clubHeadNode.setScale(1.5);
          this.clubHeadNode.setPosition(cc.p(480, 430));
        }
        this.clubHeadNode.getComponent("playerTemplate").setName("");
        this.clubHeadNode.getComponent("playerTemplate").showZhuang(false);
        this.clubHeadNode.getComponent("playerTemplate").enableHeadBtn(false);
      },
      refreshUIApplyClub: function refreshUIApplyClub() {
        var noneData = cc.find("applyClubPanel/BaseFrame2/noneData", this.node);
        var inviteScrollView = cc.find("applyClubPanel/BaseFrame2/inviteScrollView", this.node);
        noneData.active = false;
        inviteScrollView.active = false;
        var inviteNumber = Object.keys(GameData.player.clubInvite).length;
        cc.log("inviteNumber:" + inviteNumber);
        inviteNumber <= 0 ? noneData.active = true : inviteScrollView.active = true;
        for (var ii in this.inviteNode.parent.children) {
          var item = this.inviteNode.parent.children[ii];
          !item || (item.active = false);
        }
        var interval_Y = 10;
        this.inviteNode.getParent().height = (this.inviteNode.height + interval_Y) * inviteNumber;
        var index_invite = 1e3;
        for (var key in GameData.player.clubInvite) {
          var clubData = GameData.player.clubInvite[key];
          if (void 0 == clubData) continue;
          var clubItem = this.inviteNode.parent.getChildByTag(index_invite);
          if (void 0 == clubItem) {
            clubItem = this.inviteNode;
            if (index_invite - 1e3 > 0) {
              clubItem = cc.instantiate(this.inviteNode);
              this.inviteNode.parent.addChild(clubItem);
              clubItem.setPosition(cc.p(this.inviteNode.x, this.inviteNode.y - (this.inviteNode.height + interval_Y) * (index_invite - 1e3)));
            }
          }
          clubItem.setTag(index_invite);
          clubItem.active = true;
          var clubName = clubItem.getChildByName("clubName");
          var noBtn = clubItem.getChildByName("noBtn");
          var yseBtn = clubItem.getChildByName("yseBtn");
          noBtn.setTag(clubData.club_id);
          yseBtn.setTag(clubData.club_id);
          clubName.getComponent("cc.Label").string = clubData.clubName;
          noBtn.on(cc.Node.EventType.TOUCH_END, this.noJoinClubClick, this);
          yseBtn.on(cc.Node.EventType.TOUCH_END, this.yesJoinClubClick, this);
          index_invite++;
        }
        var noneDataLabel = cc.find("applyClubPanel/BaseFrame3/noneData", this.node);
        var applyScrollView = cc.find("applyClubPanel/BaseFrame3/applyScrollView", this.node);
        noneDataLabel.active = false;
        applyScrollView.active = false;
        var applyNumber = Object.keys(GameData.player.clubApply).length;
        cc.log("applyNumber:" + applyNumber);
        applyNumber <= 0 ? noneDataLabel.active = true : applyScrollView.active = true;
        for (var jj in this.applyNode.parent.children) {
          var child = this.applyNode.parent.children[jj];
          !child || (child.active = false);
        }
        this.applyNode.getParent().height = (this.applyNode.height + interval_Y) * applyNumber;
        var index_apply = 2e3;
        for (var key in GameData.player.clubApply) {
          var clubData = GameData.player.clubApply[key];
          if (void 0 == clubData) continue;
          var clubItem = this.applyNode.parent.getChildByTag(index_apply);
          if (void 0 == clubItem) {
            clubItem = this.applyNode;
            if (index_apply - 2e3 > 0) {
              clubItem = cc.instantiate(this.applyNode);
              this.applyNode.parent.addChild(clubItem);
              clubItem.setPosition(cc.p(this.applyNode.x, this.applyNode.y - (this.applyNode.height + interval_Y) * (index_apply - 2e3)));
            }
          }
          clubItem.setTag(index_apply);
          clubItem.active = true;
          var clubName = clubItem.getChildByName("clubName");
          clubName.getComponent("cc.Label").string = clubData.clubName;
          index_apply++;
        }
      },
      noJoinClubClick: function noJoinClubClick(event) {
        soundMngr.instance.playAudioOther("button");
        var clubId = event.target.tag;
        cc.log("noJoin" + clubId);
        ClubHandler.getInstance().doInvite(clubId, false);
      },
      yesJoinClubClick: function yesJoinClubClick(event) {
        soundMngr.instance.playAudioOther("button");
        var clubId = event.target.tag;
        cc.log("yesJoin" + clubId);
        ClubHandler.getInstance().doInvite(clubId, true);
      },
      sendApply: function sendApply() {
        soundMngr.instance.playAudioOther("button");
        var applyId = cc.find("applyClubPanel/BaseFrame4/applyEditBox", this.node).getComponent(cc.EditBox).string;
        cc.log("sendApply" + applyId);
        ClubHandler.getInstance().reqJoinClub(applyId);
      },
      sendQuitClub: function sendQuitClub(event) {
        soundMngr.instance.playAudioOther("button");
        var clubId = event.target.tag;
        cc.log("sendQuitClub" + clubId);
        ClubHandler.getInstance().reqQuitClub(GameData.player.uid, clubId);
        this.clubHeadNode.active = false;
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView("PanelClub");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr"
  } ],
  UICoinRankingList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1af99mhvjVMqpqHD7rqcOmk", "UICoinRankingList");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var topHandler = require("topHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        scrollView: cc.ScrollView,
        item: cc.Node,
        selfRank: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("updateCoinTopList", this, this.onUpdateCoinTopListHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("updateCoinTopList", this, this.onUpdateCoinTopListHandler);
      },
      onEnable: function onEnable() {
        this.hideScrollViewChildren();
        openView("Loading");
        topHandler.getCoinTopList();
      },
      onUpdateCoinTopListHandler: function onUpdateCoinTopListHandler(data) {
        if (void 0 == data) return;
        closeView("Loading");
        this.updateUI(data.detail);
      },
      hideScrollViewChildren: function hideScrollViewChildren() {
        var content = this.scrollView.content;
        for (var i = 0; i < content.getChildrenCount(); i++) {
          var child = content.getChildren()[i];
          child && (child.active = false);
        }
      },
      updateUI: function updateUI(listData) {
        this.hideScrollViewChildren();
        if (void 0 == listData) return;
        var length = listData.length;
        var height = length * this.item.height;
        height < 450 ? height = 450 : null;
        var content = this.scrollView.content;
        content.height = height;
        var selfRank = void 0;
        var index = 0;
        for (var key = 0; key < length; key++) {
          var data = listData[key];
          if (void 0 == data) continue;
          var itemNode = content.getChildren()[index];
          if (void 0 == itemNode) {
            itemNode = cc.instantiate(this.item);
            itemNode.parent = content;
          }
          itemNode.active = true;
          itemNode.x = this.item.x;
          itemNode.y = this.item.y - this.item.height * index;
          this.updateScrollViewItem(index, data, itemNode);
          data.uid == GameData.player.uid && (selfRank = index);
          index++;
          this.updateSelfRank(selfRank);
        }
      },
      updateScrollViewItem: function updateScrollViewItem(index, data, node) {
        if (void 0 == index || void 0 == data || void 0 == node) return;
        var rankImg = cc.find("rankImg", node);
        var rankLabel = cc.find("rankLabel", node);
        var icon = cc.find("icon", node);
        var name = cc.find("name", node);
        var gold = cc.find("golds/golds_num", node);
        if (index < 3) {
          rankImg.active = true;
          rankLabel.active = false;
          this.loadUIImg(rankImg, this.getRankingImg(index));
        } else {
          rankImg.active = false;
          rankLabel.active = true;
          rankLabel.getComponent(cc.Label).string = index + 1;
        }
        this.LoadHeadIcon(icon, data.headimgurl);
        name.getComponent(cc.Label).string = data.name;
        gold.getComponent(cc.Label).string = data.coin;
      },
      updateSelfRank: function updateSelfRank(index) {
        this.selfRank.getComponent(cc.Label).string = void 0 == index ? "未上榜" : index;
      },
      loadUIImg: function loadUIImg(node, imgurl) {
        if (void 0 == node || void 0 == imgurl || imgurl.length <= 0) return;
        var texture = cc.textureCache.addImage(cc.url.raw(imgurl));
        texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      LoadHeadIcon: function LoadHeadIcon(node, imgurl) {
        if (void 0 == node || void 0 == imgurl || imgurl.length <= 0) return;
        cc.loader.load({
          url: imgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      getRankingImg: function getRankingImg(rank) {
        var url;
        switch (rank) {
         case 0:
          url = "resources/rankingList/coin/rank_1.png";
          break;

         case 1:
          url = "resources/rankingList/coin/rank_2.png";
          break;

         case 2:
          url = "resources/rankingList/coin/rank_3.png";
        }
        return url;
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    topHandler: "topHandler"
  } ],
  UICompetition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de84beAwvNF3pTH7R6Xr1GL", "UICompetition");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var competitionHandler = require("competitionHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        posterNode: cc.Node,
        posterPrefab: cc.Prefab,
        scrollView: cc.ScrollView,
        scrollViewItem: cc.Node,
        content: cc.Node
      },
      onLoad: function onLoad() {
        this.initPosterNode();
        this.initGameTypeNode();
        this.refreshTimeCD = 0;
      },
      onEnable: function onEnable() {
        this.scrollView.scrollToTopLeft(.1);
      },
      update: function update(dt) {
        this.refreshTimeCD += dt;
        this.refreshTimeCD >= 10 && (this.refreshTimeCD = 0);
      },
      initPosterNode: function initPosterNode() {
        var poster = this.posterNode.getChildByName("posterPrefab");
        if (null == poster) {
          poster = cc.instantiate(this.posterPrefab);
          poster.getComponent("PosterPrefab").initUI();
          poster.name = "posterPrefab";
          poster.parent = this.posterNode;
          poster.scale = .7;
        }
      },
      initGameTypeNode: function initGameTypeNode() {
        var gameList = this.getOpenGameList();
        for (var i = 0; i < gameList.length; i++) {
          var item = cc.find("item" + i, this.content);
          if (null == item) {
            item = cc.instantiate(this.scrollViewItem);
            item.parent = this.content;
            item.x = this.scrollViewItem.x + (this.scrollViewItem.width - 20) * i;
          }
          item.getComponent("selectGameItem").initUI(gameList[i], i + 1);
          var gameDetailBtn = cc.find("gameDetailBtn", item);
          gameDetailBtn.tag = i;
          gameDetailBtn.on(cc.Node.EventType.TOUCH_END, this.gameDetailClick, this);
        }
        this.content.width = (gameList.length + .2) * this.scrollViewItem.width;
      },
      getOpenGameList: function getOpenGameList() {
        var gameList = configMgr.getFightGameType();
        if (void 0 == gameList) return [];
        cc.log("..gameList:" + JSON.stringify(gameList));
        return gameList;
      },
      gameDetailClick: function gameDetailClick(eve) {
        var gameType = eve.target.tag + 1;
        cc.log("点击--\x3e" + gameType);
        openView("CompetitionDetail", null, function(detail) {
          detail.getComponent("CompetitionDetail").initUI(gameType);
        });
      },
      showRecordLayer: function showRecordLayer() {
        openView("CompetitionRecord");
      }
    });
    cc._RF.pop();
  }, {
    competitionHandler: "competitionHandler",
    configMgr: "configMgr",
    gameDefine: "gameDefine"
  } ],
  UIGroup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "664f1LG5TpGCIucBF1ivLfV", "UIGroup");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        create_btn: cc.Button,
        join_btn: cc.Button,
        back_btn: cc.Button
      },
      onLoad: function onLoad() {
        this.refreshCreateOrBackBtn();
        registEvent("onRoomClose", this, this.refreshCreateOrBackBtn);
      },
      onEnable: function onEnable() {},
      onDestroy: function onDestroy() {
        unregistEvent("onRoomClose", this, this.refreshCreateOrBackBtn);
      },
      refreshCreateOrBackBtn: function refreshCreateOrBackBtn() {
        GameData.roomClose && (GameData.player.roomid = void 0);
        if (void 0 == GameData.player.roomid || 0 == GameData.player.roomid) {
          this.create_btn.node.active = true;
          this.back_btn.node.active = false;
        } else {
          this.create_btn.node.active = false;
          this.back_btn.node.active = true;
        }
      },
      loadSpriteImg: function loadSpriteImg(sprite, imgUrl) {
        if (void 0 == sprite || void 0 == imgUrl || imgUrl.length <= 0) return;
        var texture = cc.textureCache.addImage(cc.url.raw(imgUrl));
        texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
      },
      createBtnClicked: function createBtnClicked(evt) {
        if (inCD(1e3)) return;
        soundMngr.instance.playAudioOther("button");
        openView("UICreate");
      },
      backBtnClicked: function backBtnClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        RoomHandler.enterRoom(GameData.player.roomid);
        this.refreshCreateOrBackBtn();
      },
      joinBtnClicked: function joinBtnClicked(evt) {
        if (inCD(1e3)) return;
        soundMngr.instance.playAudioOther("button");
        void 0 == GameData.player.roomid || GameData.player.roomid <= 0 ? openView("UIJoin") : createMessageBox("您已在房间中,不能加入别的房间,是否返回房间?", function() {
          RoomHandler.enterRoom(GameData.player.roomid);
        }, function() {});
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    roomHandler: "roomHandler"
  } ],
  UIMatch: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "010a6lJ7dNKXbV1zYCG55nj", "UIMatch");
    "use strict";
    var gameDefine = require("gameDefine");
    var matchHandler = require("matchHandler");
    var configMgr = require("configMgr");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.limit_time = 0;
      },
      initUITime: function initUITime() {
        var time = ++matchHandler.matchTime;
        var hour = parseInt(time / 3600);
        var minute = parseInt(time % 3600 / 60);
        var second = time % 3600 % 60;
        hour < 10 ? hour = "0" + hour : null;
        minute < 10 ? minute = "0" + minute : null;
        second < 10 ? second = "0" + second : null;
        var timeStr = hour + ": " + minute + ": " + second;
        this.timeLabel.string = timeStr;
      },
      update: function update(dt) {},
      onCancelClick: function onCancelClick() {
        if (inCD(500)) return;
        var self = this;
        soundMngr.instance.playAudioOther("button");
        matchHandler.cancel(function() {
          self.initUITime();
          closeView(self.node.name);
        });
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler"
  } ],
  UIPushGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84a2fDHve9BdKV2K2Xhb74J", "UIPushGame");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var errorCode = require("errorCode");
    cc.Class({
      extends: cc.Component,
      properties: {
        pushToggle: cc.Toggle,
        withDrawToggle: cc.Toggle,
        pushPanel: cc.Node,
        withDrawPanel: cc.Node,
        logPanel: cc.Node,
        moneyPanel: cc.Node,
        QRPanel: cc.Node,
        QRNode: cc.Node,
        QRCutNode: cc.Node,
        LinkNode: cc.Node,
        sliderNode: cc.Slider,
        progressBar: cc.ProgressBar,
        withdrawMoney: cc.EditBox,
        scrollView: cc.ScrollView,
        scrollItem: cc.Node,
        nameEditBox: cc.EditBox,
        cardEditBox: cc.EditBox
      },
      onLoad: function onLoad() {
        registEvent("onPlayerUpdate", this, this.refreshUIWithDrawPanel);
        this.logList = void 0;
        this.refreshUIPushPanel();
        this.refreshUIWithDrawPanel();
        this.refreshUILogPanel();
        this.refreshUIMoneyPanel();
      },
      onEnable: function onEnable() {
        this.initUIShow();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPlayerUpdate", this, this.refreshUIWithDrawPanel);
      },
      initUIShow: function initUIShow() {
        this.pushToggle.isChecked = true;
        this.withDrawToggle.isChecked = false;
        this.pushPanel.active = true;
        this.withDrawPanel.active = false;
        this.logPanel.active = false;
        this.moneyPanel.active = false;
      },
      refreshUIPushPanel: function refreshUIPushPanel() {
        if (void 0 == GameData.player.qrcodeUrl) {
          cc.log("QRCode is undefined");
          return;
        }
        this.LinkNode.getComponent(cc.Label).string = getShortStr(GameData.player.qrcodeUrl, 16);
        var qrcode = new QRCode(-1, QRErrorCorrectLevel.H);
        qrcode.addData(GameData.player.qrcodeUrl);
        qrcode.make();
        var ctx = this.QRNode.getComponent(cc.Graphics);
        ctx.fillColor = cc.Color.BLACK;
        var tileW = this.QRNode.width / qrcode.getModuleCount();
        var tileH = this.QRNode.height / qrcode.getModuleCount();
        for (var row = 0; row < qrcode.getModuleCount(); row++) for (var col = 0; col < qrcode.getModuleCount(); col++) if (qrcode.isDark(row, col)) {
          ctx.fillColor = cc.Color.BLACK;
          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);
          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);
          ctx.rect(Math.round(col * tileW), Math.round(row * tileH), w, h);
          ctx.fill();
        } else ctx.fillColor = cc.Color.WHITE;
        this.QRNode.rotation = 90;
        var qrcodeCut = new QRCode(-1, QRErrorCorrectLevel.H);
        qrcodeCut.addData(GameData.player.qrcodeUrl);
        qrcodeCut.make();
        var ctxCut = this.QRCutNode.getComponent(cc.Graphics);
        ctxCut.fillColor = cc.Color.BLACK;
        var tileWCut = this.QRNode.width / qrcode.getModuleCount();
        var tileHCut = this.QRNode.height / qrcode.getModuleCount();
        for (var rowCut = 0; rowCut < qrcode.getModuleCount(); rowCut++) for (var colCut = 0; colCut < qrcode.getModuleCount(); colCut++) if (qrcode.isDark(rowCut, colCut)) {
          ctxCut.fillColor = cc.Color.BLACK;
          var wCut = Math.ceil((colCut + 1) * tileWCut) - Math.floor(colCut * tileWCut);
          var hCut = Math.ceil((rowCut + 1) * tileWCut) - Math.floor(rowCut * tileWCut);
          ctxCut.rect(Math.round(colCut * tileWCut), Math.round(rowCut * tileHCut), wCut, hCut);
          ctxCut.fill();
        } else ctxCut.fillColor = cc.Color.WHITE;
        this.QRCutNode.rotation = 90;
      },
      refreshUIWithDrawPanel: function refreshUIWithDrawPanel() {
        var myMoney = cc.find("money", this.withDrawPanel);
        var havePushNumber = cc.find("havePushNumber", this.withDrawPanel);
        myMoney.getComponent(cc.Label).string = GameData.player.income || 0;
        havePushNumber.getComponent(cc.Label).string = GameData.player.lower || 0;
        this.sliderHandlerClick();
      },
      refreshUILogPanel: function refreshUILogPanel() {
        var list = this.logList;
        var content = this.scrollView.content;
        for (var ii = 0; ii < content.getChildrenCount(); ii++) {
          var child = content.getChildren()[ii];
          child && (child.active = false);
        }
        if (void 0 == list) return;
        var height = list.length * this.scrollItem.height;
        height < 265 ? height = 265 : null;
        content.height = height;
        var index = 0;
        for (var key in list) {
          var data = list[key];
          if (void 0 == data) return;
          var node = content.getChildren()[index];
          if (void 0 == node) {
            node = cc.instantiate(this.scrollItem);
            node.parent = content;
          }
          node.active = true;
          node.x = this.scrollItem.x;
          node.y = this.scrollItem.y - this.scrollItem.height * index;
          var timeLabel = cc.find("time", node);
          var moneyLabel = cc.find("money", node);
          var stateLabel = cc.find("state", node);
          timeLabel.getComponent(cc.Label).string = data.time;
          moneyLabel.getComponent(cc.Label).string = data.money.toFixed(1);
          switch (data.state) {
           case gameDefine.withdrawState.wait:
            stateLabel.getComponent(cc.Label).string = "待审核";
            stateLabel.color = cc.color(65, 92, 94);
            break;

           case gameDefine.withdrawState.succeed:
            stateLabel.getComponent(cc.Label).string = "已完成";
            stateLabel.color = cc.color(65, 92, 94);
            break;

           case gameDefine.withdrawState.fail:
            stateLabel.getComponent(cc.Label).string = "驳回";
            stateLabel.color = cc.color(255, 0, 0);
          }
          index++;
        }
      },
      refreshUIMoneyPanel: function refreshUIMoneyPanel() {
        var moneyLabel = cc.find("money", this.moneyPanel);
        moneyLabel.getComponent(cc.Label).string = "提现金额：" + this.withdrawMoney.string;
        var withdrawLogData = JSON.parse(cc.sys.localStorage.getItem("withdrawLog"));
        cc.log("..withdrawLogData:" + JSON.stringify(withdrawLogData));
        if (withdrawLogData) {
          this.nameEditBox.string = withdrawLogData.name;
          this.cardEditBox.string = withdrawLogData.card;
        }
      },
      loadSpriteImg: function loadSpriteImg(sprite, imgUrl) {
        if (void 0 == sprite || void 0 == imgUrl || imgUrl.length <= 0) return;
        var texture = cc.textureCache.addImage(cc.url.raw(imgUrl));
        texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
      },
      sliderHandlerClick: function sliderHandlerClick() {
        this.progressBar.progress = this.sliderNode.progress;
        var myMoney = GameData.player.income || 0;
        if (myMoney < 100) {
          this.withdrawMoney.string = 0;
          return;
        }
        var money = parseInt(this.sliderNode.progress * myMoney);
        money < 100 ? money = 100 : null;
        this.withdrawMoney.string = money;
      },
      QRShareBtnClick: function QRShareBtnClick() {
        cc.log("..QRShareBtnClick");
        if (false == inCD(1e3)) {
          soundMngr.instance.playAudioOther("button");
          screenPartShoot(this.QRPanel, wxShareTexture);
        }
      },
      linkShareBtnClick: function linkShareBtnClick() {
        cc.log("..linkShareBtnClick");
        if (false == inCD(3e3)) {
          soundMngr.instance.playAudioOther("button");
          wxShareWeb("推广", GameData.player.qrcodeUrl);
        }
      },
      submitAppBtnClick: function submitAppBtnClick() {
        cc.log("..submitAppBtnClick");
        soundMngr.instance.playAudioOther("button");
        var name = this.nameEditBox.string;
        var card = this.cardEditBox.string;
        var money = parseInt(this.withdrawMoney.string);
        if (void 0 == name || name.length <= 0 || void 0 == card || card.length <= 0 || money <= 0) {
          createMessageBox("请正确输入信息。", function() {});
          return;
        }
        var data = {
          name: name,
          card: card,
          money: money
        };
        cc.log("..data:" + JSON.stringify(data));
        GameNet.getInstance().request("game.playerHandler.reqDrawApply", data, function(rtn) {
          if (rtn.result == errorCode.Success) {
            createMessageBox("已提交。", function() {});
            if (void 0 == name || void 0 == card) return;
            var data1 = {};
            data1.name = name;
            data1.card = card;
            cc.sys.localStorage.setItem("withdrawLog", JSON.stringify(data1));
          } else createMessageBox("提交失败！", function() {});
        });
        this.moneyPanel.active = false;
      },
      showUIPanel: function showUIPanel(evt, data) {
        soundMngr.instance.playAudioOther("button");
        if (void 0 == data) return;
        switch (parseInt(data)) {
         case 1:
          this.pushPanel.active = true;
          this.withDrawPanel.active = false;
          break;

         case 2:
          this.pushPanel.active = false;
          this.withDrawPanel.active = true;
        }
      },
      showUILog: function showUILog() {
        this.logPanel.active = true;
        var self = this;
        GameNet.getInstance().request("game.playerHandler.reqDrawList", null, function(rtn) {
          cc.log("..rtn:" + JSON.stringify(rtn));
          self.logList = rtn;
          self.refreshUILogPanel();
        });
      },
      showUIMoney: function showUIMoney() {
        var myMoney = GameData.player.income || 0;
        var withdrawMoney = parseInt(this.withdrawMoney.string);
        if (myMoney < withdrawMoney) {
          createMessageBox("提现金额超出推广金！", function() {});
          return;
        }
        if (withdrawMoney < 100) {
          createMessageBox("提现金额不能小于100！", function() {});
          return;
        }
        this.moneyPanel.active = true;
        this.refreshUIMoneyPanel();
      },
      closeUILog: function closeUILog() {
        soundMngr.instance.playAudioOther("button");
        this.logPanel.active = false;
      },
      closeUIMoney: function closeUIMoney() {
        soundMngr.instance.playAudioOther("button");
        this.moneyPanel.active = false;
      },
      closeUIPushGame: function closeUIPushGame() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    roomHandler: "roomHandler"
  } ],
  UISelectGameLv: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe572jyFr1GjKUHgGRINF/g", "UISelectGameLv");
    "use strict";
    var gameDefine = require("gameDefine");
    var matchHandler = require("matchHandler");
    var configMgr = require("configMgr");
    var errorCode = require("errorCode");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        selfGolds: cc.Label,
        lvBtnPanel: cc.Node,
        typeTitle: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onPlayerUpdate", this, this.initUI);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPlayerUpdate", this, this.initUI);
      },
      onEnable: function onEnable() {
        this.initUI();
      },
      initUI: function initUI() {
        this.selfGolds.string = ConversionCoinValue(GameData.player.coin, 0);
        this.selectLv = -1;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) {
          cc.log("..serverConfig is undefined.");
          return;
        }
        var matchData = serverConfig.matchCoin;
        if (void 0 == matchData) {
          cc.log("..serverConfig is undefined.");
          return;
        }
        if (void 0 == matchHandler) {
          cc.log("..matchHandler is undefined.");
          return;
        }
        var gameData = matchData[matchHandler.selectGameType];
        if (void 0 == gameData) {
          cc.log("..serverConfig is undefined.");
          return;
        }
        var url = this.getGameTypeTitleImgUrl(matchHandler.selectGameType);
        if (url && url.length > 0) {
          var texture = cc.textureCache.addImage(cc.url.raw(url));
          texture && (this.typeTitle.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        }
        for (var ii = 0; ii < 3; ii++) {
          var name = "item" + (ii + 1);
          var btnNode = cc.find(name, this.lvBtnPanel);
          var cost = gameData.cost[ii];
          matchHandler.selectGameType == gameDefine.GameType.Game_Niu_Hundred && (cost = gameData.zhuang[ii]);
          var enter = getMatchCoinEnterLimit(matchHandler.selectGameType, ii) || 0;
          var number = cc.find("number", btnNode);
          var score = cc.find("score", btnNode);
          var goldNum = cc.find("golds/golds_num", btnNode);
          this.initScoreSp(btnNode, matchHandler.selectGameType);
          var localIndex = ii + 1;
          this.initBtnNodeSp(btnNode, localIndex, matchHandler.selectGameType);
          number.getComponent(cc.Label).string = ii + "人";
          score.getComponent(cc.Label).string = ConversionCoinValue(cost, 0);
          goldNum.getComponent(cc.Label).string = "≥" + enter;
          GameData.player.coin >= enter ? goldNum.color = new cc.Color(253, 243, 0) : goldNum.color = new cc.Color(255, 0, 0);
          btnNode.tag = ii;
        }
      },
      initScoreSp: function initScoreSp(node, gameType) {
        var scoreBg = cc.find("scoreBg", node);
        var btnUrl = "resources/home/selectLv/difenkuang.png";
        btnUrl = gameType == gameDefine.GameType.Game_Niu_Hundred ? "resources/home/selectLv/difenkuang_beishu.png" : "resources/home/selectLv/difenkuang.png";
        var texture = cc.textureCache.addImage(cc.url.raw(btnUrl));
        texture && (scoreBg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      initBtnNodeSp: function initBtnNodeSp(node, index, gameType) {
        var textureUrl = "resources/home/selectLv/chujichang.png";
        switch (index) {
         case 1:
          textureUrl = gameType == gameDefine.GameType.Game_Niu_Hundred ? "resources/home/selectLv/chujichang_beishu.png" : "resources/home/selectLv/chujichang.png";
          break;

         case 2:
          textureUrl = gameType == gameDefine.GameType.Game_Niu_Hundred ? "resources/home/selectLv/zhongjichang_beishu.png" : "resources/home/selectLv/zhongjichang.png";
          break;

         case 3:
          textureUrl = gameType == gameDefine.GameType.Game_Niu_Hundred ? "resources/home/selectLv/gaojichang_beishu.png" : "resources/home/selectLv/gaojichang.png";
          break;

         default:
          textureUrl = "";
        }
        if (textureUrl && textureUrl.length > 0) {
          var texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
          texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        }
      },
      refreshBtnSelect: function refreshBtnSelect() {
        for (var ii = 0; ii < 3; ii++) {
          var name = "item" + (ii + 1);
          var btnNode = cc.find(name, this.lvBtnPanel);
          ii == this.selectLv ? btnNode.scale = 1.1 : btnNode.scale = 1;
        }
      },
      getGameTypeTitleImgUrl: function getGameTypeTitleImgUrl(gameType) {
        var textureUrl = "resources/home/match/jb_bt_doudizhu.png";
        switch (gameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
         case gameDefine.GameType.Game_Mj_Shishi:
         case gameDefine.GameType.Game_Mj_AS:
         case gameDefine.GameType.Game_Mj_HZ:
         case gameDefine.GameType.Game_Mj_Heb:
         case gameDefine.GameType.Game_Mj_CC:
         case gameDefine.GameType.Game_MJ_HuaDian:
          textureUrl = "";
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          textureUrl = "resources/home/match/jb_bt_doudizhu.png";
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          textureUrl = "";
          break;

         case gameDefine.GameType.Game_niu_niu:
         case gameDefine.GameType.Game_Niu_Niu_10:
          textureUrl = "resources/home/match/jb_bt_pinshi.png";
          break;

         case gameDefine.GameType.Game_Niu_Hundred:
          textureUrl = "resources/home/match/jb_bt_bairenpinshi.png";
          break;

         case gameDefine.GameType.Game_TDK:
         case gameDefine.GameType.Game_Poker_paodekuai:
          textureUrl = "";
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          textureUrl = "resources/home/match/jb_bt_sanzhangpai.png";
          break;

         case gameDefine.GameType.Game_Poker_HHDZ:
          textureUrl = "resources/home/match/jb_bt_hhdz.png";
        }
        return textureUrl;
      },
      onAddGoldClick: function onAddGoldClick() {
        soundMngr.instance.playAudioOther("button");
        var fun = function fun(panel) {
          if (panel) {
            var template = panel.getComponent("shoppingPanel");
            template && template.showPanel(2);
          }
        };
        var shopPanel = cc.director.getScene().getChildByName("Canvas").getChildByName("shoppingPanel");
        void 0 != shopPanel && shopPanel.setLocalZOrder(this.node.getLocalZOrder() + 1);
        openView("shoppingPanel", void 0, fun);
      },
      onSelectLvClick: function onSelectLvClick(evt) {
        soundMngr.instance.playAudioOther("button");
        var lv = evt.target.tag;
        if (lv < 0 || lv > 2) return;
        this.selectLv = lv;
        cc.log("..selectLv:" + lv);
        this.onBeginMatchClick();
      },
      onBeginMatchClick: function onBeginMatchClick() {
        if (inCD(500)) return;
        if (void 0 == this.selectLv) {
          cc.log("cur select lv is undefined.");
          return;
        }
        if (checkOpenUISuccour(matchHandler.selectGameType, this.selectLv)) return;
        var enter = getMatchCoinEnterLimit(matchHandler.selectGameType, this.selectLv) || 0;
        if (enter > GameData.player.coin) {
          createMoveMessage("", errorCode.LessCoin);
          return;
        }
        openView("Loading");
        matchHandler.selectGameLv = this.selectLv;
        matchHandler.signup();
      },
      onBackClick: function onBackClick() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      },
      update: function update(dt) {}
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler"
  } ],
  UISelectGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98285StyW9CNavb6rsW6dSd", "UISelectGame");
    "use strict";
    var gameDefine = require("gameDefine");
    var matchHandler = require("matchHandler");
    var configMgr = require("configMgr");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        pageView: cc.PageView,
        content: cc.Node,
        pageItem: cc.Node,
        btnItem: cc.Node,
        flag: cc.Node,
        flagItem: cc.Node,
        detail: cc.Node,
        leftBtnNode: cc.Node,
        rightBtnNode: cc.Node,
        scrollView: cc.ScrollView,
        scrollItem: cc.Node
      },
      onLoad: function onLoad() {
        this.initScrollContent();
      },
      onEnable: function onEnable() {
        this.scrollView.scrollToTopLeft(.1);
      },
      initUIDetail: function initUIDetail() {
        this.detail.getComponent(cc.Label).string = "参与匹配获取积分";
      },
      initPageContent: function initPageContent() {
        this.pageView.removeAllPages();
        this.content.removeAllChildren();
        var gameList = this.getOpenGameList();
        this.content.width = gameList.length * this.pageItem.width;
        var pageNumber = parseInt(gameList.length / 4);
        gameList.length % 4 > 0 ? pageNumber++ : null;
        for (var index = 0; index < pageNumber; index++) {
          var webNode = cc.instantiate(this.pageItem);
          this.pageView.addPage(webNode);
          webNode.active = true;
          webNode.position = cc.p(this.pageItem.x + index * this.pageItem.width, this.pageItem.y);
          this.initPageItem(webNode, gameList, index);
        }
        this.initPageFlag();
      },
      initPageItem: function initPageItem(parent, list, index) {
        if (void 0 == parent) return;
        for (var kk = 0; kk < parent.getChildrenCount(); kk++) {
          var child = parent.getChildren()[kk];
          child && (child.active = false);
        }
        var ii = 4 * index;
        var max = 4 * index + 4;
        var sur = list.length - max;
        sur < 0 ? max += sur : null;
        var interval = 0;
        var init_x = 0;
        var check = max - ii;
        init_x = check % 2 > 0 ? 0 - (parseInt(check / 2) * this.btnItem.width + parseInt(check / 2) * interval + this.btnItem.width / 2) : 0 - (parseInt(check / 2) * this.btnItem.width + (parseInt(check / 2) - 1) * interval + interval / 2);
        init_x += this.btnItem.width / 2;
        var name;
        var nodeIdx = 0;
        for (;ii < max; ii++) {
          var gameType = list[ii];
          if (void 0 == gameType) continue;
          name = "item" + nodeIdx;
          var ItemNode = parent.getChildByName(name);
          if (void 0 == ItemNode) {
            ItemNode = cc.instantiate(this.btnItem);
            ItemNode.parent = parent;
            ItemNode.name = name;
          }
          ItemNode.active = true;
          ItemNode.x = init_x + nodeIdx * (this.btnItem.width + interval);
          ItemNode.y = this.btnItem.y;
          var label = cc.find("label", ItemNode);
          label.getComponent(cc.Label).string = getGameTypeNameString(gameType);
          var limit = cc.find("limit", ItemNode);
          limit.getComponent(cc.Label).string = "进入条件：" + this.getGameLimitByType(gameType);
          var sprite = ItemNode.getComponent(cc.Sprite);
          this.loadItemSprite(sprite, gameType);
          ItemNode.tag = gameType;
          ItemNode.on(cc.Node.EventType.TOUCH_END, this.onSelectGameClick, this);
          nodeIdx++;
        }
      },
      loadItemSprite: function loadItemSprite(sprite, gameType) {
        var url = void 0;
        switch (gameType) {
         case "addBtn":
          url = "resources/home/match/btn-home-add.png";
          break;

         case gameDefine.GameType.Game_Mj_Tianjin:
          url = "resources/home/match/btn-home-tjmj.png";
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          url = "resources/home/match/btn-home-ssmj.png";
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          url = "resources/home/match/btn-home-hdmj.png";
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          url = "resources/home/match/btn-home-hzmj.png";
          break;

         case gameDefine.GameType.Game_Mj_CC:
          url = "resources/home/match/btn-home-ccmj.png";
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          url = "resources/home/match/btn-home-hebmj.png";
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
         case gameDefine.GameType.Game_Poker_DDZ:
          url = "resources/home/match/doudizhu01.png";
          break;

         case gameDefine.GameType.Game_niu_niu:
          url = "resources/home/match/niuniu01.png";
          break;

         case gameDefine.GameType.Game_Niu_Hundred:
          url = "resources/home/match/home_btn_2.png";
          break;

         case gameDefine.GameType.Game_TDK:
          url = "resources/home/match/tiandaken01.png";
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          url = "resources/home/match/shisanshui01.png";
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          url = "resources/home/match/paodekuaianniu01.png";
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          url = "resources/home/match/btn-home-szp.png";
          break;

         case gameDefine.GameType.Game_Poker_HHDZ:
          url = "resources/home/match/btn-home-hhdz.png";
        }
        if (void 0 == url || void 0 == sprite) return;
        var texture = cc.textureCache.addImage(cc.url.raw(url));
        sprite.spriteFrame = new cc.SpriteFrame(texture);
      },
      initPageFlag: function initPageFlag() {
        this.flag.removeAllChildren();
        var sum = this.pageView.getPages().length;
        var interval = 30;
        var init_x = 0;
        init_x = sum % 2 > 0 ? -(parseInt(sum / 2) * this.flagItem.width + parseInt(sum / 2) * interval + this.flagItem.width / 2) : -(parseInt(sum / 2) * this.flagItem.width + (parseInt(sum / 2) - 1) * interval + interval / 2);
        for (var key = 0; key < sum; key++) {
          var flagItem;
          flagItem = 0 == key ? this.flagItem : cc.instantiate(this.flagItem);
          flagItem.name = "flag_" + key;
          this.flag.addChild(flagItem);
          flagItem.position = cc.p(init_x + key * (this.flagItem.width + interval), this.flagItem.y);
        }
        this.updatePageFlag();
      },
      updatePageFlag: function updatePageFlag() {
        for (var key = 0; key < this.flag.getChildrenCount(); key++) {
          var node = this.flag.getChildren()[key];
          var click = node.getChildByName("click");
          click.active = false;
        }
        var index = this.pageView.getCurrentPageIndex();
        var name = "flag_" + index;
        var flagNode = this.flag.getChildByName(name);
        flagNode.getChildByName("click").active = true;
      },
      pageViewEvent: function pageViewEvent() {
        this.updatePageFlag();
      },
      initScrollContent: function initScrollContent() {
        var content = this.scrollView.content;
        var gameList = this.getOpenGameList();
        var width = (gameList.length + 1) * (this.scrollItem.width - 25);
        width < 1280 ? width = 1280 : null;
        content.width = width;
        var index = 0, isShowAdd = false;
        for (var key = 0; key < gameList.length + 1; key++) {
          var data;
          if (key == gameList.length) isShowAdd = true; else {
            data = gameList[index];
            if (void 0 == data) continue;
            isShowAdd = false;
            index++;
          }
          var name = "item" + key;
          var itemNode = content.getChildByName(name);
          if (!itemNode) {
            itemNode = cc.instantiate(this.scrollItem);
            itemNode.parent = content;
            itemNode.name = name;
            itemNode.y = this.scrollItem.y;
            itemNode.x = this.scrollItem.x + key * (this.scrollItem.width - 30);
          }
          itemNode.active = true;
          if (isShowAdd) this.initAddBtnItem(itemNode); else {
            var label = cc.find("label", itemNode);
            label.getComponent(cc.Label).string = getGameTypeNameString(data);
            var limit = cc.find("limit", itemNode);
            limit.getComponent(cc.Label).string = "进入条件：" + this.getGameLimitByType(data);
            var sprite = itemNode.getComponent(cc.Sprite);
            this.loadItemSprite(sprite, data);
            itemNode.tag = data;
            itemNode.on(cc.Node.EventType.TOUCH_END, this.onSelectGameClick, this);
          }
        }
        if (gameList.length <= 3) {
          this.leftBtnNode.active = false;
          this.rightBtnNode.active = false;
          this.scrollView.enabled = false;
        }
      },
      initAddBtnItem: function initAddBtnItem(ItemNode) {
        if (void 0 == ItemNode) return;
        ItemNode.active = true;
        var label = cc.find("label", ItemNode);
        var dikuang = cc.find("dikuang", ItemNode);
        label.active = false;
        dikuang.active = false;
        var sprite = ItemNode.getComponent(cc.Sprite);
        this.loadItemSprite(sprite, "addBtn");
        ItemNode.on(cc.Node.EventType.TOUCH_END, this.onAddGameClick, this);
      },
      getOpenGameList: function getOpenGameList() {
        var gameList = configMgr.getMatchGameType();
        if (void 0 == gameList) return [];
        cc.log("..gameList:" + JSON.stringify(gameList));
        return gameList;
      },
      getGameLimitByType: function getGameLimitByType(type) {
        var limit = "";
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig || void 0 == serverConfig.matchCoin) return limit;
        var data = serverConfig.matchCoin[type];
        if (void 0 == data || void 0 == data.enter) return limit;
        limit = data.enter[0];
        return limit;
      },
      onSelectGameClick: function onSelectGameClick(event) {
        if (inCD(1e3)) return;
        soundMngr.instance.playAudioOther("button");
        var gameType = event.target.tag;
        cc.log("..gameType:" + gameType);
        matchHandler.selectGameType = gameType;
        var sumLv = getMatchSumLv(gameType);
        if (void 0 == sumLv) return;
        if (1 == sumLv) {
          matchHandler.selectGameLv = 0;
          if (checkOpenUISuccour(matchHandler.selectGameType, matchHandler.selectGameLv)) return;
          var enter = getMatchCoinEnterLimit(matchHandler.selectGameType, matchHandler.selectGameLv) || 0;
          if (enter > GameData.player.coin) {
            createMoveMessage("", errorCode.LessCoin);
            return;
          }
          openView("Loading");
          matchHandler.signup();
        } else openView("SelectGameLvPanel");
      },
      onAddGameClick: function onAddGameClick() {
        cc.log("..onAddGameClick");
        soundMngr.instance.playAudioOther("button");
      },
      onLeftBtnClick: function onLeftBtnClick() {
        cc.log("..onLeftBtnClick");
        soundMngr.instance.playAudioOther("button");
      },
      onRightBtnClick: function onRightBtnClick() {
        cc.log("..onRightBtnClick");
        soundMngr.instance.playAudioOther("button");
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler"
  } ],
  UISuccour: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9bbbVOkDdFJraxBkVNLgw9", "UISuccour");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var errorCode = require("errorCode");
    cc.Class({
      extends: cc.Component,
      properties: {
        getPanel: cc.Node,
        goToPanel: cc.Node,
        timeNode: cc.Node,
        getBtnNode: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        this.initUIPanel();
      },
      showUIPanel: function showUIPanel(show) {
        this.getPanel.active = show;
        this.goToPanel.active = !show;
      },
      initUIPanel: function initUIPanel() {
        cc.log("..benefitCount:" + GameData.player.benefitCount);
        void 0 == GameData.player.benefitCount ? GameData.player.benefitCount = 2 : null;
        this.timeNode.getComponent(cc.Label).string = "每天可领取" + (2 - GameData.player.benefitCount) + "/2次";
      },
      getBtnClick: function getBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
        GameNet.getInstance().request("game.playerHandler.getBenefitCoin", null, function(rtn) {});
        this.onClose();
        createMoveMessage("领取成功。");
      },
      goToBtnClick: function goToBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
        var fun = function fun(panel) {
          if (panel) {
            var template = panel.getComponent("shoppingPanel");
            template && template.showPanel(2);
          }
        };
        openView("shoppingPanel", void 0, fun);
        this.onClose();
      },
      onClose: function onClose(event) {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    roomHandler: "roomHandler"
  } ],
  UITask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da931iloqpHp4F5Wx6iRakJ", "UITask");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var errorCode = require("errorCode");
    var missionConfig = require("mission");
    var missionHandler = require("missionHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        getPanel: cc.Node,
        scrollView: cc.ScrollView,
        item: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("playerMissionData", this, this.onPlayerMissionHandler);
        registEvent("taskGetReward", this, this.onTaskGetRewardHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("playerMissionData", this, this.onPlayerMissionHandler);
        unregistEvent("taskGetReward", this, this.onTaskGetRewardHandler);
      },
      onEnable: function onEnable() {
        this.initUIPanel();
      },
      onPlayerMissionHandler: function onPlayerMissionHandler() {
        this.initUIPanel();
      },
      onTaskGetRewardHandler: function onTaskGetRewardHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        this.onShowGetPanel(data.detail);
      },
      onShowGetPanel: function onShowGetPanel(id) {
        this.getPanel.active = true;
        this.initUIGetReward(id);
      },
      initUIPanel: function initUIPanel() {
        var content = this.scrollView.content;
        for (var i = 0; i < content.getChildrenCount(); i++) {
          var child = content.getChildren()[i];
          child && (child.active = false);
        }
        var taskData = GameData.player.mission;
        if (void 0 == taskData || Object.keys(taskData).length <= 0) return;
        var length = Object.keys(taskData);
        var height = length * this.item.height;
        height < 400 ? height = 400 : null;
        content.height = height;
        var index = 0;
        for (var key in taskData) {
          var data = taskData[key];
          if (void 0 == data) continue;
          if (0 != data.isGet) continue;
          var missionData = missionConfig.getMissionData(key);
          if (null == missionData) continue;
          var itemNode = content.getChildren()[index];
          if (void 0 == itemNode) {
            itemNode = cc.instantiate(this.item);
            itemNode.parent = content;
          }
          itemNode.active = true;
          itemNode.x = this.item.x;
          itemNode.y = this.item.y - this.item.height * index;
          index++;
          this.updateTaskItem(missionData, data, itemNode);
        }
      },
      updateTaskItem: function updateTaskItem(missionData, data, node) {
        if (void 0 == missionData || void 0 == data || void 0 == node) return;
        var icon = cc.find("icon", node);
        var name = cc.find("name", node);
        var reward = cc.find("reward", node);
        var count = cc.find("count", node);
        var doItBtn = cc.find("doIt", node);
        var toGetBtn = cc.find("toGet", node);
        name.getComponent(cc.Label).string = missionData.desc;
        count.getComponent(cc.Label).string = data.count + "/" + missionData.count;
        reward.getComponent(cc.Label).string = missionConfig.getMissionRewardStr(missionData.reward);
        var achieve = false;
        parseInt(data.count) >= parseInt(missionData.count) && 0 == parseInt(data.isGet) && (achieve = true);
        doItBtn.active = !achieve;
        toGetBtn.active = achieve;
        doItBtn.tag = missionData.id;
        toGetBtn.tag = missionData.id;
        this.loadIconImg(icon, missionData.icon);
      },
      loadIconImg: function loadIconImg(node, imgurl) {
        if (void 0 == node || void 0 == imgurl || imgurl.length <= 0) {
          cc.log("..loadIconImg..return");
          return;
        }
        var texture = cc.textureCache.addImage(cc.url.raw(imgurl));
        texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      initUIGetReward: function initUIGetReward(missionId) {
        if (void 0 == missionId) return;
        var data = missionConfig.getMissionData(missionId);
        if (null == data) return;
        var rewardData = missionConfig.getMissionRewardData(missionId);
        if (null == rewardData) return;
        var icon = cc.find("icon", this.getPanel);
        var count = cc.find("count", this.getPanel);
        count.getComponent("cc.Label").string = rewardData.count;
        this.loadIconImg(icon, data.icon);
      },
      onToGetBtnClick: function onToGetBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
        var tag = event.target.tag;
        missionHandler.getReward(tag);
      },
      onDoItBtnClick: function onDoItBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
        var tag = event.target.tag;
        switch (parseInt(tag)) {
         case 0:
          openView("SharePanel");
          break;

         default:
          return;
        }
      },
      onCloseGetPanel: function onCloseGetPanel(event) {
        soundMngr.instance.playAudioOther("button");
        this.getPanel.active = false;
        var self = this;
        setTimeout(function() {
          missionHandler.checkAllComplete(GameData.player.mission) && closeView(self.node.name);
        }, 1e3);
      },
      onClose: function onClose(event) {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    mission: "mission",
    missionHandler: "missionHandler",
    roomHandler: "roomHandler"
  } ],
  WebPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee050Br1mhNrIWqJx5C91Lq", "WebPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        webView: cc.WebView
      },
      onLoad: function onLoad() {
        WriteLog("onLoad");
      },
      onDestroy: function onDestroy() {
        WriteLog("onDestroy");
      },
      onEnable: function onEnable() {
        WriteLog("onEnable");
      },
      onClose: function onClose() {
        WriteLog("onClose");
        this.node.active = false;
      },
      onOpen: function onOpen(url) {
        url && url.length > 0 && (this.webView.url = url);
      }
    });
    cc._RF.pop();
  }, {} ],
  "ZJH-RoomData": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a759dQxmYpMSZjQq/ZFAq1k", "ZJH-RoomData");
    "use strict";
    var room_ZJH = {
      createRoomOpts: {},
      playersArr: [],
      obPlayersArr: [],
      losersArr: [],
      GiveUpArr: [],
      isCompare: false,
      startAnimFinish: true,
      isRunAnimation: false,
      pokers: {},
      playerPokerType: {},
      gameInfo: {},
      gameResultData: {},
      gameState: {
        Zhuang: 1,
        BaseScore: 2,
        Chips: 3,
        Compare: 4,
        Settle: 5,
        End: 6
      },
      CoinChipConfig: {
        0: [ 50, 100, 250, 500, 1e3 ],
        1: [ 300, 600, 1500, 3e3, 6e3 ],
        2: [ 1e3, 2e3, 5e3, 1e4, 2e4 ]
      },
      PokerCardType: {
        0: "sanpai",
        1: "duizi",
        2: "shunzi",
        3: "jinhua",
        4: "shunjin",
        5: "baozi",
        6: "235"
      }
    };
    room_ZJH.initData = function() {
      this.playersArr = [];
      this.obPlayersArr = [];
      this.GiveUpArr = [];
      this.losersArr = [];
      this.pokers = {};
      this.gameInfo = {};
    }, module.exports = room_ZJH;
    room_ZJH.initCreateRoomOpts = function() {
      var data = cc.sys.localStorage.getItem("createRoomOpts_ZJH");
      if (null != data) {
        room_ZJH.createRoomOpts = JSON.parse(data);
        return;
      }
      room_ZJH.createRoomOpts = {};
      room_ZJH.createRoomOpts.twoThreeFiveBiger = 1;
      room_ZJH.createRoomOpts.compareSuit = 0;
      room_ZJH.createRoomOpts.chipsType = 0;
      room_ZJH.createRoomOpts.roundMax = 10;
      room_ZJH.createRoomOpts.roundRule = 10;
      room_ZJH.createRoomOpts.a23Type = 0;
      room_ZJH.createRoomOpts.canNotLookTurnNum = 3;
      room_ZJH.createRoomOpts.maxTunNum = 5;
      room_ZJH.createRoomOpts.costType = 1;
      room_ZJH.createRoomOpts.playerMax = 6;
      room_ZJH.createRoomOpts.playerMin = 2;
    }, room_ZJH.saveCreateRoomOpts = function() {
      if (null == room_ZJH.createRoomOpts || void 0 == room_ZJH.createRoomOpts) return;
      cc.sys.localStorage.setItem("createRoomOpts_ZJH", JSON.stringify(room_ZJH.createRoomOpts));
    }, room_ZJH.setPlayerArr = function(data) {
      room_ZJH.playersArr = [];
      for (var key in data) data[key].length > 0 && room_ZJH.playersArr.push(parseInt(key));
    }, room_ZJH.setLosersArr = function(data) {
      room_ZJH.losersArr = [];
      for (var key in data) data[key] && room_ZJH.losersArr.push(parseInt(key));
    }, room_ZJH.setGiveUpArr = function(data) {
      room_ZJH.GiveUpArr = [];
      for (var key in data) data[key] && room_ZJH.GiveUpArr.push(parseInt(key));
    }, room_ZJH.setPosition = function() {
      GameData.tablePos = {};
      var order;
      var index = GameData.getPlayerIndex(GameData.player.uid);
      if (void 0 == GameData.room.opts) return;
      0 == index ? order = [ 0, 1, 2, 3, 4, 5 ] : 1 == index ? order = [ 5, 0, 1, 2, 3, 4 ] : 2 == index ? order = [ 4, 5, 0, 1, 2, 3 ] : 3 == index ? order = [ 3, 4, 5, 0, 1, 2 ] : 4 == index ? order = [ 2, 3, 4, 5, 0, 1 ] : 5 == index && (order = [ 1, 2, 3, 4, 5, 0 ]);
      for (var i = 0; i < GameData.joiners.length; i++) GameData.joiners[i] ? GameData.tablePos[GameData.joiners[i].uid] = order[i] : null == GameData.joiners[i] && (GameData.tablePos["null"] = order[i]);
      cc.log("table pos:" + JSON.stringify(GameData.tablePos));
    }, room_ZJH.getHandPokerByUid = function(uid) {
      for (var key in room_ZJH.pokers) if (key == uid) return room_ZJH.pokers[key];
      return null;
    }, room_ZJH.getPlayerPokerByUid = function(uid) {
      for (var key in room_ZJH.pokers) if (key == uid) return room_ZJH.pokers[key];
      return null;
    }, room_ZJH.getPlayerPokerTypeByUid = function(uid) {
      if (0 == Object.keys(room_ZJH.gameInfo).length) return;
      for (var key in room_ZJH.playerPokerType) if (key == uid) {
        var pokerType = room_ZJH.playerPokerType[key];
        return room_ZJH.PokerCardType[pokerType];
      }
      return null;
    }, room_ZJH.getLivePlayers = function() {
      var livePlayer = [];
      for (var i = 0; i < room_ZJH.playersArr.length; i++) {
        var uid = room_ZJH.playersArr[i];
        -1 == room_ZJH.losersArr.indexOf(uid) && livePlayer.push(uid);
      }
      return livePlayer;
    }, room_ZJH.getWinPlayer = function(uid) {
      var isPlayer = -1 != room_ZJH.playersArr.indexOf(uid);
      var isWin = -1 == room_ZJH.losersArr.indexOf(uid);
      var isLastCmp = room_ZJH.playersArr.length - room_ZJH.losersArr.length == 1;
      return !!(isPlayer && isWin && isLastCmp);
    }, room_ZJH.getPlayerIsSeePokerByUid = function(uid) {
      if (!room_ZJH.gameInfo.show) return;
      for (var key in room_ZJH.gameInfo.show) if (key == uid) return room_ZJH.gameInfo.show[key];
    }, room_ZJH.getGameAllChips = function() {
      if (0 == Object.keys(room_ZJH.gameInfo).length) return;
      var allChipsArr = [];
      for (var key in room_ZJH.gameInfo.chips) for (var j = 0; j < room_ZJH.gameInfo.chips[key].length; j++) allChipsArr.push(room_ZJH.gameInfo.chips[key][j]);
      return allChipsArr;
    }, room_ZJH.getPlayerChipsByUid = function(uid) {
      if (0 == Object.keys(room_ZJH.gameInfo).length) return;
      var chipNum = 0;
      for (var key in room_ZJH.gameInfo.chips) if (key == uid) for (var j = 0; j < room_ZJH.gameInfo.chips[key].length; j++) chipNum += room_ZJH.gameInfo.chips[key][j];
      return chipNum;
    }, room_ZJH.getRoomCoinChipConfig = function(level) {
      return room_ZJH.CoinChipConfig[level];
    }, room_ZJH.isGameStart = function() {
      if (0 == Object.keys(room_ZJH.gameInfo).length) return;
      return room_ZJH.gameInfo.currentPlayer == room_ZJH.gameInfo.firstOperatePlayer && 1 == room_ZJH.gameInfo.curTurnNum;
    }, room_ZJH.isGameEnd = function() {
      if (0 != Object.keys(room_ZJH.gameInfo).length) {
        var loseNum = room_ZJH.losersArr.length;
        return loseNum == room_ZJH.playersArr.length - 1;
      }
      return null;
    }, room_ZJH.isObPlayer = function(uid) {
      if (!room_ZJH.playersArr) return;
      return -1 == room_ZJH.playersArr.indexOf(uid);
    }, room_ZJH.isLoser = function(uid) {
      if (0 == Object.keys(room_ZJH.gameInfo).length) return;
      return -1 != room_ZJH.losersArr.indexOf(uid) && -1 == room_ZJH.GiveUpArr.indexOf(uid);
    }, room_ZJH.isAddChips = function(uid) {
      for (var key in room_ZJH.gameInfo.chips) if (key == uid) return room_ZJH.gameInfo.chips[key].length > 1;
      return null;
    };
    room_ZJH.isAutoFollow = function(uid) {
      for (var key in room_ZJH.gameInfo.auotFollowUids) if (key == uid) return !!room_ZJH.gameInfo.auotFollowUids[key];
      return null;
    };
    room_ZJH.isMingPai = function(uid) {
      for (var key in room_ZJH.gameInfo.playerMingPai) return key == uid;
      return null;
    };
    room_ZJH.isFirstTurn = function(uid) {
      for (var key in room_ZJH.gameInfo.chips) if (uid == key) return 2 == room_ZJH.gameInfo.chips[key].length;
      return null;
    };
    room_ZJH.registMessage = function() {
      room_ZJH.initCreateRoomOpts();
      GameNet.getInstance().setCallBack("zhaJinHua-onGameInfo", function(data) {
        WriteLog("do event onGameInfo  " + JSON.stringify(data));
        room_ZJH.gameInfo = data;
        GameData.game.zhuangUid = data.zhuangUid;
        GameData.game.gameStart = true;
        room_ZJH.setPlayerArr(data.chips);
        room_ZJH.setLosersArr(data.losers);
        room_ZJH.setGiveUpArr(data.playerGiveUps);
        sendEvent("zhaJinHua-onGameInfo");
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onPlayerAddChips", function(data) {
        WriteLog("do event onPlayerAddChips  " + JSON.stringify(data));
        sendEvent("onPlayerAddChips", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onPlayerFollowChips", function(data) {
        WriteLog("do event onPlayerFollowChips  " + JSON.stringify(data));
        sendEvent("onPlayerFollowChips", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onPlayerGiveUp", function(data) {
        WriteLog("do event onPlayerGiveUp  " + JSON.stringify(data));
        sendEvent("onPlayerGiveUp", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onPlayerCompare", function(data) {
        WriteLog("do event onPlayerCompare  " + JSON.stringify(data));
        room_ZJH.isCompare = true;
        sendEvent("onPlayerCompare", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onPlayerCheck", function(data) {
        WriteLog("do event onPlayerCheck  " + JSON.stringify(data));
        room_ZJH.pokers[data.uid] = data.cards;
        room_ZJH.playerPokerType[data.uid] = data.type;
        sendEvent("onPlayerCheck", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onPlayerMingPai", function(data) {
        WriteLog("do event onPlayerMingPai  " + JSON.stringify(data));
        room_ZJH.pokers[data.uid] = data.cards;
        room_ZJH.playerPokerType[data.uid] = data.type;
        sendEvent("onPlayerMingPai", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onShowCardsInfo", function(data) {
        WriteLog("do event zhaJinHua-onShowCardsInfo  " + JSON.stringify(data));
        room_ZJH.pokers[GameData.player.uid] = data.selfCards;
        room_ZJH.playerPokerType[GameData.player.uid] = data.selfType;
        for (var key in data.othersCards) room_ZJH.pokers[key] = data.othersCards[key];
        for (var key1 in data.othersTypes) room_ZJH.playerPokerType[key1] = data.othersTypes[key];
        sendEvent("refreshPoker");
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onZhaJinHuaRunEnd", function(data) {
        WriteLog("do event onZhaJinHuaRunEnd  " + JSON.stringify(data));
        sendEvent("onZhaJinHuaRunEnd", data);
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onZhaJinHuaRoomEnd", function(data) {
        WriteLog("do event onZhaJinHuaRoomEnd   " + JSON.stringify(data));
        GameData.game.close = true;
        GameData.game.gameStart = false;
        room_ZJH.gameResultData = data;
        sendEvent("onZhaJinHuaRoomEnd");
        room_ZJH.initData();
      });
      GameNet.getInstance().setCallBack("zhaJinHua-onGameStart", function(data) {
        WriteLog("do event zhaJinHua-onGameStart  " + JSON.stringify(data));
        GameData.game.gameStart = true;
        GameData.game.close = false;
        room_ZJH.isCompare = false;
        room_ZJH.pokers = {};
        room_ZJH.playerPokerType = {};
        sendEvent("zhaJinHua-onGameStart");
      });
    };
    room_ZJH.unregistAllMessage = function() {};
    cc._RF.pop();
  }, {} ],
  "ZJH-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eb04dRk4VVC6K9zPbDd/l3/", "ZJH-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var ZJH_roomData = require("ZJH-RoomData");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round10: cc.Toggle,
        round20: cc.Toggle,
        round30: cc.Toggle,
        player: cc.Toggle,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        chouMa1: cc.Toggle,
        chouMa2: cc.Toggle,
        baoZi: cc.Toggle,
        huaSe: cc.Toggle,
        A23da: cc.Toggle,
        A23xiao: cc.Toggle,
        A23diLong: cc.Toggle,
        men0: cc.Toggle,
        men1: cc.Toggle,
        men2: cc.Toggle,
        men3: cc.Toggle,
        fengDing5: cc.Toggle,
        fengDing10: cc.Toggle,
        fengDing15: cc.Toggle,
        fengDing20: cc.Toggle,
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.modeType = 1;
        this.spendData = void 0;
        this.refreshUI();
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      createRoom: function createRoom() {
        GameData.setGameType(gameDefine.GameType.Game_Poker_ZJH);
        this.saveRuleFromUI();
        var createData = {
          gameType: gameDefine.GameType.Game_Poker_ZJH,
          roundType: 1,
          roundMax: ZJH_roomData.createRoomOpts.roundMax,
          roundRule: ZJH_roomData.createRoomOpts.roundRule,
          joinermax: ZJH_roomData.createRoomOpts.playerMax,
          joinermin: ZJH_roomData.createRoomOpts.playerMin,
          twoThreeFiveBiger: ZJH_roomData.createRoomOpts.twoThreeFiveBiger,
          compareSuit: ZJH_roomData.createRoomOpts.compareSuit,
          chipsType: ZJH_roomData.createRoomOpts.chipsType,
          a23Type: ZJH_roomData.createRoomOpts.a23Type,
          canNotLookTurnNum: ZJH_roomData.createRoomOpts.canNotLookTurnNum,
          maxTunNum: ZJH_roomData.createRoomOpts.maxTunNum,
          roomType: 0,
          costType: ZJH_roomData.createRoomOpts.costType,
          cardType: ZJH_roomData.createRoomOpts.playType,
          clubId: 0,
          currencyType: 1,
          settleType: 1
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_ZJH) return createData;
        createData.currencyType = modeTypeData.Game_Poker_ZJH.CurrencyType;
        createData.settleType = modeTypeData.Game_Poker_ZJH.SettleType;
        ZJH_roomData.onRoomReadyInfo = {};
        return createData;
      },
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.round10.isChecked) {
          ZJH_roomData.createRoomOpts.roundMax = 10;
          ZJH_roomData.createRoomOpts.roundRule = 10;
        } else if (this.round20.isChecked) {
          ZJH_roomData.createRoomOpts.roundMax = 20;
          ZJH_roomData.createRoomOpts.roundRule = 20;
        } else if (this.round30.isChecked) {
          ZJH_roomData.createRoomOpts.roundMax = 30;
          ZJH_roomData.createRoomOpts.roundRule = 30;
        }
        this.pay1.isChecked ? ZJH_roomData.createRoomOpts.costType = 1 : this.pay2.isChecked ? ZJH_roomData.createRoomOpts.costType = 2 : this.pay3.isChecked && (ZJH_roomData.createRoomOpts.costType = 3);
        this.huaSe.isChecked ? ZJH_roomData.createRoomOpts.compareSuit = 1 : ZJH_roomData.createRoomOpts.compareSuit = 0;
        this.baoZi.isChecked ? ZJH_roomData.createRoomOpts.twoThreeFiveBiger = 1 : ZJH_roomData.createRoomOpts.twoThreeFiveBiger = 0;
        this.chouMa1.isChecked ? ZJH_roomData.createRoomOpts.chipsType = 0 : this.chouMa2.isChecked && (ZJH_roomData.createRoomOpts.chipsType = 1);
        this.A23diLong.isChecked ? ZJH_roomData.createRoomOpts.a23Type = 1 : this.A23da.isChecked ? ZJH_roomData.createRoomOpts.a23Type = 0 : this.A23xiao.isChecked && (ZJH_roomData.createRoomOpts.a23Type = 2);
        this.men0.isChecked ? ZJH_roomData.createRoomOpts.canNotLookTurnNum = 0 : this.men1.isChecked ? ZJH_roomData.createRoomOpts.canNotLookTurnNum = 1 : this.men2.isChecked ? ZJH_roomData.createRoomOpts.canNotLookTurnNum = 2 : this.men3.isChecked && (ZJH_roomData.createRoomOpts.canNotLookTurnNum = 3);
        this.fengDing5.isChecked ? ZJH_roomData.createRoomOpts.maxTunNum = 5 : this.fengDing10.isChecked ? ZJH_roomData.createRoomOpts.maxTunNum = 10 : this.fengDing15.isChecked ? ZJH_roomData.createRoomOpts.maxTunNum = 15 : this.fengDing20.isChecked && (ZJH_roomData.createRoomOpts.maxTunNum = 20);
        ZJH_roomData.saveCreateRoomOpts();
      },
      refreshUI: function refreshUI() {
        cc.log("ZJH_roomData.createRoomOpts = " + JSON.stringify(ZJH_roomData.createRoomOpts));
        this.round10.isChecked = 15 == ZJH_roomData.createRoomOpts.roundMax;
        this.round20.isChecked = 20 == ZJH_roomData.createRoomOpts.roundMax;
        this.round30.isChecked = 30 == ZJH_roomData.createRoomOpts.roundMax;
        this.pay1.isChecked = true;
        this.pay2.isChecked = false;
        this.pay3.isChecked = false;
        this.huaSe.isChecked = 1 == ZJH_roomData.createRoomOpts.compareSuit;
        this.baoZi.isChecked = 1 == ZJH_roomData.createRoomOpts.twoThreeFiveBiger;
        this.chouMa1.isChecked = 0 == ZJH_roomData.createRoomOpts.chipsType;
        this.chouMa2.isChecked = 1 == ZJH_roomData.createRoomOpts.chipsType;
        this.A23diLong.isChecked = 0 == ZJH_roomData.createRoomOpts.a23Type;
        this.A23da.isChecked = 1 == ZJH_roomData.createRoomOpts.a23Type;
        this.A23xiao.isChecked = 2 == ZJH_roomData.createRoomOpts.a23Type;
        this.men0.isChecked = 0 == ZJH_roomData.createRoomOpts.canNotLookTurnNum;
        this.men1.isChecked = 1 == ZJH_roomData.createRoomOpts.canNotLookTurnNum;
        this.men2.isChecked = 2 == ZJH_roomData.createRoomOpts.canNotLookTurnNum;
        this.men3.isChecked = 3 == ZJH_roomData.createRoomOpts.canNotLookTurnNum;
        this.fengDing5.isChecked = 5 == ZJH_roomData.createRoomOpts.maxTunNum;
        this.fengDing10.isChecked = 10 == ZJH_roomData.createRoomOpts.maxTunNum;
        this.fengDing15.isChecked = 15 == ZJH_roomData.createRoomOpts.maxTunNum;
        this.fengDing20.isChecked = 20 == ZJH_roomData.createRoomOpts.maxTunNum;
        this.showSpendUI();
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..ZJH");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Poker_ZJH) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Poker_ZJH.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Poker_ZJH];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Poker_ZJH];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            var cost = this.spendData[key + 71].cost;
            var number = 3;
            this.player3.isChecked ? number = 3 : this.player4.isChecked ? number = 4 : this.player5.isChecked ? number = 5 : this.player6.isChecked && (number = 6);
            final = cost[number].final;
            if (this.pay2.isChecked) {
              final = Math.ceil(final / number);
              str2 = "/人";
            }
          } else final = this.spendData[key].cost;
          this.drowArray[key].active = 0 == final;
          this.spendUI_tdk[key].string = "（" + str1 + "*" + final + str2 + "）";
        }
      }
    });
    cc._RF.pop();
  }, {
    "ZJH-RoomData": "ZJH-RoomData",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "ZJH-roomDissolve": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c170bVSd/BGUp4xNR6f12cr", "ZJH-roomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var ZJH_roomData = require("ZJH-RoomData");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        if (null != GameData.game.onRoomDissolve) {
          cc.log("GameData.game.onRoomDissolve = " + JSON.stringify(GameData.game.onRoomDissolve));
          sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        }
        this.openDisAgree = false;
        registEvent("onRoomDissolve", this, this.showDissolveText);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showHeaderConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showHeaderConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 190 * (i + 1);
          hNode.active = false;
        }
      },
      showPlayers: function showPlayers() {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            var isOnLine = RoomHandler.isPlayerOnline(uid);
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = !isOnLine;
            cc.find("header_" + index, this.headerNode.parent).active = true;
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        var iconNode = cc.find("header_" + index + "/headimg", this.headerNode.parent);
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          iconNode.getComponent(cc.Sprite).spriteFrame = null;
          return;
        }
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            NiuNiuMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.parent.parent.getComponent("ZJH_roomMain").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("TDK-roomMain").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("TDK-roomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      },
      showHeaderConnect: function showHeaderConnect() {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userId = GameData.joiners[i].uid;
          var isOnLine = RoomHandler.isPlayerOnline(userId);
          var index = i + 1;
          var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
          disNode.active = !isOnLine;
        }
      }
    });
    cc._RF.pop();
  }, {
    "ZJH-RoomData": "ZJH-RoomData",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "ZJH-roomWait": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d469buB0+pBX61eHZms64Hu", "ZJH-roomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var ZJH_roomData = require("ZJH-RoomData");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        readyNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        playersNode: {
          default: [],
          type: cc.Node
        },
        ruleNode: cc.Node,
        readyBtn: cc.Node,
        readyCountDownNode: cc.Node,
        unStartLayer: cc.Node,
        waitTips: cc.Node,
        costTips: cc.Node,
        playerPrefab: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.registListenr();
        this.init();
        this.reconnect();
        this.onReConnectShow();
        this.addDynAnimation();
      },
      init: function init() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.lastTime = 0;
        this.headers = new Array();
        this.onReadyFlag = true;
        this.TipsFlag = true;
        this.readyCountDownNode.active = false;
        this.costTips.active = false;
        this.quitRoomBtn.active = this.readyBtn.active;
        this.showPlayers(this);
      },
      registListenr: function registListenr() {
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("dynChat", this, this.dynChatHandler);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("zhaJinHua-onGameInfo", this, this.onGameTurn);
        registEvent("onZhaJinHuaRunEnd", this, this.showReadyNode);
        registEvent("onReadyCountDown", this, this.onReadyCountDown);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        registEvent("zhaJinHua-onGameStart", this, this.onGameStartHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("dynChat", this, this.dynChatHandler);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("zhaJinHua-onGameInfo", this, this.onGameTurn);
        unregistEvent("onZhaJinHuaRunEnd", this, this.showReadyNode);
        unregistEvent("onReadyCountDown", this, this.onReadyCountDown);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        unregistEvent("zhaJinHua-onGameStart", this, this.onGameStartHandler);
      },
      showReadyNode: function showReadyNode() {
        var self = this;
        this.scheduleOnce(function() {
          RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Card && (self.readyNode.active = true);
        }, 2);
        for (var j = 0; j < GameData.joiners.length; j++) if (GameData.joiners[j]) {
          var player = GameData.getPlayerByUid(GameData.joiners[j].uid);
          if (null != player) {
            var userId = player.uid;
            var localIdx = GameData.getPlayerPosByUid(userId);
            var playerHeadScp = this.playersNode[localIdx].getChildByName("headNode").getComponent("pokerRoomPlayer");
            playerHeadScp.showZhuang(false);
            playerHeadScp.showCountDownEffect(false);
          }
        }
        var deytime = ZJH_roomData.isCompare ? 5.5 : 3.5;
        RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && ZJH_roomData.gameInfo.status == ZJH_roomData.gameState.Settle && this.scheduleOnce(function() {
          self.quitRoomBtn.active = true;
        }, deytime);
      },
      onReadyCountDown: function onReadyCountDown(data) {
        if (this.onReadyFlag) {
          this.onReadyFlag = false;
          this.readyCountDownNode.active = false;
          this.unschedule(this.showReadyCountDown);
          if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
            this.lastTime = 5;
            ZJH_roomData.isRunAnimation && (this.lastTime = 4);
          } else this.lastTime = 4;
          1 == data && (RoomHandler.readyCountDown -= 2);
          this.TipsFlag = true;
          this.schedule(this.showReadyCountDown, 1);
        }
        var wxShareBtn = cc.find("btnWeixin", this.unStartLayer);
        var copyBtn = cc.find("btnCopy", this.unStartLayer);
        wxShareBtn.active = false;
        copyBtn.active = false;
      },
      showReadyCountDown: function showReadyCountDown() {
        this.waitTips.active = false;
        var isFirstPlayGame = this.isFirstPlayGame();
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          if (RoomHandler.readyCountDown <= 5 && RoomHandler.readyCountDown > 0 && !ZJH_roomData.isRunAnimation) {
            this.readyCountDownNode.active = true;
            if (this.TipsFlag && isFirstPlayGame && RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
              this.showCostTips();
              this.TipsFlag = false;
            }
          }
        } else this.readyCountDownNode.active = true;
        var timeLb = cc.find("time", this.readyCountDownNode);
        timeLb.getComponent(cc.Label).string = this.lastTime - 1 + "";
        RoomHandler.readyCountDown--;
        this.readyCountDownNode.active && this.lastTime--;
        if (this.lastTime < 0) {
          this.onReadyFlag = true;
          this.unschedule(this.showReadyCountDown);
          this.readyCountDownNode.active = false;
          this.costTips.active = false;
        }
      },
      showCostTips: function showCostTips() {
        var config = configMgr.getServerConfig();
        var scoreLv = RoomHandler.room.opts.scorelv;
        var costNum = config["matchCoin"][GameData.client.gameType].cost[scoreLv];
        this.costTips.active = true;
        this.costTips.getComponent(cc.Label).string = "每局消耗" + costNum + "金币";
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        var localIdx = GameData.getPlayerPosByUid(uid);
        var playerHeadScp = this.playersNode[localIdx].getChildByName("headNode");
        if (playerHeadScp) {
          var chatNode = cc.find("chatNode/chat" + localIdx, playerHeadScp);
          if (null != chatNode) {
            var wordNode = cc.find("word", chatNode);
            var emoNode = cc.find("emo", chatNode);
            var yuyinNode = cc.find("yuyinNode", chatNode);
            if ("word" == type) {
              var content = data.detail.msg.data;
              var chatBg = cc.find("word/bg", chatNode);
              var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
              var contentStr = content;
              chatBg.width = 20 + 24 * contentStr.length;
              wordNode.getComponent("HideComponent").show(3);
              chatLabel.string = contentStr;
            } else if ("fast" == type) {
              var soundKey = data.detail.msg.data.sound;
              var content = data.detail.msg.data.content;
              var chatBg = cc.find("word/bg", chatNode);
              var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
              var contentStr = getShortStr(content, 10);
              chatBg.width = 30 * contentStr.length;
              wordNode.getComponent("HideComponent").show(3);
              chatLabel.string = contentStr;
              soundMngr.instance.playAudioChat(soundKey, this.playerSex);
            } else if ("emo" == type) {
              var animationName = data.detail.msg.data;
              cc.log("animationName:" + animationName);
              emoNode.getComponent(cc.Animation).play(animationName);
              emoNode.getComponent("HideComponent").show(3);
            } else if ("yuyin" == type) {
              if (!GameData.isPlayVioce) return;
              var soundurl = data.detail.msg.data;
              cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
              var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
              yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
              yuyinNode.getComponent("HideComponent").show(3);
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("pokerRoomPlayer");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showPlayer(i, this.playersNode[i]);
        this.onRoomReadyInfoHandler();
      },
      showPlayer: function showPlayer(pos, playerNode) {
        var player = GameData.getPlayerByPos(pos);
        if (null != player) {
          var headNode = playerNode.getChildByName("headNode");
          if (null == headNode) {
            headNode = cc.instantiate(this.playerPrefab);
            headNode.name = "headNode";
            playerNode.addChild(headNode);
          }
          this.headers.push(headNode);
          headNode.getComponent("pokerRoomPlayer").setPlayer(player);
          headNode.getComponent("pokerRoomPlayer").setHeadIcon(player.headimgurl);
          headNode.getComponent("pokerRoomPlayer").setName(player.name);
          headNode.getComponent("pokerRoomPlayer").setIsOnline(player.uid);
          headNode.getComponent("pokerRoomPlayer").showZhuang(player.uid == GameData.game.zhuangUid);
          playerNode.active = true;
        } else playerNode.active = false;
      },
      onReadyBtnClick: function onReadyBtnClick() {
        var self = this;
        this.quitRoomBtn.active = false;
        soundMngr.instance.playAudioOther("button");
        GameNet.getInstance().request("room.roomHandler.ready", {}, function(rtn) {
          self.readyBtn.active = false;
        });
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler() {
        var readyChild = this.readyNode.children;
        for (var i = 0; i < readyChild.length; i++) readyChild[i].active = false;
        var readyData = RoomHandler.getRoomReadyData();
        cc.log("readyData = " + JSON.stringify(readyData));
        for (var i = 0; i < GameData.joiners.length; i++) if (GameData.joiners[i]) {
          var uid = GameData.joiners[i].uid;
          if (null != GameData.joiners[i]) if (true == readyData[uid]) {
            var index = GameData.getPlayerPosByUid(uid);
            if (RoomHandler.room.opts.currencyType != gameDefine.currencyType.Currency_Coin) {
              this.showReadyIcon(index, true, false);
              uid === GameData.player.uid && (this.quitRoomBtn.active = false);
            }
            ZJH_roomData.gameInfo.status == ZJH_roomData.gameState.Settle && RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Card && uid === GameData.player.uid && (this.waitTips.active = true);
            ZJH_roomData.isGameEnd() && uid === GameData.player.uid && RoomHandler.room.opts.currencyType != gameDefine.currencyType.Currency_Coin && sendEvent("initTableUI");
          } else {
            var index = GameData.getPlayerPosByUid(uid);
            !ZJH_roomData.isGameEnd() && GameData.game.gameStart && uid === GameData.player.uid && RoomHandler.room.opts.currencyType != gameDefine.currencyType.Currency_Coin && sendEvent("initTableUI");
          } else {
            var index = GameData.getPlayerPosByUid(uid);
            this.showReadyIcon(index, false, false);
          }
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
      },
      showJoinerConnect: function showJoinerConnect(data) {
        this.showPlayers();
        var uid = data.detail.uid;
        var nameStr = GameData.getPlayerByUid(uid).name;
        createMoveMessage("玩家[" + nameStr + "]重新连接!");
      },
      backBtnClicked: function backBtnClicked() {
        soundMngr.instance.playAudioOther("button");
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitMjRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        soundMngr.instance.playAudioOther("button");
        var title = "三张牌 房间号:" + GameData.room.id;
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var str2 = "请您快速加入对局.";
        var str3 = GameData.room.opts.joinermin + "-" + GameData.room.opts.joinermax + "人,";
        var des = str1 + str3 + getRuleStrZJH(GameData.room.opts) + str2;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("三张牌", "我在三张牌等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("三张牌", "我在三张牌等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        NiuNiuMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id, "apply");
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        soundMngr.instance.playAudioOther("button");
        if (GameData.room.creator == GameData.player.uid) cc.director.loadScene("home"); else {
          GameData.player.roomid = void 0;
          RoomHandler.quitRoom(GameData.room.id);
        }
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? NiuNiuMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onGameTurn: function onGameTurn() {
        var self = this;
        ZJH_roomData.gameInfo.status != ZJH_roomData.gameState.End && this.onGameStartHandler();
        var turnUid = ZJH_roomData.gameInfo.currentPlayer;
        for (var j = 0; j < GameData.joiners.length; j++) {
          var player = GameData.joiners[j];
          if (null != player) {
            var isPlayer = -1 != ZJH_roomData.playersArr.indexOf(player.uid);
            var userId = player.uid;
            var localIdx = GameData.getPlayerPosByUid(userId);
            var playerHeadScp = this.playersNode[localIdx].getChildByName("headNode").getComponent("pokerRoomPlayer");
            playerHeadScp.showZhuang(player.uid == GameData.game.zhuangUid);
            if (isPlayer) {
              var time = ZJH_roomData.gameInfo.remainSec;
              ZJH_roomData.isGameEnd() || turnUid !== userId ? playerHeadScp.showCountDownEffect(false) : playerHeadScp.showCountDownEffect(true, 15 - time);
            }
          }
        }
        var isDie = -1 != ZJH_roomData.losersArr.indexOf(GameData.player.uid);
        var isGiveUp = -1 != ZJH_roomData.GiveUpArr.indexOf(GameData.player.uid);
        RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && (isGiveUp || isDie) && (this.quitRoomBtn.active = true);
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "三张牌,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      onGameStartHandler: function onGameStartHandler(data) {
        this.waitTips.active = false;
        this.readyCountDownNode.active = false;
        this.costTips.active = false;
        this.unschedule(this.showReadyCountDown);
        this.onReadyFlag = true;
        var isDie = -1 != ZJH_roomData.losersArr.indexOf(GameData.player.uid);
        RoomHandler.isPlayGameByUid(GameData.player.uid) ? isDie && RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin ? cc.log("zanbuchuli") : this.quitRoomBtn.active = !GameData.game.gameStart : this.quitRoomBtn.active = true;
        RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Card && (this.readyNode.active = !GameData.game.gameStart);
      },
      reconnect: function reconnect() {
        if (RoomHandler.isPlayGameByUid(GameData.player.uid)) {
          if (GameData.room.status > gameDefine.RoomState.WAIT) {
            this.quitRoomBtn.active = false;
            this.onGameTurn();
          }
        } else this.quitRoomBtn.active = true;
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          RoomHandler.readyCountDown > 0 && this.onReadyCountDown(1);
          GameData.room.status > gameDefine.RoomState.WAIT && this.onGameTurn();
        }
      },
      onReConnectShow: function onReConnectShow() {
        RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Card && GameData.room.status == gameDefine.RoomState.GAMEING && (this.readyNode.active = !GameData.game.gameStart);
      },
      isFirstPlayGame: function isFirstPlayGame() {
        var data = RoomHandler.getScoreData();
        for (var key in data) if (key == GameData.player.uid) return 0 == data[key];
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    "ZJH-RoomData": "ZJH-RoomData",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "ZJH-roomtable": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ced3fWPBTdKr5xvSd6EZTnU", "ZJH-roomtable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var ZJH_roomData = require("ZJH-RoomData");
    var gameDefine = require("gameDefine");
    var pokerAnimBase = require("pokerAnimationBase");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        operationBtns: cc.Node,
        secondOperBtns: cc.Node,
        pokersNode: cc.Node,
        escapeNode: cc.Node,
        selectCompareNode: cc.Node,
        compareLayer: cc.Node,
        chipsNode: cc.Node,
        playerStateNode: [ cc.Node ],
        playerChips: cc.Node,
        isMask: cc.Node,
        allScoreNode: cc.Node,
        playerNodes: {
          default: [],
          type: cc.Node
        },
        dragNode: cc.Node,
        continueBtn: cc.Node,
        animNodes: cc.Node,
        seePokerBtn: cc.Button,
        menXPokerBtn: cc.Node,
        allFollowBtn: cc.Button,
        mingPaiBtn: cc.Button,
        mingPaiNode: cc.Node,
        animationEffect: cc.Node,
        chipPrefab: cc.Prefab,
        playerStatePrefab: cc.Prefab,
        scorePrefab: cc.Prefab,
        pokerMask: cc.Prefab,
        chipMask: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playerSex = GameData.player.sex;
        this.pokerAnimBase = new pokerAnimBase();
        this.registListenr();
        this.initData();
        this.saveAllPokerPosition();
        this.initUI();
        this.onShow();
        this.onReConnectShow();
      },
      registListenr: function registListenr() {
        var self = this;
        this.isMask.on(cc.Node.EventType.TOUCH_END, function() {
          self.showSecondOperBtn(false);
        });
        registEvent("initTableUI", this, this.initUI);
        registEvent("onRoomInfo", this, this.onRoomInfo);
        registEvent("onPlayerCheck", this, this.showMyPokerCards);
        registEvent("zhaJinHua-onGameInfo", this, this.onShow);
        registEvent("refreshPoker", this, this.refreshPoker);
        registEvent("onZhaJinHuaRunEnd", this, this.onShowResult);
        registEvent("onPlayerGiveUp", this, this.onPlayerGiveUp);
        registEvent("onPlayerMingPai", this, this.onPlayerMingPai);
        registEvent("onPlayerAddChips", this, this.onPlayerAddChips);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("zhaJinHua-onGameStart", this, this.onGameStart);
        registEvent("onPlayerCompare", this, this.showCompareAnimation);
        registEvent("onPlayerFollowChips", this, this.onPlayerFollowChips);
      },
      onDestroy: function onDestroy() {
        this.isMask.off(cc.Node.EventType.TOUCH_END, function() {
          self.showSecondOperBtn(false);
        });
        unregistEvent("initTableUI", this, this.initUI);
        unregistEvent("onRoomInfo", this, this.onRoomInfo);
        unregistEvent("onPlayerCheck", this, this.showMyPokerCards);
        unregistEvent("zhaJinHua-onGameInfo", this, this.onShow);
        unregistEvent("refreshPoker", this, this.refreshPoker);
        unregistEvent("onZhaJinHuaRunEnd", this, this.onShowResult);
        unregistEvent("onPlayerGiveUp", this, this.onPlayerGiveUp);
        unregistEvent("onPlayerMingPai", this, this.onPlayerMingPai);
        unregistEvent("onPlayerAddChips", this, this.onPlayerAddChips);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("zhaJinHua-onGameStart", this, this.onGameStart);
        unregistEvent("onPlayerCompare", this, this.showCompareAnimation);
        unregistEvent("onPlayerFollowChips", this, this.onPlayerFollowChips);
      },
      initUI: function initUI() {
        this.initBtn();
        this.initPokerNode();
        this.initPlayerState();
        this.showSecondOperBtn(false);
        this.showSelectPlayerPK(false);
        this.operationBtns.active = false;
        this.hideNodeChild(this.animNodes);
        this.hideNodeChild(this.animationEffect);
        this.mingPaiNode.active = false;
      },
      initData: function initData() {
        this.pokerArr = [];
        this.pokerPosArr = [];
        this.allpokerPosArr = [];
        this.winner = 0;
        ZJH_roomData.startAnimFinish = false;
      },
      initBtn: function initBtn() {
        this.showSeePokerBtn(false);
        this.operationBtns.active = false;
        this.continueBtn.active = false;
        this.mingPaiBtn.node.active = false;
        this.allFollowBtn.node.active = false;
      },
      initPlayerState: function initPlayerState() {
        for (var i = 0; i < this.playerStateNode.length; i++) {
          this.playerStateNode[i].active = true;
          this.playerStateNode[i].removeAllChildren(true);
        }
      },
      initPokerNode: function initPokerNode() {
        this.hideNodeChild(this.pokersNode);
        this.hideNodeChild(this.escapeNode);
        for (var i = 0; i < this.pokersNode.childrenCount; i++) {
          var pokerStyle2 = this.pokersNode.children[i].getChildByName("style2");
          if (pokerStyle2) {
            pokerStyle2.active = false;
            for (var k = 0; k < pokerStyle2.childrenCount; k++) {
              this.showPokerContent(pokerStyle2.children[k], 0);
              pokerStyle2.children[k].removeAllChildren(true);
            }
          }
          for (var j = 0; j < this.pokersNode.children[i].getChildByName("style1").childrenCount; j++) {
            this.showPokerContent(this.pokersNode.children[i].getChildByName("style1").children[j], 0);
            this.pokersNode.children[i].getChildByName("style1").children[j].removeAllChildren(true);
            this.pokersNode.children[i].getChildByName("style1").children[j].position = this.allPokerPosArr[i][j];
          }
        }
      },
      onShow: function onShow() {
        if (ZJH_roomData.startAnimFinish) {
          this.showSeePokerBtn(true);
          this.showOperBtn();
        }
        if (ZJH_roomData.gameInfo.status == ZJH_roomData.gameState.Settle) {
          this.showSeePokerBtn(false);
          this.operationBtns.active = false;
        }
        this.showPlayerState();
        this.showPlayerChips();
      },
      onReConnectShow: function onReConnectShow() {
        if (0 != Object.keys(ZJH_roomData.gameInfo).length) {
          if (ZJH_roomData.gameInfo.status != ZJH_roomData.gameState.Settle && ZJH_roomData.gameInfo.status != ZJH_roomData.gameState.End) {
            var gameAllChipsArr = ZJH_roomData.getGameAllChips();
            for (var i = 0; i < gameAllChipsArr.length; i++) {
              var x = this.randomNum(0, 400) - 200;
              var y = this.randomNum(0, 100) - 100;
              var score = gameAllChipsArr[i];
              var clipNode = cc.instantiate(this.chipPrefab);
              clipNode.getComponent("poker_chipPrefab").setChipImg(score);
              clipNode.x = x;
              clipNode.y = y;
              clipNode.parent = this.chipsNode;
            }
          }
          this.showJoinerConnect();
        }
      },
      onRoomInfo: function onRoomInfo() {
        var bool = false;
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var player = GameData.joiners[i];
          if (null == player) {
            var index = GameData.getPlayerPosByUid("null");
            if (null != index) {
              this.escapeNode.children[index].active = bool;
              this.animNodes.children[index].active = bool;
              this.pokersNode.children[index].active = bool;
              this.playerChips.children[index].active = bool;
              this.playerStateNode[index].active = bool;
            }
          }
        }
      },
      onGameStart: function onGameStart() {
        ZJH_roomData.startAnimFinish = false;
        ZJH_roomData.isRunAnimation = true;
        this.initUI();
        this.savePokerData();
        this.playGameStartAnim();
        this.showPlayerChips();
      },
      onPlayerAddChips: function onPlayerAddChips(data) {
        var uid = data.detail.uid;
        var chipsNum = data.detail.chips;
        var sex = GameData.getPlayerSexByUid(uid);
        var num = Math.random() > .5 ? 1 : 2;
        var isFirstAddChip = chipsNum == ZJH_roomData.getGameAllChips()[0];
        isFirstAddChip ? soundMngr.instance.playAudioZJH("follow1", sex || 1) : soundMngr.instance.playAudioZJH("addChip" + num, sex || 1);
        this.addChip(chipsNum, uid);
      },
      onPlayerFollowChips: function onPlayerFollowChips(data) {
        var uid = data.detail.uid;
        var chipsNum = data.detail.chips;
        var sex = GameData.getPlayerSexByUid(uid);
        var isFirstTurn = ZJH_roomData.isFirstTurn(uid);
        if (isFirstTurn) soundMngr.instance.playAudioZJH("follow1", sex || 1); else {
          var num = Math.random() > .5 ? 2 : 3;
          soundMngr.instance.playAudioZJH("follow" + num, sex || 1);
        }
        this.addChip(chipsNum, uid);
      },
      onPlayerGiveUp: function onPlayerGiveUp(data) {
        var uid = data.detail.uid;
        var index = GameData.getPlayerPosByUid(uid);
        var giveUpNode = this.escapeNode.children[index];
        var scale = 0 == index ? 1 : .7;
        giveUpNode && this.pokerAnimBase.playScaleAnim(giveUpNode, scale);
        var sex = GameData.getPlayerSexByUid(uid);
        var num = Math.random() > .5 ? 1 : 2;
        soundMngr.instance.playAudioZJH("giveUp" + num, sex || 1);
        if (uid == GameData.player.uid) {
          this.showSecondOperBtn(false);
          this.showSelectPlayerPK(false);
          this.operationBtns.active = false;
        }
      },
      onPlayerMingPai: function onPlayerMingPai(data) {
        this.showMingPai(data);
      },
      onShowResult: function onShowResult(data) {
        this.showSecondOperBtn(false);
        this.showSelectPlayerPK(false);
        this.operationBtns.active = false;
        this.initBtn();
        ZJH_roomData.startAnimFinish = false;
        this.hideNodeChild(this.animNodes);
        var resultData = data.detail;
        var winner = resultData.winnerUid;
        this.winner = winner;
        var self = this;
        var index = GameData.getPlayerPosByUid(winner);
        var winnerPos = this.playerNodes[index].position;
        var scores = data.detail.scores;
        var delyTime = ZJH_roomData.isCompare ? 4.5 : 2;
        ZJH_roomData.isRunAnimation = true;
        this.scheduleOnce(function() {
          for (var i = 0; i < self.chipsNode.children.length; i++) {
            var childNode = self.chipsNode.children[i];
            self.resultChipsAnimation(childNode, winnerPos);
            self.allScoreNode.active = false;
            soundMngr.instance.playAudioZJH("get_chip", null);
          }
        }, delyTime);
        this.scheduleOnce(function() {
          for (var key in scores) self.moveAboutScore(key, scores[key]);
          RoomHandler.room.opts.currencyType != gameDefine.currencyType.Currency_Coin && (self.continueBtn.active = true);
          var posNode = self.playerStateNode[index];
          var seePokeNode = posNode.getChildByName(posNode.name + "_yikanpai");
          var seePokeMaskNode = posNode.getChildByName(posNode.name + "_pokerTypeMask");
          if (seePokeNode) {
            seePokeNode.active = false;
            seePokeMaskNode.active = false;
          }
          var winIndex = GameData.getPlayerPosByUid(winner);
          var winNode = this.animationEffect.children[winIndex];
          winNode.active = true;
          this.pokerAnimBase.playDragAnimation(winNode, "zjh/animation/headEffect", "newAnimation");
          var animNode = self.animNodes.children[index];
          animNode.active = true;
          self.pokerAnimBase.playDragAnimation(animNode, "zjh/animation/shengli", "newAnimation");
          self.refreshPlayerAllScore();
          self.mingPaiBtn.node.active = winner == GameData.player.uid;
          ZJH_roomData.isRunAnimation = false;
        }, delyTime + .5);
        RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && this.scheduleOnce(function() {
          self.mingPaiBtn.node.active = false;
        }, delyTime + 3.5);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        if (data) {
          var uid = data.detail.uid;
          if (uid != GameData.player.uid) return;
        }
        ZJH_roomData.startAnimFinish = GameData.game.gameStart;
        if (ZJH_roomData.gameInfo.status == ZJH_roomData.gameState.Settle || ZJH_roomData.gameInfo.status == ZJH_roomData.gameState.End) {
          RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Card && (this.continueBtn.active = true);
          this.chipsNode.removeAllChildren(true);
          this.allScoreNode.active = false;
        }
        if (GameData.room.status == gameDefine.RoomState.GAMEING && ZJH_roomData.gameInfo.status != ZJH_roomData.gameState.Settle) {
          this.showSeePokerBtn(true);
          this.showOperBtn();
          this.continueBtn.active = false;
        } else {
          this.showSeePokerBtn(false);
          this.operationBtns.active = false;
        }
        ZJH_roomData.isRunAnimation = false;
        for (var i = 0; i < ZJH_roomData.playersArr.length; i++) {
          var isWin = ZJH_roomData.getWinPlayer(ZJH_roomData.playersArr[i]);
          var index = GameData.getPlayerPosByUid(ZJH_roomData.playersArr[i]);
          var animNode = this.animNodes.children[index];
          var isMingPai = ZJH_roomData.isMingPai(ZJH_roomData.playersArr[i]);
          if (animNode) if (isWin) if (isMingPai) animNode.active = true; else {
            animNode.active = true;
            this.mingPaiBtn.node.active = ZJH_roomData.playersArr[i] == GameData.player.uid;
          } else animNode.active = false;
        }
        this.showPokerCards();
        this.showPlayerState();
        this.refreshPlayerAllScore();
        var isObPlayer = ZJH_roomData.isObPlayer(GameData.player.uid);
        if (isObPlayer) {
          var index = GameData.getPlayerPosByUid(GameData.player.uid);
          this.escapeNode.children[index].active = false;
          this.animNodes.children[index].active = false;
        }
        var readyData = RoomHandler.getRoomReadyData();
        true != readyData[GameData.player.uid] || ZJH_roomData.gameInfo.status != ZJH_roomData.gameState.Settle && ZJH_roomData.gameInfo.status != ZJH_roomData.gameState.End || this.initUI();
      },
      showSeePokerBtn: function showSeePokerBtn(bool) {
        var isObPlayer = ZJH_roomData.isObPlayer(GameData.player.uid);
        var isSee = ZJH_roomData.getPlayerIsSeePokerByUid(GameData.player.uid);
        var isDie = -1 != ZJH_roomData.losersArr.indexOf(GameData.player.uid);
        var isGameEnd = ZJH_roomData.isGameEnd();
        if (ZJH_roomData.startAnimFinish) {
          this.allFollowBtn.node.active = !(isDie || isObPlayer || isGameEnd);
          var checkBtn = cc.find("checkBtn", this.allFollowBtn.node);
          var animationNode = cc.find("animation", this.allFollowBtn.node);
          var isAutoFollow = ZJH_roomData.isAutoFollow(GameData.player.uid);
          if (isAutoFollow) {
            checkBtn.active = true;
            animationNode.active = true;
          } else {
            checkBtn.active = false;
            animationNode.active = false;
          }
          if (isObPlayer || isSee || isDie) {
            this.seePokerBtn.node.active = false;
            this.menXPokerBtn.active = false;
            return;
          }
          this.seePokerBtn.node.active = bool;
        } else this.seePokerBtn.node.active = false;
        var isMaxMenTurn = ZJH_roomData.gameInfo.curTurnNum <= GameData.room.opts.canNotLookTurnNum;
        if (isMaxMenTurn) {
          this.seePokerBtn.interactable = false;
          this.menXPokerBtn.active = true;
          var menXLb = cc.find("menX", this.menXPokerBtn);
          menXLb.getComponent(cc.Label).string = GameData.room.opts.canNotLookTurnNum - (ZJH_roomData.gameInfo.curTurnNum - 1);
        } else {
          this.seePokerBtn.interactable = true;
          this.menXPokerBtn.active = false;
        }
      },
      showOperBtn: function showOperBtn() {
        var isObPlayer = ZJH_roomData.isObPlayer(GameData.player.uid);
        var isGameEnd = ZJH_roomData.isGameEnd();
        var isAutoFollow = ZJH_roomData.isAutoFollow(GameData.player.uid);
        var isLoser = ZJH_roomData.isLoser(GameData.player.uid);
        if (ZJH_roomData.gameInfo.currentPlayer != GameData.player.uid || ZJH_roomData.isRunAnimation || isAutoFollow || isObPlayer || isGameEnd || isLoser) {
          this.operationBtns.active = false;
          this.showSecondOperBtn(false);
        } else {
          this.operationBtns.active = true;
          this.controlBtnDisable();
        }
      },
      showSecondOperBtn: function showSecondOperBtn(bool) {
        this.secondOperBtns.active = bool;
        if (bool) {
          this.isMask.active = true;
          this.showChipBtnImg();
        } else this.isMask.active = false;
      },
      showPlayerChips: function showPlayerChips() {
        this.hideNodeChild(this.playerChips);
        if (!GameData.game.gameStart) return;
        for (var i = 0; i < ZJH_roomData.playersArr.length; i++) {
          var uid = ZJH_roomData.playersArr[i];
          var index = GameData.getPlayerPosByUid(uid);
          this.playerChips.children[index] && (this.playerChips.children[index].active = true);
        }
        this.refreshPlayerChipNum();
      },
      showChipBtnImg: function showChipBtnImg() {
        if (GameData.room.opts) {
          var chipType = GameData.room.opts.chipsType;
          var currMaxChipValue = parseInt(ZJH_roomData.gameInfo.maxChipsValue);
          var isSee = ZJH_roomData.getPlayerIsSeePokerByUid(GameData.player.uid);
          var chipArr = [];
          chipArr = chipType ? [ 5, 10, 20, 50, 100 ] : [ 1, 2, 5, 10, 20 ];
          if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
            var scoreLv = RoomHandler.room.opts.scorelv;
            chipArr = ZJH_roomData.getRoomCoinChipConfig(scoreLv);
          }
          for (var j = 0; j < this.secondOperBtns.childrenCount; j++) this.secondOperBtns.children[j].removeAllChildren(true);
          for (var i = 0; i < this.secondOperBtns.childrenCount; i++) {
            this.secondOperBtns.children[i].getComponent(cc.Button).normalSprite = null;
            var iconUrl = "resources/zjh/UI/img/chip/chip_" + chipArr[i] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            this.secondOperBtns.children[i].getComponent(cc.Button).normalSprite = new cc.SpriteFrame(texture);
            if (i < 4) {
              if (isSee) {
                if (chipArr[i] <= 2 * currMaxChipValue) {
                  this.secondOperBtns.children[i].getComponent(cc.Button).interactable = false;
                  this.addNodeMask(this.secondOperBtns.children[i], this.chipMask);
                } else this.secondOperBtns.children[i].getComponent(cc.Button).interactable = true;
                if (2 == currMaxChipValue || 20 == currMaxChipValue || 100 == currMaxChipValue || 600 == currMaxChipValue || 2e3 == currMaxChipValue) if (chipArr[i] <= 2.5 * currMaxChipValue) {
                  this.secondOperBtns.children[i].getComponent(cc.Button).interactable = false;
                  this.addNodeMask(this.secondOperBtns.children[i], this.chipMask);
                } else this.secondOperBtns.children[i].getComponent(cc.Button).interactable = true;
              } else if (chipArr[i] <= currMaxChipValue) {
                this.secondOperBtns.children[i].getComponent(cc.Button).interactable = false;
                this.addNodeMask(this.secondOperBtns.children[i], this.chipMask);
              } else this.secondOperBtns.children[i].getComponent(cc.Button).interactable = true;
              if (0 == i && isSee) {
                this.secondOperBtns.children[i].getComponent(cc.Button).interactable = false;
                this.addNodeMask(this.secondOperBtns.children[i], this.chipMask);
              }
            }
          }
          var lastChipNode = this.secondOperBtns.children[4];
          if (isSee) if (chipArr[4] <= 2 * currMaxChipValue) {
            lastChipNode.getComponent(cc.Button).interactable = false;
            this.addNodeMask(lastChipNode, this.chipMask);
          } else lastChipNode.getComponent(cc.Button).interactable = true; else {
            lastChipNode.getComponent(cc.Button).interactable = false;
            this.addNodeMask(lastChipNode, this.chipMask);
          }
        }
      },
      showSelectPlayerPK: function showSelectPlayerPK(bool) {
        this.selectCompareNode.active = bool;
        var CompareNode = cc.find("nodes", this.selectCompareNode);
        this.hideNodeChild(CompareNode);
        if (!bool) return;
        var livePlayers = ZJH_roomData.getLivePlayers();
        for (var i = 0; i < livePlayers.length; i++) {
          var uid = livePlayers[i];
          var index = GameData.getPlayerPosByUid(uid);
          uid != GameData.player.uid ? CompareNode.children[index].active = true : CompareNode.children[index].active = false;
        }
      },
      showPokerCards: function showPokerCards(data) {
        this.secondOperBtns.active && this.showChipBtnImg();
        if (data) {
          var sex = GameData.getPlayerSexByUid(data.detail.uid);
          var num = Math.random() > .5 ? 1 : 2;
          soundMngr.instance.playAudioZJH("kanpai" + num, sex);
        }
        this.hideNodeChild(this.pokersNode);
        for (var i = 0; i < ZJH_roomData.playersArr.length; i++) {
          var uid = ZJH_roomData.playersArr[i];
          var index = GameData.getPlayerPosByUid(uid);
          var pokersNode = this.pokersNode.children[index];
          var pokers = ZJH_roomData.getPlayerPokerByUid(uid);
          var isSee = ZJH_roomData.getPlayerIsSeePokerByUid(uid);
          var isMingPai = ZJH_roomData.isMingPai(uid);
          pokersNode && (pokersNode.active = true);
          if (pokers && pokersNode) {
            var pokerStyle = pokersNode.getChildByName("style1");
            if (isSee && uid == GameData.player.uid || isMingPai) for (var j = 0; j < pokersNode.childrenCount; j++) this.showPokerContent(pokerStyle.children[j], pokers[j]); else for (var j = 0; j < pokersNode.childrenCount; j++) this.showPokerContent(pokerStyle.children[j], 0);
          }
        }
      },
      showMyPokerCards: function showMyPokerCards(data) {
        var uid = data.detail.uid;
        var index = GameData.getPlayerPosByUid(uid);
        var sex = GameData.getPlayerSexByUid(uid);
        var num = Math.random() > .5 ? 1 : 2;
        soundMngr.instance.playAudioZJH("kanpai" + num, sex);
        this.playFlopAnimtaion(uid);
        var pokeType = ZJH_roomData.getPlayerPokerTypeByUid(uid);
        cc.log("牌型：" + pokeType);
        var posNode = this.playerStateNode[index];
        this.scheduleOnce(function() {
          this.addPlayerStateImg("pokerTypeMask", posNode, .8, -45);
          this.addPlayerStateImg(pokeType, posNode, .8, -40);
        }, .5);
      },
      playFlopAnimtaion: function playFlopAnimtaion(uid) {
        var index = GameData.getPlayerPosByUid(uid);
        var pokersNode = this.pokersNode.children[index].getChildByName("style1");
        var pokers = ZJH_roomData.getPlayerPokerByUid(uid);
        if (pokers) {
          for (var jj = 0; jj < pokersNode.childrenCount; jj++) this.pokerAnimBase.playFlopAnimation(pokersNode.children[jj]);
          this.scheduleOnce(function() {
            for (var jjj = 0; jjj < pokersNode.childrenCount; jjj++) this.showPokerContent(pokersNode.children[jjj], pokers[jjj]);
          }, .25);
        }
      },
      showPokerContent: function showPokerContent(cardNode, pokerId) {
        var pokerNum = 0;
        pokerNum = pokerId > 0 ? this.getSpriteNameByCardId(pokerId) : pokerId;
        var iconUrl = "resources/niuNiuTable/poker/" + pokerNum + ".png";
        this.setNodeImg(cardNode, iconUrl);
      },
      showMingPai: function showMingPai(data) {
        this.mingPaiNode.active = true;
        var animation = cc.find("mingpaiAnim", this.mingPaiNode);
        var downNode = cc.find("downNode", this.mingPaiNode);
        this.setMingPaiData(downNode, data);
        this.pokerAnimBase.flyToMidAction(downNode, .5, 500);
        this.pokerAnimBase.playDragAnimation(animation, "zjh/animation/liangpai", "newAnimation");
        this.scheduleOnce(function() {
          this.mingPaiNode.active = false;
        }, 1.3);
      },
      showPlayerState: function showPlayerState() {
        for (var i = 0; i < ZJH_roomData.playersArr.length; i++) {
          var uid = ZJH_roomData.playersArr[i];
          var index = GameData.getPlayerPosByUid(uid);
          var posNode = this.playerStateNode[index];
          var isSeePoker = ZJH_roomData.getPlayerIsSeePokerByUid(uid);
          var isLoser = ZJH_roomData.isLoser(uid);
          var isGiveUp = -1 != ZJH_roomData.GiveUpArr.indexOf(uid);
          var isWin = ZJH_roomData.getWinPlayer(uid);
          if (posNode && this.pokersNode.children[index]) {
            var pokerStyle1 = this.pokersNode.children[index].getChildByName("style1");
            var pokerStyle2 = this.pokersNode.children[index].getChildByName("style2");
            if (isLoser) this.addPlayerStateImg("shule", posNode, 0); else {
              var loseImg = posNode.getChildByName("shule");
              loseImg && (loseImg.active = false);
            }
            var giveUpNode = this.escapeNode.children[index];
            if (isGiveUp) {
              posNode.removeAllChildren(true);
              giveUpNode.active = true;
            } else giveUpNode.active = false;
            if (isSeePoker && uid != GameData.player.uid) {
              this.addPlayerStateImg("pokerTypeMask", posNode, .6);
              this.addPlayerStateImg("yikanpai", posNode);
              pokerStyle2.active = true;
              pokerStyle1.active = false;
            }
            var seePokeNode = posNode.getChildByName(posNode.name + "_yikanpai");
            var seePokeMaskNode = posNode.getChildByName(posNode.name + "_pokerTypeMask");
            isWin && posNode.removeAllChildren(true);
            if (isLoser || isGiveUp) {
              for (var j = 0; j < pokerStyle1.childrenCount; j++) {
                this.addNodeMask(pokerStyle1.children[j], this.pokerMask);
                pokerStyle2 && this.addNodeMask(pokerStyle2.children[j], this.pokerMask);
              }
              this.seePokerBtn.active = false;
              if (seePokeNode) {
                seePokeNode.active = false;
                seePokeMaskNode.active = false;
              }
            }
          }
        }
      },
      showCompareAnimation: function showCompareAnimation(data) {
        var self = this;
        var winUid = 0;
        var loserUid = 0;
        var chips = data.detail.chips;
        var data = data.detail;
        var sex = GameData.getPlayerSexByUid(data.uid);
        if (data.isWin) {
          winUid = data.uid;
          loserUid = data.otherId;
        } else {
          winUid = data.otherId;
          loserUid = data.uid;
        }
        var loseIndex = GameData.getPlayerPosByUid(loserUid);
        var loseNode = this.playerStateNode[loseIndex];
        var pokerNode = this.pokersNode.children[loseIndex].getChildByName("style1");
        var pokerStyle2 = this.pokersNode.children[loseIndex].getChildByName("style2");
        pokerStyle2 && pokerStyle2.active && (pokerNode = pokerStyle2);
        loseNode.removeAllChildren(true);
        this.addPlayerStateImg("shule", loseNode);
        var loseImg = cc.find(loseNode.name + "_shule", loseNode);
        loseImg && (loseImg.active = false);
        for (var j = 0; j < pokerNode.childrenCount; j++) {
          this.addNodeMask(pokerNode.children[j], this.pokerMask);
          var pokerMaskNode = cc.find(pokerNode.children[j].name + "mask", pokerNode.children[j]);
          pokerMaskNode && (pokerMaskNode.active = false);
        }
        ZJH_roomData.isRunAnimation = true;
        this.addChip(chips, data.uid);
        var num = Math.random() > .5 ? 1 : 2;
        soundMngr.instance.playAudioZJH("cmp" + num, sex || 1);
        this.scheduleOnce(function() {
          self.playPkAction(winUid, loserUid, data);
        }.bind(this), 1);
      },
      refreshPlayerChipNum: function refreshPlayerChipNum() {
        for (var i = 0; i < ZJH_roomData.playersArr.length; i++) {
          var uid = ZJH_roomData.playersArr[i];
          var index = GameData.getPlayerPosByUid(uid);
          var chipsNum = ZJH_roomData.getPlayerChipsByUid(uid);
          var chipNumLb = cc.find("score", this.playerChips.children[index]);
          var scores = RoomHandler.getPlayersCoin();
          chipNumLb && (chipNumLb.getComponent(cc.Label).string = chipsNum + "");
          if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && this.playerNodes[index]) {
            var playerNode = this.playerNodes[index].getChildByName("headNode");
            playerNode.getComponent("pokerRoomPlayer").setCoin(scores[uid] - chipsNum);
          }
        }
        var allScore = 0;
        var allScoreArr = ZJH_roomData.getGameAllChips();
        this.allScoreNode.active = true;
        if (allScoreArr) {
          for (var i = 0; i < allScoreArr.length; i++) allScore += allScoreArr[i];
          var allScoreLb = cc.find("score", this.allScoreNode);
          allScore = ConversionCoinValue(allScore, 2);
          allScoreLb.getComponent(cc.Label).string = allScore;
        }
        var gameTurnLb = cc.find("gameTurnLb", this.allScoreNode);
        var gameTurn = ZJH_roomData.gameInfo.curTurnNum;
        gameTurnLb.getComponent(cc.Label).string = "第" + gameTurn + "轮";
      },
      playGameStartAnim: function playGameStartAnim() {
        var self = this;
        this.dragNode.active = true;
        this.pokerAnimBase.playDragAnimation(this.dragNode, "zjh/animation/kaishi", "newAnimation", function() {
          cc.log("gamestart finish");
          self.dragNode.active = false;
        });
        soundMngr.instance.playAudioZJH("start", null);
        this.stake();
        soundMngr.instance.playAudioZJH("chip_add", null);
        this.scheduleOnce(this.dealAction, 2);
      },
      stake: function stake() {
        var scoreBase = 0;
        scoreBase = GameData.room.opts.chipsType ? 5 : 1;
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          var scoreLv = RoomHandler.room.opts.scorelv;
          scoreBase = ZJH_roomData.getRoomCoinChipConfig(scoreLv)[0];
        }
        for (var i = 0; i < ZJH_roomData.playersArr.length; i++) this.addChip(scoreBase, ZJH_roomData.playersArr[i]);
      },
      dealAction: function dealAction() {
        var self = this;
        this.pokerAnimBase.dealAction(this.pokerArr, this.pokersNode.position, this.pokerPosArr, .4, function(delytime) {
          self.scheduleOnce(function() {
            ZJH_roomData.startAnimFinish = true;
            ZJH_roomData.isRunAnimation = false;
            self.showOperBtn();
            self.showSeePokerBtn(true);
          }, delytime);
        });
        for (var i = 0; i < this.pokerArr.length; i++) this.scheduleOnce(function() {
          soundMngr.instance.playAudioZJH("card", null);
        }, .1 * (i + 1));
      },
      clipFlyToTableAnimation: function clipFlyToTableAnimation(node) {
        var x = this.randomNum(0, 400) - 200;
        var y = this.randomNum(0, 100) - 100;
        var action1 = cc.moveTo(.3, cc.p(x, y));
        var action3 = cc.callFunc(function() {
          node.removeFromParent(true);
        }, node);
        var action4 = cc.fadeOut(.1);
        this.chipsNode.childrenCount > 80 ? node.runAction(cc.sequence(action1, action4, action3)).easing(cc.easeCubicActionOut()) : node.runAction(action1).easing(cc.easeCubicActionOut());
      },
      playPkAction: function playPkAction(winUid, loserUid, data) {
        var self = this;
        var leftNode = cc.find("left", this.compareLayer);
        var rightNode = cc.find("right", this.compareLayer);
        var leftResultImg = cc.find("resultIcon", leftNode);
        var rightResultImg = cc.find("resultIcon", rightNode);
        var midNode = cc.find("mid", this.compareLayer);
        var vsNode = cc.find("vs", this.compareLayer);
        var isWin = data.isWin;
        var actionTime = .3;
        this.setPkData(data);
        this.compareLayer.active = true;
        this.compareLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        midNode.active = false;
        leftResultImg.active = false;
        rightResultImg.active = false;
        this.pokerAnimBase.flyToMidAction(leftNode, actionTime, -500);
        this.pokerAnimBase.flyToMidAction(rightNode, actionTime, 500);
        soundMngr.instance.playAudioZJH("compare", null);
        this.scheduleOnce(function() {
          midNode.active = true;
        }, actionTime - .2);
        this.scheduleOnce(function() {
          this.pokerAnimBase.playDragAnimation(vsNode, "zjh/animation/vs", "vs");
        }, actionTime);
        var imgUrl1 = "";
        var imgUrl2 = "";
        if (isWin) {
          imgUrl1 = "resources/zjh/UI/img/img_win.png";
          imgUrl2 = "resources/zjh/UI/img/img_lose.png";
          this.setNodeImg(leftResultImg, imgUrl1);
          this.setNodeImg(rightResultImg, imgUrl2);
        } else {
          imgUrl1 = "resources/zjh/UI/img/img_lose.png";
          imgUrl2 = "resources/zjh/UI/img/img_win.png";
          this.setNodeImg(leftResultImg, imgUrl1);
          this.setNodeImg(rightResultImg, imgUrl2);
        }
        this.scheduleOnce(function() {
          this.pokerAnimBase.playScaleAnim(leftResultImg, 1);
          this.pokerAnimBase.playScaleAnim(rightResultImg, 1);
        }, actionTime + .5);
        this.scheduleOnce(function() {
          this.compareLayer.active = false;
        }, actionTime + 2);
        var loseIndex = GameData.getPlayerPosByUid(loserUid);
        var loseNode = this.playerStateNode[loseIndex];
        var pokerNode = this.pokersNode.children[loseIndex].getChildByName("style1");
        var pokerStyle2 = this.pokersNode.children[loseIndex].getChildByName("style2");
        pokerStyle2 && pokerStyle2.active && (pokerNode = pokerStyle2);
        var loseImg = cc.find(loseNode.name + "_shule", loseNode);
        this.scheduleOnce(function() {
          if (loseImg) {
            loseImg.active = true;
            self.pokerAnimBase.playScaleAnim(loseImg, 1);
          }
          loserUid == GameData.player.uid && soundMngr.instance.playAudioZJH("shibai", null);
          for (var j = 0; j < pokerNode.childrenCount; j++) {
            var pokerMaskNode = cc.find(pokerNode.children[j].name + "mask", pokerNode.children[j]);
            pokerMaskNode && (pokerMaskNode.active = true);
          }
          var isEnd = ZJH_roomData.isGameEnd();
          isEnd || (ZJH_roomData.isRunAnimation = false);
        }, actionTime + 2.2);
      },
      operBtnClick: function operBtnClick(eve, data) {
        var type = data;
        cc.log("operAction Btn index:" + type);
        soundMngr.instance.playAudioOther("button");
        var isAutoFollow = ZJH_roomData.isAutoFollow(GameData.player.uid);
        var isMaxTurn = ZJH_roomData.gameInfo.curTurnNum >= GameData.room.opts.maxTunNum;
        var isCheckTwoPlayer = ZJH_roomData.playersArr.length - ZJH_roomData.losersArr.length == 2;
        var isTwo = isCheckTwoPlayer && ZJH_roomData.gameInfo.curTurnNum >= 3;
        if (isAutoFollow && !isMaxTurn && !isTwo) {
          createMoveMessage("正处在自动跟注状态,请取消自动跟注！");
          return;
        }
        switch (parseInt(type)) {
         case 1:
          this.operationBtns.active = false;
          this.requestPlayerGiveUp();
          break;

         case 2:
          this.comparePoker();
          break;

         case 3:
          this.operationBtns.active = false;
          this.requestPlayerFollowChips();
          break;

         case 4:
          this.showSecondOperBtn(true);
        }
      },
      secondOperBtnClick: function secondOperBtnClick(eve, data) {
        var type = data;
        var clipsArrNum = [];
        var clipNum = 0;
        soundMngr.instance.playAudioOther("button");
        clipsArrNum = GameData.room.opts.chipsType ? [ 5, 10, 20, 50, 100 ] : [ 1, 2, 5, 10, 20 ];
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          var scoreLv = RoomHandler.room.opts.scorelv;
          clipsArrNum = ZJH_roomData.getRoomCoinChipConfig(scoreLv);
        }
        switch (parseInt(type)) {
         case 1:
          clipNum = clipsArrNum[0];
          break;

         case 2:
          clipNum = clipsArrNum[1];
          break;

         case 3:
          clipNum = clipsArrNum[2];
          break;

         case 4:
          clipNum = clipsArrNum[3];
          break;

         case 5:
          clipNum = clipsArrNum[4];
        }
        this.showSecondOperBtn(false);
        this.operationBtns.active = false;
        this.requestPlayerAddChips(clipNum);
      },
      comparePoker: function comparePoker() {
        var isLastTwoPlayer = ZJH_roomData.playersArr.length - ZJH_roomData.losersArr.length == 2;
        var toPkUid = 0;
        var livePlayerArr = ZJH_roomData.getLivePlayers();
        for (var i = 0; i < livePlayerArr.length; i++) if (GameData.player.uid != livePlayerArr[i]) {
          toPkUid = livePlayerArr[i];
          break;
        }
        isLastTwoPlayer ? this.requestPlayerCompare(toPkUid) : this.showSelectPlayerPK(true);
      },
      selectPlayerClick: function selectPlayerClick(eve, data) {
        var index = data;
        var uid = GameData.getPlayerByPos(index).uid;
        this.showSelectPlayerPK(false);
        this.requestPlayerCompare(uid);
      },
      controlBtnDisable: function controlBtnDisable() {
        if (ZJH_roomData.gameInfo) {
          cc.log("当前轮数：" + ZJH_roomData.gameInfo.curTurnNum);
          var isMaxTurn = ZJH_roomData.gameInfo.curTurnNum == GameData.room.opts.maxTunNum;
          var maxChipValue = GameData.room.opts.chipsType ? 50 : 10;
          if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
            var scoreLv = RoomHandler.room.opts.scorelv;
            var len = ZJH_roomData.CoinChipConfig[scoreLv].length - 2;
            maxChipValue = ZJH_roomData.getRoomCoinChipConfig(scoreLv)[len];
          }
          var isCheckTwoPlayer = ZJH_roomData.playersArr.length - ZJH_roomData.losersArr.length == 2;
          var isCurrMaxChipValue = parseInt(ZJH_roomData.gameInfo.maxChipsValue) == maxChipValue;
          var operBtn3 = cc.find("operationBtn3", this.operationBtns);
          operBtn3.getComponent(cc.Button).interactable = !isMaxTurn;
          var operBtn4 = cc.find("operationBtn4", this.operationBtns);
          operBtn4.getComponent(cc.Button).interactable = !isMaxTurn && !isCurrMaxChipValue;
          var operBtn2 = cc.find("operationBtn2", this.operationBtns);
          isMaxTurn || isCheckTwoPlayer && ZJH_roomData.gameInfo.curTurnNum >= 3 || ZJH_roomData.gameInfo.curTurnNum >= 5 ? operBtn2.getComponent(cc.Button).interactable = true : operBtn2.getComponent(cc.Button).interactable = false;
        }
      },
      continueClick: function continueClick() {
        this.continueBtn.active = false;
        this.mingPaiBtn.active = false;
        soundMngr.instance.playAudioOther("button");
        if (GameData.game.close) {
          var summaryLayer = cc.find("layer_summary", this.node);
          summaryLayer.active = true;
        } else GameNet.getInstance().request("room.roomHandler.ready", {}, function(rtn) {});
      },
      mingPaiClick: function mingPaiClick() {
        soundMngr.instance.playAudioOther("button");
        this.mingPaiBtn.node.active = false;
        ZJHHandler.getInstance().requestPlayerMingPai();
      },
      allFollowClick: function allFollowClick() {
        soundMngr.instance.playAudioOther("button");
        this.requestAutoFollow();
      },
      requestPlayerCheck: function requestPlayerCheck() {
        if (inCD(2e3)) return;
        soundMngr.instance.playAudioOther("button");
        ZJHHandler.getInstance().requestPlayerCheck();
      },
      requestPlayerAddChips: function requestPlayerAddChips(chipNum) {
        if (this.isCheckPlayerCoin()) return;
        ZJHHandler.getInstance().requestPlayerAddChips(chipNum);
      },
      requestPlayerGiveUp: function requestPlayerGiveUp() {
        this.showSecondOperBtn(false);
        ZJHHandler.getInstance().requestPlayerGiveUp();
      },
      requestPlayerFollowChips: function requestPlayerFollowChips() {
        if (this.isCheckPlayerCoin()) return;
        this.showSecondOperBtn(false);
        ZJHHandler.getInstance().requestPlayerFollowChips();
      },
      requestAutoFollow: function requestAutoFollow() {
        var checkBtn = cc.find("checkBtn", this.allFollowBtn.node);
        var animationNode = cc.find("animation", this.allFollowBtn.node);
        checkBtn.active = !checkBtn.active;
        animationNode.active = !animationNode.active;
        if (this.isCheckPlayerCoin()) return;
        ZJHHandler.getInstance().requestAutoFollow(checkBtn.active);
      },
      requestPlayerCompare: function requestPlayerCompare(uid) {
        if (this.isCheckPlayerCoin()) return;
        this.showSecondOperBtn(false);
        this.operationBtns.active = false;
        ZJHHandler.getInstance().requestPlayerCompare(uid);
      },
      getSpriteNameByCardId: function getSpriteNameByCardId(pokerId) {
        var suitType = parseInt(pokerId / 100);
        var baseNum = 16 * (suitType - 1);
        var cardNum = pokerId - 100 * suitType;
        return cardNum + baseNum;
      },
      addChip: function addChip(data, turnerUid) {
        var score = data;
        var localIdx = GameData.getPlayerPosByUid(turnerUid);
        var clipNode = cc.instantiate(this.chipPrefab);
        var handenode = this.playerNodes[localIdx];
        if (clipNode) {
          clipNode.getComponent("poker_chipPrefab").setChipImg(score);
          clipNode.parent = this.chipsNode;
          clipNode.x = handenode.x;
          clipNode.y = handenode.y;
          clipNode.active = true;
          this.clipFlyToTableAnimation(clipNode);
        }
      },
      randomNum: function randomNum(min, max) {
        var distance = max - min;
        var num = Math.random() * distance + min;
        return parseInt(num, 10);
      },
      saveAllPokerPosition: function saveAllPokerPosition() {
        this.allPokerPosArr = [];
        for (var j = 0; j < this.pokersNode.childrenCount; j++) {
          var tempArr = [];
          var poker = this.pokersNode.children[j].getChildByName("style1");
          for (var k = 0; k < poker.childrenCount; k++) tempArr.push(poker.children[k].position);
          this.allPokerPosArr.push(tempArr);
        }
      },
      savePokerData: function savePokerData() {
        this.pokerArr = [];
        this.pokerPosArr = [];
        var playersArr = ZJH_roomData.playersArr;
        for (var i = 0; i < 3; i++) for (var j = 0; j < playersArr.length; j++) {
          var index = GameData.getPlayerPosByUid(playersArr[j]);
          var poker = this.pokersNode.children[index].getChildByName("style1");
          this.pokerArr.push(poker.children[i]);
          this.pokerPosArr.push(poker.children[i].position);
        }
        cc.log("save Pokerdata finish!");
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      addPlayerStateImg: function addPlayerStateImg(img, parent, scale, posY) {
        var stateNode = parent.getChildByName(parent.name + "_" + img);
        if (null == stateNode) {
          stateNode = cc.instantiate(this.playerStatePrefab);
          stateNode.parent = parent;
          stateNode.getComponent("poker_playerStateImgPrefab").setImg(img, scale, posY);
          stateNode.name = parent.name + "_" + img;
        }
      },
      addNodeMask: function addNodeMask(node, prefab) {
        var maskNode = node.getChildByName(node.name + "mask");
        if (null == maskNode) {
          maskNode = cc.instantiate(prefab);
          node.addChild(maskNode);
          maskNode.name = node.name + "mask";
        }
      },
      setMingPaiData: function setMingPaiData(node, data) {
        var uid = data.detail.uid;
        var pokerArr = ZJH_roomData.getPlayerPokerByUid(uid);
        var pokeType = ZJH_roomData.getPlayerPokerTypeByUid(uid);
        var headIconNode = cc.find("playerNode/headMask/headIcon", node);
        var name = cc.find("playerNode/name", node);
        var pokersNode = cc.find("pokerNode/pokers", node);
        var pokerTypeNode = cc.find("pokerNode/pokerTypeBg/pokerType", node);
        var IconImg = GameData.getPlayerByUid(uid).headimgurl;
        var nameStr = GameData.getPlayerByUid(uid).name;
        this.setHeadIcon(headIconNode, IconImg);
        name.getComponent(cc.Label).string = getShortStr(nameStr, 4);
        if (pokerArr && pokersNode) for (var i = 0; i < pokersNode.childrenCount; i++) this.showPokerContent(pokersNode.children[i], pokerArr[i]);
        var pokeTypeUrl = "resources/zjh/UI/artword/artword_" + pokeType + ".png";
        this.setNodeImg(pokerTypeNode, pokeTypeUrl);
      },
      setPkData: function setPkData(data) {
        var firstUid = data.uid;
        var secondUid = data.otherId;
        var leftIcon = cc.find("left/playerIcon", this.compareLayer);
        var rightIcon = cc.find("right/playerIcon", this.compareLayer);
        var leftPoker = cc.find("left/pokers", this.compareLayer);
        var rightPoker = cc.find("right/pokers", this.compareLayer);
        if (firstUid && secondUid) {
          var leftIconImg = GameData.getPlayerByUid(firstUid).headimgurl;
          var rightIconImg = GameData.getPlayerByUid(secondUid).headimgurl;
          this.setHeadIcon(leftIcon, leftIconImg);
          this.setHeadIcon(rightIcon, rightIconImg);
          for (var i = 0; i < 3; i++) {
            this.setPkPokerImg(leftPoker.children[i], firstUid, i);
            this.setPkPokerImg(rightPoker.children[i], secondUid, i);
          }
        }
      },
      setHeadIcon: function setHeadIcon(node, headimgurl) {
        var sp = node.getComponent(cc.Sprite);
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          sp.spriteFrame = null;
          return;
        }
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (sp.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      setPkPokerImg: function setPkPokerImg(node, uid, index) {
        var isSeePoker = ZJH_roomData.getPlayerIsSeePokerByUid(uid);
        var pokerImgName = 0;
        if (isSeePoker) {
          var pokerArr = ZJH_roomData.getPlayerPokerByUid(uid);
          pokerArr && (pokerImgName = pokerArr[index]);
        } else pokerImgName = 0;
        this.showPokerContent(node, pokerImgName);
      },
      setNodeImg: function setNodeImg(node, imgUrl) {
        if (node) {
          node.getComponent(cc.Sprite).spriteFrame = null;
          var texture = cc.textureCache.addImage(cc.url.raw(imgUrl));
          node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      moveAboutScore: function moveAboutScore(uid, score) {
        var self = this;
        if (0 == score) return;
        var index = GameData.getPlayerPosByUid(uid);
        var headNode = this.playerNodes[index];
        if (headNode) var playerGetScore = headNode.getChildByName("resultScore");
        var move1 = cc.moveBy(.5, cc.p(0, 40));
        if (null == playerGetScore && headNode) {
          playerGetScore = cc.instantiate(this.scorePrefab);
          playerGetScore.getComponent("tdk-resultFlyScore").getScoreColor(score);
          cc.find("score", playerGetScore).x += 20;
          playerGetScore.name = "resultScore";
          playerGetScore.setTag(1e3);
          playerGetScore.active = true;
          headNode.addChild(playerGetScore);
        }
        playerGetScore && playerGetScore.runAction(move1);
        this.scheduleOnce(function() {
          for (var i = 0; i < self.playerNodes.length; i++) {
            var flag = self.playerNodes[i].getChildByTag(1e3);
            flag && self.playerNodes[i].removeChildByTag(1e3);
          }
        }, 1.5);
      },
      resultChipsAnimation: function resultChipsAnimation(node, position) {
        var action1 = cc.moveTo(.4, position);
        var action2 = cc.callFunc(function() {
          node.active = false;
          node.destroy();
        }, node);
        node.runAction(cc.sequence(action1, action2));
      },
      closePkLayer: function closePkLayer() {
        this.selectCompareNode.active = false;
      },
      refreshPlayerAllScore: function refreshPlayerAllScore() {
        var scores = RoomHandler.getScoreData();
        RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && (scores = RoomHandler.getPlayersCoin());
        var playerArr = GameData.joiners;
        for (var i = 0; i < playerArr.length; i++) if (playerArr[i]) {
          var index = GameData.getPlayerPosByUid(playerArr[i].uid);
          if (this.playerNodes[index]) {
            var playerNode = this.playerNodes[index].getChildByName("headNode");
            playerNode.getComponent("pokerRoomPlayer").setCoin(scores[playerArr[i].uid]);
          }
        }
      },
      refreshPoker: function refreshPoker() {
        var myPokerNode = this.pokersNode.children[0].getChildByName("style1");
        var isSee = ZJH_roomData.getPlayerIsSeePokerByUid(GameData.player.uid);
        if (isSee) {
          var myPokerArr = ZJH_roomData.getPlayerPokerByUid(GameData.player.uid);
          for (var i = 0; i < myPokerNode.childrenCount; i++) this.showPokerContent(myPokerNode.children[i], myPokerArr[i]);
        }
      },
      isCheckPlayerCoin: function isCheckPlayerCoin() {
        var myCoinNum = GameData.player.coin;
        var currMaxChipValue = parseInt(ZJH_roomData.gameInfo.maxChipsValue);
        var isSee = ZJH_roomData.getPlayerIsSeePokerByUid(GameData.player.uid);
        var bool = true;
        if (isSee) if (myCoinNum < 2 * currMaxChipValue) {
          createMoveMessage("金币不足");
          bool = true;
        } else bool = false; else if (myCoinNum < currMaxChipValue) {
          createMoveMessage("金币不足");
          bool = true;
        } else bool = false;
        return bool;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    "ZJH-RoomData": "ZJH-RoomData",
    gameDefine: "gameDefine",
    pokerAnimationBase: "pokerAnimationBase",
    roomHandler: "roomHandler"
  } ],
  ZJH_roomMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3fe1du58HlC2p5c1prVG1Uv", "ZJH_roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    var ZJH_RoomData = require("ZJH-RoomData");
    cc.Class({
      extends: cc.Component,
      properties: {
        waitLayer: cc.Node,
        tableLayer: cc.Node,
        resultLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        resultPrefab: cc.Prefab,
        summaryPrefab: cc.Prefab,
        dissolvePrefab: cc.Prefab,
        debugPrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        scheduleLamp(this);
        this.initUIData();
        this.initUIShow();
        this.addUIResult();
        this.addUISummary();
        this.addUIDissolve();
        this.addUIDebug();
        this.setLayerShow();
        this.registAllEvent();
        if (GameData.game.onRoomDissolve && 0 != Object.keys(GameData.game.onRoomDissolve).length) {
          cc.log("GameData.game.onRoomDissolve = " + JSON.stringify(GameData.game.onRoomDissolve));
          sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        }
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.RoomInfoHandler);
        unregistEvent("onRoomQuit", this, this.onRoomQuit);
        unregistEvent("zhaJinHua-onGameStart", this, this.GameStartHandler);
        unregistEvent("onGameScore", this, this.GameScoreHandler);
        unregistEvent("onRoomDissolve", this, this.showDissolve);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("onZhaJinHuaRoomEnd", this, this.showSummaryLayer);
      },
      registAllEvent: function registAllEvent() {
        registEvent("onRoomInfo", this, this.RoomInfoHandler);
        registEvent("onRoomQuit", this, this.onRoomQuit);
        registEvent("zhaJinHua-onGameStart", this, this.GameStartHandler);
        registEvent("onGameScore", this, this.GameScoreHandler);
        registEvent("onRoomDissolve", this, this.showDissolve);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("onZhaJinHuaRoomEnd", this, this.showSummaryLayer);
      },
      initUIData: function initUIData() {
        cc.log("...room main init data.");
        RuleHandler.instance.setGameType(GameData.client.gameType);
        this._curGameData = void 0;
        this.setCurGameData();
      },
      initUIShow: function initUIShow() {
        this.resultLayer.active = false;
        this.summaryLayer.active = false;
        this.dissolveLayer.active = false;
        this.setLayerShow();
      },
      setCurGameData: function setCurGameData() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
      },
      setLayerShow: function setLayerShow() {
        GameData.room.status > gameDefine.RoomState.WAIT ? this.showTableLayer() : this.showWaitLayer();
      },
      RoomInfoHandler: function RoomInfoHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomInfoSetData(data.detail);
        this.setCurGameData();
        this.setLayerShow();
        this.addUISummary();
      },
      GameStartHandler: function GameStartHandler() {
        this.setLayerShow();
      },
      GameScoreHandler: function GameScoreHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameScoreSetData(data.detail);
        this.showResultLayer();
      },
      addUIResult: function addUIResult() {
        var uiResultNode = this.resultLayer.getChildByName("uiResult");
        if (void 0 == uiResultNode) {
          uiResultNode = cc.instantiate(this.resultPrefab);
          uiResultNode.parent = this.resultLayer;
          uiResultNode.name = "uiResult";
        }
      },
      addUISummary: function addUISummary() {
        var uiSummaryNode = this.summaryLayer.getChildByName("uiSummary");
        if (void 0 == uiSummaryNode) {
          uiSummaryNode = cc.instantiate(this.summaryPrefab);
          uiSummaryNode.parent = this.summaryLayer;
          uiSummaryNode.name = "uiSummary";
        }
      },
      addUIDissolve: function addUIDissolve() {
        var uiDissolveNode = this.dissolveLayer.getChildByName("uiDissolve");
        if (void 0 == uiDissolveNode) {
          uiDissolveNode = cc.instantiate(this.dissolvePrefab);
          uiDissolveNode.parent = this.dissolveLayer;
          uiDissolveNode.name = "uiDissolve";
          uiDissolveNode.active = true;
        }
      },
      addUIDebug: function addUIDebug() {
        var uiDebug = this.debugLayer.getChildByName("uiDebug");
        if (void 0 == uiDebug) {
          uiDebug = cc.instantiate(this.debugPrefab);
          uiDebug.parent = this.debugLayer;
          uiDebug.name = "uiDebug";
          uiDebug.active = false;
        }
      },
      showWaitLayer: function showWaitLayer() {
        RoomHandler.room.opts.currencyType != gameDefine.currencyType.Currency_Coin ? this.waitLayer.active = true : this.waitLayer.active = false;
        this.showTableUI(false);
        this.resultLayer.active = false;
        soundMngr.instance.playMusic("zjh/sound/game_bgm");
      },
      showTableLayer: function showTableLayer() {
        this.showTableUI(true);
        this.waitLayer.active = false;
        this.resultLayer.active = false;
        soundMngr.instance.playMusic("zjh/sound/game_bgm");
      },
      showTableUI: function showTableUI(show) {
        cc.log("...showTableUI:" + show);
        this.tableLayer.active = show;
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, 2);
      },
      showResultDirectly: function showResultDirectly() {},
      showSettingLayer: function showSettingLayer(evt) {
        sendEvent("runlamp");
        openView("SettingsPanel");
      },
      showSummaryLayer: function showSummaryLayer() {
        var self = this;
        var roomData = RoomHandler.getRoomData();
        if (GameData.room.status == gameDefine.RoomState.WAIT) {
          GameData.player.roomid = void 0;
          GameData.joiners = [];
          GameData.game.onRoomDissolve = null;
          cc.director.loadScene("home");
          return;
        }
        if (void 0 == roomData) return;
        GameData.room.status == gameDefine.RoomState.READY ? this.summaryLayer.active = true : ZJH_RoomData.isCompare ? this.scheduleOnce(function() {
          self.summaryLayer.active = true;
        }, 5) : GameData.room.roundNum == GameData.room.opts.roundMax ? this.scheduleOnce(function() {
          self.summaryLayer.active = true;
        }, 3) : this.summaryLayer.active = true;
        GameData.player.uid == roomData.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDissolve: function showDissolve() {
        this.showdissolveLayer(1, 1);
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showScoreLayer: function showScoreLayer() {},
      showDebugLayer: function showDebugLayer() {
        var uiDebug = this.debugLayer.getChildByName("uiDebug");
        uiDebug && (uiDebug.active = true);
      },
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("ChatPanel");
      },
      showJoinerLost: function showJoinerLost(data) {
        var uid = data.detail.uid;
        var nameStr = GameData.getPlayerByUid(uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线啦!");
      },
      showJoinerConnect: function showJoinerConnect(data) {
        var uid = data.detail.uid;
        var nameStr = GameData.getPlayerByUid(uid).name;
        createMoveMessage("玩家[" + nameStr + "]重新连接!");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      },
      onRoomQuit: function onRoomQuit() {
        ZJH_RoomData.initData();
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    "ZJH-RoomData": "ZJH-RoomData",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  agentBindLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "049510b5oZD4btLrFJE6y1H", "agentBindLayer");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        EditBox: cc.EditBox,
        jlNum: cc.Label
      },
      onLoad: function onLoad() {
        this.jlNum.string = "5";
      },
      agentBindClick: function agentBindClick() {
        soundMngr.instance.playAudioOther("button");
        var agentID = this.EditBox.getComponent(cc.EditBox).string;
        ClubHandler.getInstance().reqBindAgent(GameData.player.uid, agentID);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  agentPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "713a1Ay7OBJa651mIbyQ7Vc", "agentPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var agentPanel = cc.Class({
      extends: cc.Component,
      properties: {
        kaifangBtn: cc.Node,
        kaifangLb: cc.Node,
        jiesuanBtn: cc.Node,
        jiesuanLb: cc.Node,
        roomState: cc.Label,
        kaifangNode: cc.ScrollView,
        jiesuanNode: cc.ScrollView,
        ScrollItem: cc.Node,
        jiesuanItem: cc.Node,
        dissolveLayer: cc.Node,
        infoLayer: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {
        this.registerListener();
        this.refreshUINew();
        this.refreshUIResult();
      },
      registerListener: function registerListener() {
        registEvent("refreshAgentRoomUINew", this, this.refreshUINew);
        registEvent("refreshAgentRoomUIResult", this, this.refreshUIResult);
      },
      onDestroy: function onDestroy() {
        unregistEvent("refreshAgentRoomUINew", this, this.refreshUINew);
        unregistEvent("refreshAgentRoomUIResult", this, this.refreshUIResult);
      },
      refreshUINew: function refreshUINew() {
        cc.log("GameData.AgentRoomsData:" + JSON.stringify(GameData.AgentRoomsData));
        var content = this.kaifangNode.content;
        for (var ii = 0; ii < content.getChildrenCount(); ii++) {
          var childNode = content.getChildren()[ii];
          childNode && (childNode.active = false);
        }
        if (void 0 == GameData.AgentRoomsData || Object.keys(GameData.AgentRoomsData).length <= 0) return;
        var AgentRoomsLength = Object.keys(GameData.AgentRoomsData).length;
        var contentHeight = parseInt(AgentRoomsLength / 3) * this.ScrollItem.height;
        AgentRoomsLength % 3 >= 1 ? contentHeight += this.ScrollItem.height : null;
        contentHeight < 550 ? contentHeight = 550 : null;
        content.height = contentHeight;
        var i = 0;
        for (var key in GameData.AgentRoomsData) {
          var data = GameData.AgentRoomsData[key];
          if (void 0 == data) continue;
          var item = content.getChildren()[i];
          if (!item) {
            item = cc.instantiate(this.ScrollItem);
            item.parent = content;
            item.x = this.ScrollItem.x + this.ScrollItem.width * (i % 3);
            item.y = this.ScrollItem.y - this.ScrollItem.height * parseInt(i / 3);
          }
          item.active = true;
          this.initItemChildNode(item, data);
          i++;
        }
      },
      refreshUIResult: function refreshUIResult() {
        var content = this.jiesuanNode.content;
        for (var jj = 0; jj < content.getChildrenCount(); jj++) {
          var tempNode = content.getChildren()[jj];
          tempNode && (tempNode.active = false);
        }
        if (void 0 == GameData.AgentResultRoom || Object.keys(GameData.AgentResultRoom).length <= 0) return;
        var contentHeight = Object.keys(GameData.AgentResultRoom).length * this.jiesuanItem.height;
        contentHeight < 550 ? contentHeight = 550 : null;
        content.height = contentHeight;
        var index = 0;
        for (var key in GameData.AgentResultRoom) {
          var data = GameData.AgentResultRoom[key];
          if (void 0 == data) continue;
          var item1 = content.getChildren()[index];
          if (!item1) {
            item1 = cc.instantiate(this.jiesuanItem);
            item1.parent = content;
            item1.y = this.jiesuanItem.y - this.jiesuanItem.height * index;
          }
          item1.active = true;
          this.initJSItemChildNode(item1, data);
          index++;
        }
      },
      initItemChildNode: function initItemChildNode(item, data) {
        if (void 0 == item || void 0 == data) return;
        var roomid = data.roomid;
        var inviteBtn = cc.find("inviteBtn", item);
        var dissolveBtn = cc.find("dissolveBtn", item);
        var infoBtn = cc.find("infoBtn", item);
        var roomTypeSprite = cc.find("roomTypeSprite", item);
        var gameTypeSprite = cc.find("gameTypeSprite", item);
        var roomId = cc.find("roomId", item);
        var roomState = cc.find("roomState", item);
        roomId.getComponent("cc.Label").string = roomid;
        var roomStateDis = "";
        var color = new cc.Color(254, 48, 0);
        var show = true;
        if (void 0 == data.players) return;
        if (Object.keys(data.players).length <= 0) roomStateDis = "未开始"; else if (Object.keys(data.players).length > 0 && Object.keys(data.players).length < data.opts.joinermax) {
          roomStateDis = "等待中";
          color = new cc.Color(0, 53, 49);
        } else if (Object.keys(data.players).length == data.opts.joinermax) {
          roomStateDis = "进行中";
          color = new cc.Color(0, 53, 49);
          show = false;
        }
        roomState.getComponent("cc.Label").string = roomStateDis;
        roomState.color = color;
        dissolveBtn.active = show;
        var textureUrl, texture;
        textureUrl = this.getGameTypeImageUrl(data.opts.gameType);
        texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (gameTypeSprite.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        textureUrl = this.getRoomTypeImageUrl(data.opts.roomType);
        cc.log("...roomType:" + data.opts.roomType);
        cc.log("...textureUrl:" + textureUrl);
        texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (roomTypeSprite.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        var headNode, frameNode;
        for (var i = 1; i <= 6; i++) {
          headNode = cc.find("playerNode/player_" + i, item);
          headNode && (headNode.active = false);
          frameNode = cc.find("playerNode/headBgs/headBg" + i, item);
          frameNode && (frameNode.active = false);
        }
        for (var j = 1; j <= data.opts.joinermax; j++) {
          frameNode = cc.find("playerNode/headBgs/headBg" + j, item);
          frameNode && (frameNode.active = true);
        }
        var index = 1;
        for (var key in data.players) {
          var playerData = data.players[key];
          if (!playerData) continue;
          headNode = cc.find("playerNode/player_" + index, item);
          if (headNode) {
            headNode.active = true;
            var playerHead = cc.find("playerHead", headNode);
            var url = playerData.headimgurl;
            this.setPlayerHead(playerHead, url);
          }
          index++;
        }
        inviteBtn.setTag(roomid);
        inviteBtn.on(cc.Node.EventType.TOUCH_END, this.inviteClick, this);
        dissolveBtn.setTag(roomid);
        dissolveBtn.on(cc.Node.EventType.TOUCH_END, this.dissolveClick, this);
        infoBtn.setTag(roomid);
        infoBtn.on(cc.Node.EventType.TOUCH_END, this.infoClick, this);
      },
      initJSItemChildNode: function initJSItemChildNode(item, data) {
        if (void 0 == item || void 0 == data) return;
        cc.log("..jiesuanData:" + JSON.stringify(data));
        var roomid = data.roomid;
        var shareBtn = cc.find("shareBtn", item);
        var roomId = cc.find("roomId", item);
        var createtime = cc.find("createtime", item);
        var gametype = cc.find("gametype", item);
        var roomrule = cc.find("roomrule", item);
        shareBtn.setTag(roomid);
        shareBtn.on(cc.Node.EventType.TOUCH_END, this.shareClick, this);
        roomId.getComponent(cc.Label).string = "房间号:" + roomid;
        var date = new Date(data.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute = minute < 10 ? "0" + minute : minute;
        createtime.getComponent(cc.Label).string = year + "-" + month + "-" + day + "  " + hours + minute;
        roomrule.getComponent(cc.Label).string = this.getRoomRule(data.opts);
        var textureUrl, texture;
        textureUrl = this.getGameTypeImageUrl(data.opts.gameType);
        texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (gametype.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        var headNode, frameNode;
        for (var i = 1; i <= 6; i++) {
          headNode = cc.find("playerNode/player_" + i, item);
          headNode && (headNode.active = false);
        }
        var index = 1;
        for (var key in data.players) {
          var playerData = data.players[key];
          if (!playerData) continue;
          headNode = cc.find("playerNode/player_" + index, item);
          if (headNode) {
            headNode.active = true;
            var scoreNode = cc.find("score", headNode);
            var name = cc.find("name", headNode);
            var fen = this.getSumScore(data, playerData.uid);
            if (fen > 0) {
              scoreNode.getComponent(cc.Label).font = this.fonts[0];
              scoreNode.getComponent(cc.Label).string = "+" + fen;
            } else if (fen < 0) {
              scoreNode.getComponent(cc.Label).font = this.fonts[1];
              scoreNode.getComponent(cc.Label).string = fen;
            } else {
              scoreNode.getComponent(cc.Label).font = this.fonts[2];
              scoreNode.getComponent(cc.Label).string = fen;
            }
            isChinese(playerData.name) ? name.getComponent(cc.Label).string = getShortStr(playerData.name, 4) : name.getComponent(cc.Label).string = getShortStr(playerData.name, 8);
          }
          index++;
        }
      },
      setPlayerHead: function setPlayerHead(headNode, url) {
        void 0 != url && "" != url && url.length > 0 && cc.loader.load({
          url: url,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      getSumScore: function getSumScore(data, uid) {
        var fen = 0;
        for (var key in data.scores) key == uid && (fen = data.scores[key]);
        return fen;
      },
      getGameTypeImageUrl: function getGameTypeImageUrl(gameType) {
        var textureUrl = "resources/createroom/agentInfo/majiangzi.png";
        switch (gameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
         case gameDefine.GameType.Game_Mj_Shishi:
         case gameDefine.GameType.Game_MJ_HuaDian:
          textureUrl = "resources/createroom/agentInfo/majiangzi.png";
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          textureUrl = "resources/createroom/agentInfo/doudizhuzi.png";
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          textureUrl = "resources/createroom/agentInfo/shisanshuizi.png";
          break;

         case gameDefine.GameType.Game_niu_niu:
          textureUrl = "resources/createroom/agentInfo/liurenniuniu.png";
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          textureUrl = "resources/createroom/agentInfo/shirenniuniu.png";
          break;

         case gameDefine.GameType.Game_TDK:
          textureUrl = "resources/createroom/agentInfo/tiandakengzi.png";
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          textureUrl = "resources/createroom/agentInfo/paodeikuaizi.png";
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          textureUrl = "resources/createroom/agentInfo/zhajinhuazi.png";
        }
        return textureUrl;
      },
      getRoomTypeImageUrl: function getRoomTypeImageUrl(roomType) {
        var textureUrl = "resources/createroom/agentInfo/putongzi.png";
        switch (roomType) {
         case 1:
          textureUrl = "resources/createroom/agentInfo/putongzi.png";
          break;

         case 2:
          textureUrl = "resources/createroom/agentInfo/julebuzi.png";
        }
        return textureUrl;
      },
      getRoomRule: function getRoomRule(data) {
        var str = "";
        if (void 0 == data || Object.keys(data).length <= 0) return str;
        switch (data.gameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          str = getRoomRuleStr(data);
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          str = getRuleStrShiShi(data);
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          str = getRuleStrHd(data);
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          str = getRuleStrHongZhong(data);
          break;

         case gameDefine.GameType.Game_Mj_CC:
          str = getRuleStrCC(data);
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          str = getRuleStrTJDDZ(data);
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          str = getRuleStrDDZ(data);
          break;

         case gameDefine.GameType.Game_niu_niu:
         case gameDefine.GameType.Game_Niu_Niu_10:
          str = getRuleStrNiuNiu(data);
          break;

         case gameDefine.GameType.Game_TDK:
          str = getRuleStrTDK(data);
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          str = getRuleStr13(data);
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          str = getRuleStrPDK(data);
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          str = getRuleStrZJH(data);
        }
        return str;
      },
      getInviteStr: function getInviteStr(roomdata) {
        var roomid = roomdata.roomid;
        var title = "";
        switch (roomdata.opts.gameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          title = "天津攒局麻将 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          title = "石狮摸摸麻将 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          title = "摸摸桦甸麻将 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          title = "红中麻将 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Mj_CC:
          title = "长春麻将 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          title = "经典斗地主 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          title = "天津斗地主 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_niu_niu:
          title = "拼十(6人) (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          title = "拼十(10人) (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_TDK:
          title = "填大坑 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          title = "十三水 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          title = "跑得快 (代开)房间号:" + roomid;
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          title = "三张牌 (代开)房间号:" + roomid;
        }
        cc.log("...opts:" + JSON.stringify(roomdata.opts));
        var RuleStr = this.getRoomRule(roomdata.opts);
        var str1 = "玩法:";
        var str2 = ",请您快速加入对局.";
        var des = str1 + RuleStr + str2;
        console.log("des = " + des);
        return {
          title: title,
          des: des
        };
      },
      selectUIType: function selectUIType(eve, data) {
        soundMngr.instance.playAudioOther("button");
        var flag = false;
        1 == data && (flag = true);
        this.kaifangLb.active = flag;
        this.kaifangBtn.active = !flag;
        this.jiesuanLb.active = !flag;
        this.jiesuanBtn.active = flag;
        this.kaifangNode.node.active = flag;
        this.jiesuanNode.node.active = !flag;
      },
      joinRoomClick: function joinRoomClick(eve) {
        soundMngr.instance.playAudioOther("button");
        var roomid = eve.target.tag.toString();
        console.log("加入房间号为：" + roomid);
        roomid && roomid.length >= 6 && RoomHandler.enterRoom(roomid);
      },
      shareClick: function shareClick(eve) {
        soundMngr.instance.playAudioOther("button");
        var roomid = eve.target.tag;
        console.log("分享房间号：" + roomid);
      },
      inviteClick: function inviteClick(eve) {
        soundMngr.instance.playAudioOther("button");
        var roomid = eve.target.tag;
        console.log("邀请好友,房间号：" + roomid);
        var roomdata = GameData.getAgentRoomDataByRoomid(roomid);
        if (null == roomdata) return;
        var strObject = this.getInviteStr(roomdata);
        cc.sys.localStorage.setItem("selfAgentRoomId", roomid);
        wxShareCommond(strObject.title + strObject.des);
      },
      dissolveClick: function dissolveClick(eve) {
        soundMngr.instance.playAudioOther("button");
        var roomid = eve.target.tag;
        if (roomid <= 0) return;
        this.dissolveLayer.active = true;
        var text = cc.find("text", this.dissolveLayer);
        var dissolveBtn = cc.find("btnAgree", this.dissolveLayer);
        var cancelBtn = cc.find("btnDisagree", this.dissolveLayer);
        text.getComponent(cc.Label).string = "确定要解散房间" + roomid + "吗？";
        dissolveBtn.setTag(roomid);
        dissolveBtn.on(cc.Node.EventType.TOUCH_END, this.confirmDissolveClick, this);
        cancelBtn.on(cc.Node.EventType.TOUCH_END, this.cancelDissolveClick, this);
      },
      confirmDissolveClick: function confirmDissolveClick(eve) {
        soundMngr.instance.playAudioOther("button");
        var roomid = eve.target.tag;
        console.log("解散房间：" + roomid);
        var data = GameData.getAgentRoomDataByRoomid(roomid);
        if (void 0 == data || null == data) return;
        var isOk = false;
        if (Object.keys(data.players).length <= 0) {
          RoomHandler.deleteRoom(roomid, "close");
          isOk = true;
        }
        this.dissolveLayer.active = false;
        this.showDissolveRoomTip(isOk);
      },
      cancelDissolveClick: function cancelDissolveClick() {
        soundMngr.instance.playAudioOther("button");
        this.dissolveLayer.active = false;
      },
      infoClick: function infoClick(eve) {
        soundMngr.instance.playAudioOther("button");
        var roomid = eve.target.tag;
        console.log("查看房间：" + roomid);
        var data = GameData.getAgentRoomDataByRoomid(roomid);
        if (void 0 == data || null == data) return;
        this.infoLayer.active = true;
        var roomType = cc.find("panel/roomType", this.infoLayer);
        var gameType = cc.find("panel/gameType", this.infoLayer);
        var roomId = cc.find("panel/roomId", this.infoLayer);
        var createTime = cc.find("panel/createTime", this.infoLayer);
        var clubLabel = cc.find("panel/clubLabel", this.infoLayer);
        var club = cc.find("panel/club", this.infoLayer);
        var agent = cc.find("panel/agent", this.infoLayer);
        var rule = cc.find("panel/rule", this.infoLayer);
        var playerNode = cc.find("panel/playerNode", this.infoLayer);
        roomId.getComponent(cc.Label).string = "房间号:" + roomid;
        var date = new Date(data.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute = minute < 10 ? "0" + minute : minute;
        createTime.getComponent(cc.Label).string = year + "-" + month + "-" + day + "  " + hours + minute;
        if (2 == data.opts.roomType) {
          clubLabel.active = true;
          club.active = true;
          club.getComponent(cc.Label).string = GameData.player.club.clubName;
        } else {
          clubLabel.active = false;
          club.active = false;
        }
        agent.getComponent(cc.Label).string = "代理(ID):" + data.creator;
        rule.getComponent(cc.Label).string = this.getRoomRule(data.opts);
        var textureUrl, texture;
        textureUrl = this.getGameTypeImageUrl(data.opts.gameType);
        texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (gameType.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        textureUrl = this.getRoomTypeImageUrl(data.opts.roomType);
        texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (roomType.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        var headNode, frameNode;
        for (var i = 1; i <= 6; i++) {
          headNode = cc.find("player_" + i, playerNode);
          headNode && (headNode.active = false);
          frameNode = cc.find("headBgs/headBg" + i, playerNode);
          frameNode && (frameNode.active = false);
        }
        for (var j = 1; j <= data.opts.joinermax; j++) {
          frameNode = cc.find("headBgs/headBg" + j, playerNode);
          frameNode && (frameNode.active = true);
        }
        var index = 1;
        for (var key in data.players) {
          var playerData = data.players[key];
          if (!playerData) continue;
          headNode = cc.find("player_" + index, playerNode);
          if (headNode) {
            headNode.active = true;
            var playerHead = cc.find("playerHead", headNode);
            var url = playerData.headimgurl;
            this.setPlayerHead(playerHead, url);
            var nameLabel = cc.find("nameLabel", headNode);
            isChinese(playerData.name) ? nameLabel.getComponent(cc.Label).string = getShortStr(playerData.name, 4) : nameLabel.getComponent(cc.Label).string = getShortStr(playerData.name, 8);
          }
          index++;
        }
      },
      closeInfoLayer: function closeInfoLayer() {
        soundMngr.instance.playAudioOther("button");
        this.infoLayer.active = false;
      },
      refreshDataClick: function refreshDataClick() {
        if (inCD(3e3)) return;
        soundMngr.instance.playAudioOther("button");
        RoomHandler.reqAgentRoom();
        RoomHandler.reqAgentResultRoom();
      },
      showDissolveRoomTip: function showDissolveRoomTip(isOk) {
        var str = "解散房间成功。";
        false == isOk ? str = "房间已有人进入，不能解散！" : null;
        createMessageBox(str, function() {
          RoomHandler.reqAgentRoom();
          RoomHandler.reqAgentResultRoom();
        });
      },
      close: function close() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  appstore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "553eeBeYnlGuK+1jfw/QKWG", "appstore");
    "use strict";
    var gameDefine = require("gameDefine");
    var Config = {
      areaType: gameDefine.AreaType.Area_TianJin,
      serverIP: "116.62.203.138",
      serverPort: 3910,
      gameName: "天津攒局麻将",
      versionText: "审批文号：新广出审[2017]10415号  出版物号：ISBN978-7-498-03201-0  出版单位：天津电子出版社有限公司",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/rytianjinmajiang",
      wxWelcomeText: "还等嘛!我在天津攒局麻将等你!",
      loginLogo: "resources/login/cuanjumajiang.png",
      Poster: [ "resources/poster/tianjin/poster_tianjin_1.png" ],
      GameVisible: [ gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_Mj_Heb, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_Poker_paodekuai ],
      ModeType: {
        Game_Mj_Tianjin: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_MJ_HuaDian: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_CC: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_Heb: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_niu_niu: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_TianjinDDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      SetCardsOpen: false,
      MatchGameType: [ gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_Mj_Heb, gameDefine.GameType.Game_Poker_DDZ ],
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 0, 0, 0 ],
            enter: [ 5e3, 15e3, 1e4 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 0, 0, 0 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 0, 0, 0 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 0, 0, 0 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 0, 0, 0 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 0, 0, 0 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 0, 0, 0 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 0, 0, 0 ],
            enter: [ 2e3, 15e3, 1e4 ]
          }
        },
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ]
        },
        roomCard: {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          },
          9: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 0
                }
              }
            }
          },
          11: {
            10: {
              name: "10局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            30: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            }
          },
          13: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          }
        }
      }
    };
    module.exports = Config;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  cardActionView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c98c5Vvo41JyYvqqGZA+OSe", "cardActionView");
    "use strict";
    var game = require("gameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.onEnable);
        registEvent("onGamePass", this, this.setActionData);
        registEvent("onGameAction", this, this.setActionData);
        registEvent("onCardChi", this, this.handleCardChi);
        registEvent("onCardPeng", this, this.handleCardPeng);
        registEvent("onCardGang", this, this.handleCardGang);
        registEvent("onCardHu", this, this.handleCardHu);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.onEnable);
        unregistEvent("onGamePass", this, this.setActionData);
        unregistEvent("onGameAction", this, this.setActionData);
        unregistEvent("onCardChi", this, this.handleCardChi);
        unregistEvent("onCardPeng", this, this.handleCardPeng);
        unregistEvent("onCardGang", this, this.handleCardGang);
        unregistEvent("onCardHu", this, this.handleCardHu);
      },
      onEnable: function onEnable() {
        this.actions = [];
        this.spineNode.active = false;
        this.setActionData();
      },
      setActionData: function setActionData() {
        this.actions = [];
        var actionsData = game.getGameData().getPassActionsData();
        var actionsNum = actionsData.action.length;
        var fromCard = actionsData.fromCard, lastType = "", lastIdx = -1;
        for (var i = 0; i < actionsNum; ++i) {
          var data = actionsData.action[i];
          var action = data.act, cards = data.cards;
          var actionCfg = game.getActionData(action);
          if (lastType != actionCfg.type) {
            lastType = actionCfg.type;
            this.actions[++lastIdx] = {
              type: actionCfg.type,
              actionData: []
            };
          }
          if (null != cards && cards[0] instanceof Array) for (var n = 0; n < cards.length; ++n) this.actions[lastIdx].actionData.push({
            act: action,
            fromCard: fromCard,
            cards: cards[n]
          }); else this.actions[lastIdx].actionData.push(data);
        }
        console.log("actions Data:" + JSON.stringify(this.actions));
        this.showActions();
      },
      showActions: function showActions() {
        for (var n = 1; n <= 4; ++n) if (n <= this.actions.length) {
          var data = this.actions[n - 1];
          var actionCfg = game.getActionData(data.actionData[0].act);
          this.createActionBtn(n, actionCfg.icon);
        } else {
          var actionBtn = cc.find("btnAct" + n, this.actionLayer);
          actionBtn.active = false;
        }
        this.actionLayer.active = this.actions.length > 0;
      },
      showActionsSecondary: function showActionsSecondary() {
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        this.actionSecondaryLayer.active = true;
        var actionsData = this.actions[this.selectAction].actionData;
        console.log("actions Secondary Data:" + JSON.stringify(actionsData));
        for (var i = 0; i < actionsData.length; i++) {
          var action = actionsData[i];
          var cardGroup = cc.instantiate(cardTemp);
          cardGroup.name = i + "";
          cardGroup.active = true;
          cardGroup.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
          cardLayout.addChild(cardGroup);
          var cardArray = action.cards.concat(action.fromCard);
          cardArray.sort(function(a, b) {
            return a - b;
          });
          for (var n = 0; n < cardArray.length; n++) {
            var cardNode = cc.find("card_" + n, cardGroup);
            if (null == cardNode) continue;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + cardArray[n] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        }
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      onClickActionSecondaryBtn: function onClickActionSecondaryBtn(e) {
        var self = this;
        var index = e.target.name;
        var data = this.actions[this.selectAction].actionData[index];
        console.log("actions Secondary Clicked Data:" + JSON.stringify(data));
        var actionInfo = game.getActionData(data.act);
        game.getGameProtocol()[actionInfo.request_fn](data, function(res) {
          0 == res.result && showSpineEffect(self.spineNode, actionInfo.spine, actionInfo.animate);
        });
        this.moveBackMyCards();
        this.actionSecondaryLayer.active = false;
      },
      createActionBtn: function createActionBtn(index, icon) {
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var texture = cc.textureCache.addImage(cc.url.raw(icon));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        var self = this;
        var actionsData = this.actions[index].actionData;
        console.log("actions Clicked Data:" + JSON.stringify(actionsData));
        if (actionsData.length > 1) {
          this.selectAction = index;
          this.showActionsSecondary();
        } else if (1 == actionsData.length) {
          var data = actionsData[0];
          var actionInfo = game.getActionData(data.act);
          game.getGameProtocol()[actionInfo.request_fn](data, function(res) {
            0 == res.result && showSpineEffect(self.spineNode, actionInfo.spine, actionInfo.animate);
          });
        }
        this.moveBackMyCards();
        this.actionLayer.active = false;
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        game.getGameData().getGameInfoData().turn != GameData.player.uid && game.getGameProtocol().requestPass(function(res) {});
        this.moveBackMyCards();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
      },
      handleCardChi: function handleCardChi(data) {
        var uid = data.detail.player;
        if (uid == GameData.player.uid) return;
        var pos = GameData.getPlayerPosByUid(uid);
        this.playActionAnimation(pos, "chi");
        console.log("playActionAnimation uid:%d %s chi", uid, pos);
      },
      handleCardPeng: function handleCardPeng(data) {
        var uid = data.detail.player;
        if (uid == GameData.player.uid) return;
        var pos = GameData.getPlayerPosByUid(uid);
        this.playActionAnimation(pos, "peng");
        console.log("playActionAnimation uid:%d %s peng", uid, pos);
      },
      handleCardGang: function handleCardGang(data) {
        var uid = data.detail.player;
        if (uid == GameData.player.uid) return;
        var pos = GameData.getPlayerPosByUid(uid);
        this.playActionAnimation(pos, "gang");
        console.log("playActionAnimation uid:%d %s gang", uid, pos);
      },
      handleCardHu: function handleCardHu(data) {
        var uid = data.detail.player;
        if (uid == GameData.player.uid) return;
        var pos = GameData.getPlayerPosByUid(uid);
        this.playActionAnimation(pos, "hu");
        console.log("playActionAnimation uid:%d %s hu", uid, pos);
      },
      playActionAnimation: function playActionAnimation(pos, action) {
        console.log("playActionAnimation %s %s", pos, action);
        var animationNode = cc.find("actionAnimations/" + pos, this.node);
        null != animationNode && animationNode.getComponent(cc.Animation).play(action);
      },
      moveBackMyCards: function moveBackMyCards() {}
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig"
  } ],
  cardBtnView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a01bfVwUwFC5Lyp2pqW7gCM", "cardBtnView");
    "use strict";
    var game = require("gameConfig");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        cardId: 0,
        index: 0,
        _isPlay: false,
        _isMove: false,
        _initPos: void 0,
        _firstMovePos: void 0
      },
      onLoad: function onLoad() {
        registEvent("AllHandCardRestoration", this, this.cardRestoration);
        this.node.parent && (this._initPos = this.node.parent.position);
        this.setTouchOn();
      },
      onDestroy: function onDestroy() {
        unregistEvent("AllHandCardRestoration", this, this.cardRestoration);
      },
      onEnable: function onEnable() {
        this._isPlay = false;
        this._isMove = false;
        this._firstMovePos = void 0;
      },
      setTouchOn: function setTouchOn() {
        this.node.interactable = true;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onBtnStart, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onBtnMove, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.onBtnEnd, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onBtnCancel, this);
      },
      setTouchOff: function setTouchOff() {
        this.node.interactable = false;
        this.node.off("touchstart", this.onBtnStart, this);
        this.node.off("touchmove", this.onBtnMove, this);
        this.node.off("touchend", this.onBtnEnd, this);
        this.node.off("touchcancel", this.onBtnCancel, this);
      },
      getCardId: function getCardId() {
        return this.cardId;
      },
      setCardId: function setCardId(id) {
        this.cardId = id;
      },
      getIndex: function getIndex() {
        return this.index;
      },
      setIndex: function setIndex(index) {
        this.index = index;
      },
      cardRestoration: function cardRestoration() {
        if (void 0 == this._initPos) return;
        this._isPlay = false;
        this.node.parent.setPosition(this._initPos);
      },
      cardUpspring: function cardUpspring() {
        if (void 0 == this._initPos) return;
        this._isPlay = true;
        this.node.parent.setPositionY(this._initPos.y + 30);
      },
      onBtnStart: function onBtnStart(event) {
        soundMngr.instance.playAudioOther("card_click");
        if (game.getGameData().getGameInfoData().turn != GameData.player.uid) return;
        this._firstMovePos = event.touch.getLocation();
      },
      onBtnMove: function onBtnMove(event) {
        if (game.getGameData().getGameInfoData().turn != GameData.player.uid) return;
        var position = event.touch.getLocation();
        var node = this.node.parent;
        (Math.abs(position.x - this._firstMovePos.x) >= 20 || Math.abs(position.y - this._firstMovePos.y) >= 20) && (this._isMove = true);
        true == this._isMove && node.setPosition(node.parent.convertToNodeSpaceAR(position));
      },
      onBtnEnd: function onBtnEnd(event) {
        if (game.getGameData().getGameInfoData().turn != GameData.player.uid) return;
        var node = this.node.parent;
        if (true == this._isMove) if (node.getPositionY() < 100) {
          this._isPlay = false;
          this.playCard();
        } else {
          this._isPlay = true;
          this.playCard();
        } else this.playCard();
        this._isMove = false;
      },
      onBtnCancel: function onBtnCancel(event) {
        if (game.getGameData().getGameInfoData().turn != GameData.player.uid) return;
        this.cardRestoration();
        sendEvent("onSelectCard", 0);
      },
      playCard: function playCard() {
        var card = this.getCardId();
        var node = this.node.parent;
        if (true == this._isPlay) {
          if (game.getGameData().getGameInfoData().turn == GameData.player.uid) {
            var fun = function fun() {
              sendEvent("onSelectCard", 0);
            };
            game.getGameProtocol().requestDisCard(card, fun);
          }
        } else {
          sendEvent("AllHandCardRestoration");
          sendEvent("onSelectCard", card);
          this.cardUpspring();
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameConfig: "gameConfig"
  } ],
  cardTemplate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "082053TUvdGdqmdJhKOb/0j", "cardTemplate");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        id: 0,
        index: 0,
        bottom: cc.Sprite,
        icon: cc.Sprite,
        huier: cc.Sprite,
        btn: cc.Button
      },
      onLoad: function onLoad() {},
      setId: function setId(id) {
        this.id = id;
      },
      setIndex: function setIndex(index) {
        this.index = index;
      },
      setIcon: function setIcon(iconUrl) {
        if ("" === iconUrl) this.icon.node.active = false; else {
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.icon.spriteFrame = new cc.SpriteFrame(texture);
          this.icon.node.active = true;
        }
      },
      setHuier: function setHuier(huierUrl) {
        var texture = cc.textureCache.addImage(cc.url.raw(huierUrl));
        this.huier.spriteFrame = new cc.SpriteFrame(texture);
        var huierNode = new cc.Node();
        this.node.addChild(huierNode);
        huierNode.y = 48;
        var huierIconTexture = cc.textureCache.addImage(cc.url.raw("resources/table/huier_icon.png"));
        var huierIconSprite = huierNode.addComponent(cc.Sprite);
        huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTexture);
      },
      setBottom: function setBottom(bottomUrl) {},
      enableButton: function enableButton(enable) {
        this.btn.node.active = enable;
      },
      onBtnClicked: function onBtnClicked(evt) {
        sendEvent("onHandCardClicked", {
          card: this.id,
          index: this.index
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  "cardTest-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fea0fK7NcRBDYhTVWSaBlLb", "cardTest-shishi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        parents: {
          default: [],
          type: cc.Node
        }
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  cardTest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e63f6TutMROuJn8oCgWjmRi", "cardTest");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        parents: {
          default: [],
          type: cc.Node
        }
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  cardsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9858uI4DlDlZfACLJthvcJ", "cardsView");
    "use strict";
    var game = require("gameConfig");
    var roomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        disCardArrow: cc.Prefab,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        registEvent("onGameInfo", this, this.showCards);
        registEvent("onGameScore", this, this.showResult);
        registEvent("onSelectCard", this, this.onSelectCard);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameInfo", this, this.showCards);
        unregistEvent("onGameScore", this, this.showResult);
        unregistEvent("onSelectCard", this, this.onSelectCard);
      },
      onEnable: function onEnable() {
        this.play_layer_up.active = false;
        this.play_layer_left.active = false;
        this.play_layer_right.active = false;
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this._cardArrow.active = false;
        this.showCards();
      },
      showCards: function showCards() {
        var gameData = game.getGameData();
        for (var uid in gameData.cards) {
          var cards = gameData.cards[uid];
          var obtain = gameData.game.obtain;
          this.showMyHandCards(uid, cards["hand"], obtain);
          this.showHandCards(uid, cards["handnum"]);
          this.showUsedCards(uid, cards["chi"], cards["peng"], cards["gang"]);
          this.showDisCards(uid, cards["dis"]);
        }
      },
      showMyHandCards: function showMyHandCards(uid, cards, obtain) {
        if (uid != GameData.player.uid) return;
        var cardsNode = cc.find("cardHand", this.play_layer_down);
        if (null == cardsNode) return;
        var gameRule = game.getGameRule(), flag = true;
        var showCards = [], wildCards = [];
        obtain > 0 && showCards.push(obtain);
        for (var i = cards.length - 1; i >= 0; --i) {
          var c = cards[i];
          if (flag && c == obtain) {
            flag = false;
            continue;
          }
          gameRule.isWildCard(c) ? wildCards.push(c) : showCards.push(c);
        }
        showCards = showCards.concat(wildCards);
        var maxSize = GameData.client.handsize;
        for (var idx = 0, cardIdx = 0, num = showCards.length; idx <= maxSize; ++idx) {
          var node = cc.find("cardHand" + idx, cardsNode);
          if (0 == idx) {
            node.active = num % 3 == 2;
            num = num % 3 == 2 ? num - 1 : num;
          } else node.active = idx <= num;
          if (node.active) {
            var card = showCards[cardIdx++];
            this.showCardContent(node, card, "mj_face_xia_shou");
            this.setCardButton(node, card, idx);
            this.setWildVisible(node, card, "down");
          }
        }
        cardsNode.active = true;
      },
      showHandCards: function showHandCards(uid, num) {
        if (uid == GameData.player.uid) return;
        var pos = GameData.getPlayerPosByUid(uid);
        var parent = this["play_layer_" + pos];
        if (null == parent) return;
        var cardsNode = cc.find("cardHand", parent);
        if (null == cardsNode) return;
        var node0 = cc.find("cardHand0", cardsNode);
        var turn = uid == game.getGameData().getGameInfoData().turn;
        node0.active = turn;
        num = turn ? num - 1 : num;
        var handSize = GameData.client.handsize;
        for (var idx = 1; idx <= handSize; ++idx) {
          var node = cc.find("cardHand" + idx, cardsNode);
          node.active = idx <= num;
        }
        cardsNode.active = true;
        parent.active = true;
      },
      showUsedCards: function showUsedCards(uid, chi, peng, gang) {
        var size = parseInt(GameData.client.handsize / 3);
        var cards = [].concat(gang, peng, chi);
        var pos = GameData.getPlayerPosByUid(uid);
        var parent = this["play_layer_" + pos];
        if (null == parent) return;
        var pengNode = cc.find("cardPeng", parent);
        if (null == pengNode) return;
        var img = this.getCardImgStr(pos);
        var gameRule = game.getGameRule();
        for (var i = 0; i < size; ++i) {
          var node = cc.find("cardPeng" + (i + 1), pengNode);
          if (null == node) continue;
          node.active = i < cards.length;
          if (i >= cards.length) continue;
          var usedCards = cards[i].cards;
          usedCards.sort(function(a, b) {
            return a - b;
          });
          for (var n = 0; n < 4; ++n) {
            var faceNode = node.getChildByName("card_face" + (n + 1));
            if (n < usedCards.length) {
              var cardId = usedCards[n];
              this.showCardContent(faceNode, cardId, img);
              3 == n && true == gameRule.isWildCard(cardId) && this.addHuierIcon(faceNode, pos);
              faceNode.active = true;
            } else faceNode.active = false;
          }
          if (5 == usedCards.length) {
            node.getChildByName("card_face4").active = false;
            node.getChildByName("card_back4").active = true;
          } else node.getChildByName("card_back4").active = false;
        }
      },
      showDisCards: function showDisCards(uid, cards) {
        var pos = GameData.getPlayerPosByUid(uid);
        var joinermax = roomHandler.getRoomData().opts.joinermax;
        var parent = this["play_layer_" + pos];
        if (null == parent) return;
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        var disNode = cc.find("cardDis_" + joinermax, parent);
        disNode.active = true;
        var img = this.getCardImgStr(pos);
        var lastDisUid = game.getGameData().getGameInfoData().lastdisUid;
        var lastDisCard = game.getGameData().getGameInfoData().lastdisCard;
        for (var i = 1; i <= disNode.childrenCount; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (i <= cards.length) {
            var iconUrl = "";
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, card, img);
            if (uid == lastDisUid && card == lastDisCard) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == pos;
              cc.find("down", this._cardArrow).active = "down" == pos;
              cc.find("right", this._cardArrow).active = "right" == pos;
              cc.find("up", this._cardArrow).active = "up" == pos;
            }
          } else node.active = false;
        }
      },
      showCardContent: function showCardContent(cardNode, cardId, cardHeader) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      setCardButton: function setCardButton(cardNode, cardId, index) {
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardBtn.name = cardNode.name + "_button";
          cardNode.addChild(cardBtn);
        }
        var cardButton = cardBtn.getComponent("cardBtnView");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
        cardButton.cardRestoration();
      },
      setWildVisible: function setWildVisible(cardNode, cardId, direction) {
        var show = game.getGameRule().isWildCard(cardId);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(direction, huierNode).active = true;
            huierNode.y = huierNode.y - 18;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      onSelectCard: function onSelectCard(data) {
        var selectCard = data.detail;
        var player = GameData.getPlayerByPos("up");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_up, "up");
          this.showDisCardMask(selectCard, this.play_layer_up, "up");
        }
        player = GameData.getPlayerByPos("down");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_down, "down");
          this.showDisCardMask(selectCard, this.play_layer_down, "down");
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_left, "left");
          this.showDisCardMask(selectCard, this.play_layer_left, "left");
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_right, "right");
          this.showDisCardMask(selectCard, this.play_layer_right, "right");
        }
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        var pengNode = cc.find("cardPeng", parent);
        for (var i = 1; i <= pengNode.childrenCount; i++) {
          var node = cc.find("cardPeng" + i, pengNode);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        var disNode = cc.find("cardDis_" + roomHandler.getRoomData().opts.joinermax, parent);
        if (null == disNode) return;
        for (var i = 1; i <= disNode.childrenCount; i++) {
          var cardNode = cc.find("card_face" + i, disNode);
          cardNode.active && this.gotoMask(cardNode, selectCard, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, direction) {
        var card = cardNode.getComponent("Card");
        if (null == card) return;
        var show = selectCard == card.id;
        var maskNode = this.setMaskVisible(cardNode, show);
        if (null != maskNode) {
          cc.find("up", maskNode).active = false;
          cc.find("down", maskNode).active = false;
          cc.find("right", maskNode).active = false;
          cc.find("left", maskNode).active = false;
          cc.find(direction, maskNode).active = true;
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            maskNode.name = cardNode.name + "_mask";
            cardNode.addChild(maskNode);
          }
        } else maskNode.active = show;
        return maskNode;
      },
      getCardImgStr: function getCardImgStr(pos) {
        if ("down" == pos) return "mj_face_xia_chu";
        if ("up" == pos) return "mj_face_shang_shou";
        if ("left" == pos) return "mj_face_zuo_chu";
        if ("right" == pos) return "mj_face_you_chu";
        return "";
      },
      showResult: function showResult() {
        setTimeout(function() {
          sendEvent("onShowView", "resultView");
        }, 1500);
      }
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig",
    roomHandler: "roomHandler"
  } ],
  changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67f7axmaf1CIqvdCJEFnCIJ", "changchun");
    "use strict";
    var gameDefine = require("gameDefine");
    var TestConfig = {
      gameName: "若宇摸摸棋牌",
      areaType: gameDefine.AreaType.Area_Changchun,
      serverIP: "mahjong.ry-play.com",
      serverPort: 3010,
      versionText: "",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/rymmqpcc",
      wxWelcomeText: "还等啥!我在摸摸棋牌等你!",
      loginLogo: "resources/login/momoqipailogo.png",
      agentWeChat: {
        accounts: {
          number: "",
          type: "若宇摸摸棋牌"
        },
        agentConsult: {
          number: "",
          type: "rymm028"
        },
        gameProblem: {
          number: "",
          type: "rymm028"
        }
      },
      Poster: [],
      GameVisible: [ gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Poker_paodekuai, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_Niu_Niu_10 ],
      SetCardsOpen: false,
      MatchGameType: [],
      FightGameType: [],
      ModeType: {
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_CC: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_niu_niu: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Niu_Niu_10: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e4 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          }
        },
        fight: {},
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          } ],
          6: [ {
            name: "6局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 10
              },
              4: {
                final: 20
              }
            },
            enter: {
              2: [ 100, 200, 500 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "12局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 20
              },
              4: {
                final: 30
              }
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "24局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 30
              },
              4: {
                final: 40
              }
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 40
              },
              4: {
                final: 50
              }
            },
            enter: {
              2: [ 200, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 50
              },
              4: {
                final: 60
              }
            },
            enter: {
              2: [ 300, 300, 6e4 ],
              4: [ 300, 500, 2e3 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 60
              },
              4: {
                final: 70
              }
            },
            enter: {
              2: [ 400, 400, 7e4 ],
              4: [ 400, 600, 3e3 ]
            }
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ],
          10: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              4: {
                final: 200
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 200
              },
              4: {
                final: 300
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 300
              },
              4: {
                final: 400
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 400
              },
              4: {
                final: 500
              }
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 500
              },
              4: {
                final: 600
              }
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 600
              },
              4: {
                final: 700
              }
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          13: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              4: {
                final: 200
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 200
              },
              4: {
                final: 300
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 300
              },
              4: {
                final: 400
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 400
              },
              4: {
                final: 500
              }
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 500
              },
              4: {
                final: 600
              }
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 600
              },
              4: {
                final: 700
              }
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ]
        },
        roomCard: {
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 0
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          },
          104: {
            1: {
              name: "10局",
              cost: {
                10: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                10: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                10: {
                  final: 0
                }
              }
            }
          }
        }
      }
    };
    module.exports = TestConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  chatView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82a78VL3R5Ft5wujkMjS57N", "chatView");
    "use strict";
    var game = require("gameConfig");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        chatInput: cc.EditBox,
        sendButton: cc.Node,
        fastVoiceItem: cc.Node,
        chatAnimationItem: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        this.initFastVoiceItems();
        this.initEmoAnimation();
        this.selectEmoAndWord(null, 1);
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        for (var i = 0; i < this.chatAnimationItem.parent.childrenCount; i++) {
          var charEmo = this.chatAnimationItem.parent.children[i];
          var animation = charEmo.getComponent(cc.Animation);
          if (animation) {
            var aniName = animation.getClips()[i].name;
            animation.stop(aniName);
          }
        }
        this.node.active = false;
      },
      initEmoAnimation: function initEmoAnimation() {
        var animationCount = 16;
        for (var i = 0; i < animationCount; i++) {
          var charEmo = this.chatAnimationItem.parent.getChildren()[i];
          if (null == charEmo) {
            charEmo = cc.instantiate(this.chatAnimationItem);
            this.chatAnimationItem.parent.addChild(charEmo);
            charEmo.x = this.chatAnimationItem.x + i % 6 * 140;
            charEmo.y = this.chatAnimationItem.y - 150 * parseInt(i / 6);
          }
          var animation = charEmo.getComponent(cc.Animation);
          if (animation) {
            var aniName = animation.getClips()[i].name;
            charEmo.name = aniName;
            animation.play(aniName);
            charEmo.on(cc.Node.EventType.TOUCH_END, this.onEmoClick, this);
          }
        }
      },
      initFastVoiceItems: function initFastVoiceItems() {
        var chatData = game.getChatData();
        var talks = chatData.talks;
        var soundKeys = chatData.soundKeys;
        for (var i = 0; i < talks.length; i++) {
          var voiceItem = this.fastVoiceItem.parent.getChildren()[i];
          if (null == voiceItem) {
            voiceItem = cc.instantiate(this.fastVoiceItem);
            voiceItem.parent = this.fastVoiceItem.parent;
            voiceItem.x = this.fastVoiceItem.x;
            voiceItem.y = this.fastVoiceItem.y - 61 * i;
          }
          cc.find("Label", voiceItem).getComponent(cc.Label).string = talks[i];
          voiceItem.tag = soundKeys[i];
          voiceItem.on(cc.Node.EventType.TOUCH_END, this.onVoiceClick, this);
        }
        this.fastVoiceItem.parent.height = this.fastVoiceItem.parent.childrenCount * this.fastVoiceItem.height;
      },
      onVoiceClick: function onVoiceClick(evt) {
        soundMngr.instance.playAudioOther("button");
        var key = evt.target.tag;
        var talkContent = cc.find("Label", evt.target).getComponent(cc.Label).string;
        ChatHandler.getInstance().requestChat("fast", {
          sound: key,
          content: talkContent
        }, function(rtn) {});
        this.onClose();
      },
      onEmoClick: function onEmoClick(evt) {
        soundMngr.instance.playAudioOther("button");
        var aniName = evt.target.name;
        ChatHandler.getInstance().requestChat("emo", aniName, function(rtn) {});
        this.onClose();
      },
      onSendButton: function onSendButton() {
        soundMngr.instance.playAudioOther("button");
        if ("" != this.chatInput.string) {
          ChatHandler.getInstance().requestChat("word", this.chatInput.string, function(rtn) {});
          this.chatInput.string = "";
          this.onClose();
        }
      },
      selectEmoAndWord: function selectEmoAndWord(evt, type) {
        evt && soundMngr.instance.playAudioOther("button");
        var emoScoreView = cc.find("allPanel/emoScrollView", this.node);
        var wordScoreView = cc.find("allPanel/wordScrollView", this.node);
        var wordBtn = cc.find("allPanel/switchToggle/wordBtn", this.node);
        var emoBtn = cc.find("allPanel/switchToggle/emoBtn", this.node);
        var wordBtn_stop = cc.find("allPanel/switchToggle/wordBtn_stop", this.node);
        var emoBtn_stop = cc.find("allPanel/switchToggle/emoBtn_stop", this.node);
        if (1 == type) {
          wordBtn.active = true;
          emoBtn_stop.active = true;
          wordScoreView.active = true;
          emoBtn.active = false;
          wordBtn_stop.active = false;
          emoScoreView.active = false;
        } else if (2 == type) {
          wordBtn.active = false;
          emoBtn_stop.active = false;
          wordScoreView.active = false;
          emoBtn.active = true;
          wordBtn_stop.active = true;
          emoScoreView.active = true;
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameConfig: "gameConfig"
  } ],
  chip_mask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2be068+XwtFbLQnaVtEeypg", "chip_mask");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  clubPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "589f4MYU71FXahATR2EYOyS", "clubPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        selectCloseBtn: cc.Button,
        joinCloseBtn: cc.Button
      },
      onLoad: function onLoad() {
        this.registerListener();
        this.initUI();
      },
      onEnter: function onEnter() {},
      registerListener: function registerListener() {},
      initUI: function initUI() {},
      onDestroy: function onDestroy() {},
      joinClubClick: function joinClubClick() {
        soundMngr.instance.playAudioOther("button");
        openView("joinclubPanel");
      },
      close: function close(eve, data) {
        soundMngr.instance.playAudioOther("button");
        1 == data ? closeView("selectclubPanel") : closeView("joinclubPanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  codeString: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d54eCu+llECYB5r6BKkCnP", "codeString");
    "use strict";
    var CodeString = {
      110: "俱乐部钻石不足",
      111: "房卡不足",
      112: "金币不足",
      113: "俱乐部不存在",
      114: "已经加入该俱乐部",
      115: "俱乐部申请提交成功",
      116: "不是该俱乐部成员",
      117: "已经申请加入俱乐部",
      118: "代理钻石不足",
      119: "俱乐部权限太低",
      122: "已经邀请过玩家",
      123: "没有从DB中找到邀请信息",
      124: "没有从DB中找到申请信息",
      130: "等待其他人操作",
      200: "大不过上家的信息",
      201: "出牌牌形错误",
      202: "没有大过上家的牌",
      203: "只能从最大的牌出",
      204: "不含有红桃三",
      300: "13水倒水"
    };
    module.exports = CodeString;
    cc._RF.pop();
  }, {} ],
  coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6941C7MsBFgrmn+iUrSOHk", "coin");
    "use strict";
    var _roomCard;
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var gameDefine = require("gameDefine");
    var TestConfig = {
      gameName: "若宇摸摸麻将",
      areaType: gameDefine.AreaType.Area_Coin,
      serverIP: "coin.mahjong.ry-play.com",
      serverPort: 3310,
      versionText: "测试服版本",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/coin1",
      wxWelcomeText: "还等啥!我在摸摸棋牌等你!",
      loginLogo: "resources/login/momoqipailogo.png",
      agentWeChat: {
        accounts: {
          number: 123,
          type: "(微信号)"
        },
        agentConsult: {
          number: 456,
          type: "(QQ号)"
        },
        gameProblem: {
          number: 789,
          type: "(手机号)"
        }
      },
      Poster: [],
      GameVisible: [ gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_Mj_HZ, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_Mj_AS, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_Niu_Niu_10, gameDefine.GameType.Game_Poker_paodekuai, gameDefine.GameType.Game_Poker_ZJH ],
      SetCardsOpen: false,
      MatchGameType: [ gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_niu_niu ],
      FightGameType: [],
      ModeType: {
        Game_Mj_Tianjin: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_TianjinDDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_niu_niu: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Niu_Niu_10: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_CC: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_MJ_HuaDian: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_Heb: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: -1,
            joinerMax: 6,
            cost: [ 50, 300, 2e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 500, 2e3 ],
            enter: [ 2e3, 1e4, 5e4 ]
          },
          103: {
            name: "三张牌匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 6,
            cost: [ 50, 300, 2e3 ],
            enter: [ 2e4, 1e5, 5e5 ]
          }
        },
        fight: {},
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          } ],
          6: [ {
            name: "6局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 100, 200, 500 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "12局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "24局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 200, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 300, 300, 6e4 ],
              4: [ 300, 500, 2e3 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 400, 400, 7e4 ],
              4: [ 400, 600, 3e3 ]
            }
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ],
          10: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          13: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ]
        },
        roomCard: (_roomCard = {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 20
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 0
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            }
          },
          13: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          }
        }, _defineProperty(_roomCard, "5", {
          1: {
            name: "10局",
            cost: {
              6: {
                final: 0
              }
            }
          },
          2: {
            name: "20局",
            cost: {
              6: {
                final: 0
              }
            }
          },
          3: {
            name: "30局",
            cost: {
              6: {
                final: 0
              }
            }
          }
        }), _defineProperty(_roomCard, "104", {
          1: {
            name: "10局",
            cost: {
              10: {
                final: 0
              }
            }
          },
          2: {
            name: "20局",
            cost: {
              10: {
                final: 0
              }
            }
          },
          3: {
            name: "30局",
            cost: {
              10: {
                final: 0
              }
            }
          }
        }), _roomCard)
      }
    };
    module.exports = TestConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  competitionHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2a17VefN5C1KkpJyVKObZY", "competitionHandler");
    "use strict";
    var roomHandler = require("roomHandler");
    var errorCode = require("errorCode");
    var competitionHandler = {
      gameListData: {}
    };
    module.exports = competitionHandler;
    competitionHandler.setGameListData = function(data) {
      this.gameListData = data;
    };
    competitionHandler.setGameListData = function() {
      return this.gameListData;
    };
    competitionHandler.getPeopleNum = function(templateId) {
      for (var key in this.gameListData) if (this.gameListData[key].templateId === templateId) return this.gameListData[key].players.length;
    };
    competitionHandler.isApply = function(templateId, uid) {
      for (var key in this.gameListData) if (this.gameListData[key].templateId === templateId) return -1 != this.gameListData[key].players.indexOf(uid);
    };
    competitionHandler.getActivityList = function() {
      GameNet.getInstance().request("game.activityHandler.getActivityList", {}, function(rtn) {
        if (rtn.code == errorCode.Success) {
          competitionHandler.gameListData = rtn.result;
          sendEvent("onActivityList");
        }
      });
    };
    competitionHandler.apply = function(templateId) {
      GameNet.getInstance().request("game.activityHandler.apply", {
        templateId: templateId
      }, function(rtn) {});
    };
    competitionHandler.cancel = function(templateId) {
      GameNet.getInstance().request("game.activityHandler.cancel", {
        templateId: templateId
      }, function(rtn) {});
    };
    competitionHandler.giveUp = function() {
      GameNet.getInstance().request("game.activityHandler.giveUp", {}, function(rtn) {});
    };
    competitionHandler.registMessage = function() {
      WriteLog("registMessage 比赛交互消息");
      GameNet.getInstance().setCallBack("onActivityList", function(data) {
        WriteLog("do event onActivityList  " + JSON.stringify(data.result));
        competitionHandler.gameListData = data.result;
        sendEvent("onActivityList");
      });
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    roomHandler: "roomHandler"
  } ],
  configMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f0b8uU1FVGp6wy+ixuTwSt", "configMgr");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = {
      m_cur_config: null
    };
    module.exports = configMgr;
    configMgr.init = function() {
      var curType = gameDefine.AreaType.Area_Test;
      switch (curType) {
       case gameDefine.AreaType.Area_Test:
        this.m_cur_config = require("test");
        break;

       case gameDefine.AreaType.Area_TianJin:
        this.m_cur_config = require("tianjin");
        break;

       case gameDefine.AreaType.Area_HuaDian:
        this.m_cur_config = require("huadian");
        break;

       case gameDefine.AreaType.Area_DunHua:
        this.m_cur_config = require("dunhua");
        break;

       case gameDefine.AreaType.Area_HEB:
        this.m_cur_config = require("haerbin");
        break;

       case gameDefine.AreaType.Area_Hebei:
        this.m_cur_config = require("hebei");
        break;

       case gameDefine.AreaType.Area_Changchun:
        this.m_cur_config = require("changchun");
        break;

       case gameDefine.AreaType.Area_Appstore:
        this.m_cur_config = require("appstore");
        break;

       case gameDefine.AreaType.Area_Coin:
        this.m_cur_config = require("coin");
      }
    };
    configMgr.getConfig = function() {
      return this.m_cur_config;
    };
    configMgr.getServerConfig = function() {
      return this.m_cur_config.serverConfig;
    };
    configMgr.getAreaType = function() {
      return this.m_cur_config.areaType;
    };
    configMgr.getGameName = function() {
      return this.m_cur_config.gameName;
    };
    configMgr.getIP = function() {
      return this.m_cur_config.serverIP;
    };
    configMgr.getPort = function() {
      return this.m_cur_config.serverPort;
    };
    configMgr.getModeType = function() {
      return this.m_cur_config.ModeType;
    };
    configMgr.getWXShareUrl = function() {
      return this.m_cur_config.wxShareUrl;
    };
    configMgr.getWxWelcomeText = function() {
      return this.m_cur_config.wxWelcomeText;
    };
    configMgr.getLogo = function() {
      return this.m_cur_config.loginLogo;
    };
    configMgr.getNotice = function() {
      return this.m_cur_config.notice;
    };
    configMgr.getVersionText = function() {
      return this.m_cur_config.versionText;
    };
    configMgr.getGameVisible = function() {
      return this.m_cur_config.GameVisible;
    };
    configMgr.getSetCardsOpen = function() {
      return this.m_cur_config.SetCardsOpen;
    };
    configMgr.getArea = function() {
      return this.m_cur_config.areaType;
    };
    configMgr.getMatchGameType = function() {
      return this.m_cur_config.MatchGameType;
    };
    configMgr.getFightGameType = function() {
      return this.m_cur_config.FightGameType;
    };
    configMgr.getPoster = function() {
      return this.m_cur_config.Poster;
    };
    configMgr.CompetitionPoster = function() {
      return this.m_cur_config.CompetitionPoster;
    };
    configMgr.getAgentWeChat = function() {
      return this.m_cur_config.agentWeChat;
    };
    cc._RF.pop();
  }, {
    appstore: "appstore",
    changchun: "changchun",
    coin: "coin",
    dunhua: "dunhua",
    gameDefine: "gameDefine",
    haerbin: "haerbin",
    hebei: "hebei",
    huadian: "huadian",
    test: "test",
    tianjin: "tianjin"
  } ],
  createControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ac97Dl0AhNr52Ddb8Q03Qb", "createControl");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_create: cc.Node,
        gameTypeScrollView: cc.ScrollView,
        OrdScrollView: cc.ScrollView,
        MjTianJin: cc.Prefab,
        MjShiShi: cc.Prefab,
        MjHuanDian: cc.Prefab,
        MjHongZhong: cc.Prefab,
        MjChangChun: cc.Prefab,
        MjHeb: cc.Prefab,
        DDZTianJin: cc.Prefab,
        DDZ: cc.Prefab,
        NiuNiu: cc.Prefab,
        tenNiuNiu: cc.Prefab,
        TDK: cc.Prefab,
        ShiSanShui: cc.Prefab,
        PDK: cc.Prefab,
        ZJH: cc.Prefab,
        gameTypes: {
          default: [],
          type: [ cc.Sprite ]
        },
        createBtns: cc.Node,
        helpBtns: cc.Node,
        DKFBtns: cc.Node,
        roomTypeToggle: cc.Toggle,
        majiangNode: cc.Node,
        tianjinBtn: cc.Node,
        shishiBtn: cc.Node,
        huadianBtn: cc.Node,
        hongzhongBtn: cc.Node,
        changchunBtn: cc.Node,
        hebBtn: cc.Node,
        ddzNode: cc.Node,
        ddzBtn: cc.Node,
        TJddzBtn: cc.Node,
        niuniuNode: cc.Node,
        niuniuBtn: cc.Node,
        tenNiuniuBtn: cc.Node,
        tdkNode: cc.Node,
        tiandakengBtn: cc.Node,
        sssNode: cc.Node,
        shisanshuiBtn: cc.Node,
        ZJHNode: cc.Node,
        ZJHBtn: cc.Node,
        pdkNode: cc.Node,
        paodekuaiBtn: cc.Node
      },
      onLoad: function onLoad() {
        this.emageArray = [ [ "resources/home/create/majiangbiaoqian01.png", "resources/home/create/doudizhubiaoqian01.png", "resources/home/create/sbt_pinshianniu01.png", "resources/home/create/tiandakengbiaoqian01.png", "resources/home/create/shisanshuibiaoqian01.png", "resources/home/create/paodekuaibiaoqian01.png", "resources/home/create/zhajinhuabiaoqian01.png" ], [ "resources/home/create/majiangbiaoqian02.png", "resources/home/create/doudizhubiaoqian02.png", "resources/home/create/sbt_pinshianniu02.png", "resources/home/create/tiandakengbiaoqian02.png", "resources/home/create/shisanshuibiaoqian02.png", "resources/home/create/paodekuaibiaoqian02.png", "resources/home/create/zhajinhuabiaoqian02.png" ] ];
        this.currentItem = void 0;
        this.currentGameType = -1;
        this.btnGameType = GameData.createRoom.gameType || 0;
        this.leftBtnFirstArray = GameData.createRoom.leftGameType || [];
        this.addTouchEvent();
        this.GameTypeVisible();
        this.refreshUIRule();
      },
      addTouchEvent: function addTouchEvent() {
        var _this = this;
        var _loop = function _loop(i) {
          self = _this;
          _this.gameTypes[i].node.on(cc.Node.EventType.TOUCH_END, function(event) {
            soundMngr.instance.playAudioOther("button");
            self.showGameType(i);
          });
        };
        for (var i = 0; i < this.gameTypes.length; i++) {
          var self;
          _loop(i);
        }
      },
      GameTypeVisible: function GameTypeVisible() {
        this.tianjinBtn.active = false;
        this.shishiBtn.active = false;
        this.huadianBtn.active = false;
        this.hongzhongBtn.active = false;
        this.changchunBtn.active = false;
        this.hebBtn.active = false;
        this.ddzBtn.active = false;
        this.TJddzBtn.active = false;
        this.niuniuBtn.active = false;
        this.tenNiuniuBtn.active = false;
        this.tiandakengBtn.active = false;
        this.shisanshuiBtn.active = false;
        this.paodekuaiBtn.active = false;
        this.ZJHBtn.active = false;
        var gameList = configMgr.getGameVisible();
        for (var i = 0; i < gameList.length; i++) switch (gameList[i]) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          this.tianjinBtn.active = true;
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          this.shishiBtn.active = true;
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          this.shisanshuiBtn.active = true;
          break;

         case gameDefine.GameType.Game_niu_niu:
          this.niuniuBtn.active = true;
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          this.huadianBtn.active = true;
          break;

         case gameDefine.GameType.Game_TDK:
          this.tiandakengBtn.active = true;
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          this.TJddzBtn.active = true;
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          this.hongzhongBtn.active = true;
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          this.ddzBtn.active = true;
          break;

         case gameDefine.GameType.Game_Mj_CC:
          this.changchunBtn.active = true;
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          this.hebBtn.active = true;
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          this.paodekuaiBtn.active = true;
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          this.ZJHBtn.active = true;
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          this.tenNiuniuBtn.active = true;
        }
        var upScrollViewWidth = 0;
        var up_first = -1;
        var control;
        var b_number = 0;
        var b_distance = this.gameTypes[0].node.width;
        var b_initX = this.gameTypes[0].node.x;
        for (var ii = 0; ii < this.gameTypes.length; ii++) {
          var show = false;
          switch (ii) {
           case 0:
            control = this.majiangNode;
            break;

           case 1:
            control = this.ddzNode;
            break;

           case 2:
            control = this.niuniuNode;
            break;

           case 3:
            control = this.tdkNode;
            break;

           case 4:
            control = this.sssNode;
            break;

           case 5:
            control = this.pdkNode;
            break;

           case 6:
            control = this.ZJHNode;
          }
          if (!control) continue;
          var left_first = -1;
          var s_number = 0;
          var s_distance = control.getChildren()[0].height;
          var s_initY = control.getChildren()[0].y;
          for (var jj = 0; jj < control.getChildrenCount(); jj++) {
            var child = control.getChildren()[jj];
            if (child) {
              if (false == child.active) continue;
              show = true;
              child.y = s_initY - s_number * s_distance;
              s_number++;
              void 0 == this.leftBtnFirstArray[ii] && (this.leftBtnFirstArray[ii] = 0);
              if (false == control.getChildren()[this.leftBtnFirstArray[ii]].active && -1 == left_first) {
                left_first = jj;
                this.leftBtnFirstArray[ii] = left_first;
              }
            }
          }
          control.active = show;
          this.gameTypes[ii].node.active = show;
          if (show) {
            this.gameTypes[ii].node.x = b_initX + b_number * b_distance;
            b_number++;
            -1 == up_first && (up_first = ii);
            upScrollViewWidth += this.gameTypes[ii].node.width;
          }
        }
        upScrollViewWidth < 1230 ? upScrollViewWidth = 1230 : null;
        this.gameTypeScrollView.content.width = upScrollViewWidth;
        false == this.gameTypes[this.btnGameType].node.active && (this.btnGameType = up_first);
        this.showGameType(this.btnGameType);
      },
      showGameType: function showGameType(TabIndex) {
        this.btnGameType = TabIndex;
        var index = this.leftBtnFirstArray[TabIndex];
        for (var ii = 0; ii < this.gameTypes.length; ii++) {
          var emageIndex = 0;
          ii == TabIndex && (emageIndex = 1);
          var textureStr = this.emageArray[emageIndex][ii];
          var textures = cc.textureCache.addImage(cc.url.raw(textureStr));
          this.gameTypes[ii].spriteFrame = null;
          this.gameTypes[ii].spriteFrame = new cc.SpriteFrame(textures);
        }
        var content = cc.find("panel/littleType/view/content", this.layer_create);
        var child = content.children;
        for (var j = 0; j < child.length; j++) if (j == TabIndex) {
          child[j].active = true;
          this.selectRoomRule(index);
        } else child[j].active = false;
      },
      roomTypeClick: function roomTypeClick(evt, data) {
        soundMngr.instance.playAudioOther("button");
        cc.log("data = ", data);
        this.selectRoomRule(data);
      },
      selectRoomRule: function selectRoomRule(index) {
        var clickData = parseInt(index);
        var TabIndex = this.btnGameType;
        cc.log("..TabIndex:" + TabIndex + "--index:" + index);
        var btnNode;
        var gameType;
        switch (TabIndex) {
         case 0:
          btnNode = cc.find("panel/littleType/view/content/majiang", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_Mj_Tianjin;
            break;

           case 1:
            gameType = gameDefine.GameType.Game_Mj_Shishi;
            break;

           case 2:
            gameType = gameDefine.GameType.Game_MJ_HuaDian;
            break;

           case 3:
            gameType = gameDefine.GameType.Game_Mj_HZ;
            break;

           case 4:
            gameType = gameDefine.GameType.Game_Mj_CC;
            break;

           case 5:
            gameType = gameDefine.GameType.Game_Mj_Heb;
          }
          break;

         case 1:
          btnNode = cc.find("panel/littleType/view/content/doudizhu", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_Poker_DDZ;
            break;

           case 1:
            gameType = gameDefine.GameType.Game_Poker_TianjinDDZ;
          }
          break;

         case 2:
          btnNode = cc.find("panel/littleType/view/content/niuniu", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_niu_niu;
            break;

           case 1:
            gameType = gameDefine.GameType.Game_Niu_Niu_10;
          }
          break;

         case 3:
          btnNode = cc.find("panel/littleType/view/content/tiandakeng", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_TDK;
          }
          break;

         case 4:
          btnNode = cc.find("panel/littleType/view/content/shisanshui", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_Poker_13shui;
          }
          break;

         case 5:
          btnNode = cc.find("panel/littleType/view/content/paodekuai", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_Poker_paodekuai;
          }
          break;

         case 6:
          btnNode = cc.find("panel/littleType/view/content/zhajinhua", this.layer_create);
          switch (clickData) {
           case 0:
            gameType = gameDefine.GameType.Game_Poker_ZJH;
          }
        }
        if (gameType == this.currentGameType || void 0 == gameType) return;
        this.currentGameType = gameType;
        var children = btnNode.children;
        for (var ii = 0; ii < children.length; ii++) {
          var btnShow = true;
          clickData == ii && (btnShow = false);
          var btn = children[ii].getComponent("cc.Button");
          btn.interactable = btnShow;
        }
        this.leftBtnFirstArray[TabIndex] = clickData;
        GameData.createRoom.gameType = TabIndex;
        GameData.createRoom.leftGameType = this.leftBtnFirstArray;
        this.updateUISelectRule();
      },
      updateUISelectRule: function updateUISelectRule() {
        cc.log("..currentGameType:" + this.currentGameType);
        switch (this.currentGameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          this.currentItem = cc.instantiate(this.MjTianJin);
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          this.currentItem = cc.instantiate(this.MjShiShi);
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          this.currentItem = cc.instantiate(this.MjHuanDian);
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          this.currentItem = cc.instantiate(this.MjHongZhong);
          break;

         case gameDefine.GameType.Game_Mj_CC:
          this.currentItem = cc.instantiate(this.MjChangChun);
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          this.currentItem = cc.instantiate(this.MjHeb);
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          this.currentItem = cc.instantiate(this.DDZTianJin);
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          this.currentItem = cc.instantiate(this.DDZ);
          break;

         case gameDefine.GameType.Game_niu_niu:
          this.currentItem = cc.instantiate(this.NiuNiu);
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          this.currentItem = cc.instantiate(this.tenNiuNiu);
          break;

         case gameDefine.GameType.Game_TDK:
          this.currentItem = cc.instantiate(this.TDK);
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          this.currentItem = cc.instantiate(this.ShiSanShui);
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          this.currentItem = cc.instantiate(this.PDK);
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          this.currentItem = cc.instantiate(this.ZJH);
        }
        if (void 0 == this.currentItem) {
          cc.log("..item is undefined!");
          return;
        }
        this.OrdScrollView.scrollToTop(.1);
        var content = this.OrdScrollView.content;
        content.getChildrenCount() > 0 && content.removeAllChildren(true);
        content.addChild(this.currentItem);
        this.refreshAgentRoomBtn(true);
      },
      refreshAgentRoomBtn: function refreshAgentRoomBtn(show) {
        var modeType;
        var modeTypeData = configMgr.getModeType();
        if (modeTypeData) switch (this.currentGameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          modeTypeData.Game_Mj_Tianjin && (modeType = modeTypeData.Game_Mj_Tianjin.CurrencyType);
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          modeTypeData.Game_Mj_Shishi && (modeType = modeTypeData.Game_Mj_Shishi.CurrencyType);
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          modeTypeData.Game_MJ_HuaDian && (modeType = modeTypeData.Game_MJ_HuaDian.CurrencyType);
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          modeTypeData.Game_Mj_HZ && (modeType = modeTypeData.Game_Mj_HZ.CurrencyType);
          break;

         case gameDefine.GameType.Game_Mj_CC:
          modeTypeData.Game_Mj_CC && (modeType = modeTypeData.Game_Mj_CC.CurrencyType);
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          modeTypeData.Game_Mj_Heb && (modeType = modeTypeData.Game_Mj_Heb.CurrencyType);
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          modeTypeData.Game_Poker_TianjinDDZ && (modeType = modeTypeData.Game_Poker_TianjinDDZ.CurrencyType);
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          modeTypeData.Game_Poker_DDZ && (modeType = modeTypeData.Game_Poker_DDZ.CurrencyType);
          break;

         case gameDefine.GameType.Game_niu_niu:
          modeTypeData.Game_niu_niu && (modeType = modeTypeData.Game_niu_niu.CurrencyType);
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          modeTypeData.Game_Niu_Niu_10 && (modeType = modeTypeData.Game_Niu_Niu_10.CurrencyType);
          break;

         case gameDefine.GameType.Game_TDK:
          modeTypeData.Game_TDK && (modeType = modeTypeData.Game_TDK.CurrencyType);
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          modeTypeData.Game_Poker_13shui && (modeType = modeTypeData.Game_Poker_13shui.CurrencyType);
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          modeTypeData.Game_Poker_paodekuai && (modeType = modeTypeData.Game_Poker_paodekuai.CurrencyType);
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          modeTypeData.Game_Poker_ZJH && (modeType = modeTypeData.Game_Poker_ZJH.CurrencyType);
        }
        if (modeType != gameDefine.currencyType.Currency_Coin && true == show && GameData.player.club && Object.keys(GameData.player.club).length >= 0 && 2 == GameData.player.club.clubAdmin) {
          this.DKFBtns.active = true;
          this.roomTypeToggle.node.active = true;
        } else {
          this.DKFBtns.active = false;
          this.roomTypeToggle.node.active = false;
          this.roomTypeToggle.isChecked = false;
        }
      },
      refreshUIRule: function refreshUIRule() {
        1 == GameData.createRoom.roomType ? this.roomTypeToggle.isChecked = false : 2 == GameData.createRoom.roomType && (this.roomTypeToggle.isChecked = true);
      },
      saveUIRule: function saveUIRule() {
        GameData.createRoom.roomType = this.roomTypeToggle.isChecked ? 2 : 1;
        GameData.saveCommonCreateRoomRule();
      },
      selectGameOk: function selectGameOk(evt, data) {
        if (inCD(2e3)) return;
        soundMngr.instance.playAudioOther("button");
        this.saveUIRule();
        var clubId = 0;
        GameData.player.club && Object.keys(GameData.player.club).length > 0 && (clubId = GameData.player.club.clubID);
        if (2 == data && clubId <= 0) {
          createMessageBox("您还没有俱乐部!不能代开房间。", function() {});
          return;
        }
        var createData = {};
        switch (this.currentGameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          createData = this.currentItem.getComponent("createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          createData = this.currentItem.getComponent("createRoom_shishi").createRoom();
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          createData = this.currentItem.getComponent("createRoom_huadian").createRoom();
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          createData = this.currentItem.getComponent("createRoom-hz").createRoom();
          break;

         case gameDefine.GameType.Game_Mj_CC:
          createData = this.currentItem.getComponent("createRoom_changchun").createRoom();
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          createData = this.currentItem.getComponent("createRoom_heb").createRoom();
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          createData = this.currentItem.getComponent("TJDDZ-createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          createData = this.currentItem.getComponent("DDZ-createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_niu_niu:
          createData = this.currentItem.getComponent("NN-createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          createData = this.currentItem.getComponent("tenNN-createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_TDK:
          createData = this.currentItem.getComponent("TDK-createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          createData = this.currentItem.getComponent("SSSCreateRoom").createRoom();
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          createData = this.currentItem.getComponent("PDK-createRoom").createRoom();
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          createData = this.currentItem.getComponent("ZJH-createRoom").createRoom();
        }
        if (void 0 == createData || Object.keys(createData).length <= 0) {
          cc.log("..createData is undefined or null.");
          return;
        }
        createData.clubId = clubId;
        createData.roomType = GameData.createRoom.roomType;
        2 == data && (createData.costType = gameDefine.CostType.Cost_Agent);
        createData.currencyType == gameDefine.currencyType.Currency_Coin && (createData.costType = gameDefine.CostType.Cost_Table);
        console.log("..createData = " + JSON.stringify(createData));
        RoomHandler.createRoom(createData);
      },
      openPlayIntro: function openPlayIntro(evt) {
        soundMngr.instance.playAudioOther("button");
        switch (this.currentGameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          openView("PlayIntroPanel");
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          return;

         case gameDefine.GameType.Game_MJ_HuaDian:
          openView("PlayIntroPanel_HD", gameDefine.GameType.Game_MJ_HuaDian);
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          openView("PlayIntroPanel_HZ", gameDefine.GameType.Game_Mj_HZ);
          break;

         case gameDefine.GameType.Game_Mj_CC:
          openView("PlayIntroPanel_CC", gameDefine.GameType.Game_Mj_CC);
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          openView("PlayIntroPanel_Heb", gameDefine.GameType.Game_Mj_Heb);
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          openView("TJDDZ-PlayIntroPanel", gameDefine.GameType.Game_Poker_TianjinDDZ);
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          openView("DDZ-PlayIntroPanel", gameDefine.GameType.Game_Poker_DDZ);
          break;

         case gameDefine.GameType.Game_niu_niu:
         case gameDefine.GameType.Game_Niu_Niu_10:
          openView("NiuniuPlayIntroPanel", gameDefine.GameType.Game_niu_niu);
          break;

         case gameDefine.GameType.Game_TDK:
          openView("TDKPlayIntroPanel", gameDefine.GameType.Game_TDK);
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          openSSSView("poker13PlayIntroPanel");
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          openView("PDK-PlayIntroPanel", gameDefine.GameType.Game_Poker_paodekuai);
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          openView("PlayIntroPanel_ZJH", gameDefine.GameType.Game_Poker_ZJH);
        }
      },
      backToHome: function backToHome(evt) {
        var _this2 = this;
        soundMngr.instance.playAudioOther("button");
        var self = this;
        var _loop2 = function _loop2(i) {
          _this2.gameTypes[i].node.off(cc.Node.EventType.TOUCH_END, function(event) {
            self.showGameType(i);
          });
        };
        for (var i = 0; i < this.gameTypes.length; i++) _loop2(i);
        this.layer_create.active = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  "createRoom-hz": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02628B/Wz5P1aQu0n+JS7lv", "createRoom-hz");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round4: cc.Toggle,
        round8: cc.Toggle,
        round16: cc.Toggle,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        mai2: cc.Toggle,
        mai4: cc.Toggle,
        mai6: cc.Toggle,
        huqidui: cc.Toggle,
        qianggang: cc.Toggle,
        diangang: cc.Toggle,
        timesNode: cc.Node,
        times1: cc.Toggle,
        times10: cc.Toggle,
        times20: cc.Toggle,
        times50: cc.Toggle,
        scoreNode: cc.Node,
        score1: cc.Toggle,
        score2: cc.Toggle,
        score3: cc.Toggle,
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.modeType = 1;
        this.spendData = void 0;
        this.refreshUI();
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      refreshUI: function refreshUI() {
        this.round4.isChecked = 1 == GameDataHZ.createRoomOpts.roundRule;
        this.round8.isChecked = 2 == GameDataHZ.createRoomOpts.roundRule;
        this.round16.isChecked = 3 == GameDataHZ.createRoomOpts.roundRule;
        this.pay1.isChecked = 1 == GameDataHZ.createRoomOpts.payType;
        this.pay2.isChecked = 2 == GameDataHZ.createRoomOpts.payType;
        this.pay3.isChecked = 3 == GameDataHZ.createRoomOpts.payType;
        this.mai2.isChecked = 2 == GameDataHZ.createRoomOpts.BuyM;
        this.mai4.isChecked = 4 == GameDataHZ.createRoomOpts.BuyM;
        this.mai6.isChecked = 6 == GameDataHZ.createRoomOpts.BuyM;
        this.times1.isChecked = 1 == GameDataHZ.createRoomOpts.times;
        this.times10.isChecked = 10 == GameDataHZ.createRoomOpts.times;
        this.times20.isChecked = 20 == GameDataHZ.createRoomOpts.times;
        this.times50.isChecked = 50 == GameDataHZ.createRoomOpts.times;
        this.huqidui.isChecked = true == GameDataHZ.createRoomOpts.huqidui;
        this.qianggang.isChecked = true == GameDataHZ.createRoomOpts.qianggang;
        this.diangang.isChecked = true == GameDataHZ.createRoomOpts.diangang;
        this.showSpendUI();
        this.score1.isChecked = true;
        this.score2.isChecked = false;
        this.score3.isChecked = false;
        this.refreshTimesScore();
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..hongzhong..MJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_HZ) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Mj_HZ.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Mj_HZ];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Mj_HZ];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            var cost = this.spendData[key + 1].cost;
            var number = 4;
            final = cost[number].final;
            if (this.pay2.isChecked) {
              final = Math.ceil(final / number);
              str2 = "/人";
            }
          } else final = this.spendData[key].cost;
          this.drowArray[key].active = 0 == final;
          this.spendUI[key].string = "（" + str1 + "*" + final + str2 + "）";
        }
      },
      saveRuleFromUI: function saveRuleFromUI() {
        this.round4.isChecked ? GameDataHZ.createRoomOpts.roundRule = 1 : this.round8.isChecked ? GameDataHZ.createRoomOpts.roundRule = 2 : this.round16.isChecked ? GameDataHZ.createRoomOpts.roundRule = 3 : GameDataHZ.createRoomOpts.roundRule = 1;
        this.pay1.isChecked ? GameDataHZ.createRoomOpts.payType = 1 : this.pay2.isChecked ? GameDataHZ.createRoomOpts.payType = 2 : this.pay3.isChecked ? GameDataHZ.createRoomOpts.payType = 3 : GameDataHZ.createRoomOpts.payType = 1;
        this.mai2.isChecked ? GameDataHZ.createRoomOpts.BuyM = 2 : this.mai4.isChecked ? GameDataHZ.createRoomOpts.BuyM = 4 : this.mai6.isChecked ? GameDataHZ.createRoomOpts.BuyM = 6 : GameDataHZ.createRoomOpts.BuyM = 2;
        GameDataHZ.createRoomOpts.huqidui = !!this.huqidui.isChecked;
        GameDataHZ.createRoomOpts.qianggang = !!this.qianggang.isChecked;
        GameDataHZ.createRoomOpts.diangang = !!this.diangang.isChecked;
        GameDataHZ.saveCreateRoomOpts();
      },
      selectRoundRuleClick: function selectRoundRuleClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 4:
          this.round4.isChecked = true;
          this.round8.isChecked = false;
          this.round16.isChecked = false;
          break;

         case 8:
          this.round8.isChecked = true;
          this.round4.isChecked = false;
          this.round16.isChecked = false;
          break;

         case 16:
          this.round16.isChecked = true;
          this.round4.isChecked = false;
          this.round8.isChecked = false;
        }
        this.round4.isChecked ? GameDataHZ.createRoomOpts.roundRule = 1 : this.round8.isChecked ? GameDataHZ.createRoomOpts.roundRule = 2 : this.round16.isChecked && (GameDataHZ.createRoomOpts.roundRule = 3);
        this.refreshTimesScore();
      },
      selectTimesClick: function selectTimesClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 1:
          this.times1.isChecked = true;
          this.times10.isChecked = false;
          this.times20.isChecked = false;
          this.times50.isChecked = false;
          break;

         case 10:
          this.times10.isChecked = true;
          this.times1.isChecked = false;
          this.times20.isChecked = false;
          this.times50.isChecked = false;
          break;

         case 20:
          this.times20.isChecked = true;
          this.times10.isChecked = false;
          this.times1.isChecked = false;
          this.times50.isChecked = false;
          break;

         case 50:
          this.times50.isChecked = true;
          this.times10.isChecked = false;
          this.times20.isChecked = false;
          this.times1.isChecked = false;
        }
        this.times1.isChecked ? GameDataHZ.createRoomOpts.times = 1 : this.times10.isChecked ? GameDataHZ.createRoomOpts.times = 10 : this.times20.isChecked ? GameDataHZ.createRoomOpts.times = 20 : this.times50.isChecked && (GameDataHZ.createRoomOpts.times = 50);
        this.refreshTimesScore();
      },
      refreshTimesScore: function refreshTimesScore() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.timesNode.active = false;
          this.scoreNode.active = false;
          return;
        }
        this.timesNode.active = true;
        this.scoreNode.active = true;
        var index = 0;
        switch (GameDataHZ.createRoomOpts.roundRule) {
         case 4:
          index = 0;
          break;

         case 8:
          index = 1;
          break;

         case 16:
          index = 2;
        }
        var scoreArray = this.spendData[index].enter;
        var times1Label = cc.find("label", this.score1.node);
        var times2Label = cc.find("label", this.score2.node);
        var times5Label = cc.find("label", this.score3.node);
        void 0 == GameDataHZ.createRoomOpts.times && (GameDataHZ.createRoomOpts.times = 1);
        times1Label.getComponent(cc.Label).string = "≥" + GameDataHZ.createRoomOpts.times * parseInt(scoreArray[0]);
        times2Label.getComponent(cc.Label).string = "≥" + GameDataHZ.createRoomOpts.times * parseInt(scoreArray[1]);
        times5Label.getComponent(cc.Label).string = "≥" + GameDataHZ.createRoomOpts.times * parseInt(scoreArray[2]);
        this.score1.isChecked ? GameDataHZ.createRoomOpts.score = GameDataHZ.createRoomOpts.times * parseInt(scoreArray[0]) : this.score2.isChecked ? GameDataHZ.createRoomOpts.score = GameDataHZ.createRoomOpts.times * parseInt(scoreArray[1]) : this.score3.isChecked && (GameDataHZ.createRoomOpts.score = GameDataHZ.createRoomOpts.times * parseInt(scoreArray[2]));
      },
      createRoom: function createRoom(evt) {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Mj_HZ);
        var roundMax = GameDataHZ.getRoundMax();
        var createData = {
          gameType: gameDefine.GameType.Game_Mj_HZ,
          roomType: 0,
          costType: GameDataHZ.createRoomOpts.payType,
          roundRule: GameDataHZ.createRoomOpts.roundRule,
          roundType: GameDataHZ.createRoomOpts.roundRule,
          roundMax: roundMax,
          joinermax: 2,
          BuyM: GameDataHZ.createRoomOpts.BuyM,
          huqidui: GameDataHZ.createRoomOpts.huqidui,
          qianggang: GameDataHZ.createRoomOpts.qianggang,
          diangang: GameDataHZ.createRoomOpts.diangang,
          clubId: 0,
          score: GameDataHZ.createRoomOpts.score,
          times: GameDataHZ.createRoomOpts.times,
          currencyType: null,
          settleType: null
        };
        return createData;
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  createRoom_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3fee7Jj7VPBJ2eE2k117U5", "createRoom_changchun");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        player2: cc.Toggle,
        player4: cc.Toggle,
        round_CC: cc.Node,
        spendRound_CC: cc.Node,
        round4: cc.Toggle,
        round8: cc.Toggle,
        round16: cc.Toggle,
        quan_CC: cc.Node,
        spendQuan_CC: cc.Node,
        quan1: cc.Toggle,
        quan2: cc.Toggle,
        quan4: cc.Toggle,
        dianpao: cc.Toggle,
        xiaojifeidan: cc.Toggle,
        xiadanzhanli: cc.Toggle,
        quemen: cc.Toggle,
        duibaofanbei: cc.Toggle,
        baotype: cc.Toggle,
        qiDui: cc.Toggle,
        baseNode: cc.Node,
        base_1: cc.Toggle,
        base_2: cc.Toggle,
        base_3: cc.Toggle,
        spend: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.refreshUI();
        this.addTouchListener();
      },
      onEnter: function onEnter() {},
      addTouchListener: function addTouchListener() {},
      getModeType: function getModeType() {
        return this.modeType;
      },
      refreshUI: function refreshUI() {
        cc.log("~~~~~~~~~~~~~~~~~~~~~~~~~GameData.createRoomOpts~~~~~~~~~~~~~~~~~~~~~~~~" + JSON.stringify(profileChangChun.createRoomOpts));
        this.round_CC.active = 2 == profileChangChun.createRoomOpts.joinermax;
        this.quan_CC.active = 4 == profileChangChun.createRoomOpts.joinermax;
        this.spendRound_CC.active = 2 == profileChangChun.createRoomOpts.joinermax;
        this.spendQuan_CC.active = 4 == profileChangChun.createRoomOpts.joinermax;
        this.player2.isChecked = 2 == profileChangChun.createRoomOpts.joinermax;
        this.player4.isChecked = 4 == profileChangChun.createRoomOpts.joinermax;
        this.round4.isChecked = 4 == profileChangChun.createRoomOpts.roundMax;
        this.round8.isChecked = 8 == profileChangChun.createRoomOpts.roundMax;
        this.round16.isChecked = 16 == profileChangChun.createRoomOpts.roundMax;
        this.quan1.isChecked = 1 == profileChangChun.createRoomOpts.roundMax;
        this.quan2.isChecked = 2 == profileChangChun.createRoomOpts.roundMax;
        this.quan4.isChecked = 4 == profileChangChun.createRoomOpts.roundMax;
        this.dianpao.isChecked = 1 == profileChangChun.createRoomOpts.dianpao;
        this.xiaojifeidan.isChecked = 1 == profileChangChun.createRoomOpts.xiaojifeidan;
        this.xiadanzhanli.isChecked = 1 == profileChangChun.createRoomOpts.xiadanzhanli;
        this.quemen.isChecked = 1 == profileChangChun.createRoomOpts.quemen;
        this.duibaofanbei.isChecked = 1 == profileChangChun.createRoomOpts.duibaofanbei;
        this.baotype.isChecked = 0 == profileChangChun.createRoomOpts.baotype;
        this.qiDui.isChecked = 1 == profileChangChun.createRoomOpts.qiDui;
        this.base_1.isChecked = 0 == profileChangChun.createRoomOpts.scoreLv;
        this.base_2.isChecked = 1 == profileChangChun.createRoomOpts.scoreLv;
        this.base_3.isChecked = 2 == profileChangChun.createRoomOpts.scoreLv;
        this.modeType = 1;
        this.spendData = void 0;
        this.showSpendUI();
      },
      roundNodeActive: function roundNodeActive(evt) {
        this.round_CC.active = !!this.player2.isChecked;
        this.quan_CC.active = !!this.player4.isChecked;
        this.spendRound_CC.active = !!this.player2.isChecked;
        this.spendQuan_CC.active = !!this.player4.isChecked;
        this.showSpendUI();
      },
      createRoom: function createRoom(evt) {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Mj_CC);
        var createData = {
          gameType: gameDefine.GameType.Game_Mj_CC,
          roundMax: profileChangChun.createRoomOpts.roundMax,
          roundType: profileChangChun.createRoomOpts.roundType,
          roundRule: profileChangChun.createRoomOpts.roundRule,
          bossType: profileChangChun.createRoomOpts.bossType,
          roomType: profileChangChun.createRoomOpts.roomType,
          costType: profileChangChun.createRoomOpts.costType,
          joinermax: profileChangChun.createRoomOpts.joinermax,
          clubId: 0,
          anBao: profileChangChun.createRoomOpts.baotype,
          dianPaoBaoFu: profileChangChun.createRoomOpts.dianpao,
          xiaoJiFeiDan: profileChangChun.createRoomOpts.xiaojifeidan,
          xiaDanZhanLi: profileChangChun.createRoomOpts.xiadanzhanli,
          queMen: profileChangChun.createRoomOpts.quemen,
          duiBaoDouble: profileChangChun.createRoomOpts.duibaofanbei,
          qiDui: profileChangChun.createRoomOpts.qiDui,
          scorelv: profileChangChun.createRoomOpts.scoreLv,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_CC) return createData;
        createData.currencyType = modeTypeData.Game_Mj_CC.CurrencyType;
        createData.settleType = modeTypeData.Game_Mj_CC.SettleType;
        GameData.room.opts = createData;
        return createData;
      },
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.player2.isChecked) {
          profileChangChun.createRoomOpts.joinermax = 2;
          profileChangChun.createRoomOpts.roundType = 1;
          if (this.round4.isChecked) {
            profileChangChun.createRoomOpts.roundMax = 4;
            profileChangChun.createRoomOpts.roundRule = 61;
          } else if (this.round8.isChecked) {
            profileChangChun.createRoomOpts.roundMax = 8;
            profileChangChun.createRoomOpts.roundRule = 62;
          } else if (this.round16.isChecked) {
            profileChangChun.createRoomOpts.roundMax = 16;
            profileChangChun.createRoomOpts.roundRule = 63;
          }
        } else if (this.player4.isChecked) {
          profileChangChun.createRoomOpts.joinermax = 4;
          profileChangChun.createRoomOpts.roundType = 2;
          if (this.quan1.isChecked) {
            profileChangChun.createRoomOpts.roundRule = 64;
            profileChangChun.createRoomOpts.roundMax = 1;
          } else if (this.quan2.isChecked) {
            profileChangChun.createRoomOpts.roundRule = 65;
            profileChangChun.createRoomOpts.roundMax = 2;
          } else if (this.quan4.isChecked) {
            profileChangChun.createRoomOpts.roundRule = 66;
            profileChangChun.createRoomOpts.roundMax = 4;
          }
        }
        this.base_1.isChecked ? profileChangChun.createRoomOpts.scoreLv = 0 : this.base_2.isChecked ? profileChangChun.createRoomOpts.scoreLv = 1 : this.base_3.isChecked ? profileChangChun.createRoomOpts.scoreLv = 2 : profileChangChun.createRoomOpts.scoreLv = 0;
        profileChangChun.createRoomOpts.dianpao = this.dianpao.isChecked ? 1 : 0;
        profileChangChun.createRoomOpts.xiaojifeidan = this.xiaojifeidan.isChecked ? 1 : 0;
        profileChangChun.createRoomOpts.xiadanzhanli = this.xiadanzhanli.isChecked ? 1 : 0;
        profileChangChun.createRoomOpts.quemen = this.quemen.isChecked ? 1 : 0;
        profileChangChun.createRoomOpts.duibaofanbei = this.duibaofanbei.isChecked ? 1 : 0;
        profileChangChun.createRoomOpts.baotype = this.baotype.isChecked ? 0 : 1;
        profileChangChun.createRoomOpts.qiDui = this.qiDui.isChecked ? 1 : 0;
        profileChangChun.createRoomOpts.bossType = 1;
        profileChangChun.createRoomOpts.costType = gameDefine.CostType.Cost_Creator;
        profileChangChun.saveCreateRoomOpts();
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..changchun..MJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_CC) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Mj_CC.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Mj_CC];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Mj_CC];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var ii = 0; ii < this.drowArray.length; ii++) {
          var drow = this.drowArray[ii];
          drow && (drow.active = false);
        }
        var number = 2;
        this.player2.isChecked ? number = 2 : this.player4.isChecked && (number = 4);
        var base = 60;
        var max = 63;
        if (true == this.player2.isChecked) {
          base = 60;
          max = 63;
        } else if (true == this.player4.isChecked) {
          base = 63;
          max = 66;
        }
        var cost;
        for (var key = base; key < max; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            cost = this.spendData[key + 1].cost;
            final = cost[number].final;
            this.spend[key - 60].string = "（" + str1 + "*" + final + str2 + "）";
          } else if (this.modeType == gameDefine.currencyType.Currency_Coin) {
            cost = this.spendData[key - 60].cost;
            final = cost[number].final;
            this.spend[key - 60].string = "";
          }
          final <= 0 && (this.drowArray[key - 60].active = true);
        }
        this.refreshBaseScoreLv();
      },
      refreshBaseScoreLv: function refreshBaseScoreLv() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.baseNode.active = false;
          return;
        }
        this.baseNode.active = true;
        var number = 2, round = 0;
        if (this.player2.isChecked) {
          number = 2;
          this.round4.isChecked ? round = 0 : this.round8.isChecked ? round = 1 : this.round16.isChecked && (round = 2);
        } else if (this.player4.isChecked) {
          number = 4;
          this.quan1.isChecked ? round = 3 : this.quan2.isChecked ? round = 4 : this.quan4.isChecked && (round = 5);
        }
        var data = this.spendData[round];
        if (void 0 == data) return;
        var cost = data.cost;
        var costFinal = cost[number];
        var enter = data.enter;
        var enterFinal = enter[number];
        var times1Label = cc.find("label", this.base_1.node);
        var times2Label = cc.find("label", this.base_2.node);
        var times5Label = cc.find("label", this.base_3.node);
        times1Label.getComponent(cc.Label).string = "初级场：台费" + costFinal[0] + " 进入条件≥" + enterFinal[0] + " 倍数 100";
        times2Label.getComponent(cc.Label).string = "中级场：台费" + costFinal[1] + " 进入条件≥" + enterFinal[1] + " 倍数 200";
        times5Label.getComponent(cc.Label).string = "高级场：台费" + costFinal[2] + " 进入条件≥" + enterFinal[2] + " 倍数 500";
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  createRoom_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2216eM+ladBIqNVtnBHR4sr", "createRoom_heb");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        player2: cc.Toggle,
        player4: cc.Toggle,
        round: cc.Node,
        spendRound: cc.Node,
        round4: cc.Toggle,
        round8: cc.Toggle,
        round16: cc.Toggle,
        quan: cc.Node,
        spendQuan: cc.Node,
        quan1: cc.Toggle,
        quan2: cc.Toggle,
        quan4: cc.Toggle,
        dianpao: cc.Toggle,
        quemen: cc.Toggle,
        duibaofanbei: cc.Toggle,
        baotype: cc.Toggle,
        baseNode: cc.Node,
        base_1: cc.Toggle,
        base_2: cc.Toggle,
        base_3: cc.Toggle,
        spend: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.refreshUI();
        this.addTouchListener();
      },
      onEnter: function onEnter() {},
      addTouchListener: function addTouchListener() {},
      getModeType: function getModeType() {
        return this.modeType;
      },
      refreshUI: function refreshUI() {
        cc.log("~~~~~~~~~~~~~~~~~~~~~~~~~GameData.createRoomOpts~~~~~~~~~~~~~~~~~~~~~~~~" + JSON.stringify(profileHeb.createRoomOpts));
        this.round.active = 2 == profileHeb.createRoomOpts.joinermax;
        this.quan.active = 4 == profileHeb.createRoomOpts.joinermax;
        this.spendRound.active = 2 == profileHeb.createRoomOpts.joinermax;
        this.spendQuan.active = 4 == profileHeb.createRoomOpts.joinermax;
        this.player2.isChecked = 2 == profileHeb.createRoomOpts.joinermax;
        this.player4.isChecked = 4 == profileHeb.createRoomOpts.joinermax;
        this.round4.isChecked = 4 == profileHeb.createRoomOpts.roundMax;
        this.round8.isChecked = 8 == profileHeb.createRoomOpts.roundMax;
        this.round16.isChecked = 16 == profileHeb.createRoomOpts.roundMax;
        this.quan1.isChecked = 1 == profileHeb.createRoomOpts.roundMax;
        this.quan2.isChecked = 2 == profileHeb.createRoomOpts.roundMax;
        this.quan4.isChecked = 4 == profileHeb.createRoomOpts.roundMax;
        this.dianpao.isChecked = 1 == profileHeb.createRoomOpts.dianpao;
        this.quemen.isChecked = 1 == profileHeb.createRoomOpts.quemen;
        this.duibaofanbei.isChecked = 1 == profileHeb.createRoomOpts.duibaofanbei;
        this.baotype.isChecked = 0 == profileHeb.createRoomOpts.baotype;
        this.base_1.isChecked = 0 == profileChangChun.createRoomOpts.scoreLv;
        this.base_2.isChecked = 1 == profileChangChun.createRoomOpts.scoreLv;
        this.base_3.isChecked = 2 == profileChangChun.createRoomOpts.scoreLv;
        this.modeType = 1;
        this.spendData = void 0;
        this.showSpendUI();
      },
      roundNodeActive: function roundNodeActive(evt) {
        this.round.active = !!this.player2.isChecked;
        this.quan.active = !!this.player4.isChecked;
        this.spendRound.active = !!this.player2.isChecked;
        this.spendQuan.active = !!this.player4.isChecked;
        this.showSpendUI();
      },
      createRoom: function createRoom(evt) {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Mj_Heb);
        var createData = {
          gameType: gameDefine.GameType.Game_Mj_Heb,
          roundMax: profileHeb.createRoomOpts.roundMax,
          roundType: profileHeb.createRoomOpts.roundType,
          roundRule: profileHeb.createRoomOpts.roundRule,
          bossType: profileHeb.createRoomOpts.bossType,
          roomType: profileHeb.createRoomOpts.roomType,
          costType: profileHeb.createRoomOpts.costType,
          joinermax: profileHeb.createRoomOpts.joinermax,
          clubId: 0,
          anBao: profileHeb.createRoomOpts.baotype,
          dianPaoBaoFu: profileHeb.createRoomOpts.dianpao,
          queMen: profileHeb.createRoomOpts.quemen,
          duiBaoDouble: profileHeb.createRoomOpts.duibaofanbei,
          scorelv: profileHeb.createRoomOpts.scoreLv,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_Heb) return createData;
        createData.currencyType = modeTypeData.Game_Mj_Heb.CurrencyType;
        createData.settleType = modeTypeData.Game_Mj_Heb.SettleType;
        GameData.room.opts = createData;
        return createData;
      },
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.player2.isChecked) {
          profileHeb.createRoomOpts.joinermax = 2;
          profileHeb.createRoomOpts.roundType = 1;
          if (this.round4.isChecked) {
            profileHeb.createRoomOpts.roundMax = 4;
            profileHeb.createRoomOpts.roundRule = 1;
          } else if (this.round8.isChecked) {
            profileHeb.createRoomOpts.roundMax = 8;
            profileHeb.createRoomOpts.roundRule = 2;
          } else if (this.round16.isChecked) {
            profileHeb.createRoomOpts.roundMax = 16;
            profileHeb.createRoomOpts.roundRule = 3;
          }
        } else if (this.player4.isChecked) {
          profileHeb.createRoomOpts.joinermax = 4;
          profileHeb.createRoomOpts.roundType = 2;
          if (this.quan1.isChecked) {
            profileHeb.createRoomOpts.roundRule = 64;
            profileHeb.createRoomOpts.roundMax = 1;
          } else if (this.quan2.isChecked) {
            profileHeb.createRoomOpts.roundRule = 65;
            profileHeb.createRoomOpts.roundMax = 2;
          } else if (this.quan4.isChecked) {
            profileHeb.createRoomOpts.roundRule = 66;
            profileHeb.createRoomOpts.roundMax = 4;
          }
        }
        this.base_1.isChecked ? profileHeb.createRoomOpts.scoreLv = 0 : this.base_2.isChecked ? profileHeb.createRoomOpts.scoreLv = 1 : this.base_3.isChecked ? profileHeb.createRoomOpts.scoreLv = 2 : profileHeb.createRoomOpts.scoreLv = 0;
        profileHeb.createRoomOpts.dianpao = this.dianpao.isChecked ? 1 : 0;
        profileHeb.createRoomOpts.quemen = this.quemen.isChecked ? 1 : 0;
        profileHeb.createRoomOpts.duibaofanbei = this.duibaofanbei.isChecked ? 1 : 0;
        profileHeb.createRoomOpts.baotype = this.baotype.isChecked ? 0 : 1;
        profileHeb.saveCreateRoomOpts();
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..哈尔滨..MJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_Heb) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Mj_Heb.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Mj_Heb];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Mj_Heb];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var ii = 0; ii < this.drowArray.length; ii++) {
          var drow = this.drowArray[ii];
          drow && (drow.active = false);
        }
        var number = 2;
        this.player2.isChecked ? number = 2 : this.player4.isChecked && (number = 4);
        var base = 60;
        var max = 63;
        if (true == this.player2.isChecked) {
          base = 60;
          max = 63;
        } else if (true == this.player4.isChecked) {
          base = 63;
          max = 66;
        }
        var cost;
        for (var key = base; key < max; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            cost = this.spendData[key + 1].cost;
            final = cost[number].final;
            this.spend[key - 60].string = "（" + str1 + "*" + final + str2 + "）";
          } else {
            cost = this.spendData[key - 60].cost;
            final = this.spendData[key - 60].cost;
            this.spend[key - 60].string = "";
          }
          final <= 0 && (this.drowArray[key - 60].active = true);
        }
        this.refreshBaseScoreLv();
      },
      refreshBaseScoreLv: function refreshBaseScoreLv() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.baseNode.active = false;
          return;
        }
        this.baseNode.active = true;
        if (this.player2.isChecked) {
          profileHeb.createRoomOpts.joinermax = 2;
          profileHeb.createRoomOpts.roundType = 1;
          if (this.round4.isChecked) {
            profileHeb.createRoomOpts.roundMax = 4;
            profileHeb.createRoomOpts.roundRule = 1;
          } else if (this.round8.isChecked) {
            profileHeb.createRoomOpts.roundMax = 8;
            profileHeb.createRoomOpts.roundRule = 2;
          } else if (this.round16.isChecked) {
            profileHeb.createRoomOpts.roundMax = 16;
            profileHeb.createRoomOpts.roundRule = 3;
          }
        } else if (this.player4.isChecked) {
          profileHeb.createRoomOpts.joinermax = 4;
          profileHeb.createRoomOpts.roundType = 2;
          if (this.quan1.isChecked) {
            profileHeb.createRoomOpts.roundRule = 64;
            profileHeb.createRoomOpts.roundMax = 1;
          } else if (this.quan2.isChecked) {
            profileHeb.createRoomOpts.roundRule = 65;
            profileHeb.createRoomOpts.roundMax = 2;
          } else if (this.quan4.isChecked) {
            profileHeb.createRoomOpts.roundRule = 66;
            profileHeb.createRoomOpts.roundMax = 4;
          }
        }
        var number = 2, round = 0;
        if (this.player2.isChecked) {
          number = 2;
          this.round4.isChecked ? round = 0 : this.round8.isChecked ? round = 1 : this.round16.isChecked && (round = 2);
        } else if (this.player4.isChecked) {
          number = 4;
          this.quan1.isChecked ? round = 3 : this.quan2.isChecked ? round = 4 : this.quan4.isChecked && (round = 5);
        }
        var data = this.spendData[round];
        if (void 0 == data) return;
        var cost = data.cost;
        var costFinal = cost[number];
        var enter = data.enter;
        var enterFinal = enter[number];
        var times1Label = cc.find("label", this.base_1.node);
        var times2Label = cc.find("label", this.base_2.node);
        var times5Label = cc.find("label", this.base_3.node);
        times1Label.getComponent(cc.Label).string = "初级场：台费" + costFinal[0] + " 进入条件≥" + enterFinal[0] + " 倍数 100";
        times2Label.getComponent(cc.Label).string = "中级场：台费" + costFinal[1] + " 进入条件≥" + enterFinal[1] + " 倍数 200";
        times5Label.getComponent(cc.Label).string = "高级场：台费" + costFinal[2] + " 进入条件≥" + enterFinal[2] + " 倍数 500";
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  createRoom_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d65caVX9cxIpJvabwJzalma", "createRoom_huadian");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        player2_hd: cc.Toggle,
        player4_hd: cc.Toggle,
        round_hd: cc.Node,
        spendRound_hd: cc.Node,
        round6_hd: cc.Toggle,
        round12_hd: cc.Toggle,
        round24_hd: cc.Toggle,
        quan_hd: cc.Node,
        spendQuan_hd: cc.Node,
        quan1_hd: cc.Toggle,
        quan2_hd: cc.Toggle,
        quan4_hd: cc.Toggle,
        piao: cc.Toggle,
        mobaojiafen: cc.Toggle,
        louDianPaoDouble: cc.Toggle,
        dafan: cc.Toggle,
        xiaofan: cc.Toggle,
        fenzhang: cc.Toggle,
        bufenzhang: cc.Toggle,
        baseNode: cc.Node,
        base_1: cc.Toggle,
        base_2: cc.Toggle,
        base_3: cc.Toggle,
        spend_hd: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.refreshHdUI();
        this.addTouchListener();
      },
      onEnter: function onEnter() {
        this.refreshHdUI();
      },
      addTouchListener: function addTouchListener() {},
      getModeType: function getModeType() {
        return this.modeType;
      },
      refreshHdUI: function refreshHdUI() {
        cc.log("~~~~~~~~~~~~~~~~~~~~~~~~~GameData.createRoomOpts~~~~~~~~~~~~~~~~~~~~~~~~" + JSON.stringify(profileHuaDian.createRoomOpts));
        this.round_hd.active = 2 == profileHuaDian.createRoomOpts.joinermax;
        this.quan_hd.active = 4 == profileHuaDian.createRoomOpts.joinermax;
        this.spendRound_hd.active = 2 == profileHuaDian.createRoomOpts.joinermax;
        this.spendQuan_hd.active = 4 == profileHuaDian.createRoomOpts.joinermax;
        this.player2_hd.isChecked = 2 == profileHuaDian.createRoomOpts.joinermax;
        this.player4_hd.isChecked = 4 == profileHuaDian.createRoomOpts.joinermax;
        this.round6_hd.isChecked = 6 == profileHuaDian.createRoomOpts.roundMax;
        this.round12_hd.isChecked = 12 == profileHuaDian.createRoomOpts.roundMax;
        this.round24_hd.isChecked = 24 == profileHuaDian.createRoomOpts.roundMax;
        this.quan1_hd.isChecked = 1 == profileHuaDian.createRoomOpts.roundMax;
        this.quan2_hd.isChecked = 2 == profileHuaDian.createRoomOpts.roundMax;
        this.quan4_hd.isChecked = 4 == profileHuaDian.createRoomOpts.roundMax;
        this.piao.isChecked = 1 == profileHuaDian.createRoomOpts.piao;
        this.mobaojiafen.isChecked = 1 == profileHuaDian.createRoomOpts.mobaojiafen;
        this.louDianPaoDouble.isChecked = 1 == profileHuaDian.createRoomOpts.isLouDianPaoDouble;
        this.dafan.isChecked = 1 == profileHuaDian.createRoomOpts.isBigFan;
        this.xiaofan.isChecked = 0 == profileHuaDian.createRoomOpts.isBigFan;
        this.fenzhang.isChecked = 1 == profileHuaDian.createRoomOpts.fenZhang;
        this.bufenzhang.isChecked = 0 == profileHuaDian.createRoomOpts.fenZhang;
        this.base_1.isChecked = 0 == profileHuaDian.createRoomOpts.scoreLv;
        this.base_2.isChecked = 1 == profileHuaDian.createRoomOpts.scoreLv;
        this.base_3.isChecked = 2 == profileHuaDian.createRoomOpts.scoreLv;
        this.modeType = 1;
        this.spendData = void 0;
        this.showSpendUI_hd();
      },
      roundNodeActive: function roundNodeActive(evt) {
        this.round_hd.active = this.player2_hd.isChecked;
        this.quan_hd.active = this.player4_hd.isChecked;
        this.spendRound_hd.active = this.player2_hd.isChecked;
        this.spendQuan_hd.active = this.player4_hd.isChecked;
        this.showSpendUI_hd();
      },
      createRoom: function createRoom() {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_MJ_HuaDian);
        var createData = {
          gameType: gameDefine.GameType.Game_MJ_HuaDian,
          roundMax: profileHuaDian.createRoomOpts.roundMax,
          roundType: profileHuaDian.createRoomOpts.roundType,
          roundRule: profileHuaDian.createRoomOpts.roundRule,
          roomType: 0,
          costType: profileHuaDian.createRoomOpts.costType,
          joinermax: profileHuaDian.createRoomOpts.joinermax,
          clubId: 0,
          scoreBase: profileHuaDian.createRoomOpts.scoreBase,
          bossType: profileHuaDian.createRoomOpts.bossType,
          isBigFan: profileHuaDian.createRoomOpts.isBigFan,
          piao: profileHuaDian.createRoomOpts.piao,
          anBao: 1,
          mobaoBuf: profileHuaDian.createRoomOpts.mobaojiafen,
          fenZhang: profileHuaDian.createRoomOpts.fenZhang,
          isLouDianPaoDouble: profileHuaDian.createRoomOpts.isLouDianPaoDouble,
          scorelv: profileHuaDian.createRoomOpts.scoreLv,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_MJ_HuaDian) return createData;
        createData.currencyType = modeTypeData.Game_MJ_HuaDian.CurrencyType;
        createData.settleType = modeTypeData.Game_MJ_HuaDian.SettleType;
        GameData.room.opts = createData;
        return createData;
      },
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.player2_hd.isChecked) {
          profileHuaDian.createRoomOpts.joinermax = 2;
          profileHuaDian.createRoomOpts.roundType = 1;
          if (this.round6_hd.isChecked) {
            profileHuaDian.createRoomOpts.roundMax = 6;
            profileHuaDian.createRoomOpts.roundRule = 61;
          } else if (this.round12_hd.isChecked) {
            profileHuaDian.createRoomOpts.roundMax = 12;
            profileHuaDian.createRoomOpts.roundRule = 62;
          } else if (this.round24_hd.isChecked) {
            profileHuaDian.createRoomOpts.roundRule = 63;
            profileHuaDian.createRoomOpts.roundMax = 24;
          }
        } else if (this.player4_hd.isChecked) {
          profileHuaDian.createRoomOpts.joinermax = 4;
          profileHuaDian.createRoomOpts.roundType = 2;
          if (this.quan1_hd.isChecked) {
            profileHuaDian.createRoomOpts.roundRule = 64;
            profileHuaDian.createRoomOpts.roundMax = 1;
          } else if (this.quan2_hd.isChecked) {
            profileHuaDian.createRoomOpts.roundRule = 65;
            profileHuaDian.createRoomOpts.roundMax = 2;
          } else if (this.quan4_hd.isChecked) {
            profileHuaDian.createRoomOpts.roundRule = 66;
            profileHuaDian.createRoomOpts.roundMax = 4;
          }
        }
        this.base_1.isChecked ? profileHuaDian.createRoomOpts.scoreLv = 0 : this.base_2.isChecked ? profileHuaDian.createRoomOpts.scoreLv = 1 : this.base_3.isChecked ? profileHuaDian.createRoomOpts.scoreLv = 2 : profileHuaDian.createRoomOpts.scoreLv = 0;
        profileHuaDian.createRoomOpts.piao = this.piao.isChecked ? 1 : 0;
        profileHuaDian.createRoomOpts.mobaojiafen = this.mobaojiafen.isChecked ? 1 : 0;
        profileHuaDian.createRoomOpts.isLouDianPaoDouble = this.louDianPaoDouble.isChecked ? 1 : 0;
        profileHuaDian.createRoomOpts.isBigFan = this.dafan.isChecked ? 1 : 0;
        profileHuaDian.createRoomOpts.fenZhang = this.fenzhang.isChecked ? 1 : 0;
        profileHuaDian.saveCreateRoomOpts();
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI_hd();
      },
      showSpendUI_hd: function showSpendUI_hd() {
        cc.log("..mode..huadian..MJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_MJ_HuaDian) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_MJ_HuaDian.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_MJ_HuaDian];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_MJ_HuaDian];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var ii = 0; ii < this.drowArray.length; ii++) {
          var drow = this.drowArray[ii];
          drow && (drow.active = false);
        }
        var number = 2;
        this.player2_hd.isChecked ? number = 2 : this.player4_hd.isChecked && (number = 4);
        var base = 60;
        var max = 63;
        if (true == this.player2_hd.isChecked) {
          base = 60;
          max = 63;
        } else if (true == this.player4_hd.isChecked) {
          base = 63;
          max = 66;
        }
        var cost;
        for (var key = base; key < max; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            cost = this.spendData[key + 1].cost;
            final = cost[number].final;
            this.spend_hd[key - 60].string = "（" + str1 + "*" + final + str2 + "）";
          } else if (this.modeType == gameDefine.currencyType.Currency_Coin) {
            cost = this.spendData[key - 60].cost;
            final = cost[number].final;
            this.spend_hd[key - 60].string = "";
          }
          final <= 0 && (this.drowArray[key - 60].active = true);
        }
        this.refreshBaseScoreLv();
      },
      refreshBaseScoreLv: function refreshBaseScoreLv() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.baseNode.active = false;
          return;
        }
        this.baseNode.active = true;
        var number = 2, round = 0;
        if (this.player2_hd.isChecked) {
          number = 2;
          this.round6_hd.isChecked ? round = 0 : this.round12_hd.isChecked ? round = 1 : this.round24_hd.isChecked && (round = 2);
        } else if (this.player4_hd.isChecked) {
          number = 4;
          this.quan1_hd.isChecked ? round = 3 : this.quan2_hd.isChecked ? round = 4 : this.quan4_hd.isChecked && (round = 5);
        }
        var data = this.spendData[round];
        if (void 0 == data) return;
        var cost = data.cost;
        var costFinal = cost[number];
        var enter = data.enter;
        var enterFinal = enter[number];
        var times1Label = cc.find("label", this.base_1.node);
        var times2Label = cc.find("label", this.base_2.node);
        var times5Label = cc.find("label", this.base_3.node);
        times1Label.getComponent(cc.Label).string = "初级场：台费" + costFinal[0] + " 进入条件≥" + enterFinal[0] + " 倍数 100";
        times2Label.getComponent(cc.Label).string = "中级场：台费" + costFinal[1] + " 进入条件≥" + enterFinal[1] + " 倍数 200";
        times5Label.getComponent(cc.Label).string = "高级场：台费" + costFinal[2] + " 进入条件≥" + enterFinal[2] + " 倍数 500";
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  createRoom_shishi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "462b6e177FI860+tRRrdalz", "createRoom_shishi");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        round4: cc.Toggle,
        round8: cc.Toggle,
        round16: cc.Toggle,
        turn1: cc.Toggle,
        mingyou: cc.Toggle,
        anyou: cc.Toggle,
        player2: cc.Toggle,
        player3: cc.Toggle,
        player4: cc.Toggle,
        danpei: cc.Toggle,
        tongpei: cc.Toggle,
        fengtou: cc.Toggle,
        shuangjin: cc.Toggle,
        chashui: cc.Toggle,
        qg_zimo: cc.Toggle,
        qg_pinghu: cc.Toggle,
        pay1_ord: cc.Toggle,
        pay2_ord: cc.Toggle,
        pay3_ord: cc.Toggle,
        payOrdNode: cc.Node,
        socre1Btn: cc.Toggle,
        socre2Btn: cc.Toggle,
        scoreGrop: cc.Node,
        you1Btn: cc.Toggle,
        you2Btn: cc.Toggle,
        you3Btn: cc.Toggle,
        anyouGroup: cc.Node,
        scollView: cc.ScrollView,
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.ToggleObjArry = {};
        this.modeType = 1;
        this.spendData = void 0;
        this.player2.isChecked = false;
        this.player3.isChecked = false;
        this.player4.isChecked = true;
        this.refreshUI();
        this.pushBtnsToArry();
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      pushBtnsToArry: function pushBtnsToArry() {
        this.ToggleObjArry["round4"] = this.round4;
        this.ToggleObjArry["round8"] = this.round8;
        this.ToggleObjArry["round16"] = this.round16;
        this.ToggleObjArry["turn1"] = this.turn1;
        this.ToggleObjArry["mingyou"] = this.mingyou;
        this.ToggleObjArry["anyou"] = this.anyou;
        this.ToggleObjArry["player2"] = this.player2;
        this.ToggleObjArry["player3"] = this.player3;
        this.ToggleObjArry["player4"] = this.player4;
        this.ToggleObjArry["danpei"] = this.danpei;
        this.ToggleObjArry["tongpei"] = this.tongpei;
        this.ToggleObjArry["fengtou"] = this.fengtou;
        this.ToggleObjArry["shuangjin"] = this.shuangjin;
        this.ToggleObjArry["chashui"] = this.chashui;
        this.ToggleObjArry["pay1_ord"] = this.pay1_ord;
        this.ToggleObjArry["pay2_ord"] = this.pay2_ord;
        this.ToggleObjArry["pay3_ord"] = this.pay3_ord;
        this.ToggleObjArry["socre1Btn"] = this.socre1Btn;
        this.ToggleObjArry["socre2Btn"] = this.socre2Btn;
        this.ToggleObjArry["you1Btn"] = this.you1Btn;
        this.ToggleObjArry["you2Btn"] = this.you2Btn;
        this.ToggleObjArry["you3Btn"] = this.you3Btn;
        this.ToggleObjArry["qg_zimo"] = this.qg_zimo;
        this.ToggleObjArry["qg_pinghu"] = this.qg_pinghu;
      },
      createRoom: function createRoom() {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Mj_Shishi);
        var qg_zimoAttrib = false;
        var qg_pinghuAttrib = false;
        if (GameDataShiShi.createRoomOpts.youJin == YoujinType.Ming) {
          qg_zimoAttrib = GameDataShiShi.createRoomOpts.qg_zimo;
          qg_pinghuAttrib = GameDataShiShi.createRoomOpts.qg_pinghu;
        }
        var createData = {
          gameType: GameData.client.gameType,
          roundRule: GameDataShiShi.createRoomOpts.roundRule,
          roomType: 0,
          costType: GameDataShiShi.createRoomOpts.payType,
          joinermax: GameDataShiShi.createRoomOpts.joinermax,
          clubId: 0,
          dianpao: GameDataShiShi.createRoomOpts.dianpao,
          fengtou: GameDataShiShi.createRoomOpts.fengtou,
          scoreBase: GameDataShiShi.createRoomOpts.scoreBase,
          youJin: GameDataShiShi.createRoomOpts.youJin,
          playeruid: GameData.player.uid,
          shuangjin: GameDataShiShi.createRoomOpts.shuangjin,
          water: GameDataShiShi.createRoomOpts.chashui,
          qg_zimo: qg_zimoAttrib,
          qg_pinghu: qg_pinghuAttrib,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_Shishi) return createData;
        createData.currencyType = modeTypeData.Game_Mj_Shishi.CurrencyType;
        createData.settleType = modeTypeData.Game_Mj_Shishi.SettleType;
        return createData;
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..shishiMJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_Shishi) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Mj_Shishi.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Mj_Shishi];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金币";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Mj_Shishi];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            var cost = this.spendData[key + 1].cost;
            var number = 2;
            this.player2.isChecked ? number = 2 : this.player3.isChecked ? number = 3 : this.player4.isChecked && (number = 4);
            final = cost[number].final;
            if (this.pay2_ord.isChecked) {
              final = Math.ceil(final / number);
              str2 = "/人";
            }
          } else final = this.spendData[key].cost;
          cc.log("..final:" + final);
          cc.log("..key:" + key);
          this.drowArray[key].active = final <= 0;
          this.spendUI[key].string = "（" + str1 + "*" + final + str2 + "）";
          if (key >= 3) {
            var show = true;
            if (3 == key) show = !!this.socre1Btn.isChecked; else {
              if (4 != key) continue;
              show = !!this.socre2Btn.isChecked;
            }
            false == this.scoreGrop.active && (show = false);
            this.spendUI[key].node.active = show;
            this.drowArray[key].active = show;
            final > 0 && (this.drowArray[key].active = false);
          }
        }
      },
      saveRuleFromUI: function saveRuleFromUI() {
        this.round4.isChecked ? GameDataShiShi.createRoomOpts.roundRule = 1 : this.round8.isChecked ? GameDataShiShi.createRoomOpts.roundRule = 2 : this.round16.isChecked && (GameDataShiShi.createRoomOpts.roundRule = 3);
        if (this.turn1.isChecked) if (this.socre1Btn.isChecked) {
          GameDataShiShi.createRoomOpts.scoreBase = 50;
          GameDataShiShi.createRoomOpts.roundRule = 4;
        } else {
          GameDataShiShi.createRoomOpts.scoreBase = 100;
          GameDataShiShi.createRoomOpts.roundRule = 5;
        } else GameDataShiShi.createRoomOpts.scoreBase = 0;
        this.player2.isChecked ? GameDataShiShi.createRoomOpts.joinermax = 2 : this.player3.isChecked ? GameDataShiShi.createRoomOpts.joinermax = 3 : (this.player4.isChecked, 
        GameDataShiShi.createRoomOpts.joinermax = 4);
        this.mingyou.isChecked ? GameDataShiShi.createRoomOpts.youJin = YoujinType.Ming : this.anyou.isChecked && (this.you1Btn.isChecked ? GameDataShiShi.createRoomOpts.youJin = YoujinType.An1 : this.you2Btn.isChecked ? GameDataShiShi.createRoomOpts.youJin = YoujinType.An2 : this.you3Btn.isChecked && (GameDataShiShi.createRoomOpts.youJin = YoujinType.An3));
        GameDataShiShi.createRoomOpts.qg_zimo = this.qg_zimo.isChecked;
        GameDataShiShi.createRoomOpts.qg_pinghu = this.qg_pinghu.isChecked;
        this.danpei.isChecked ? GameDataShiShi.createRoomOpts.dianpao = 1 : (this.tongpei.isChecked, 
        GameDataShiShi.createRoomOpts.dianpao = 2);
        GameDataShiShi.createRoomOpts.payType = 1;
        this.payOrdNode.active && (this.pay1_ord.isChecked ? GameDataShiShi.createRoomOpts.payType = 1 : this.pay2_ord.isChecked ? GameDataShiShi.createRoomOpts.payType = 2 : this.pay3_ord.isChecked && (GameDataShiShi.createRoomOpts.payType = 3));
        this.fengtou.isChecked ? GameDataShiShi.createRoomOpts.fengtou = true : GameDataShiShi.createRoomOpts.fengtou = false;
        this.shuangjin.isChecked ? GameDataShiShi.createRoomOpts.shuangjin = true : GameDataShiShi.createRoomOpts.shuangjin = false;
        this.chashui.isChecked ? GameDataShiShi.createRoomOpts.chashui = true : GameDataShiShi.createRoomOpts.chashui = false;
        GameDataShiShi.saveCreateRoomOpts();
      },
      refreshUI: function refreshUI() {
        this.round4.isChecked = 1 == GameDataShiShi.createRoomOpts.roundRule;
        this.round8.isChecked = 2 == GameDataShiShi.createRoomOpts.roundRule;
        this.round16.isChecked = 3 == GameDataShiShi.createRoomOpts.roundRule;
        this.turn1.isChecked = 4 == GameDataShiShi.createRoomOpts.roundRule || 5 == GameDataShiShi.createRoomOpts.roundRule;
        if (this.turn1.isChecked) {
          this.socre1Btn.isChecked = 50 == GameDataShiShi.createRoomOpts.scoreBase;
          this.socre2Btn.isChecked = 100 == GameDataShiShi.createRoomOpts.scoreBase;
        } else {
          this.socre1Btn.isChecked = true;
          this.socre2Btn.isChecked = false;
        }
        this.pay1_ord.isChecked = 1 == GameDataShiShi.createRoomOpts.payType;
        this.pay2_ord.isChecked = 2 == GameDataShiShi.createRoomOpts.payType;
        this.pay3_ord.isChecked = 3 == GameDataShiShi.createRoomOpts.payType;
        this.player2.isChecked = 2 == GameDataShiShi.createRoomOpts.joinermax;
        this.player3.isChecked = 3 == GameDataShiShi.createRoomOpts.joinermax;
        this.player4.isChecked = 4 == GameDataShiShi.createRoomOpts.joinermax;
        this.danpei.isChecked = 1 == GameDataShiShi.createRoomOpts.dianpao;
        this.tongpei.isChecked = 1 != GameDataShiShi.createRoomOpts.dianpao;
        this.mingyou.isChecked = GameDataShiShi.createRoomOpts.youJin == YoujinType.Ming;
        this.anyou.isChecked = GameDataShiShi.createRoomOpts.youJin != YoujinType.Ming;
        if (this.anyou.isChecked) {
          this.you1Btn.isChecked = GameDataShiShi.createRoomOpts.youJin == YoujinType.An1;
          this.you2Btn.isChecked = GameDataShiShi.createRoomOpts.youJin == YoujinType.An2;
          this.you3Btn.isChecked = GameDataShiShi.createRoomOpts.youJin == YoujinType.An3;
        }
        var show = false;
        this.mingyou.isChecked && (show = true);
        this.qg_zimo.node.active = show;
        this.qg_pinghu.node.active = show;
        this.fengtou.isChecked = GameDataShiShi.createRoomOpts.fengtou;
        this.shuangjin.isChecked = GameDataShiShi.createRoomOpts.shuangjin;
        this.chashui.isChecked = GameDataShiShi.createRoomOpts.chashui;
        this.qg_zimo.isChecked = GameDataShiShi.createRoomOpts.qg_zimo;
        this.qg_pinghu.isChecked = GameDataShiShi.createRoomOpts.qg_pinghu;
        this.scoreGrop.active = this.turn1.isChecked;
        this.spendUI[3].node.active = this.turn1.isChecked;
        this.spendUI[4].node.active = this.turn1.isChecked;
        this.anyouGroup.active = this.anyou.isChecked;
        this.showSpendUI();
      },
      youjinActive: function youjinActive() {
        this.anyouGroup.active = this.anyou.isChecked;
        var show = false;
        this.mingyou.isChecked && (show = true);
        this.qg_zimo.node.active = show;
        this.qg_pinghu.node.active = show;
      },
      yikeActive: function yikeActive() {
        cc.log("..yi..ke");
        this.scoreGrop.active = this.turn1.isChecked;
        this.showSpendUI();
      },
      openScrollViewChildListenr: function openScrollViewChildListenr() {
        for (var key in this.ToggleObjArry) {
          this.ToggleObjArry[key].node.on(cc.Node.EventType.TOUCH_START, this.closeScrollView, this);
          this.ToggleObjArry[key].node.on(cc.Node.EventType.TOUCH_MOVE, this.closeScrollView, this);
          this.ToggleObjArry[key].node.on(cc.Node.EventType.TOUCH_END, this.openScrollView, this);
          this.ToggleObjArry[key].node.on(cc.Node.EventType.TOUCH_CANCEL, this.openScrollView, this);
        }
      },
      offScrollViewChildListenr: function offScrollViewChildListenr() {
        for (var key in this.ToggleObjArry) {
          this.ToggleObjArry[key].node.off(cc.Node.EventType.TOUCH_START, this.closeScrollView, this);
          this.ToggleObjArry[key].node.off(cc.Node.EventType.TOUCH_MOVE, this.closeScrollView, this);
          this.ToggleObjArry[key].node.off(cc.Node.EventType.TOUCH_END, this.openScrollView, this);
          this.ToggleObjArry[key].node.off(cc.Node.EventType.TOUCH_CANCEL, this.openScrollView, this);
        }
      },
      closeScrollView: function closeScrollView() {
        this.scollView.node.off(cc.Node.EventType.TOUCH_MOVE, this.scollView._onTouchMoved, this.scollView, true);
      },
      openScrollView: function openScrollView() {
        this.scollView.node.on(cc.Node.EventType.TOUCH_MOVE, this.scollView._onTouchMoved, this.scollView, true);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  createRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9facnOZRdG0ZHJOj/lJ5G/", "createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        round4: cc.Toggle,
        round8: cc.Toggle,
        round16: cc.Toggle,
        turn1: cc.Toggle,
        turn2: cc.Toggle,
        turn4: cc.Toggle,
        spendUI: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        },
        scoreNode: cc.Node,
        score1: cc.Toggle,
        score2: cc.Toggle,
        score5: cc.Toggle,
        timesNode: cc.Node,
        times1: cc.Toggle,
        times2: cc.Toggle,
        times5: cc.Toggle,
        limitLabel: cc.Label,
        hun: cc.Toggle,
        zi: cc.Toggle,
        feng: cc.Toggle,
        chan: cc.Toggle,
        longwufan: cc.Toggle,
        doubleGang: cc.Toggle,
        huierModel: cc.Toggle,
        jingang4: cc.Toggle,
        jingang8: cc.Toggle,
        zuo2: cc.Toggle,
        lianzhuang: cc.Toggle,
        buzuobula: cc.Toggle,
        payNode: cc.Node,
        pay1: cc.Toggle,
        pay2: cc.Toggle,
        pay3: cc.Toggle,
        player2: cc.Toggle,
        player3: cc.Toggle,
        player4: cc.Toggle,
        PlayInfo: cc.Prefab
      },
      onLoad: function onLoad() {
        this.ToggleObjArry = {};
        this.modeType = 1;
        this.spendData = void 0;
        this.refreshRuleUI();
      },
      getModeType: function getModeType() {
        return this.modeType;
      },
      refreshRuleUI: function refreshRuleUI() {
        this.round4.isChecked = 1 == GameData.createRoomOpts.roundRule;
        this.round8.isChecked = 2 == GameData.createRoomOpts.roundRule;
        this.round16.isChecked = 3 == GameData.createRoomOpts.roundRule;
        this.turn1.isChecked = 4 == GameData.createRoomOpts.roundRule;
        this.turn2.isChecked = 5 == GameData.createRoomOpts.roundRule;
        this.turn4.isChecked = 6 == GameData.createRoomOpts.roundRule;
        this.hun.isChecked = true == GameData.createRoomOpts.huierDiao;
        this.zi.isChecked = true == GameData.createRoomOpts.daZi;
        this.feng.isChecked = true == GameData.createRoomOpts.daiFeng;
        this.chan.isChecked = true == GameData.createRoomOpts.daiChan;
        this.longwufan.isChecked = true == GameData.createRoomOpts.longwufan;
        this.doubleGang.isChecked = true == GameData.createRoomOpts.doubleGang;
        this.huierModel.isChecked = 1 == GameData.createRoomOpts.huierModel;
        this.jingang4.isChecked = 8 == GameData.createRoomOpts.jGangScore;
        this.jingang8.isChecked = 8 == GameData.createRoomOpts.jGangScore;
        this.zuo2.isChecked = 1 == GameData.createRoomOpts.laType;
        this.lianzhuang.isChecked = 2 == GameData.createRoomOpts.laType;
        this.buzuobula.isChecked = 3 == GameData.createRoomOpts.laType;
        this.score1.isChecked = 1 == GameData.createRoomOpts.times;
        this.score2.isChecked = 2 == GameData.createRoomOpts.times;
        this.score5.isChecked = 5 == GameData.createRoomOpts.times;
        this.player2.isChecked = 2 == GameData.createRoomOpts.joinermax;
        this.player3.isChecked = 3 == GameData.createRoomOpts.joinermax;
        this.player4.isChecked = 4 == GameData.createRoomOpts.joinermax;
        this.pay1.isChecked = 1 == GameData.createRoomOpts.payType;
        this.pay2.isChecked = 2 == GameData.createRoomOpts.payType;
        this.pay3.isChecked = 3 == GameData.createRoomOpts.payType;
        this.times1.isChecked = 0 == GameData.createRoomOpts.score;
        this.times2.isChecked = 1 == GameData.createRoomOpts.score;
        this.times5.isChecked = 2 == GameData.createRoomOpts.score;
        this.showDoubleGang();
        this.showSpendUI();
        this.refreshTimesScore();
      },
      selectRoundRuleClick: function selectRoundRuleClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 4:
          this.round4.isChecked = true;
          this.round8.isChecked = false;
          this.round16.isChecked = false;
          this.turn1.isChecked = false;
          this.turn2.isChecked = false;
          this.turn4.isChecked = false;
          break;

         case 8:
          this.round8.isChecked = true;
          this.round4.isChecked = false;
          this.round16.isChecked = false;
          this.turn1.isChecked = false;
          this.turn2.isChecked = false;
          this.turn4.isChecked = false;
          break;

         case 16:
          this.round16.isChecked = true;
          this.round4.isChecked = false;
          this.round8.isChecked = false;
          this.turn1.isChecked = false;
          this.turn2.isChecked = false;
          this.turn4.isChecked = false;
          break;

         case 21:
          this.turn1.isChecked = true;
          this.round4.isChecked = false;
          this.round8.isChecked = false;
          this.round16.isChecked = false;
          this.turn2.isChecked = false;
          this.turn4.isChecked = false;
          break;

         case 22:
          this.turn2.isChecked = true;
          this.round4.isChecked = false;
          this.round8.isChecked = false;
          this.round16.isChecked = false;
          this.turn1.isChecked = false;
          this.turn4.isChecked = false;
          break;

         case 24:
          this.turn4.isChecked = true;
          this.round4.isChecked = false;
          this.round8.isChecked = false;
          this.round16.isChecked = false;
          this.turn1.isChecked = false;
          this.turn2.isChecked = false;
        }
        this.round4.isChecked ? GameData.createRoomOpts.roundRule = 1 : this.round8.isChecked ? GameData.createRoomOpts.roundRule = 2 : this.round16.isChecked ? GameData.createRoomOpts.roundRule = 3 : this.turn1.isChecked ? GameData.createRoomOpts.roundRule = 4 : this.turn2.isChecked ? GameData.createRoomOpts.roundRule = 5 : this.turn4.isChecked ? GameData.createRoomOpts.roundRule = 6 : GameData.createRoomOpts.roundRule = 2;
        this.refreshTimesScore();
      },
      selectScroeClick: function selectScroeClick(evt, data) {
        var type = data;
        if (void 0 == type) return;
        switch (type) {
         case 1:
          this.score1.isChecked = true;
          this.score2.isChecked = false;
          this.score5.isChecked = false;
          break;

         case 2:
          this.score2.isChecked = true;
          this.score1.isChecked = false;
          this.score5.isChecked = false;
          break;

         case 5:
          this.score5.isChecked = true;
          this.score1.isChecked = false;
          this.score2.isChecked = false;
        }
        this.score1.isChecked ? GameData.createRoomOpts.times = 1 : this.score2.isChecked ? GameData.createRoomOpts.times = 2 : this.score5.isChecked ? GameData.createRoomOpts.times = 5 : GameData.createRoomOpts.times = 1;
        this.refreshTimesScore();
      },
      saveRuleFromUI: function saveRuleFromUI() {
        if (this.round4.isChecked) {
          GameData.createRoomOpts.roundRule = 1;
          GameData.createRoomOpts.roundType = gameDefine.roundType.round;
          GameData.createRoomOpts.roundMax = 4;
        } else if (this.round8.isChecked) {
          GameData.createRoomOpts.roundRule = 2;
          GameData.createRoomOpts.roundType = gameDefine.roundType.round;
          GameData.createRoomOpts.roundMax = 8;
        } else if (this.round16.isChecked) {
          GameData.createRoomOpts.roundRule = 3;
          GameData.createRoomOpts.roundType = gameDefine.roundType.round;
          GameData.createRoomOpts.roundMax = 16;
        } else if (this.turn1.isChecked) {
          GameData.createRoomOpts.roundRule = 4;
          GameData.createRoomOpts.roundType = gameDefine.roundType.quan;
          GameData.createRoomOpts.roundMax = 1;
        } else if (this.turn2.isChecked) {
          GameData.createRoomOpts.roundRule = 5;
          GameData.createRoomOpts.roundType = gameDefine.roundType.quan;
          GameData.createRoomOpts.roundMax = 2;
        } else if (this.turn4.isChecked) {
          GameData.createRoomOpts.roundRule = 6;
          GameData.createRoomOpts.roundType = gameDefine.roundType.quan;
          GameData.createRoomOpts.roundMax = 4;
        } else {
          GameData.createRoomOpts.roundRule = 2;
          GameData.createRoomOpts.roundType = gameDefine.roundType.round;
          GameData.createRoomOpts.roundMax = 8;
        }
        GameData.createRoomOpts.huierDiao = !!this.hun.isChecked;
        GameData.createRoomOpts.daZi = !!this.zi.isChecked;
        GameData.createRoomOpts.daiFeng = !!this.feng.isChecked;
        GameData.createRoomOpts.daiChan = !!this.chan.isChecked;
        GameData.createRoomOpts.longwufan = !!this.longwufan.isChecked;
        GameData.createRoomOpts.huierModel = this.huierModel.isChecked ? 1 : 0;
        this.jingang4.isChecked ? 0 : this.jingang8.isChecked, GameData.createRoomOpts.jGangScore = 8;
        if (this.zuo2.isChecked) {
          GameData.createRoomOpts.laType = 1;
          GameData.createRoomOpts.doubleGang = !!this.doubleGang.isChecked;
          this.doubleGang.node.active = true;
        } else if (this.lianzhuang.isChecked) {
          GameData.createRoomOpts.laType = 2;
          GameData.createRoomOpts.doubleGang = !!this.doubleGang.isChecked;
          this.doubleGang.node.active = true;
        } else if (this.buzuobula.isChecked) {
          GameData.createRoomOpts.laType = 3;
          GameData.createRoomOpts.doubleGang = false;
          this.doubleGang.node.active = false;
        } else {
          GameData.createRoomOpts.laType = 1;
          GameData.createRoomOpts.doubleGang = false;
          this.doubleGang.node.active = true;
        }
        this.score1.isChecked ? GameData.createRoomOpts.times = 1 : this.score2.isChecked ? GameData.createRoomOpts.times = 2 : this.score5.isChecked ? GameData.createRoomOpts.times = 5 : GameData.createRoomOpts.times = 1;
        this.player2.isChecked ? GameData.createRoomOpts.joinermax = 2 : this.player3.isChecked ? GameData.createRoomOpts.joinermax = 3 : (this.player4.isChecked, 
        GameData.createRoomOpts.joinermax = 4);
        this.pay1.isChecked ? GameData.createRoomOpts.payType = 1 : this.pay2.isChecked ? GameData.createRoomOpts.payType = 2 : this.pay3.isChecked ? GameData.createRoomOpts.payType = 3 : GameData.createRoomOpts.payType = 1;
        this.times1.isChecked ? GameData.createRoomOpts.score = 0 : this.times2.isChecked ? GameData.createRoomOpts.score = 1 : this.times5.isChecked && (GameData.createRoomOpts.score = 2);
        GameData.saveCreateRoomOpts();
      },
      createRoom: function createRoom() {
        this.saveRuleFromUI();
        GameData.setGameType(gameDefine.GameType.Game_Mj_Tianjin);
        var createData = {
          gameType: GameData.client.gameType,
          roundRule: GameData.createRoomOpts.roundRule,
          roundType: GameData.createRoomOpts.roundType,
          roundMax: GameData.createRoomOpts.roundMax,
          roomType: 0,
          costType: GameData.createRoomOpts.payType,
          joinermax: GameData.createRoomOpts.joinermax,
          clubId: 0,
          playeruid: GameData.player.uid,
          feng: GameData.createRoomOpts.daiFeng,
          chan: GameData.createRoomOpts.daiChan,
          doubleGang: GameData.createRoomOpts.doubleGang,
          huierModel: GameData.createRoomOpts.huierModel,
          hd: GameData.createRoomOpts.huierDiao,
          longwufan: GameData.createRoomOpts.longwufan,
          score: GameData.createRoomOpts.score,
          times: GameData.createRoomOpts.times,
          jingang: GameData.createRoomOpts.jGangScore,
          lazhuang: GameData.createRoomOpts.laType,
          scorelv: GameData.createRoomOpts.score,
          currencyType: null,
          settleType: null
        };
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_Tianjin) return createData;
        createData.currencyType = modeTypeData.Game_Mj_Tianjin.CurrencyType;
        createData.settleType = modeTypeData.Game_Mj_Tianjin.SettleType;
        return createData;
      },
      selectSpendData: function selectSpendData(evt) {
        this.showSpendUI();
        this.refreshTimesScore();
      },
      refreshTimesScore: function refreshTimesScore() {
        if (this.modeType == gameDefine.currencyType.Currency_Card || void 0 == this.spendData || this.spendData.length <= 0) {
          this.timesNode.active = false;
          this.payNode.active = true;
          return;
        }
        this.timesNode.active = true;
        this.payNode.active = false;
        var number = 2;
        this.player2.isChecked ? number = 2 : this.player3.isChecked ? number = 3 : this.player4.isChecked && (number = 4);
        var cost = this.spendData[GameData.createRoomOpts.roundRule - 1].cost;
        var costFinal = cost[number];
        var enter = this.spendData[GameData.createRoomOpts.roundRule - 1].enter;
        var enterFinal = enter[number];
        void 0 == GameData.createRoomOpts.times && (GameData.createRoomOpts.times = 1);
        this.times1.isChecked ? GameData.createRoomOpts.score = 0 : this.times2.isChecked ? GameData.createRoomOpts.score = 1 : this.times5.isChecked && (GameData.createRoomOpts.score = 2);
        var times1Label = cc.find("label", this.times1.node);
        var times2Label = cc.find("label", this.times2.node);
        var times5Label = cc.find("label", this.times5.node);
        times1Label.getComponent(cc.Label).string = "初级场：台费" + costFinal[0] + " 进入条件≥" + enterFinal[0] + " 倍数 100";
        times2Label.getComponent(cc.Label).string = "中级场：台费" + costFinal[1] + " 进入条件≥" + enterFinal[1] + " 倍数 200";
        times5Label.getComponent(cc.Label).string = "高级场：台费" + costFinal[2] + " 进入条件≥" + enterFinal[2] + " 倍数 500";
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..tianjing..MJ");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Mj_Tianjin) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Mj_Tianjin.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Mj_Tianjin];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Mj_Tianjin];
        }
        if (void 0 == this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        var number = 2;
        this.player2.isChecked ? number = 2 : this.player3.isChecked ? number = 3 : this.player4.isChecked && (number = 4);
        var cost;
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            cost = this.spendData[key + 1].cost;
            final = cost[number].final;
            final = Math.ceil(final / number);
            str2 = "/人";
            this.spendUI[key].string = "（" + str1 + "*" + final + str2 + "）";
          } else if (this.modeType == gameDefine.currencyType.Currency_Coin) {
            cost = this.spendData[key].cost;
            final = cost[number].final;
            str2 = "/局";
            key >= 3 && (str2 = "/圈");
            this.spendUI[key].string = "";
          }
          this.drowArray[key].active = final <= 0;
        }
      },
      selectLaZhuang: function selectLaZhuang(evt) {
        this.showDoubleGang();
      },
      showDoubleGang: function showDoubleGang() {
        if (this.buzuobula.isChecked) {
          this.doubleGang.isChecked = false;
          this.doubleGang.node.active = false;
        } else this.doubleGang.node.active = true;
      },
      skipToPlayInfo: function skipToPlayInfo(eve, data) {
        gameDefine.ruleType.isRuleType = true;
        gameDefine.ruleType.type = 3;
        1 == data ? gameDefine.ruleType.py = 1e3 : 2 == data && (gameDefine.ruleType.py = 883);
        openView("PlayIntroPanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  debugView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99255egnbxGbYxndBak3K6V", "debugView");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        wildCards: cc.EditBox
      },
      onClose: function onClose() {
        this.node.active = false;
      },
      onSetCards: function onSetCards() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {
          cc.log("debug rtn: ", JSON.stringify(rtn));
        });
      },
      onSetWildcard: function onSetWildcard() {
        var str = this.wildCards.string;
        var data = {
          roomid: GameData.room.id,
          cards: parseInt(str)
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine"
  } ],
  debug_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62c63kFTilNAKTGfpJ1X1MW", "debug_changchun");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        editBaoCards: cc.EditBox,
        editNextCard: cc.EditBox,
        cardInput: cc.EditBox,
        parents: {
          default: [],
          type: cc.Node
        },
        debugBtn: cc.Node
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        this.debugBtn.active = setCardsOpen;
      },
      onClose: function onClose() {
        this.node.getComponent("roomMain_changchun").showDebugLayer();
      },
      onSetCards: function onSetCards() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {});
      },
      onSetBaoCards: function onSetBaoCards() {
        var str = this.editBaoCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      onSetNextCard: function onSetNextCard() {
        var str = this.editNextCard.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      testAllCardShow: function testAllCardShow() {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          "layer_down" != parent.name && (cc.find("cardHand", parent).active = false);
        }
        var cardId = this.cardInput.string;
        this.testHand(cardId);
        this.testPeng(cardId);
        this.testDis(cardId);
      },
      testHand: function testHand(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          if ("layer_down" == parent.name) {
            var cardHandParent = cc.find("cardHand", parent);
            for (var n = 0; n < cardHandParent.childrenCount; n++) {
              var cardHand = cardHandParent.getChildByName("cardHand" + n);
              this.showCardContent(cardHand, "mj_card_xia_shou", cardId);
            }
          }
        }
      },
      testDis: function testDis(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          parent.active = true;
          var cardDis = cc.find("cardDis", parent);
          for (var n = 0; n < cardDis.childrenCount; n++) {
            var disCard = cardDis.getChildByName("card_face" + (n + 1));
            disCard.active = true;
            "layer_down" == parent.name ? this.showCardContent(disCard, "mj_card_xia_chu", cardId) : "layer_right" == parent.name ? this.showCardContent(disCard, "mj_card_you_chu", cardId) : "layer_left" == parent.name ? this.showCardContent(disCard, "mj_card_zuo_chu", cardId) : "layer_up" == parent.name && this.showCardContent(disCard, "mj_card_shang_chu", cardId);
          }
        }
      },
      testPeng: function testPeng(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          for (var n = 0; n < GameData.room.opts.joinermax; n++) {
            var pengParent = cc.find("cardPeng/cardPeng" + (n + 1), parent);
            pengParent.active = true;
            for (var m = 0; m < 4; m++) {
              var cardFace = pengParent.getChildByName("card_face" + (m + 1));
              cardFace.active = true;
              "layer_down" == parent.name ? this.showCardContent(cardFace, "mj_card_xia_peng", cardId) : "layer_right" == parent.name ? this.showCardContent(cardFace, "mj_card_you_peng", cardId) : "layer_left" == parent.name ? this.showCardContent(cardFace, "mj_card_zuo_peng", cardId) : "layer_up" == parent.name && this.showCardContent(cardFace, "mj_card_shang_chu", cardId);
            }
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        if (null == card) {
          cc.log("missing card Component, please add it");
          return;
        }
        var cardIndex = card.index;
        var iconUrl = "resources/mjcard/" + cardHeader + "_" + cardIndex + "_" + cardId + ".png";
        cc.log("load Card URL :" + iconUrl);
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  debug_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "133cd/i7apJqbXgLkH0QUYW", "debug_heb");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        editBaoCards: cc.EditBox,
        editNextCard: cc.EditBox,
        cardInput: cc.EditBox,
        parents: {
          default: [],
          type: cc.Node
        },
        debugBtn: cc.Node
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        this.debugBtn.active = setCardsOpen;
      },
      onClose: function onClose() {
        this.node.getComponent("roomMain_heb").showDebugLayer();
      },
      onSetCards: function onSetCards() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {});
      },
      onSetBaoCards: function onSetBaoCards() {
        var str = this.editBaoCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      onSetNextCard: function onSetNextCard() {
        var str = this.editNextCard.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      testAllCardShow: function testAllCardShow() {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          "layer_down" != parent.name && (cc.find("cardHand", parent).active = false);
        }
        var cardId = this.cardInput.string;
        this.testHand(cardId);
        this.testPeng(cardId);
        this.testDis(cardId);
      },
      testHand: function testHand(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          if ("layer_down" == parent.name) {
            var cardHandParent = cc.find("cardHand", parent);
            for (var n = 0; n < cardHandParent.childrenCount; n++) {
              var cardHand = cardHandParent.getChildByName("cardHand" + n);
              this.showCardContent(cardHand, "mj_card_xia_shou", cardId);
            }
          }
        }
      },
      testDis: function testDis(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          parent.active = true;
          var cardDis = cc.find("cardDis", parent);
          for (var n = 0; n < cardDis.childrenCount; n++) {
            var disCard = cardDis.getChildByName("card_face" + (n + 1));
            disCard.active = true;
            "layer_down" == parent.name ? this.showCardContent(disCard, "mj_card_xia_chu", cardId) : "layer_right" == parent.name ? this.showCardContent(disCard, "mj_card_you_chu", cardId) : "layer_left" == parent.name ? this.showCardContent(disCard, "mj_card_zuo_chu", cardId) : "layer_up" == parent.name && this.showCardContent(disCard, "mj_card_shang_chu", cardId);
          }
        }
      },
      testPeng: function testPeng(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          for (var n = 0; n < GameData.room.opts.joinermax; n++) {
            var pengParent = cc.find("cardPeng/cardPeng" + (n + 1), parent);
            pengParent.active = true;
            for (var m = 0; m < 4; m++) {
              var cardFace = pengParent.getChildByName("card_face" + (m + 1));
              cardFace.active = true;
              "layer_down" == parent.name ? this.showCardContent(cardFace, "mj_card_xia_peng", cardId) : "layer_right" == parent.name ? this.showCardContent(cardFace, "mj_card_you_peng", cardId) : "layer_left" == parent.name ? this.showCardContent(cardFace, "mj_card_zuo_peng", cardId) : "layer_up" == parent.name && this.showCardContent(cardFace, "mj_card_shang_chu", cardId);
            }
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        if (null == card) {
          cc.log("missing card Component, please add it");
          return;
        }
        var cardIndex = card.index;
        var iconUrl = "resources/mjcard/" + cardHeader + "_" + cardIndex + "_" + cardId + ".png";
        cc.log("load Card URL :" + iconUrl);
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  debug_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c62adr13/NPcaVjVCsOkZgx", "debug_huadian");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        editBaoCards: cc.EditBox,
        cardInput: cc.EditBox,
        parents: {
          default: [],
          type: cc.Node
        },
        debugBtn: cc.Node
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        this.debugBtn.active = setCardsOpen;
      },
      onClose: function onClose() {
        this.node.getComponent("roomMain_huadian").showDebugLayer();
      },
      onSetCards: function onSetCards() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {});
      },
      onSetBaoCards: function onSetBaoCards() {
        var str = this.editBaoCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      testAllCardShow: function testAllCardShow() {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          "layer_down" != parent.name && (cc.find("cardHand", parent).active = false);
        }
        var cardId = this.cardInput.string;
        this.testHand(cardId);
        this.testPeng(cardId);
        this.testDis(cardId);
      },
      testHand: function testHand(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          if ("layer_down" == parent.name) {
            var cardHandParent = cc.find("cardHand", parent);
            for (var n = 0; n < cardHandParent.childrenCount; n++) {
              var cardHand = cardHandParent.getChildByName("cardHand" + n);
              this.showCardContent(cardHand, "mj_card_xia_shou", cardId);
            }
          }
        }
      },
      testDis: function testDis(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          parent.active = true;
          var cardDis = cc.find("cardDis", parent);
          for (var n = 0; n < cardDis.childrenCount; n++) {
            var disCard = cardDis.getChildByName("card_face" + (n + 1));
            disCard.active = true;
            "layer_down" == parent.name ? this.showCardContent(disCard, "mj_card_xia_chu", cardId) : "layer_right" == parent.name ? this.showCardContent(disCard, "mj_card_you_chu", cardId) : "layer_left" == parent.name ? this.showCardContent(disCard, "mj_card_zuo_chu", cardId) : "layer_up" == parent.name && this.showCardContent(disCard, "mj_card_shang_chu", cardId);
          }
        }
      },
      testPeng: function testPeng(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          for (var n = 0; n < GameData.room.opts.joinermax; n++) {
            var pengParent = cc.find("cardPeng/cardPeng" + (n + 1), parent);
            pengParent.active = true;
            for (var m = 0; m < 4; m++) {
              var cardFace = pengParent.getChildByName("card_face" + (m + 1));
              cardFace.active = true;
              "layer_down" == parent.name ? this.showCardContent(cardFace, "mj_card_xia_peng", cardId) : "layer_right" == parent.name ? this.showCardContent(cardFace, "mj_card_you_peng", cardId) : "layer_left" == parent.name ? this.showCardContent(cardFace, "mj_card_zuo_peng", cardId) : "layer_up" == parent.name && this.showCardContent(cardFace, "mj_card_shang_chu", cardId);
            }
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        if (null == card) {
          cc.log("missing card Component, please add it");
          return;
        }
        var cardIndex = card.index;
        var iconUrl = "resources/mjcard/" + cardHeader + "_" + cardIndex + "_" + cardId + ".png";
        cc.log("load Card URL :" + iconUrl);
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  debug: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d27fIayxdKK7YGYWL/9spU", "debug");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        cardInput: cc.EditBox,
        wildCards: cc.EditBox,
        parents: {
          default: [],
          type: cc.Node
        },
        debugBtn: cc.Node
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        this.debugBtn.active = setCardsOpen;
      },
      onClose: function onClose() {
        switch (GameData.client.gameType) {
         case gameDefine.GameType.Game_Poker_DDZ:
          this.node.getComponent("DDZ-roomMain").showDebugLayer();
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          this.node.getComponent("TJDDZ-roomMain").showDebugLayer();
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          this.node.getComponent("roomMain-shishi").showDebugLayer();
          break;

         case gameDefine.GameType.Game_Mj_Tianjin:
          this.node.getComponent("roomMain").showDebugLayer();
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          this.node.getComponent("PDK-roomMain").showDebugLayer();
        }
      },
      onSetCards: function onSetCards() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {
          cc.log("debug rtn: ", JSON.stringify(rtn));
        });
      },
      onSetWildcard: function onSetWildcard() {
        var str = this.wildCards.string;
        var data = {
          roomid: GameData.room.id,
          cards: parseInt(str)
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      testAllCardShow: function testAllCardShow() {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          "layer_down" != parent.name && (cc.find("cardHand", parent).active = false);
        }
        var cardId = this.cardInput.string;
        this.testHand(cardId);
        this.testPeng(cardId);
        this.testDis(cardId);
      },
      testHand: function testHand(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          if ("layer_down" == parent.name) {
            var cardHandParent = cc.find("cardHand", parent);
            for (var n = 0; n < cardHandParent.childrenCount; n++) {
              var cardHand = cardHandParent.getChildByName("cardHand" + n);
              this.showCardContent(cardHand, "mj_card_xia_shou", cardId);
            }
          }
        }
      },
      testDis: function testDis(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          parent.active = true;
          var cardDis = cc.find("cardDis", parent);
          for (var n = 0; n < cardDis.childrenCount; n++) {
            var disCard = cardDis.getChildByName("card_face" + (n + 1));
            disCard.active = true;
            "layer_down" == parent.name ? this.showCardContent(disCard, "mj_card_xia_chu", cardId) : "layer_right" == parent.name ? this.showCardContent(disCard, "mj_card_you_chu", cardId) : "layer_left" == parent.name ? this.showCardContent(disCard, "mj_card_zuo_chu", cardId) : "layer_up" == parent.name && this.showCardContent(disCard, "mj_card_shang_chu", cardId);
          }
        }
      },
      testPeng: function testPeng(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          for (var n = 0; n < GameData.room.joinermax; n++) {
            var pengParent = cc.find("cardPeng/cardPeng" + (n + 1), parent);
            pengParent.active = true;
            for (var m = 0; m < 4; m++) {
              var cardFace = pengParent.getChildByName("card_face" + (m + 1));
              cardFace.active = true;
              "layer_down" == parent.name ? this.showCardContent(cardFace, "mj_card_xia_peng", cardId) : "layer_right" == parent.name ? this.showCardContent(cardFace, "mj_card_you_peng", cardId) : "layer_left" == parent.name ? this.showCardContent(cardFace, "mj_card_zuo_peng", cardId) : "layer_up" == parent.name && this.showCardContent(cardFace, "mj_card_shang_chu", cardId);
            }
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        if (null == card) {
          cc.log("missing card Component, please add it");
          return;
        }
        var cardIndex = card.index;
        var iconUrl = "resources/mjcard/" + cardHeader + "_" + cardIndex + "_" + cardId + ".png";
        cc.log("load Card URL :" + iconUrl);
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine"
  } ],
  directionView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bfdc6nVkMJJ+IxZhMaKLcQR", "directionView");
    "use strict";
    var game = require("gameConfig");
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        direction_pos: cc.Sprite,
        direction_turn: cc.Node,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        leftCardNumLabel: cc.Label,
        lastRoundLabel: cc.RichText,
        quanNode: cc.Node,
        juNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.onShow);
        registEvent("onGameTurn", this, this.onShowTurn);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.onShow);
        unregistEvent("onGameTurn", this, this.onShowTurn);
      },
      onEnable: function onEnable() {
        this.onShow();
        this.startCountDown();
      },
      onShow: function onShow() {
        this.showPosition();
        this.showLeftCard();
        this.showRoundType();
        this.showRoundString();
      },
      onShowTurn: function onShowTurn() {
        var state = roomHandler.room.status;
        state == gameDefine.RoomState.GAMEING ? this.startCountDown() : this.stopCountDown();
        this.showTurn();
      },
      startCountDown: function startCountDown() {
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
      },
      stopCountDown: function stopCountDown() {
        this.unschedule(this.runCountDown);
      },
      showPosition: function showPosition() {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        var rotation = 0;
        0 == index ? rotation = 90 : 1 == index ? rotation = 270 : 2 == index ? rotation = 180 : 3 == index && (rotation = 0);
        this.direction_pos.node.rotation = rotation;
      },
      showTurn: function showTurn() {
        var turnUid = game.getGameData().game.turn;
        var index = GameData.getPlayerIndex(turnUid);
        if (index < 0) return;
        var direction;
        direction = 0 == index ? "dong" : 3 == index ? "nan" : 2 == index ? "xi" : 1 == index ? "bei" : "dong";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + direction + ".png"));
        this.direction_pos.spriteFrame = new cc.SpriteFrame(texture);
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        direction = GameData.getPlayerPosByUid(turnUid);
        if (null == direction) return;
        cc.find(direction, this.direction_turn).active = true;
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index.toString());
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          var turnUid = game.getGameData().game.turn;
          3 == this._countdown_index && turnUid == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        if (0 == ary.length) return;
        var url1, url2;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      showRoundString: function showRoundString() {
        var roundNum = roomHandler.room.roundNum, roundMax = roomHandler.room.opts.roundMax;
        this.lastRoundLabel.string = roundNum + "/" + roundMax;
      },
      showLeftCard: function showLeftCard() {
        var leftNumber = game.getGameData().game.cardleft;
        this.leftCardNumLabel.string = leftNumber;
      },
      showRoundType: function showRoundType() {
        var roundType = roomHandler.room.opts.roundType;
        if (roundType == gameDefine.roundType.quan) {
          this.quanNode.active = true;
          this.juNode.active = false;
        } else {
          this.quanNode.active = false;
          this.juNode.active = true;
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameConfig: "gameConfig",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  dissolveView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e3742Ny9xN/a6gZK4R06wq", "dissolveView");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        headPanel: cc.Node,
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.onRoomInfoHandler);
        registEvent("onRoomDissolve", this, this.onRoomDissolveHandler);
        registEvent("showDissolve", this, this.showDissolveLayer);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.onRoomInfoHandler);
        unregistEvent("onRoomDissolve", this, this.onRoomDissolveHandler);
        unregistEvent("showDissolve", this, this.showDissolveLayer);
      },
      onEnable: function onEnable() {
        this.lastTimeLabel.string = "";
        this.openDisAgree = false;
        this.initHeaderUI();
        this.showDissolveText();
      },
      onRoomInfoHandler: function onRoomInfoHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomInfoSetData(data.detail);
        this.initHeaderUI();
      },
      onRoomDissolveHandler: function onRoomDissolveHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomDissolveSetData(data.detail);
        this.initHeaderUI();
        this.showDissolveText();
      },
      showDissolveLayer: function showDissolveLayer(data) {
        cc.log("..showDissolve:" + data.detail);
        this.node.active = data.detail;
      },
      initHeaderUI: function initHeaderUI() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        for (var ii = 0; ii < this.headPanel.getChildrenCount(); ii++) {
          var child = this.headPanel.getChildren()[ii];
          child && (child.active = false);
        }
        for (var index = 0; index < roomData.opts.joinermax; index++) {
          var playerData = GameData.joiners[index];
          if (void 0 == playerData) continue;
          var headNode = this.headPanel.getChildren()[index];
          if (void 0 == headNode) {
            headNode = cc.instantiate(this.headerNode);
            headNode.parent = this.headPanel;
            headNode.name = "headNode" + index;
            headNode.y = this.headerNode.y;
            headNode.x = this.headerNode.x + index * (this.headerNode.width + 50);
          }
          headNode.tag = playerData.uid;
          headNode.active = true;
          var nameStr = playerData.name;
          var nameNode = cc.find("nameLabel", headNode);
          nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
          var headImgurl = playerData.headimgurl;
          var headSprite = cc.find("headimg", headNode).getComponent(cc.Sprite);
          this.showHeaderIcon(headSprite, headImgurl);
          var onLine = RoomHandler.isPlayerOnline(playerData.uid);
          this.showLostIcon(headNode, onLine);
          this.showAgreeIcon(headNode, false);
        }
      },
      showHeaderIcon: function showHeaderIcon(headSprite, headimgurl) {
        if (void 0 == headSprite || void 0 == headimgurl || headimgurl.length <= 0) return;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headSprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showLostIcon: function showLostIcon(headNode, onLine) {
        var disNode = cc.find("lost", headNode);
        disNode.active = !onLine;
      },
      showAgreeIcon: function showAgreeIcon(headNode, show) {
        var node = cc.find("duigou", headNode);
        node.active = show;
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var playerData = GameData.getPlayerByUid(uid);
        if (playerData) {
          var self = this;
          var name = playerData.name;
          createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
            self.openDisAgree = false;
          });
          this.openDisAgree = true;
        }
      },
      showDissolveText: function showDissolveText() {
        var dissolveData = RoomHandler.getRoomDissolveData();
        if (void 0 == dissolveData || Object.keys(dissolveData).length <= 0) return;
        GameData.showResult = false;
        var playerData, headNode, show = true;
        for (var uid in dissolveData.select) {
          var select = dissolveData.select[uid];
          if ("apply" == select) {
            playerData = GameData.getPlayerByUid(uid);
            if (playerData) {
              this.dissolvePerson.string = "[" + playerData.name + "]发起投票解散对局";
              headNode = this.headPanel.getChildByTag(parseInt(uid));
              headNode && this.showAgreeIcon(headNode, true);
            }
          } else if ("agree" == select) {
            headNode = this.headPanel.getChildByTag(parseInt(uid));
            headNode && this.showAgreeIcon(headNode, true);
          } else if ("disagree" == select) {
            sendEvent("showDissolve", false);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != select && "apply" != select || uid != GameData.player.uid || (show = false);
        }
        this.alreadyAgree(show);
        sendEvent("showDissolve", true);
        this.handleVoteResult();
        this.handleRoomDisbandTimer();
      },
      handleVoteResult: function handleVoteResult() {
        var dissolveData = RoomHandler.getRoomDissolveData();
        if (void 0 == dissolveData) return;
        if (false == dissolveData.isStart) {
          sendEvent("showDissolve", false);
          this.unschedule(this.updateLastTime);
          setTimeout(function() {
            GameData.roomClose && sendEvent("onShowView", "summaryView");
          }, 100);
        }
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer() {
        var dissolveData = RoomHandler.getRoomDissolveData();
        if (void 0 == dissolveData) return;
        this.totalTime = dissolveData.startTime;
        this.lastTime = dissolveData.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        this.lastTime--;
        this.lastTimeLabel.string = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(roomData.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolveAgree: function requestDissolveAgree() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        RoomHandler.deleteRoom(roomData.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        RoomHandler.deleteRoom(roomData.id, "disagree");
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  dunhua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a79caX0NsxAsoNqvO+5gh8a", "dunhua");
    "use strict";
    var gameDefine = require("gameDefine");
    var DunHuaConfig = {
      gameName: "摸摸敦化麻将",
      areaType: gameDefine.AreaType.Area_DunHua,
      serverIP: "changchun.mahjong.ry-play.com",
      serverPort: 3010,
      versionText: "敦化测试版本",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/dunhua",
      wxWelcomeText: "摸摸敦化麻将欢迎你！",
      loginLogo: "resources/login/ruoyudunhua.png",
      Poster: [],
      GameVisible: [ gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_TDK ],
      SetCardsOpen: false,
      MatchGameType: [],
      FightGameType: [],
      CurrencyType: gameDefine.currencyType.Currency_Card,
      ModeType: {
        Game_Mj_CC: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e4 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          }
        },
        fight: {},
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ]
        },
        roomCard: {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 20
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          10: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          }
        }
      }
    };
    module.exports = DunHuaConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  errorCode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8736egJLD1PHaj3JVZE0dTz", "errorCode");
    "use strict";
    var errorCode = {
      Success: 0,
      Fail: 1,
      verifyPlayerFail: 2,
      emailUsed: 3,
      emailValid: 4,
      invalidMail: 5,
      playerNotFound: 6,
      guestCanNotRecommend: 7,
      canNotLogin: 8,
      alreadyInGame: 9,
      keepInGame: 10,
      accountHasSeal: 12,
      versionError: 17,
      packetVersionError: 18,
      codeVersionError: 19,
      notEnoughCard: 20,
      notEnoughCoin: 21,
      notEnoughPoint: 22,
      sqlError: 30,
      lessMoney: 31,
      lessCoin: 32,
      clientRestart: 33,
      clientUpdate: 34,
      bindError: 35,
      joinRoomOK: 36,
      cfgVersionChange: 37,
      alreadyInRoom: 38,
      roomFull: 39,
      slotNotFound: 40,
      roomNotFound: 41,
      AgentRoomMax: 43,
      zjhCfgChange: 50,
      zjhDateEnd: 51,
      zjhCfgStop: 52,
      roomInPlay: 53,
      playerNotWaitStart: 54,
      joinActOK: 60,
      canNotJoinActInPlay: 61,
      joinWrongAct: 62,
      alreadyInAct: 63,
      actClosed: 64,
      invalidActPos: 65,
      invalidActRoom: 66,
      actEnd: 67,
      invaliReward: 68,
      canNotAddSelf: 80,
      isMemberAlready: 81,
      memberNotFound: 82,
      addMemberOK: 83,
      removeMemberOK: 84,
      membersNumLimit: 85,
      memberofNumLimit: 86,
      authAddPlayerExist: 87,
      notHaveWXOpenId: 88,
      rpcErr: 100,
      loginToMuch: 101,
      errorState: 102,
      serverFull: 103,
      LessClubMoney: 110,
      LessCard: 111,
      LessCoin: 112,
      ClubNotFound: 113,
      HasJoinedClub: 114,
      ApplyJoinClubSuc: 115,
      NoJoinThisClub: 116,
      HasReqJoinClub: 117,
      AgentMoneyNotEnough: 118,
      ClubLevelTooLow: 119,
      AgentMoneyDataError: 120,
      findAgentDBError: 121,
      HasInvited: 122,
      NotFindInviteDB: 123,
      NotFindApplyDB: 124,
      waitOthers: 130,
      NotPokerDis: 200,
      HandPatternsError: 201,
      NotHavePokerDis: 202,
      MaxCardPut: 203,
      NotHaveThreePoker: 204,
      WarningDiscard: 300
    };
    module.exports = errorCode;
    cc._RF.pop();
  }, {} ],
  "es6-promise": [ function(require, module, exports) {
    (function(process, global) {
      "use strict";
      cc._RF.push(module, "b5ef5PgiPVOWKPtWWEtJ+Se", "es6-promise");
      "use strict";
      var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      !function(t, e) {
        "object" == ("undefined" === typeof exports ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : t.ES6Promise = e();
      }(void 0, function() {
        function t(t) {
          var e = "undefined" === typeof t ? "undefined" : _typeof(t);
          return null !== t && ("object" === e || "function" === e);
        }
        function e(t) {
          return "function" == typeof t;
        }
        function n(t) {
          B = t;
        }
        function r(t) {
          G = t;
        }
        function o() {
          return function() {
            return process.nextTick(a);
          };
        }
        function i() {
          return "undefined" != typeof z ? function() {
            z(a);
          } : c();
        }
        function s() {
          var t = 0, e = new J(a), n = document.createTextNode("");
          return e.observe(n, {
            characterData: !0
          }), function() {
            n.data = t = ++t % 2;
          };
        }
        function u() {
          var t = new MessageChannel();
          return t.port1.onmessage = a, function() {
            return t.port2.postMessage(0);
          };
        }
        function c() {
          var t = setTimeout;
          return function() {
            return t(a, 1);
          };
        }
        function a() {
          for (var t = 0; t < W; t += 2) {
            var e = V[t], n = V[t + 1];
            e(n), V[t] = void 0, V[t + 1] = void 0;
          }
          W = 0;
        }
        function f() {
          try {
            var t = Function("return this")().require("vertx");
            return z = t.runOnLoop || t.runOnContext, i();
          } catch (e) {
            return c();
          }
        }
        function l(t, e) {
          var n = this, r = new this.constructor(p);
          void 0 === r[Z] && O(r);
          var o = n._state;
          if (o) {
            var i = arguments[o - 1];
            G(function() {
              return P(o, r, i, n._result);
            });
          } else E(n, r, t, e);
          return r;
        }
        function h(t) {
          var e = this;
          if (t && "object" == ("undefined" === typeof t ? "undefined" : _typeof(t)) && t.constructor === e) return t;
          var n = new e(p);
          return g(n, t), n;
        }
        function p() {}
        function v() {
          return new TypeError("You cannot resolve a promise with itself");
        }
        function d() {
          return new TypeError("A promises callback cannot return that same promise.");
        }
        function _(t) {
          try {
            return t.then;
          } catch (e) {
            return nt.error = e, nt;
          }
        }
        function y(t, e, n, r) {
          try {
            t.call(e, n, r);
          } catch (o) {
            return o;
          }
        }
        function m(t, e, n) {
          G(function(t) {
            var r = !1, o = y(n, e, function(n) {
              r || (r = !0, e !== n ? g(t, n) : S(t, n));
            }, function(e) {
              r || (r = !0, j(t, e));
            }, "Settle: " + (t._label || " unknown promise"));
            !r && o && (r = !0, j(t, o));
          }, t);
        }
        function b(t, e) {
          e._state === tt ? S(t, e._result) : e._state === et ? j(t, e._result) : E(e, void 0, function(e) {
            return g(t, e);
          }, function(e) {
            return j(t, e);
          });
        }
        function w(t, n, r) {
          n.constructor === t.constructor && r === l && n.constructor.resolve === h ? b(t, n) : r === nt ? (j(t, nt.error), 
          nt.error = null) : void 0 === r ? S(t, n) : e(r) ? m(t, n, r) : S(t, n);
        }
        function g(e, n) {
          e === n ? j(e, v()) : t(n) ? w(e, n, _(n)) : S(e, n);
        }
        function A(t) {
          t._onerror && t._onerror(t._result), T(t);
        }
        function S(t, e) {
          t._state === $ && (t._result = e, t._state = tt, 0 !== t._subscribers.length && G(T, t));
        }
        function j(t, e) {
          t._state === $ && (t._state = et, t._result = e, G(A, t));
        }
        function E(t, e, n, r) {
          var o = t._subscribers, i = o.length;
          t._onerror = null, o[i] = e, o[i + tt] = n, o[i + et] = r, 0 === i && t._state && G(T, t);
        }
        function T(t) {
          var e = t._subscribers, n = t._state;
          if (0 !== e.length) {
            for (var r = void 0, o = void 0, i = t._result, s = 0; s < e.length; s += 3) r = e[s], 
            o = e[s + n], r ? P(n, r, o, i) : o(i);
            t._subscribers.length = 0;
          }
        }
        function M(t, e) {
          try {
            return t(e);
          } catch (n) {
            return nt.error = n, nt;
          }
        }
        function P(t, n, r, o) {
          var i = e(r), s = void 0, u = void 0, c = void 0, a = void 0;
          if (i) {
            if (s = M(r, o), s === nt ? (a = !0, u = s.error, s.error = null) : c = !0, n === s) return void j(n, d());
          } else s = o, c = !0;
          n._state !== $ || (i && c ? g(n, s) : a ? j(n, u) : t === tt ? S(n, s) : t === et && j(n, s));
        }
        function x(t, e) {
          try {
            e(function(e) {
              g(t, e);
            }, function(e) {
              j(t, e);
            });
          } catch (n) {
            j(t, n);
          }
        }
        function C() {
          return rt++;
        }
        function O(t) {
          t[Z] = rt++, t._state = void 0, t._result = void 0, t._subscribers = [];
        }
        function k() {
          return new Error("Array Methods must be provided an Array");
        }
        function F(t) {
          return new ot(this, t).promise;
        }
        function Y(t) {
          var e = this;
          return new e(U(t) ? function(n, r) {
            for (var o = t.length, i = 0; i < o; i++) e.resolve(t[i]).then(n, r);
          } : function(t, e) {
            return e(new TypeError("You must pass an array to race."));
          });
        }
        function q(t) {
          var e = this, n = new e(p);
          return j(n, t), n;
        }
        function D() {
          throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
        }
        function K() {
          throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        }
        function L() {
          var t = void 0;
          if ("undefined" != typeof global) t = global; else if ("undefined" != typeof self) t = self; else try {
            t = Function("return this")();
          } catch (e) {
            throw new Error("polyfill failed because global object is unavailable in this environment");
          }
          var n = t.Promise;
          if (n) {
            var r = null;
            try {
              r = Object.prototype.toString.call(n.resolve());
            } catch (e) {}
            if ("[object Promise]" === r && !n.cast) return;
          }
          t.Promise = it;
        }
        var N = void 0;
        N = Array.isArray ? Array.isArray : function(t) {
          return "[object Array]" === Object.prototype.toString.call(t);
        };
        var U = N, W = 0, z = void 0, B = void 0, G = function G(t, e) {
          V[W] = t, V[W + 1] = e, W += 2, 2 === W && (B ? B(a) : X());
        }, H = "undefined" != typeof window ? window : void 0, I = H || {}, J = I.MutationObserver || I.WebKitMutationObserver, Q = "undefined" == typeof self && "undefined" != typeof process && "[object process]" === {}.toString.call(process), R = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel, V = new Array(1e3), X = void 0;
        X = Q ? o() : J ? s() : R ? u() : void 0 === H && "function" == typeof require ? f() : c();
        var Z = Math.random().toString(36).substring(2), $ = void 0, tt = 1, et = 2, nt = {
          error: null
        }, rt = 0, ot = function() {
          function t(t, e) {
            this._instanceConstructor = t, this.promise = new t(p), this.promise[Z] || O(this.promise), 
            U(e) ? (this.length = e.length, this._remaining = e.length, this._result = new Array(this.length), 
            0 === this.length ? S(this.promise, this._result) : (this.length = this.length || 0, 
            this._enumerate(e), 0 === this._remaining && S(this.promise, this._result))) : j(this.promise, k());
          }
          return t.prototype._enumerate = function(t) {
            for (var e = 0; this._state === $ && e < t.length; e++) this._eachEntry(t[e], e);
          }, t.prototype._eachEntry = function(t, e) {
            var n = this._instanceConstructor, r = n.resolve;
            if (r === h) {
              var o = _(t);
              if (o === l && t._state !== $) this._settledAt(t._state, e, t._result); else if ("function" != typeof o) this._remaining--, 
              this._result[e] = t; else if (n === it) {
                var i = new n(p);
                w(i, t, o), this._willSettleAt(i, e);
              } else this._willSettleAt(new n(function(e) {
                return e(t);
              }), e);
            } else this._willSettleAt(r(t), e);
          }, t.prototype._settledAt = function(t, e, n) {
            var r = this.promise;
            r._state === $ && (this._remaining--, t === et ? j(r, n) : this._result[e] = n), 
            0 === this._remaining && S(r, this._result);
          }, t.prototype._willSettleAt = function(t, e) {
            var n = this;
            E(t, void 0, function(t) {
              return n._settledAt(tt, e, t);
            }, function(t) {
              return n._settledAt(et, e, t);
            });
          }, t;
        }(), it = function() {
          function t(e) {
            this[Z] = C(), this._result = this._state = void 0, this._subscribers = [], p !== e && ("function" != typeof e && D(), 
            this instanceof t ? x(this, e) : K());
          }
          return t.prototype["catch"] = function(t) {
            return this.then(null, t);
          }, t.prototype["finally"] = function(t) {
            var e = this, n = e.constructor;
            return e.then(function(e) {
              return n.resolve(t()).then(function() {
                return e;
              });
            }, function(e) {
              return n.resolve(t()).then(function() {
                throw e;
              });
            });
          }, t;
        }();
        return it.prototype.then = l, it.all = F, it.race = Y, it.resolve = h, it.reject = q, 
        it._setScheduler = n, it._setAsap = r, it._asap = G, it.polyfill = L, it.Promise = it, 
        it;
      });
      cc._RF.pop();
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    _process: 1
  } ],
  gameConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "877fc/RIkNDfKDN0CFnz4si", "gameConfig");
    "use strict";
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    module.exports = {
      getConfig: function getConfig() {
        var gameType = roomHandler.room.opts.gameType;
        switch (gameType) {
         case gameDefine.GameType.Game_Mj_HZ:
          return require("TuiDaoHu");

         default:
          return null;
        }
      },
      getName: function getName() {
        return this.getConfig().name;
      },
      getLanguage: function getLanguage() {
        return this.getConfig().language;
      },
      getViews: function getViews(state) {
        return this.getConfig().views[state];
      },
      getView: function getView(tag) {
        return this.getConfig().prefabs[tag];
      },
      getChatData: function getChatData() {
        return this.getConfig().chat;
      },
      getRuleStr: function getRuleStr() {
        return this.getConfig().getRuleStr(roomHandler.room.opts);
      },
      getWildIcon: function getWildIcon() {
        return this.getConfig().resources.wildIcon;
      },
      getActionData: function getActionData(action) {
        return this.getConfig().actions[action];
      },
      getGameData: function getGameData() {
        return this.getConfig().getDataHandler();
      },
      getGameRule: function getGameRule() {
        return this.getConfig().getRuleHandler();
      },
      getGameProtocol: function getGameProtocol() {
        return this.getConfig().getProtocolHandler();
      }
    };
    cc._RF.pop();
  }, {
    TuiDaoHu: "TuiDaoHu",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  gameDefine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "884a2VSt+dCWYwN5SkzFflj", "gameDefine");
    "use strict";
    var gameDefine = {
      AreaType: {
        Area_Test: 0,
        Area_TianJin: 1,
        Area_ShiShi: 2,
        Area_HuaDian: 3,
        Area_DunHua: 4,
        Area_HEB: 5,
        Area_Hebei: 6,
        Area_Changchun: 7,
        Area_Appstore: 100,
        Area_Coin: 101
      },
      GameType: {
        Game_Mj_Tianjin: 1,
        Game_Mj_Shishi: 2,
        Game_Poker_13shui: 3,
        Game_niu_niu: 5,
        Game_MJ_HuaDian: 6,
        Game_TDK: 7,
        Game_Poker_TianjinDDZ: 8,
        Game_Mj_HZ: 9,
        Game_Mj_CC: 10,
        Game_Poker_paodekuai: 11,
        Game_Mj_AS: 12,
        Game_Mj_Heb: 13,
        Game_Poker_DDZ: 102,
        Game_Poker_ZJH: 103,
        Game_Niu_Niu_10: 104,
        Game_Niu_Hundred: 105,
        Game_Poker_HHDZ: 106,
        Game_Mahjong_TuiDaoHu: 500
      },
      roomType: {
        Room_Common: 1,
        Room_Club: 2,
        Room_Contest: 3,
        Room_Match: 4
      },
      RoomState: {
        WAIT: 0,
        READY: 1,
        GAMEING: 2
      },
      CurSelectType: {
        group: 1,
        match: 2,
        competition: 3
      },
      ruleType: {
        isRuleType: false,
        type: 1,
        py: 1
      },
      currencyType: {
        Currency_Card: 1,
        Currency_Coin: 2
      },
      settleType: {
        Settle_None: 1,
        Settle_Coin: 2,
        Settle_Point: 3
      },
      roundType: {
        round: 1,
        quan: 2,
        ke: 3
      },
      CostType: {
        Cost_None: 0,
        Cost_Creator: 1,
        Cost_AA: 2,
        Cost_Winner: 3,
        Cost_Agent: 4,
        Cost_Table: 5
      },
      shopCostType: {
        Shop_Cost_Cash: 0,
        Shop_Cost_Card: 1,
        Shop_Cost_Coin: 2,
        Shop_Cost_Point: 3
      },
      shopGetType: {
        Shop_Get_Coin: 0,
        Shop_Get_Item: 1
      },
      withdrawState: {
        wait: 0,
        succeed: 1,
        fail: 2
      },
      agentRole: {
        agentPower: 1,
        agent: 2,
        push: 3,
        ordinary: 4
      },
      taskRewardType: {
        coin: 1
      }
    };
    module.exports = gameDefine;
    cc._RF.pop();
  }, {} ],
  getLottery: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a070DxEXFDGZnSpKQa5CUx", "getLottery");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        gongzhonghao: cc.Label
      },
      onLoad: function onLoad() {
        this.showNumLabel();
      },
      showNumLabel: function showNumLabel() {
        var WXConfig = configMgr.getAgentWeChat();
        if (!WXConfig) return;
        this.gongzhonghao.string = WXConfig.accounts.number;
      },
      close: function close() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  goodsType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b8e3eUp7hhJu4ISXswC3E4M", "goodsType");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var shopHandler = require("shopHandler");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        buttonId: 0,
        costStr: cc.Label,
        getStr: cc.Label,
        headIcon: cc.Sprite,
        getType: 0
      },
      onLoad: function onLoad() {},
      getButtonId: function getButtonId(btnId) {
        this.buttonId = btnId;
      },
      clickConsume: function clickConsume() {
        soundMngr.instance.playAudioOther("button");
        cc.log("this.buttonId = " + this.buttonId);
        var setCardsOpen = configMgr.getSetCardsOpen();
        if (true == setCardsOpen) {
          var self = this;
          var showStr = "是否确认使用" + this.costNum + "兑换" + this.getNum;
          createMessageBox(showStr, function() {
            shopHandler.exchange(self.buttonId);
          }, function() {});
        } else if (this.getType == gameDefine.shopGetType.Shop_Get_Coin) {
          var self = this;
          var showStr = "是否确认使用" + this.costNum + "兑换" + this.getNum;
          createMessageBox(showStr, function() {
            shopHandler.exchange(self.buttonId);
          }, function() {});
        } else createMessageBox("兑换功能尚未开放", function() {});
      },
      initUI: function initUI(data) {
        this.costNum = "";
        switch (data.costType) {
         case gameDefine.shopCostType.Shop_Cost_Point:
          this.costNum = data.costNum + "积分";
          break;

         case gameDefine.shopCostType.Shop_Cost_Card:
          this.costNum = data.costNum + "房卡";
          break;

         case gameDefine.shopCostType.Shop_Cost_Coin:
          this.costNum = data.costNum + "金币";
          break;

         case gameDefine.shopCostType.Shop_Cost_Cash:
          this.costNum = data.costNum + "现金";
        }
        this.costStr.string = this.costNum;
        this.getNum = "";
        data.desc && (this.getNum = data.desc);
        this.getStr.string = this.getNum;
        this.setHeadIcon(data.icon);
        this.getType = data.getType;
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        var self = this;
        cc.loader.loadRes("shop/shopPlist", cc.SpriteAtlas, function(err, atlas) {
          var frame = atlas.getSpriteFrame(headimgurl);
          self.headIcon.spriteFrame = frame;
        });
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    shopHandler: "shopHandler"
  } ],
  groupType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "94c04TiLw1FDpt8OAZS0m5p", "groupType");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        groupType: cc.Node,
        cardType_1: cc.Node,
        cardType_2: cc.Node,
        cardType_3: cc.Node,
        id: 0,
        selected: false
      },
      onLoad: function onLoad() {
        this.commendTypeUrl = {
          WuLong: "wulong",
          DuiZi: "duizi",
          LiangDui: "lingdui",
          SanTiao: "santiao",
          ShunZi: "shunzi",
          TongHua: "tonghua",
          HuLu: "hulu",
          TieZhi: "tiezhi",
          TongHuaShun: "tonghuasun",
          WuTong: "wutong"
        };
      },
      showRecommend: function showRecommend(commend) {
        this.commendType = [];
        this.commendType = commend[this.id];
        cc.log("commendType: ", JSON.stringify(this.commendType));
        var url = "resources/shisanshui/tableUI/selectCardType/";
        for (var i = 0; i < this.commendType.length; i++) for (var _type in CommonType) if (CommonType[_type].id == this.commendType[i].type) {
          var cardType = cc.find("cardType_" + (3 - i), this.groupType);
          var texture = cc.textureCache.addImage(cc.url.raw(url + this.commendTypeUrl[_type] + ".png"));
          cardType.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          break;
        }
      },
      showRecommendCard: function showRecommendCard() {
        WriteLog("showRecommendCard");
        var content = this.groupType.parent;
        var view = content.parent;
        var scrollView = view.parent;
        var cardGroup = scrollView.parent;
        var poker = cardGroup.parent;
        var neatenNode = poker.parent;
        var cardType = cc.find("cardType", poker);
        var resetCard = function resetCard(cardRow, row) {
          var cardRowNode = cc.find(cardRow, cardType);
          cardPoker13[row].length > 0 && neatenNode.parent.getComponent("SSSRoomTable").setResetCard(cardRowNode, row);
        };
        var cards_row = function cards_row(cards, length, cardRow, row) {
          cc.log("cards: ", JSON.stringify(cards));
          var cardRowNode = cc.find(cardRow, cardType);
          if (cardPoker13[row].length <= 0) {
            neatenNode.parent.getComponent("SSSRoomTable").setCheckedCards(cards);
            neatenNode.parent.getComponent("SSSRoomTable").showCardRow(row, cardRowNode, length);
          }
        };
        resetCard("upCardNode", "up");
        resetCard("midCardNode", "mid");
        resetCard("downCardNode", "down");
        cards_row(this.commendType[0].cards, 5, "downCardNode", "down");
        cards_row(this.commendType[1].cards, 5, "midCardNode", "mid");
        cards_row(this.commendType[2].cards, 3, "upCardNode", "up");
      },
      onGroupBtnCliked: function onGroupBtnCliked() {
        console.log("group id: ", this.id);
        var space = 50;
        var distance = this.groupType.getContentSize().width + space;
        this.selected = true;
        var contentNode = this.groupType.parent;
        var viewNode = contentNode.parent;
        var scrollViewNode = viewNode.parent;
        var scrollView = scrollViewNode.getComponent(cc.ScrollView);
        var time = .1;
        var actionTo = cc.moveTo(time, cc.p(0 - distance * this.id, scrollView.getContentPosition().y));
        contentNode.runAction(actionTo);
        var twinkle = cc.find("twinkle", this.groupType);
        twinkle.active = true;
        cc.log("onGroupBtnClied event: ", scrollView.getContentPosition());
        this.showRecommendCard();
      }
    });
    cc._RF.pop();
  }, {} ],
  haerbin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d33cQ0uWZPt60L3sD7agU4", "haerbin");
    "use strict";
    var gameDefine = require("gameDefine");
    var TestConfig = {
      gameName: "若宇摸摸棋牌",
      areaType: gameDefine.AreaType.Area_HEB,
      serverIP: "mahjong.ry-play.com",
      serverPort: 3010,
      versionText: "",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/rymmqp",
      wxWelcomeText: "还等啥!我在摸摸棋牌等你!",
      loginLogo: "resources/login/momoqipailogo.png",
      Poster: [],
      GameVisible: [ gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Mj_Heb, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Poker_paodekuai ],
      SetCardsOpen: false,
      MatchGameType: [ gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Mj_Heb, gameDefine.GameType.Game_Poker_DDZ ],
      FightGameType: [],
      ModeType: {
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Point ]
        },
        Game_Mj_Heb: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Point ]
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Point ]
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Point ]
        }
      },
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e4 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          }
        },
        fight: {},
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          } ],
          6: [ {
            name: "6局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 10
              },
              4: {
                final: 20
              }
            },
            enter: {
              2: [ 100, 200, 500 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "12局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 20
              },
              4: {
                final: 30
              }
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "24局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 30
              },
              4: {
                final: 40
              }
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 40
              },
              4: {
                final: 50
              }
            },
            enter: {
              2: [ 200, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 50
              },
              4: {
                final: 60
              }
            },
            enter: {
              2: [ 300, 300, 6e4 ],
              4: [ 300, 500, 2e3 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 60
              },
              4: {
                final: 70
              }
            },
            enter: {
              2: [ 400, 400, 7e4 ],
              4: [ 400, 600, 3e3 ]
            }
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ],
          10: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              4: {
                final: 200
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 200
              },
              4: {
                final: 300
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 300
              },
              4: {
                final: 400
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 400
              },
              4: {
                final: 500
              }
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 500
              },
              4: {
                final: 600
              }
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 600
              },
              4: {
                final: 700
              }
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          13: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              4: {
                final: 200
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 200
              },
              4: {
                final: 300
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 300
              },
              4: {
                final: 400
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 400
              },
              4: {
                final: 500
              }
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 500
              },
              4: {
                final: 600
              }
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 600
              },
              4: {
                final: 700
              }
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ]
        },
        roomCard: {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 20
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 1
                },
                4: {
                  final: 1
                },
                5: {
                  final: 1
                },
                6: {
                  final: 1
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 2
                },
                4: {
                  final: 2
                },
                5: {
                  final: 2
                },
                6: {
                  final: 2
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 1
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 2
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 4
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 8
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 1
                },
                3: {
                  final: 1
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 1
                },
                3: {
                  final: 1
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 2
                }
              }
            }
          },
          13: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 1
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 1
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 2
                }
              }
            }
          }
        }
      }
    };
    module.exports = TestConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  headView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0f5fbVmJ8dLM6gzZzdu4YoJ", "headView");
    "use strict";
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        lostNode: cc.Node,
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.onRoomInfoHandler);
        registEvent("onGameInfo", this, this.onGameInfoHandler);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("dynChat", this, this.onDynChatHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.onRoomInfoHandler);
        unregistEvent("onGameInfo", this, this.onGameInfoHandler);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("dynChat", this, this.onDynChatHandler);
      },
      onEnable: function onEnable() {
        this.headers = [];
        this._curGameData = RoomHandler.getCurGameDataOnType();
        this.showPlayers();
        this.updatePlayerOnLine();
        this.updatePlayerZhuang();
        this.updatePlayerTurn();
        this.updatePlayerScore();
        this.addDynAnimation();
      },
      onRoomInfoHandler: function onRoomInfoHandler() {
        this.showPlayers();
        this.updatePlayerScore();
        this.updatePlayerOnLine();
      },
      onGameInfoHandler: function onGameInfoHandler() {
        this.updatePlayerZhuang();
        this.updatePlayerTurn();
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
      },
      showPlayer: function showPlayer(direction, parent) {
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = parent.getChildByName("playerNode");
          if (void 0 == playerNode) {
            playerNode = cc.instantiate(this.playerTemplate);
            playerNode.name = "playerNode";
            playerNode.parent = parent;
          }
          parent.active = true;
          var playerTemplate = playerNode.getComponent("playerTemplate");
          if (playerTemplate) {
            playerTemplate.setPlayer(player);
            playerTemplate.setName(player.name);
            playerTemplate.setHeadIcon(player.headimgurl);
            var onLine = RoomHandler.isPlayerOnline(player.uid);
            playerTemplate.setIsOnline(onLine);
          }
          this.headers.push(playerNode);
        } else parent.active = false;
      },
      updatePlayerOnLine: function updatePlayerOnLine() {
        var posList = [ "left", "right", "up", "down" ];
        for (var i = 0; i < posList.length; i++) {
          var pos = posList[i];
          var Player = GameData.getPlayerByPos(pos);
          Player && !RoomHandler.isPlayerOnline(Player.uid) ? this.showLostIcon(pos, false) : this.showLostIcon(pos, true);
        }
      },
      showLostIcon: function showLostIcon(direction, online) {
        var lostNode = cc.find(direction, this.lostNode);
        lostNode && (lostNode.active = !online);
      },
      updatePlayerZhuang: function updatePlayerZhuang() {
        if (void 0 == this._curGameData) return;
        var gameInfoData = this._curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode) {
            var playerTemplate = headerNode.getComponent("playerTemplate");
            var zhuangShow = gameInfoData.zhuangUid == playerTemplate.uid;
            playerTemplate.showZhuang(zhuangShow);
          }
        }
      },
      updatePlayerTurn: function updatePlayerTurn() {
        if (void 0 == this._curGameData) return;
        var gameInfoData = this._curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode) {
            var uid = headerNode.getComponent("playerTemplate").uid;
            var disNode = cc.find("liuguang", headerNode);
            disNode && (disNode.active = gameInfoData.turn == uid);
          }
        }
      },
      updatePlayerScore: function updatePlayerScore() {
        var scoreData = RoomHandler.getScoreData();
        if (void 0 == scoreData) return;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode) {
            var uid = headerNode.getComponent("playerTemplate").uid;
            var score = void 0 == scoreData[uid] ? 0 : scoreData[uid];
            headerNode.getComponent("playerTemplate").setCoin(score);
          }
        }
      },
      onDynChatHandler: function onDynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var content;
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              var chatBg = cc.find("word/bg", chatNode);
              var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
              if ("word" == type) {
                content = data.detail.msg.data;
                chatLabel.string = content;
                chatBg.width = 20 + 24 * content.length;
                wordNode.getComponent("HideComponent").show(3);
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                content = data.detail.msg.data.content;
                var contentStr = getShortStr(content, 20);
                chatLabel.string = contentStr;
                chatBg.width = 30 * contentStr.length;
                var playerSex = GameData.getPlayerSexByUid(uid);
                soundMngr.instance.playAudioChat(soundKey, playerSex);
                wordNode.getComponent("HideComponent").show(3);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  hebei: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91b90Bid/dBU6QR1VS10vqs", "hebei");
    "use strict";
    var gameDefine = require("gameDefine");
    var TestConfig = {
      gameName: "若宇摸摸棋牌",
      areaType: gameDefine.AreaType.Area_Hebei,
      serverIP: "mahjong.ry-play.com",
      serverPort: 3010,
      versionText: "",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/rymmqphb",
      wxWelcomeText: "还等啥!我在摸摸棋牌等你!",
      loginLogo: "resources/login/momoqipailogo.png",
      Poster: [],
      GameVisible: [ gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Poker_paodekuai, gameDefine.GameType.Game_Poker_DDZ ],
      SetCardsOpen: false,
      MatchGameType: [ gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Poker_DDZ ],
      FightGameType: [],
      ModeType: {
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e4 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          }
        },
        fight: {},
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              3: {
                final: 100
              },
              4: {
                final: 100
              }
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          } ],
          6: [ {
            name: "6局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 10
              },
              4: {
                final: 20
              }
            },
            enter: {
              2: [ 100, 200, 500 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "12局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 20
              },
              4: {
                final: 30
              }
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "24局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 30
              },
              4: {
                final: 40
              }
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 40
              },
              4: {
                final: 50
              }
            },
            enter: {
              2: [ 200, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 50
              },
              4: {
                final: 60
              }
            },
            enter: {
              2: [ 300, 300, 6e4 ],
              4: [ 300, 500, 2e3 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 60
              },
              4: {
                final: 70
              }
            },
            enter: {
              2: [ 400, 400, 7e4 ],
              4: [ 400, 600, 3e3 ]
            }
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ],
          10: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              4: {
                final: 200
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 200
              },
              4: {
                final: 300
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 300
              },
              4: {
                final: 400
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 400
              },
              4: {
                final: 500
              }
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 500
              },
              4: {
                final: 600
              }
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 600
              },
              4: {
                final: 700
              }
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          13: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 100
              },
              4: {
                final: 200
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 200
              },
              4: {
                final: 300
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 300
              },
              4: {
                final: 400
              }
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 400
              },
              4: {
                final: 500
              }
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 500
              },
              4: {
                final: 600
              }
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: {
                final: 600
              },
              4: {
                final: 700
              }
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: {
                final: 100
              }
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ]
        },
        roomCard: {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 20
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 1
                },
                4: {
                  final: 1
                },
                5: {
                  final: 1
                },
                6: {
                  final: 1
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 2
                },
                4: {
                  final: 2
                },
                5: {
                  final: 2
                },
                6: {
                  final: 2
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 1
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 2
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 4
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 8
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 1
                },
                3: {
                  final: 1
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 1
                },
                3: {
                  final: 1
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 2
                }
              }
            }
          },
          13: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 1
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 1
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 2
                }
              }
            }
          }
        }
      }
    };
    module.exports = TestConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  hhdz_bet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8652djMvtZK857SJOt7+6BN", "hhdz_bet");
    "use strict";
    var roomUtil = require("roomUtil");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    cc.Class({
      extends: cc.Component,
      properties: {
        _betId: void 0
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        this._betId = void 0;
      },
      setBetId: function setBetId(id) {
        if (void 0 == id) return;
        this._betId = id;
        this.loadBetImg();
      },
      setBetPosition: function setBetPosition(pos) {
        if (void 0 == pos) return;
        this.node.active = true;
        this.node.scale = .5;
        this.node.position = pos;
      },
      loadBetImg: function loadBetImg() {
        if (void 0 == this._betId) return;
        var textureUrl = hhdz_roomUtil.getBetImgUrl(this._betId);
        var texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (this.node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      runActionToTable: function runActionToTable(starPos, endPos) {
        if (void 0 == starPos || void 0 == endPos) return;
        this.node.active = true;
        this.node.scale = 1.1;
        this.node.position = starPos;
        var scale1 = cc.scaleTo(.5, .8);
        var scale2 = cc.scaleTo(1, .5);
        var move1 = cc.moveTo(.5, endPos);
        this.node.stopAllActions();
        this.node.runAction(cc.sequence(cc.spawn(scale1, move1), scale2));
      },
      runActionToPlayer: function runActionToPlayer(endPos) {
        if (void 0 == endPos) return;
        var self = this;
        var move = cc.moveTo(.5, endPos);
        var fun = cc.callFunc(function() {
          self.node.active = false;
        });
        this.node.stopAllActions();
        this.node.runAction(cc.sequence(move, fun));
      }
    });
    cc._RF.pop();
  }, {
    hhdz_roomUtil: "hhdz_roomUtil",
    roomUtil: "roomUtil"
  } ],
  hhdz_data: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38713mm/uxMAIlV173wLO7k", "hhdz_data");
    "use strict";
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    var room_hhdz = {
      tableInfo: {
        tablePlayer: [],
        winHistory: [],
        cardHistory: []
      },
      resultInfo: {
        card: {
          red: {},
          black: {},
          winner: void 0
        },
        winLoseInfo: []
      },
      time: 0,
      roomStatus: hhdz_roomUtil.GameStatus.WaitStart
    };
    module.exports = room_hhdz;
    room_hhdz.getTableInfoData = function() {
      return this.tableInfo;
    };
    room_hhdz.getStartPourTime = function() {
      return this.time;
    };
    room_hhdz.getResultInfoData = function() {
      return this.resultInfo;
    };
    room_hhdz.getRoomStatus = function() {
      return this.roomStatus;
    };
    room_hhdz.setPour = function(type, index) {
      GameNet.getInstance().request("room.redBlackWarHandler.setPour", {
        type: type,
        index: index
      }, function(rtn) {
        rtn.result == errorCode.Success && sendEvent("rbw-selfSetPour", {
          index: index
        });
      });
    };
    room_hhdz.registMessage_hhdz = function() {
      cc.log("....hhdz data registMessage.");
      var self = this;
      GameNet.getInstance().setCallBack("rbw-roomStatus", function(data) {
        self.roomStatus = data.status;
        sendEvent("rbw-roomStatus");
      });
      GameNet.getInstance().setCallBack("rbw-dealCard", function(data) {
        sendEvent("rbw-dealCard");
      });
      GameNet.getInstance().setCallBack("rbw-startPour", function(data) {
        self.time = data.time;
        sendEvent("rbw-startPour");
      });
      GameNet.getInstance().setCallBack("rbw-tableInfo", function(data) {
        self.tableInfo.tablePlayer = data.tablePlayer;
        self.tableInfo.winHistory = data.winHistory;
        self.tableInfo.cardHistory = data.cardHistory;
        sendEvent("rbw-tableInfo");
      });
      GameNet.getInstance().setCallBack("rbw-result", function(data) {
        self.resultInfo.card.red = data.card.red;
        self.resultInfo.card.black = data.card.black;
        self.resultInfo.card.winner = data.card.winner;
        self.resultInfo.winLoseInfo = data.winLoseInfo;
        self.resultInfo.self = data.self;
        sendEvent("rbw-result");
      });
      GameNet.getInstance().setCallBack("rbw-onSetPour", function(data) {
        sendEvent("rbw-onSetPour", data);
      });
    };
    room_hhdz.checkPlayerSame = function() {
      var tablePlayer = this.tableInfo.tablePlayer;
      if (void 0 == tablePlayer || tablePlayer.length <= 0) return false;
      var same = false;
      var oneUId = void 0, twoUId = void 0;
      tablePlayer[0] && (oneUId = tablePlayer[0].uid);
      tablePlayer[1] && (twoUId = tablePlayer[1].uid);
      oneUId == twoUId ? same = true : null;
      return same;
    };
    room_hhdz.arrayChangeObject = function(data) {
      var object = {};
      for (var ii = 0; ii < data.length; ii++) {
        var cardId = data[ii];
        var cardNum = room_hz.getArrayElementNumber(data, cardId);
        object[cardId] = cardNum;
      }
      return object;
    };
    room_hhdz.getArrayElementNumber = function(array, element) {
      var num = 0;
      if (void 0 == array) return num;
      for (var ii = 0; ii < array.length; ii++) array[ii] == element && num++;
      return num;
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    hhdz_roomUtil: "hhdz_roomUtil"
  } ],
  hhdz_head: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3398kfPJhFTo96t7pBJNxv", "hhdz_head");
    "use strict";
    var roomUtil = require("roomUtil");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    cc.Class({
      extends: cc.Component,
      properties: {
        iconNode: cc.Sprite,
        nameNode: cc.Label,
        coinNode: cc.Label,
        _player: void 0,
        _initPos: void 0
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        this._initPos = this.node.position;
        this.updateHeadInfo();
      },
      setPlayerData: function setPlayerData(data) {
        if (void 0 == data) return;
        this._player = data;
        this.updateHeadInfo();
      },
      setPlayerIcon: function setPlayerIcon(headimgurl) {
        if (void 0 == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.iconNode = new cc.SpriteFrame(texture));
        });
      },
      setPlayerName: function setPlayerName(str) {
        void 0 === str ? str = "" : null;
        this.nameNode.string = getShortStr(str, 4);
      },
      setPlayerCoin: function setPlayerCoin(value) {
        void 0 === value ? value = 0 : null;
        this.coinNode.string = value;
      },
      updateHeadInfo: function updateHeadInfo() {
        if (void 0 == this._player) return;
        cc.log("..updateHeadInfo.");
        this.setPlayerIcon(this._player.headimgurl);
        this.setPlayerName(this._player.name);
        this.setPlayerCoin(this._player.coin);
      },
      runAddJetonAction: function runAddJetonAction() {
        this.node.position = this._initPos;
        var move1 = cc.moveTo(.2, cc.p(this._initPos.x + 20, this._initPos.y));
        var move2 = cc.moveTo(.2, this._initPos);
        this.node.stopAllActions();
        this.node.runAction(cc.sequence(move1, move2));
      },
      onHeadBtnClick: function onHeadBtnClick(event) {
        cc.log("..onHeadBtnClick:" + this._player.uid);
      }
    });
    cc._RF.pop();
  }, {
    hhdz_roomUtil: "hhdz_roomUtil",
    roomUtil: "roomUtil"
  } ],
  hhdz_roomHead: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32b418e2DZFh7qWcYlT67OB", "hhdz_roomHead");
    "use strict";
    var roomUtil = require("roomUtil");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    var hhdz_data = require("hhdz_data");
    cc.Class({
      extends: cc.Component,
      properties: {
        HeadLayer: cc.Node,
        UIHead: cc.Prefab,
        _headArray: []
      },
      onLoad: function onLoad() {
        registEvent("rbw-tableInfo", this, this.onTableInfoHandler);
        registEvent("rbw-onSetPour", this, this.onOnSetPourHandler);
        registEvent("rbw-selfSetPour", this, this.onSelfSetPourHandler);
        registEvent("rbw-result", this, this.onResultHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("rbw-tableInfo", this, this.onTableInfoHandler);
        unregistEvent("rbw-onSetPour", this, this.onOnSetPourHandler);
        unregistEvent("rbw-selfSetPour", this, this.onSelfSetPourHandler);
        unregistEvent("rbw-result", this, this.onResultHandler);
      },
      onEnable: function onEnable() {
        this._headArray = [];
        this.updateSelfHead();
        this.updatePlayersHead();
      },
      onTableInfoHandler: function onTableInfoHandler() {
        this.updatePlayersHead();
      },
      onOnSetPourHandler: function onOnSetPourHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        this.tablePlayerChangeCoin(data.detail);
      },
      onSelfSetPourHandler: function onSelfSetPourHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        this.SelfHeadChangeCoin(data.detail.index);
      },
      onResultHandler: function onResultHandler() {
        var resultInfoData = hhdz_data.getResultInfoData();
        if (void 0 == resultInfoData) return;
        if (void 0 == resultInfoData.self) return;
        GameData.player.coin += resultInfoData.self;
        GameData.player.coin < 0 ? GameData.player.coin = 0 : null;
        this.updateSelfHead();
      },
      tablePlayerChangeCoin: function tablePlayerChangeCoin(data) {
        if (void 0 == data) return;
        for (var i = 0; i < this._headArray.length; i++) {
          var headNode = this._headArray[i];
          if (void 0 == headNode) continue;
          var template = headNode.getComponent("hhdz_head");
          if (void 0 == template) continue;
          if (void 0 == template._player) continue;
          if (template._player.uid != data.uid) continue;
          template._player.coin -= hhdz_roomUtil.getBetValue(data.index);
          template._player.coin < 0 ? template._player.coin = 0 : null;
          template.setPlayerCoin(template._player.coin);
        }
      },
      SelfHeadChangeCoin: function SelfHeadChangeCoin(index) {
        if (void 0 == index) return;
        var parent = cc.find("headNode_self", this.HeadLayer);
        if (void 0 == parent) return;
        var headNode = parent.getChildByName("uiHead");
        if (void 0 == headNode) return;
        var template = headNode.getComponent("hhdz_head");
        if (void 0 == template) return;
        GameData.player.coin -= hhdz_roomUtil.getBetValue(index);
        GameData.player.coin < 0 ? GameData.player.coin = 0 : null;
        this.updateSelfHead();
      },
      updateSelfHead: function updateSelfHead() {
        var parent = cc.find("headNode_self", this.HeadLayer);
        if (void 0 == parent) return;
        var headNode = parent.getChildByName("uiHead");
        if (void 0 == headNode) {
          headNode = cc.instantiate(this.UIHead);
          headNode.parent = parent;
          headNode.name = "uiHead";
        }
        var template = headNode.getComponent("hhdz_head");
        template && template.setPlayerData(GameData.player);
      },
      updatePlayersHead: function updatePlayersHead() {
        this._headArray = [];
        var tableInfoData = hhdz_data.getTableInfoData();
        if (void 0 == tableInfoData) return;
        var tablePlayer = tableInfoData.tablePlayer;
        if (void 0 == tablePlayer || tablePlayer.length <= 0) return;
        var show = false;
        for (var i = 0; i < tablePlayer.length; i++) {
          var parent = cc.find("headNode_" + i, this.HeadLayer);
          if (void 0 == parent) continue;
          show = false;
          var playerData = tablePlayer[i];
          if (playerData) {
            var headNode = parent.getChildByName("uiHead");
            if (void 0 == headNode) {
              headNode = cc.instantiate(this.UIHead);
              headNode.parent = parent;
              headNode.name = "uiHead";
            }
            var template = headNode.getComponent("hhdz_head");
            template && template.setPlayerData(playerData);
            show = true;
            this._headArray.push(headNode);
          }
          parent.active = show;
        }
      },
      getHeadPositionByUId: function getHeadPositionByUId(uid) {
        for (var i = 0; i < this._headArray.length; i++) {
          var headNode = this._headArray[i];
          if (void 0 == headNode) continue;
          var template = headNode.getComponent("hhdz_head");
          if (void 0 == template) continue;
          if (void 0 == template._player) continue;
          if (template._player.uid != uid) continue;
          return headNode.parent.position;
        }
        return null;
      },
      getSelfHeadPosition: function getSelfHeadPosition() {
        var parent = cc.find("headNode_self", this.HeadLayer);
        if (parent) return parent.position;
        return null;
      }
    });
    cc._RF.pop();
  }, {
    hhdz_data: "hhdz_data",
    hhdz_roomUtil: "hhdz_roomUtil",
    roomUtil: "roomUtil"
  } ],
  hhdz_roomMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38552xu9QdOYrDLr0yoBKDf", "hhdz_roomMain");
    "use strict";
    var stateMachine = require("stateMachine");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    var hhdz_data = require("hhdz_data");
    cc.Class({
      extends: stateMachine,
      properties: {},
      onLoad: function onLoad() {
        registEvent("rbw-roomStatus", this, this.setRoomStatus);
      },
      onDestroy: function onDestroy() {
        unregistEvent("rbw-roomStatus", this, this.setRoomStatus);
      },
      onEnable: function onEnable() {},
      setRoomStatus: function setRoomStatus() {
        var roomStatus = hhdz_data.getRoomStatus();
        if (void 0 == roomStatus) return;
      }
    });
    cc._RF.pop();
  }, {
    hhdz_data: "hhdz_data",
    hhdz_roomUtil: "hhdz_roomUtil",
    stateMachine: "stateMachine"
  } ],
  hhdz_roomUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "633f5ZMFTlFTaNJPtkDUUI4", "hhdz_roomUtil");
    "use strict";
    var hhdz_roomUtil = {
      AllCards: [ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414 ],
      CardType: {
        Common: 0,
        DuiZi: 1,
        ShunZi: 2,
        JinHua: 3,
        ShunJin: 4,
        BaoZi: 5
      },
      GameStatus: {
        WaitStart: 0,
        SendCard: 1,
        StartPour: 2,
        ShowCard: 3
      },
      Pour: [ 100, 500, 1e3, 2e3, 5e3 ],
      WaitTime: 15e3,
      StepTime: 2e3,
      WinTimes: {
        RedBlackTimes: 1.9,
        BaoZiTimes: 10,
        ShunJinTimes: 5,
        JinHuaTimes: 3,
        ShunZiTimes: 2,
        DuiZi9Times: 1
      },
      WinnerType: {
        Red: 0,
        Black: 1
      }
    };
    module.exports = hhdz_roomUtil;
    hhdz_roomUtil.getPokerImgUrl = function(pokerId) {
      if (void 0 == pokerId) return null;
      return "resources/hhdz/table/pokers/poker_" + pokerId + ".png";
    };
    hhdz_roomUtil.getWinnerFlagImg = function(winner) {
      switch (winner) {
       case this.WinnerType.Red:
        return "resources/hhdz/table/runChart/red.png";

       case this.WinnerType.Black:
        return "resources/hhdz/table/runChart/black.png";

       default:
        return null;
      }
    };
    hhdz_roomUtil.getBetImgUrl = function(lv) {
      var value = this.getBetValue(lv);
      return "resources/hhdz/table/" + value + ".png";
    };
    hhdz_roomUtil.getBetValue = function(lv) {
      var value = this.Pour[lv];
      void 0 === value ? value = this.Pour[0] : null;
      return value;
    };
    hhdz_roomUtil.getFakeJetonData = function() {
      var array = [];
      for (var i = 0; i < 3; i++) {
        var data = [];
        var sum = 10;
        for (var j = 0; j < this.Pour.length; j++) {
          if (sum <= 0) break;
          var number = getRandomInt(1, sum);
          number > sum ? number = sum : null;
          sum -= number;
          var temp = {};
          temp.lv = j;
          temp.number = number;
          data.push(temp);
        }
        array.push(data);
      }
      return array;
    };
    hhdz_roomUtil.getOnLineFakeAddJetonData = function() {
      var obj = {};
      var time = getRandomInt(500, 1500);
      var number = getRandomInt(1, 5);
      var data = [];
      for (var i = 0; i < number; i++) {
        var lv = getRandomInt(0, 4);
        var type = getRandomInt(0, 2);
        data.push(lv);
        data.push(type);
      }
      obj.time = time;
      obj.data = data;
      return obj;
    };
    cc._RF.pop();
  }, {} ],
  hhdz_runChart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d090e8YjiJHarwzoKoNH/w4", "hhdz_runChart");
    "use strict";
    var roomUtil = require("roomUtil");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    var hhdz_data = require("hhdz_data");
    cc.Class({
      extends: cc.Component,
      properties: {
        scrollView: cc.ScrollView,
        item: cc.Node,
        _historyData: void 0
      },
      onLoad: function onLoad() {
        registEvent("rbw-tableInfo", this, this.onTableInfoHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("rbw-tableInfo", this, this.onTableInfoHandler);
      },
      onEnable: function onEnable() {
        this.setHistoryData();
      },
      onTableInfoHandler: function onTableInfoHandler() {
        this.setHistoryData();
      },
      setHistoryData: function setHistoryData() {
        var tableData = hhdz_data.getTableInfoData();
        if (void 0 == tableData) return;
        if (void 0 == tableData.winHistory) return;
        this._historyData = tableData.winHistory;
        this.updateRunChart();
      },
      loadItemImg: function loadItemImg(node, winner) {
        if (void 0 == node || void 0 == winner) return;
        var textureUrl = hhdz_roomUtil.getWinnerFlagImg(winner);
        if (null == textureUrl) return;
        var texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      updateRunChart: function updateRunChart() {
        if (void 0 == this._historyData) return;
        var content = this.scrollView.content;
        for (var k = 0; k < content.getChildrenCount(); k++) {
          var child = content.getChildren()[k];
          child && (child.active = false);
        }
        var itemW = 40;
        var sumLine = parseInt(this._historyData.length / 6);
        this._historyData.length % 6 > 0 ? sumLine++ : null;
        var width = itemW * sumLine;
        width < 800 ? width = 500 : null;
        content.width = width;
        var last = void 0;
        var number = 0;
        var line = 0;
        var index = 0;
        for (var i = this._historyData.length; i >= 0; i--) {
          var winner = this._historyData[i];
          if (void 0 == winner || isNaN(winner)) continue;
          var node = content.getChildren()[index];
          if (void 0 == node) {
            node = cc.instantiate(this.item);
            node.parent = content;
          }
          node.active = true;
          cc.log("------------");
          cc.log("..last:" + last);
          if (void 0 != last && (last != winner || number >= 6)) {
            number = 0;
            line++;
          }
          last = winner;
          node.x = this.item.x + itemW * line;
          node.y = this.item.y + itemW * number;
          cc.log("..winner:" + winner);
          cc.log("..line:" + line);
          cc.log("..number:" + number);
          number++;
          index++;
          if (parseInt(node.name) == winner) continue;
          node.name = winner.toString();
          this.loadItemImg(node, winner);
        }
      },
      onClose: function onClose() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    hhdz_data: "hhdz_data",
    hhdz_roomUtil: "hhdz_roomUtil",
    roomUtil: "roomUtil"
  } ],
  hhdz_table: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "efa2bcXO5NFCbXZKbNWJsyH", "hhdz_table");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    var hhdz_roomUtil = require("hhdz_roomUtil");
    var hhdz_data = require("hhdz_data");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        BetLayer: cc.Node,
        JetonLayer: cc.Node,
        PokerLayer: cc.Node,
        CountDownLayer: cc.Node,
        CountDownLabel: cc.Label,
        winnerStrNode: cc.Node,
        OnLineNode: cc.Node,
        UIBet: cc.Prefab,
        _selectBetId: void 0,
        _jetonMax: void 0,
        _jetonPond: [],
        _jetonIndex: 0,
        _jetonValueArray: [],
        _countDown: 0
      },
      onLoad: function onLoad() {
        registEvent("rbw-dealCard", this, this.onDealCardHandler);
        registEvent("rbw-startPour", this, this.onStartPourHandler);
        registEvent("rbw-onSetPour", this, this.onOnSetPourHandler);
        registEvent("rbw-result", this, this.onResultHandler);
      },
      onDestroy: function onDestroy() {
        unregistEvent("rbw-dealCard", this, this.onDealCardHandler);
        unregistEvent("rbw-startPour", this, this.onStartPourHandler);
        unregistEvent("rbw-onSetPour", this, this.onOnSetPourHandler);
        unregistEvent("rbw-result", this, this.onResultHandler);
      },
      onEnable: function onEnable() {
        this._selectBetId = void 0;
        this._jetonMax = 100;
        this._jetonPond = [];
        this._jetonIndex = 0;
        this._jetonValueArray = [];
        this.initUIShow();
        this.updateTableJetonValue();
        this.addFakeJetonToTable();
      },
      initUIShow: function initUIShow() {
        this.CountDownLayer.active = false;
        this.winnerStrNode.active = false;
        this.setAddJetonInteractable(false);
        this.initUIPokerBack();
      },
      onDealCardHandler: function onDealCardHandler() {
        this.winnerStrNode.active = false;
        this.initUIPokerBack();
      },
      onStartPourHandler: function onStartPourHandler() {
        this.handleStartPourTimer();
      },
      onOnSetPourHandler: function onOnSetPourHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        this.tablePlayerAddJeton(data.detail);
      },
      onResultHandler: function onResultHandler() {
        var resultInfoData = hhdz_data.getResultInfoData();
        if (void 0 == resultInfoData) return;
        var cardData = resultInfoData.card;
        if (void 0 == cardData) return;
        var self = this;
        function runFunc() {
          return new Promise(function(resolve, reject) {
            self.openPoker("red");
            var time = self.openPoker("black");
            cc.log("..openPokerTime:" + time);
            resolve(time);
          });
        }
        function runFunc1(time) {
          return new Promise(function(resolve, reject) {
            setTimeout(function() {
              var time = self.runWinnerAction(cardData.winner);
              resolve(time);
            }, 1e3 * time);
          });
        }
        function runFunc2(time) {
          return new Promise(function(resolve, reject) {
            setTimeout(function() {
              self.takeBackJetonNode();
            }, 1e3 * time);
          });
        }
        runFunc().then(function(data) {
          return runFunc1(data);
        }).then(function(data) {
          return runFunc2(data);
        }).then(function() {});
      },
      initUIPokerBack: function initUIPokerBack() {
        for (var i = 0; i < 3; i++) {
          var redPokerNode = cc.find("red/poker_" + i, this.PokerLayer);
          redPokerNode && this.loadPokerImg(redPokerNode, "back");
          var blackPokerNode = cc.find("black/poker_" + i, this.PokerLayer);
          blackPokerNode && this.loadPokerImg(blackPokerNode, "back");
        }
      },
      handleStartPourTimer: function handleStartPourTimer() {
        var time = hhdz_data.getStartPourTime();
        if (void 0 == time || time <= 0) return;
        this._countDown = parseInt(time / 1e3);
        this.setAddJetonInteractable(true);
        this.schedule(this.updateLastTime, 1);
        var self = this;
        setTimeout(function() {
          self.onLineFakeAddJeton();
        }, 2e3);
      },
      updateLastTime: function updateLastTime() {
        if (void 0 == this._countDown || this._countDown <= 0) {
          this.CountDownLayer.active = false;
          this.setAddJetonInteractable(false);
          this.unschedule(this.updateLastTime);
          return;
        }
        this.CountDownLabel.string = this._countDown--;
        this.CountDownLayer.active = true;
      },
      updateTableJetonValue: function updateTableJetonValue() {
        for (var i = 0; i < 3; i++) {
          var valueNode = cc.find("value_" + i, this.JetonLayer);
          if (valueNode) {
            void 0 === this._jetonValueArray[i] ? this._jetonValueArray[i] = 0 : null;
            valueNode.getComponent(cc.Label).string = this._jetonValueArray[i];
          }
        }
      },
      addFakeJetonToTable: function addFakeJetonToTable() {
        var fakeArray = hhdz_roomUtil.getFakeJetonData();
        cc.log("..fake:" + JSON.stringify(fakeArray));
        if (void 0 == fakeArray) return;
        for (var i = 0; i < fakeArray.length; i++) {
          var data = fakeArray[i];
          if (null == data) continue;
          var jetonNode = cc.find("region_" + i, this.JetonLayer);
          if (void 0 == jetonNode) return;
          for (var j = 0; j < data.length; j++) {
            var temp = data[j];
            if (void 0 == temp) continue;
            for (var k = 0; k < temp.number; k++) this.addJetonNode(temp.lv, i, void 0);
          }
        }
      },
      tablePlayerAddJeton: function tablePlayerAddJeton(data) {
        var template = this.node.getComponent("hhdz_roomHead");
        if (void 0 == template) return;
        var headArray = template._headArray;
        if (void 0 == headArray) return;
        for (var i = 0; i < headArray.length; i++) {
          if (1 == i && hhdz_data.checkPlayerSame()) continue;
          var headNode = headArray[i];
          if (void 0 == headArray) continue;
          var headTemplate = headNode.getComponent("hhdz_head");
          if (void 0 == headTemplate) continue;
          var playerData = headTemplate._player;
          if (void 0 == playerData) continue;
          if (playerData.uid != data.uid) continue;
          headTemplate.runAddJetonAction();
          this.addJetonNode(data.index, data.type, headNode.parent.position);
        }
      },
      setBetsScale: function setBetsScale() {
        for (var i = 0; i < 5; i++) {
          var betNode = cc.find("bet_" + i, this.BetLayer);
          if (betNode) {
            if (i == this._selectBetId) {
              betNode.scale = 1.1;
              continue;
            }
            betNode.scale = 1;
          }
        }
      },
      setAddJetonInteractable: function setAddJetonInteractable(interactable) {
        for (var i = 0; i < 5; i++) {
          var betNode = cc.find("bet_" + i, this.BetLayer);
          if (betNode) {
            betNode.scale = 1;
            betNode.getComponent(cc.Button).interactable = interactable;
          }
        }
        this._selectBetId = void 0;
        for (var j = 0; j < 3; j++) {
          var jetonNode = cc.find("region_" + j, this.JetonLayer);
          jetonNode && (jetonNode.getComponent(cc.Button).interactable = interactable);
        }
      },
      addJetonNode: function addJetonNode(lv, index, starPos) {
        if (void 0 == lv || void 0 == index) return;
        var jetonNode = cc.find("region_" + index, this.JetonLayer);
        if (void 0 == jetonNode) return;
        this._jetonIndex > this._jetonMax ? this._jetonIndex = 0 : null;
        var node = this._jetonPond[this._jetonIndex];
        if (void 0 == node) {
          cc.log("..create uiBet.");
          node = cc.instantiate(this.UIBet);
          node.parent = this.JetonLayer;
          this._jetonPond.push(node);
        }
        this._jetonIndex++;
        var template = node.getComponent("hhdz_bet");
        if (void 0 == template) return;
        template.setBetId(lv);
        this.addJetonValue(lv, index);
        var x = getRandomInt(jetonNode.position.x - jetonNode.width / 2, jetonNode.position.x + jetonNode.width / 2);
        var y = getRandomInt(jetonNode.position.y - jetonNode.height / 2, jetonNode.position.y + jetonNode.height / 2);
        var endPos = {
          x: x,
          y: y
        };
        starPos ? template.runActionToTable(starPos, endPos) : template.setBetPosition(endPos);
      },
      JetonRunMove: function JetonRunMove(index, number, endPos) {
        if (void 0 == index || void 0 == number || void 0 == endPos) return;
        for (var i = index; i < index + number; i++) {
          var node = this._jetonPond[i];
          if (node) {
            var template = node.getComponent("hhdz_bet");
            template && template.runActionToPlayer(endPos);
          }
        }
      },
      takeBackJetonNode: function takeBackJetonNode() {
        var template = this.node.getComponent("hhdz_roomHead");
        if (void 0 == template) return;
        var resultData = hhdz_data.getResultInfoData();
        if (void 0 == resultData) return;
        var winLoseData = resultData.winLoseInfo;
        if (void 0 == winLoseData) return;
        void 0 === this._jetonPond ? this._jetonPond = [] : null;
        var posData = [];
        for (var i = 0; i < winLoseData.length; i++) {
          var data = winLoseData[i];
          if (void 0 == data) continue;
          if (parseInt(data.score) > 0) {
            var pos = template.getHeadPositionByUId(data.uid);
            if (null == pos) continue;
            posData.push(pos);
          }
        }
        if (resultData.self && resultData.self > 0) {
          var selfPos = template.getSelfHeadPosition();
          selfPos && posData.push(selfPos);
        }
        posData.push(this.OnLineNode.position);
        var jetonNum = this._jetonPond.length;
        var number = parseInt(jetonNum / posData.length);
        var index = 0;
        for (var j = 0; j < posData.length; j++) {
          j == posData.length - 1 && (number = jetonNum);
          this.JetonRunMove(index, number, posData[j]);
          jetonNum -= number;
          index += number;
        }
        this._jetonIndex = 0;
        this._jetonValueArray = [];
        this.updateTableJetonValue();
      },
      addJetonValue: function addJetonValue(lv, index) {
        if (void 0 == lv || void 0 == index) return;
        this._jetonValueArray[index] < 0 ? this._jetonValueArray[index] = 0 : null;
        this._jetonValueArray[index] += hhdz_roomUtil.getBetValue(lv);
        this.updateTableJetonValue();
      },
      loadPokerImg: function loadPokerImg(node, pokerId) {
        if (void 0 == node || void 0 == pokerId) return;
        var textureUrl = hhdz_roomUtil.getPokerImgUrl(pokerId);
        if (null == textureUrl) return;
        var texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      pokerRunFlipAndLoadImg: function pokerRunFlipAndLoadImg(node, pokerId) {
        var self = this;
        var time = .6;
        var scale1 = cc.scaleTo(time / 2, 0, 1);
        var scale2 = cc.scaleTo(time / 2, 1, 1);
        var fun = cc.callFunc(function() {
          self.loadPokerImg(node, pokerId);
        });
        node.stopAllActions();
        node.runAction(cc.sequence(scale1, fun, scale2));
        return time;
      },
      runWinnerAction: function runWinnerAction(winner) {
        var dirStr = null;
        switch (winner) {
         case hhdz_roomUtil.WinnerType.Red:
          dirStr = "红方";
          break;

         case hhdz_roomUtil.WinnerType.Black:
          dirStr = "黑方";
        }
        if (null == dirStr) return;
        this.winnerStrNode.getComponent(cc.Label).string = dirStr;
        this.winnerStrNode.active = true;
        this.winnerStrNode.opacity = 0;
        var time = 1.5;
        var fade1 = cc.fadeIn(time / 3);
        var delay = cc.delayTime(time / 3);
        this.winnerStrNode.stopAllActions();
        this.winnerStrNode.runAction(cc.sequence(fade1, delay));
        return time;
      },
      openPoker: function openPoker(direction) {
        var resultInfoData = hhdz_data.getResultInfoData();
        if (void 0 == resultInfoData) return;
        var cardData = resultInfoData.card;
        if (void 0 == cardData) return;
        var data = cardData[direction];
        if (void 0 == data) return;
        void 0 == data.card ? data.card = [] : null;
        var self = this;
        function runFunc(direction, index, time) {
          void 0 === time ? time = 0 : null;
          return new Promise(function(resolve, reject) {
            setTimeout(function() {
              cc.log("..success runFunc.");
              var temp = {};
              var pokerNode = cc.find(direction + "/poker_" + index, self.PokerLayer);
              if (pokerNode) {
                temp.time = self.pokerRunFlipAndLoadImg(pokerNode, data.card[index]);
                temp.index = ++index;
                resolve(temp);
              } else {
                temp.time = 0;
                temp.index = ++index;
                reject(temp);
              }
            }, 1e3 * time);
          });
        }
        var time = 0;
        runFunc(direction, 0, 0).then(function(data) {
          cc.log("..data.1:" + JSON.stringify(data));
          time += data.time;
          return runFunc(direction, data.index, data.time);
        }).then(function(data) {
          cc.log("..data.2:" + JSON.stringify(data));
          time += data.time;
          return runFunc(direction, data.index, data.time);
        }).then(function(data) {
          time += data.time;
          cc.log("..return:" + time);
          return time;
        });
      },
      onLineFakeAddJeton: function onLineFakeAddJeton() {
        if (void 0 == this._countDown || this._countDown <= 1) return;
        var fakeData = hhdz_roomUtil.getOnLineFakeAddJetonData();
        if (void 0 == fakeData) return;
        void 0 === fakeData.data ? fakeData.data = [] : null;
        var self = this;
        for (var i = 0; i < fakeData.data.length; ) {
          this.addJetonNode(fakeData.data[i], fakeData.data[i + 1], this.OnLineNode.position);
          i += 2;
        }
        fakeData.time < 1 ? fakeData.time = 1 : null;
        setTimeout(function() {
          self.onLineFakeAddJeton();
        }, parseInt(fakeData.time));
      },
      onBetBtnClick: function onBetBtnClick(event, data) {
        soundMngr.instance.playAudioOther("button");
        if (void 0 == data) return;
        if (data == this._selectBetId) return;
        this._selectBetId = data;
        this.setBetsScale();
      },
      onJetonBtnClick: function onJetonBtnClick(event, data) {
        soundMngr.instance.playAudioOther("button");
        if (void 0 == data) return;
        if (void 0 == this._selectBetId) return;
        var jetonNode = cc.find("region_" + data, this.JetonLayer);
        if (void 0 == jetonNode) return;
        var betNode = cc.find("bet_" + this._selectBetId, this.BetLayer);
        if (void 0 == betNode) return;
        var coin = hhdz_roomUtil.getBetValue(this._selectBetId);
        if (void 0 == coin || GameData.player.coin < coin) {
          createMoveMessage("金币不足！");
          return;
        }
        var starPos = betNode.position;
        this.addJetonNode(this._selectBetId, data, starPos);
        hhdz_data.setPour(data, this._selectBetId);
      },
      onLeaveBtnClick: function onLeaveBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
      },
      onSetingBtnClick: function onSetingBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
        openView("SettingsPanel");
      },
      onRunChartBtnClick: function onRunChartBtnClick(event) {
        soundMngr.instance.playAudioOther("button");
        openView("hhdz-runChart", gameDefine.GameType.Game_Poker_HHDZ, null);
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    hhdz_data: "hhdz_data",
    hhdz_roomUtil: "hhdz_roomUtil",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  home: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b0a0dOmglLsoM0+9JDMOm7", "home");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var competitionHandler = require("competitionHandler");
    var missionHandler = require("missionHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        head_node: cc.Node,
        head_name: cc.Label,
        head_identify_num: cc.Label,
        head_gold_num: cc.Label,
        roomcard_num: cc.Label,
        curSelectUI: cc.Node,
        shopBtn: cc.Node,
        taskBtn: cc.Node,
        agentBtn: cc.Node,
        recordBtn: cc.Node,
        serviceBtn: cc.Node,
        settingBtn: cc.Node,
        explainBtn: cc.Node,
        moreBtn: cc.Node,
        moreBase: cc.Node,
        groupToggle: cc.Toggle,
        matchToggle: cc.Toggle,
        competitionToggle: cc.Toggle,
        paoMadengLabel: cc.Label,
        _paoMadengX: 0,
        playerTemplate: cc.Prefab,
        UIGroup: cc.Prefab,
        UIMatch: cc.Prefab,
        UICompetition: cc.Prefab
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("ddz-onGameStart", this, this.showDDZTableLayer);
        registEvent("tjddz-onGameStart", this, this.showTJDDZTableLayer);
        registEvent("pdk-onGameStart", this, this.showPDKTableLayer);
        registEvent("openScore", this, this.showTableLayer);
        registEvent("onPlayerUpdate", this, this.roomcardRefresh);
        registEvent("refreshActivityRedPoint", this, this.refreshActivityRedPoint);
        registEvent("onServerNotice", this, handlerServerNotice);
        registEvent("onMatchData", this, this.onMatchHandler);
        registEvent("OnPasteboardChanged", this, this.OnPasteboardChanged);
        registEvent("playerMissionData", this, this.onPlayerMissionHandler);
        cc.game.addPersistRootNode(cc.find("lampNode"));
        this.curSelectType = gameDefine.CurSelectType.group;
        var typeData = cc.sys.localStorage.getItem("homeCurSelectType");
        typeData && (this.curSelectType = JSON.parse(typeData).type);
        this.refreshCurrentOpenPrefab(this.curSelectType);
        this.runPaoMadeng();
        this.refreshPlayerInfo();
        this.refreshNoticeShow();
        this.openPosterView();
        this.onMatchHandler();
        ReplayDataCenter.openRoundPanel && openView("RecordPanel");
        ReplayDataCenter.openReplayPanel && openView("RoundPanel");
        this.OnPasteboardChanged();
      },
      onEnable: function onEnable() {
        soundMngr.instance.playMusic("sound/wait");
        this.refreshAgentRoomBtn();
        GameData.player.agentFlag || sendEvent("refreshActivityRedPoint");
        this.onPlayerMissionHandler();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("ddz-onGameStart", this, this.showDDZTableLayer);
        unregistEvent("tjddz-onGameStart", this, this.showTJDDZTableLayer);
        unregistEvent("pdk-onGameStart", this, this.showPDKTableLayer);
        unregistEvent("openScore", this, this.showTableLayer);
        unregistEvent("onPlayerUpdate", this, this.roomcardRefresh);
        unregistEvent("refreshActivityRedPoint", this, this.refreshActivityRedPoint);
        unregistEvent("onServerNotice", this, handlerServerNotice);
        unregistEvent("onMatchData", this, this.onMatchHandler);
        unregistEvent("OnPasteboardChanged", this, this.OnPasteboardChanged);
        unregistEvent("playerMissionData", this, this.onPlayerMissionHandler);
      },
      showTableLayer: function showTableLayer() {
        cc.director.loadScene("table");
      },
      showDDZTableLayer: function showDDZTableLayer() {},
      showTJDDZTableLayer: function showTJDDZTableLayer() {
        cc.director.loadScene("table-TJDDZ");
      },
      showPDKTableLayer: function showPDKTableLayer() {
        cc.director.loadScene("table-PDK");
      },
      refreshPlayerInfo: function refreshPlayerInfo() {
        isChinese(GameData.player.name) ? this.head_name.string = getShortStr(GameData.player.name, 5) : this.head_name.string = getShortStr(GameData.player.name, 10);
        var headNode = cc.instantiate(this.playerTemplate);
        headNode.getComponent("playerTemplate").setPlayer(GameData.player);
        headNode.getComponent("playerTemplate").setName("");
        headNode.getComponent("playerTemplate").showZhuang(false);
        headNode.getComponent("playerTemplate").setHeadIcon(GameData.player.headimgurl);
        this.head_node.addChild(headNode);
        this.head_identify_num.string = GameData.player.uid;
        this.roomcardRefresh();
      },
      roomcardRefresh: function roomcardRefresh() {
        this.roomcard_num.string = GameData.player.card;
        null == GameData.player.coin && void 0 == GameData.player.coin || (this.head_gold_num.string = ConversionCoinValue(GameData.player.coin, 0));
      },
      refreshNoticeShow: function refreshNoticeShow() {
        if (GameData.serverNoticeData && GameData.serverNoticeData.length > 0) {
          var nowTime = new Date().valueOf();
          var lastTime = GameData.serverNoticeData[0].lastTime;
          if (false == ComparingDate(nowTime, lastTime)) {
            GameData.isRoomRunlampt || openView("RunlampPanel");
            this.schedule(lampHandler, 1);
            GameData.isRoomRunlampt = true;
          }
        }
        if (GameData.serverNoticeData && GameData.serverNoticeData.length > 1) {
          var nowTime = new Date().valueOf();
          var lastTime = GameData.serverNoticeData[0].lastTime;
          if (false == ComparingDate(nowTime, lastTime)) {
            if (!GameData.isRoomRunlampt) {
              var seq = cc.sequence(cc.delayTime(15), cc.callFunc(function() {
                openView("RunlampPanel1");
              }));
              this.node.runAction(seq);
            }
            this.schedule(lampHandler1, 1);
            GameData.isRoomRunlampt1 = true;
          }
        }
      },
      fangkaAddCBack: function fangkaAddCBack(evt) {
        soundMngr.instance.playAudioOther("button");
        openView("kefuweixin");
      },
      goldAddClick: function goldAddClick(evt) {
        soundMngr.instance.playAudioOther("button");
        var fun = function fun(panel) {
          if (panel) {
            var template = panel.getComponent("shoppingPanel");
            template && template.showPanel(2);
          }
        };
        openView("shoppingPanel", void 0, fun);
      },
      loadSpriteImg: function loadSpriteImg(sprite, imgUrl) {
        if (void 0 == sprite || void 0 == imgUrl || imgUrl.length <= 0) return;
        var texture = cc.textureCache.addImage(cc.url.raw(imgUrl));
        texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
      },
      refreshActivityRedPoint: function refreshActivityRedPoint() {},
      runPaoMadeng: function runPaoMadeng() {
        this._paoMadengX = this.paoMadengLabel.node.x;
        GameData.configData.paomadengIndex = 0;
        this.gotoPaoMadeng();
        this.schedule(this.gotoPaoMadeng, 10);
      },
      gotoPaoMadeng: function gotoPaoMadeng() {
        if (!GameData.configData.paomadeng) return;
        var paoMaStr = GameData.configData.paomadeng[GameData.configData.paomadengIndex].content;
        paoMaStr = paoMaStr.replace(/[\n]/gi, "");
        this.paoMadengLabel.string = paoMaStr;
        this.paoMadengLabel.node.x = this._paoMadengX;
        var moveToAction = cc.moveTo(10, cc.p(this._paoMadengX - 570 - this.paoMadengLabel.node.width, this.paoMadengLabel.node.y));
        this.paoMadengLabel.node.runAction(moveToAction);
        GameData.configData.paomadengIndex++;
        GameData.configData.paomadengIndex == GameData.configData.paomadeng.length && (GameData.configData.paomadengIndex = 0);
      },
      refreshAgentRoomBtn: function refreshAgentRoomBtn() {},
      setMoreBaseShow: function setMoreBaseShow(show) {
        this.moreBase.active = show;
      },
      showUIClub: function showUIClub() {
        soundMngr.instance.playAudioOther("button");
        GameData.player.club && Object.keys(GameData.player.club).length > 0 ? openView("PanelClub") : createMessageBox("您还没有俱乐部，请联系您的代理或推广员", function() {});
      },
      openRecordPanel: function openRecordPanel(evt) {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("RecordPanel");
      },
      openSettingsPanel: function openSettingsPanel(evt) {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("SettingsPanel");
      },
      shareBtnClick: function shareBtnClick() {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("SharePanel");
      },
      selectClubClick: function selectClubClick() {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("selectclubPanel");
      },
      openShoppingPanel: function openShoppingPanel() {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("shoppingPanel");
      },
      openTaskClick: function openTaskClick() {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("UITask");
      },
      openRankClick: function openRankClick() {
        soundMngr.instance.playAudioOther("button");
        this.setMoreBaseShow(false);
        openView("UICoinRankingList");
      },
      openPushGameClick: function openPushGameClick() {
        this.setMoreBaseShow(false);
        if (inCD(3e3)) return;
        soundMngr.instance.playAudioOther("button");
        switch (GameData.player.agentRole) {
         case gameDefine.agentRole.agentPower:
          createMoveMessage("您已经是总代理，请前往公众号查看。");
          return;

         case gameDefine.agentRole.agent:
          createMoveMessage("您已经是代理，请前往公众号查看。");
          return;

         case gameDefine.agentRole.push:
          createMoveMessage("您已经是推广员，请前往公众号查看。");
          return;

         case gameDefine.agentRole.ordinary:
          var date = parseInt(new Date().valueOf() / 1e3);
          var time = GameData.player.qrcodeTime;
          void 0 == time ? time = 0 : null;
          time > 0 && time - date > 0 ? openView("UIPushGame") : GameNet.getInstance().request("game.playerHandler.reqPlayerQrcode", null, function(rtn) {
            if (rtn.qrcodeUrl) {
              GameData.player.qrcodeUrl = rtn.qrcodeUrl;
              GameData.player.qrcodeTime = rtn.qrcodeTime;
              openView("UIPushGame");
            } else createMoveMessage("请求数据失败。");
          });
          break;

         default:
          createMoveMessage("请求数据失败。");
        }
      },
      agentRoomClick: function agentRoomClick() {
        this.setMoreBaseShow(false);
        soundMngr.instance.playAudioOther("button");
        if (void 0 == GameData.player.club || Object.keys(GameData.player.club).length <= 0 || 2 != GameData.player.club.clubAdmin) {
          createMoveMessage("您还不是代理，无法代开房！");
          return;
        }
        RoomHandler.reqAgentRoom();
        RoomHandler.reqAgentResultRoom();
        openView("agentPanel");
      },
      showNotice: function showNotice() {
        soundMngr.instance.playAudioOther("button");
        openView("NoticePanel");
      },
      showCreateRoomDDZ: function showCreateRoomDDZ() {
        soundMngr.instance.playAudioOther("button");
        openView("DDZ-CreateHome");
      },
      openPosterView: function openPosterView(event) {
        var curDate = new Date();
        if (event && event.target) soundMngr.instance.playAudioOther("button"); else {
          var data = cc.sys.localStorage.getItem("posterTime");
          if (null != data) {
            var oldDate = new Date(parseInt(JSON.parse(data).time));
            if (ComparingDateInSameDay(oldDate, curDate)) return;
          }
        }
        if (void 0 == configMgr.getPoster() || configMgr.getPoster().length <= 0) return;
        openView("PosterPanel");
        cc.sys.localStorage.setItem("posterTime", JSON.stringify({
          time: curDate.valueOf()
        }));
      },
      onMatchHandler: function onMatchHandler() {
        var IsMach = matchHandler.onMatch;
        IsMach && openView("UIMatch");
      },
      moreBtnClick: function moreBtnClick() {
        soundMngr.instance.playAudioOther("button");
        var show = this.moreBase.active;
        this.setMoreBaseShow(!show);
        if (!show) {
          var scale1 = cc.scaleTo(.08, 1.1);
          var scale2 = cc.scaleTo(.05, 1);
          this.moreBase.stopAllActions();
          this.moreBase.runAction(cc.sequence(scale1, scale2));
        }
      },
      groupBtnClick: function groupBtnClick() {
        this.refreshToggleBtnChecked();
        if (inCD(500)) return;
        soundMngr.instance.playAudioOther("button");
        cc.log("..groupBtnClick");
        if (this.curSelectType == gameDefine.CurSelectType.group) return;
        this.refreshCurrentOpenPrefab(gameDefine.CurSelectType.group);
      },
      matchBtnClick: function matchBtnClick() {
        this.refreshToggleBtnChecked();
        if (inCD(500)) return;
        soundMngr.instance.playAudioOther("button");
        cc.log("..matchBtnClick");
        var gameList = configMgr.getMatchGameType();
        if (void 0 == gameList || gameList.length <= 0) {
          createMoveMessage("暂未开启。");
          return;
        }
        if (this.curSelectType == gameDefine.CurSelectType.match) return;
        this.refreshCurrentOpenPrefab(gameDefine.CurSelectType.match);
      },
      competitionBtnClick: function competitionBtnClick() {
        this.refreshToggleBtnChecked();
        if (inCD(500)) return;
        soundMngr.instance.playAudioOther("button");
        cc.log("..competitionBtnClick");
        var gameList = configMgr.getFightGameType();
        if (void 0 == gameList || gameList.length <= 0) {
          createMoveMessage("暂未开启。");
          return;
        }
        if (this.curSelectType == gameDefine.CurSelectType.competition) return;
        this.refreshCurrentOpenPrefab(gameDefine.CurSelectType.competition);
      },
      refreshCurrentOpenPrefab: function refreshCurrentOpenPrefab(type) {
        var template = void 0;
        switch (type) {
         case gameDefine.CurSelectType.group:
          template = cc.instantiate(this.UIGroup);
          break;

         case gameDefine.CurSelectType.match:
          template = cc.instantiate(this.UIMatch);
          break;

         case gameDefine.CurSelectType.competition:
          competitionHandler.getActivityList();
          template = cc.instantiate(this.UICompetition);
        }
        cc.log("..type:" + type);
        if (void 0 == template) return;
        var name = "template_" + type;
        var node = this.curSelectUI.getChildByName(name);
        if (void 0 == node) {
          node = template;
          node.parent = this.curSelectUI;
          node.name = name;
        }
        node.active = true;
        var size = cc.director.getWinSize();
        if (this.curSelectType && type != this.curSelectType) {
          var oldNode = this.curSelectUI.getChildByName("template_" + this.curSelectType);
          if (oldNode) {
            var move1 = cc.moveTo(.3, cc.p(-size.width, 0));
            oldNode.stopAllActions();
            oldNode.runAction(cc.sequence(move1.easing(cc.easeIn(5)), cc.callFunc(function() {
              oldNode.active = false;
            })));
            node.x = size.width;
            var delay = cc.delayTime(.05);
            var move2 = cc.moveTo(.3, cc.p(-20, 0));
            var move3 = cc.moveTo(.08, cc.p(0, 0));
            node.stopAllActions();
            node.runAction(cc.sequence(delay, move2.easing(cc.easeIn(6)), move3));
          }
        }
        this.curSelectType = type;
        this.refreshToggleBtnChecked();
        this.saveHomeCurSelectType();
      },
      refreshToggleBtnChecked: function refreshToggleBtnChecked() {
        switch (this.curSelectType) {
         case gameDefine.CurSelectType.group:
          this.groupToggle.isChecked = true;
          this.matchToggle.isChecked = false;
          this.competitionToggle.isChecked = false;
          break;

         case gameDefine.CurSelectType.match:
          this.matchToggle.isChecked = true;
          this.groupToggle.isChecked = false;
          this.competitionToggle.isChecked = false;
          break;

         case gameDefine.CurSelectType.competition:
          this.competitionToggle.isChecked = true;
          this.groupToggle.isChecked = false;
          this.matchToggle.isChecked = false;
        }
      },
      saveHomeCurSelectType: function saveHomeCurSelectType() {
        if (void 0 == this.curSelectType) return;
        var data = {
          type: this.curSelectType
        };
        cc.sys.localStorage.setItem("homeCurSelectType", JSON.stringify(data));
      },
      OnPasteboardChanged: function OnPasteboardChanged(data) {
        WriteLog("home.js OnPasteboardChanged");
        this.getRoomIdByPasteboard();
      },
      getRoomIdByPasteboard: function getRoomIdByPasteboard() {
        WriteLog("home.js getRoomIdByPasteboard");
        var temp = getTextClipboard();
        if (!temp) return;
        var mark1 = "房间号:";
        var index = temp.indexOf(mark1);
        if (-1 == index) return;
        var mark2 = "【复制】这条信息后,打开游戏进入牌局。";
        if (-1 == temp.indexOf(mark2)) return;
        var length = mark1.length;
        var roomid = temp.substring(index + length, index + length + 6);
        if (roomid < 1e5 || roomid > 999999) return;
        var selfAgentRoomId = cc.sys.localStorage.getItem("selfAgentRoomId");
        if (selfAgentRoomId == roomid) return;
        RoomHandler.enterRoom(roomid);
      },
      onPlayerMissionHandler: function onPlayerMissionHandler() {
        var show = !missionHandler.checkAllComplete(GameData.player.mission);
        this.taskBtn.active = show;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    competitionHandler: "competitionHandler",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    missionHandler: "missionHandler",
    roomHandler: "roomHandler"
  } ],
  hongzhongData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e356RRo1RCgqnuECI8xACf", "hongzhongData");
    "use strict";
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var room_hz = {
      cards: {},
      game: {
        roundType: 0,
        roundNum: 0,
        roundmax: 0,
        zhuangUid: 0,
        cardleft: 0,
        turn: 0,
        wildcard: [],
        lastdisUid: 0,
        lastdisCard: 0,
        winnerUid: 0,
        winnerType: 0,
        obtain: 0
      },
      passAction: {
        lastUid: 0,
        fromCard: 0,
        action: [],
        checkCards: []
      },
      actionType: false,
      actionEffect: {
        uid: null,
        card: null,
        action: null
      },
      scores: {}
    };
    module.exports = room_hz;
    room_hz.requestDisCard = function(card, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.discard", {
        card: card
      }, function(rtn) {
        cc.log("room.hzhmjHandler.discard:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestPass = function(callback) {
      GameNet.getInstance().request("room.hzhmjHandler.pass", {}, function(rtn) {
        cc.log("room.hzhmjHandler.pass response:%d", rtn.result);
        rtn.result == errorCode.Fail && createMoveMessage("请等待其他玩家选择");
        callback(rtn);
      });
    };
    room_hz.requestChiCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.chi", {
        cards: actionData.cards
      }, function(rtn) {
        cc.log("room.hzhmjHandler.chi response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestPengCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.peng", {}, function(rtn) {
        cc.log("room.hzhmjHandler.peng response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestAnGangCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.gangAn", {
        card: actionData.cards
      }, function(rtn) {
        cc.log("room.hzhmjHandler.gangAn response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestMingGangCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.gangMing", {}, function(rtn) {
        cc.log("room.hzhmjHandler.gangMing response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestBuGangCard = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.gangBu", {
        card: actionData.cards
      }, function(rtn) {
        cc.log("room.hzhmjHandler.gangBu response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestDianPao = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.dianPao", {}, function(rtn) {
        cc.log("room.hzhmjHandler.dianPao response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.requestHu = function(actionData, callback) {
      GameNet.getInstance().request("room.hzhmjHandler.hu", {}, function(rtn) {
        cc.log("room.hzhmjHandler.hu response:%d", rtn.result);
        callback(rtn);
      });
    };
    room_hz.getGameInfoData = function() {
      return this.game;
    };
    room_hz.getPlayerCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid];
    };
    room_hz.getChiCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["chi"];
    };
    room_hz.getPengCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["peng"];
    };
    room_hz.getGangCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["gang"];
    };
    room_hz.getHandCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["hand"];
    };
    room_hz.getHandCardNum = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["handnum"];
    };
    room_hz.getDisCards = function(uid) {
      void 0 == this.cards[uid] ? this.cards[uid] = {} : null;
      return this.cards[uid]["dis"];
    };
    room_hz.getPassActionsData = function() {
      return this.passAction;
    };
    room_hz.getActionsType = function() {
      return this.actionType;
    };
    room_hz.getActionEffectData = function() {
      return this.actionEffect;
    };
    room_hz.getGameScoreData = function() {
      return this.scores;
    };
    room_hz.onGameInfoSetData = function(data) {
      if (void 0 == data) return;
      this.game.roundType = data.roundType;
      this.game.roundNum = data.roundNum;
      this.game.roundmax = data.roundmax;
      this.game.zhuangUid = data.zhuang;
      this.game.cardleft = data.cardleft;
      this.game.turn = data.turn;
      this.game.wildcard = data.wildcard;
      this.game.lastdisUid = data.disuid;
      this.game.lastdisCard = data.discard;
      GameData.game.turn = data.turn;
    };
    room_hz.onGameStartSetData = function(data) {
      if (void 0 == data) return;
      this.game.gameStart = true;
      this.passAction.lastUid = 0;
      this.passAction.fromCard = 0;
      this.passAction.action = [];
      this.passAction.checkCards = [];
    };
    room_hz.onGameScoreSetData = function(data) {
      if (void 0 == data) return;
      this.scores = data;
      this.game.gameStart = false;
    };
    room_hz.onGamePassSetData = function(data) {
      if (void 0 == data) return;
      this.passAction.lastUid = data.uid;
      this.passAction.fromCard = data.card;
      this.passAction.action = data.act;
      this.actionType = false;
    };
    room_hz.onGameActionSetData = function(data) {
      if (void 0 == data) return;
      this.passAction.action = data.act;
      this.actionType = true;
    };
    room_hz.initCardHandSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["hand"] = data.hand;
      this.game.obtain = data.obtain;
    };
    room_hz.initCardHandNumSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["handnum"] = data.num;
    };
    room_hz.initCardChiSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["chi"] = data.chi;
    };
    room_hz.initCardPengSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["peng"] = data.peng;
    };
    room_hz.initCardGangSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["gang"] = data.gang;
    };
    room_hz.initCardDisSetData = function(data) {
      if (void 0 == data) return;
      void 0 == this.cards[data.uid] ? this.cards[data.uid] = {} : null;
      this.cards[data.uid]["dis"] = data.dis;
    };
    room_hz.setActionEffect = function(action, data) {
      if (void 0 == action || void 0 == data) return;
      this.actionEffect.uid = data.player;
      this.actionEffect.card = data.card;
      this.actionEffect.action = action;
    };
    room_hz.onCardDisSetData = function(data) {
      this.setActionEffect("dis", data);
    };
    room_hz.onCardChiSetData = function(data) {
      this.setActionEffect("chi", data);
    };
    room_hz.onCardPengSetData = function(data) {
      this.setActionEffect("peng", data);
    };
    room_hz.onCardGangMingSetData = function(data) {
      this.setActionEffect("gang", data);
    };
    room_hz.onCardGangAnSetData = function(data) {
      this.setActionEffect("gang", data);
    };
    room_hz.onCardGangBuSetData = function(data) {
      this.setActionEffect("gang", data);
    };
    room_hz.onCardHuSetData = function(data) {
      this.setActionEffect("hu", data);
    };
    room_hz.registMessage_hz = function() {
      cc.log("....hongzhong data registMessage.");
      var self = this;
      GameNet.getInstance().setCallBack("hzhmj-onGameInfo", function(data) {
        self.onGameInfoSetData(data);
        sendEvent("onGameInfo", data);
        sendEvent("onGameTurn");
        sendEvent("updateCards");
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardHand", function(data) {
        self.initCardHandSetData(data);
        sendEvent("initCardHand", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardHandNum", function(data) {
        self.initCardHandNumSetData(data);
        sendEvent("initCardHandNum", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardChi", function(data) {
        self.initCardChiSetData(data);
        sendEvent("initCardChi", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardPeng", function(data) {
        self.initCardPengSetData(data);
        sendEvent("initCardPeng", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardGang", function(data) {
        self.initCardGangSetData(data);
        sendEvent("initCardGang", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-initCardDis", function(data) {
        self.initCardDisSetData(data);
        sendEvent("initCardDis", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGamePass", function(data) {
        self.onGamePassSetData(data);
        sendEvent("onGamePass", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGameAction", function(data) {
        self.onGameActionSetData(data);
        sendEvent("onGameAction", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardDis", function(data) {
        self.setActionEffect("dis", data);
        sendEvent("onCardDis", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardChi", function(data) {
        self.setActionEffect("chi", data);
        sendEvent("onCardChi", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardPeng", function(data) {
        self.setActionEffect("peng", data);
        sendEvent("onCardPeng", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardGangAn", function(data) {
        self.setActionEffect("gang", data);
        sendEvent("onCardGangAn", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardGangMing", function(data) {
        self.setActionEffect("gang", data);
        sendEvent("onCardGangMing", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardGangBu", function(data) {
        self.setActionEffect("gang", data);
        sendEvent("onCardGangBu", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onCardHu", function(data) {
        self.setActionEffect("hu", data);
        sendEvent("onCardHu", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGameStart", function(data) {
        self.onGameStartSetData(data);
        sendEvent("onGameStart", data);
      });
      GameNet.getInstance().setCallBack("hzhmj-onGameScore", function(data) {
        self.onGameScoreSetData(data);
        sendEvent("onGameScore", data);
      });
    };
    room_hz.arrayChangeObject = function(data) {
      var object = {};
      for (var ii = 0; ii < data.length; ii++) {
        var cardId = data[ii];
        var cardNum = room_hz.getArrayElementNumber(data, cardId);
        object[cardId] = cardNum;
      }
      return object;
    };
    room_hz.getArrayElementNumber = function(array, element) {
      var num = 0;
      if (void 0 == array) return num;
      for (var ii = 0; ii < array.length; ii++) array[ii] == element && num++;
      return num;
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    gameDefine: "gameDefine"
  } ],
  huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a772XfqwlFIpr88iX/nQCO", "huadian");
    "use strict";
    var gameDefine = require("gameDefine");
    var HuaDianConfig = {
      areaType: gameDefine.AreaType.Area_HuaDian,
      serverIP: "mahjong.ry-huadian.com",
      serverPort: 3010,
      gameName: "摸摸桦甸麻将",
      versionText: "",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/huadian2",
      wxWelcomeText: "摸摸桦甸麻将,欢迎您的加入!",
      loginLogo: "resources/login/ruoyuhuadian.png",
      Poster: [ "resources/poster/huandian/poster_HD_1.png" ],
      GameVisible: [ gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Mj_CC ],
      ModeType: {
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_MJ_HuaDian: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_CC: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      SetCardsOpen: false,
      MatchGameType: [],
      serverConfig: {
        roomCard: {
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 1
                },
                4: {
                  final: 1
                },
                5: {
                  final: 1
                },
                6: {
                  final: 1
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 2
                },
                4: {
                  final: 2
                },
                5: {
                  final: 2
                },
                6: {
                  final: 2
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 1
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 1
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 2
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 1
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 1
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 2
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 1
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 1
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 2
                }
              }
            }
          }
        }
      }
    };
    module.exports = HuaDianConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  "hundredNiu-roomBase": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27dc8095nNF/LnzXyKwJCbc", "hundredNiu-roomBase");
    "use strict";
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    var HundredNiuHandler = require("hundredNiuHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        batteryNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("nativePower", this, this.onNativePowerHandler);
        this.electricQuantity();
      },
      onDestroy: function onDestroy() {
        unregistEvent("nativePower", this, this.onNativePowerHandler);
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          jsclient.native.HelloOC("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      backBtnClick: function backBtnClick() {
        var selfChipsNum = HundredNiuHandler.getselfChipsSum();
        GameData.player.uid == HundredNiuHandler.zhuangUid ? openView("hundred_backPanel", gameDefine.GameType.Game_Niu_Hundred, function(target) {
          target.getComponent("hundred_backPanel").showBackUI("zhuang");
        }) : selfChipsNum > 0 ? openView("hundred_backPanel", gameDefine.GameType.Game_Niu_Hundred, function(target) {
          target.getComponent("hundred_backPanel").showBackUI("xian");
        }) : RoomHandler.quitRoom(RoomHandler.room.id);
      },
      clickGetDealerList: function clickGetDealerList() {
        GameNet.getInstance().request("room.niuHundredHandler.zhuanglist", {}, function(rtn) {
          0 == rtn.result ? openView("hundred_shangzhuangPanel", gameDefine.GameType.Game_Niu_Hundred, function(target) {
            target.getComponent("hundred_dealerPanel").showUI(rtn.zhuanglist);
          }) : cc.log("request zhuanglist error");
        });
      },
      clickGetPlayerList: function clickGetPlayerList() {
        GameNet.getInstance().request("room.niuHundredHandler.playerlist", {}, function(rtn) {
          0 == rtn.result ? openView("hundred_sankePanel", gameDefine.GameType.Game_Niu_Hundred, function(target) {
            target.getComponent("hundred_sankePanel").showUI(rtn.data);
          }) : cc.log("request playerlist error");
        });
      },
      clickGetTrendPanel: function clickGetTrendPanel() {
        GameNet.getInstance().request("room.niuHundredHandler.trendlist", {}, function(rtn) {
          0 == rtn.result ? openView("hundred_trendPanel", gameDefine.GameType.Game_Niu_Hundred, function(target) {
            target.getComponent("hundred_trendPanel").showUI(rtn.trendlist);
          }) : cc.log("request trendlist error");
        });
      },
      goToShop: function goToShop() {
        openView("shoppingPanel", void 0, function(target) {
          target.getComponent("shoppingPanel").showPanel(2);
        });
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        openView("niuniu_settingPrefab", gameDefine.GameType.Game_niu_niu);
      },
      showRulePanel: function showRulePanel() {
        openView("hundred_rulePanel", gameDefine.GameType.Game_Niu_Hundred);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    hundredNiuHandler: "hundredNiuHandler",
    roomHandler: "roomHandler"
  } ],
  "hundredNiu-roomMain": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8fb5zqz0tOQrXU5hMsq/yk", "hundredNiu-roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var stateMachine = require("stateMachine");
    var HundredNiuHandler = require("hundredNiuHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: stateMachine,
      properties: {},
      onLoad: function onLoad() {
        stateMachine.prototype.onLoad.call(this);
        this.handlerMsg();
        this.getGameRoundInfo();
        soundMngr.instance.playMusic("shisanshui/sound/sss_table_bg1");
      },
      handlerMsg: function handlerMsg() {
        registEvent("niuhun-onGameInfo", this, this.getGameRoundInfo);
        this.registState(niuniuPokerHandler.HUNDREDNIUSTATUS.CHIPS, this, this.startChipsFunction, this.onChipsFunction, this.endChipsFunction);
        this.registState(niuniuPokerHandler.HUNDREDNIUSTATUS.SETTLE, this, this.startSettleFunction, this.onSettleFunction, this.endSettleFunction);
      },
      onDestroy: function onDestroy() {
        unregistEvent("niuhun-onGameInfo", this, this.getGameRoundInfo);
        this.unregistState(niuniuPokerHandler.HUNDREDNIUSTATUS.CHIPS, this, this.startChipsFunction, this.onChipsFunction, this.endChipsFunction);
        this.unregistState(niuniuPokerHandler.HUNDREDNIUSTATUS.SETTLE, this, this.startSettleFunction, this.onSettleFunction, this.endSettleFunction);
        GameData.initGameData();
        HundredNiuHandler.initHundredData();
      },
      getGameRoundInfo: function getGameRoundInfo() {
        cc.log("roommain getGameRoundInfo");
        this.setState(HundredNiuHandler.status);
      },
      startChipsFunction: function startChipsFunction(callback) {
        console.log("stateMachine startChipsAnimation");
        this.node.getComponent("hundredNiu-roomTable").initUI();
        HundredNiuHandler.gameTimes < 20 ? callback() : this.node.getComponent("hundredNiu-roomTable").startAnimation(callback);
      },
      onChipsFunction: function onChipsFunction(callback) {
        console.log("stateMachine onChipsAnimation");
        this.node.getComponent("hundredNiu-roomTable").gambleCountTime(callback);
      },
      endChipsFunction: function endChipsFunction(callback) {
        console.log("stateMachine endChipsAnimation");
        this.node.getComponent("hundredNiu-roomTable").chipsStopAnimation(callback);
      },
      startSettleFunction: function startSettleFunction(callback) {
        cc.log("stateMachine startSettleFunction");
        callback();
      },
      onSettleFunction: function onSettleFunction(callback) {
        cc.log("stateMachine onSettleFunction");
        callback();
      },
      endSettleFunction: function endSettleFunction(callback) {
        cc.log("stateMachine endSettleFunction");
        callback();
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    hundredNiuHandler: "hundredNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    stateMachine: "stateMachine"
  } ],
  "hundredNiu-roomTable": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53cfdx4SzFAi4NXw8z0xxcV", "hundredNiu-roomTable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    var pokerAnimBase = require("pokerAnimationBase");
    var HundredNiuHandler = require("hundredNiuHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerNodes: [ cc.Node ],
        dealerNode: cc.Node,
        pokerCradsNode: cc.Node,
        pokerTypeNode: cc.Node,
        otherPokerTypePrefab: cc.Prefab,
        selfCostChips: cc.Node,
        allCostChips: cc.Node,
        chipPrefab: cc.Prefab,
        chipsNode: cc.Node,
        scoreParent: cc.Node,
        scoreNode: cc.Prefab,
        winPlayerNode: cc.Node,
        areaNode: cc.Node,
        areaWin: cc.Node,
        actionNode: cc.Node,
        countNode: cc.Node,
        toggleNode: cc.Node,
        toggle0: cc.Toggle,
        toggle1: cc.Toggle,
        toggle2: cc.Toggle,
        toggle3: cc.Toggle,
        toggle4: cc.Toggle,
        maskNode: cc.Node,
        shensuanNode: cc.Node,
        guideNodePrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        this.handlerMsg();
        this.pokerAnimBase = new pokerAnimBase();
        this.NowZhuang = 0;
        this.savePokerData();
        this.initUI();
        this.niuniuStayType = niuniuPokerHandler.getGameStatus();
        this.niuniuPokerType = niuniuPokerHandler.getPokerType();
      },
      handlerMsg: function handlerMsg() {
        registEvent("niuhun-onGameInfo", this, this.getClipsStatus);
        registEvent("niuhun-onBaoZhuang", this, this.baoZhuangAnim);
        registEvent("niuhun-onZhuangCoin", this, this.showTipsForZhuang);
        registEvent("niuhun-onGameChips", this, this.changeChipsAndScore);
        registEvent("niuhun-onGameCoin", this, this.showChipsFlyAnimation);
      },
      onDestroy: function onDestroy() {
        unregistEvent("niuhun-onGameInfo", this, this.getClipsStatus);
        unregistEvent("niuhun-onBaoZhuang", this, this.baoZhuangAnim);
        unregistEvent("niuhun-onZhuangCoin", this, this.showTipsForZhuang);
        unregistEvent("niuhun-onGameChips", this, this.changeChipsAndScore);
        unregistEvent("niuhun-onGameCoin", this, this.showChipsFlyAnimation);
        this.unscheduleAllCallbacks();
      },
      initUI: function initUI() {
        this.coinFlyData();
        this.initRoundData();
        this.initPokerCards();
        this.initChipsOnDesk();
      },
      initChipsOnDesk: function initChipsOnDesk() {
        var selfCostLen = this.selfCostChips.childrenCount;
        for (var i = 0; i < selfCostLen; i++) {
          var child = this.selfCostChips.children[i];
          child && (child.getComponent(cc.Label).string = 0);
        }
        var allCostLen = this.allCostChips.childrenCount;
        for (var j = 0; j < allCostLen; j++) {
          var child = this.allCostChips.children[j];
          child && (child.getComponent(cc.Label).string = 0);
        }
        for (var i = 0; i < this.chipsNode.childrenCount; i++) {
          var child = this.chipsNode.children[i];
          child.removeAllChildren();
        }
        for (var i = 0; i < this.shensuanNode.childrenCount; i++) {
          var child = this.shensuanNode.children[i];
          child.removeAllChildren();
        }
      },
      initRoundData: function initRoundData() {
        this.playSign = -1;
        this.clipsList = [];
        this.clipsChoose = 0;
        this.countNode.active = false;
        this.getRoomInfo();
        this.getClipsStatus();
      },
      initPokerCards: function initPokerCards() {
        for (var index = 0; index < this.pokerCradsNode.childrenCount; index++) {
          var poker = this.pokerCradsNode.children[index];
          for (var i = 0; i < poker.childrenCount; i++) {
            poker.children[i].active = false;
            var pokerScp = poker.children[i].getComponent("niuNiuPoker");
            pokerScp.initCardInfo(null);
          }
        }
        for (var j = 0; j < this.pokerTypeNode.childrenCount; j++) {
          var child = this.pokerTypeNode.children[j];
          child && child.removeAllChildren();
        }
        for (var i = 0; i < this.areaWin.childrenCount; i++) {
          var animationNode = this.areaWin.children[i];
          animationNode.active = false;
        }
      },
      coinFlyData: function coinFlyData() {
        this._coinIndex = 0;
        this.chipsNum = 50;
        this._coinList = [];
        this._winnerIndex = 0;
        this._winnerToLoser = {
          winPos: [],
          losePos: [],
          winnerList: {
            0: [],
            1: [],
            2: [],
            3: []
          }
        };
      },
      savePokerData: function savePokerData() {
        this.pokerArr = [];
        this.pokerPosArr = [];
        for (var j = 0; j < this.pokerCradsNode.childrenCount; j++) {
          var poker = this.pokerCradsNode.children[j];
          for (var i = 0; i < 5; i++) {
            this.pokerArr.push(poker.children[i]);
            this.pokerPosArr.push(poker.children[i].position);
          }
        }
      },
      getRoomInfo: function getRoomInfo() {
        this.clipsList = niuniuPokerHandler.XIAZHU[roomHandler.room.opts.scorelv];
        var playerCoin = GameData.player.coin;
        for (var i = this.clipsList.length - 1; i >= 0; i--) if (this.clipsList[i] < .2 * playerCoin) {
          this.clipsChoose = this.clipsList[i];
          break;
        }
      },
      saveClipsChoose: function saveClipsChoose() {
        this.toggle0.isChecked = this.clipsChoose == this.clipsList[0];
        this.toggle1.isChecked = this.clipsChoose == this.clipsList[1];
        this.toggle2.isChecked = this.clipsChoose == this.clipsList[2];
        this.toggle3.isChecked = this.clipsChoose == this.clipsList[3];
        this.toggle4.isChecked = this.clipsChoose == this.clipsList[4];
      },
      getClipsStatus: function getClipsStatus() {
        var HundredStatus = niuniuPokerHandler.HUNDREDNIUSTATUS;
        if (HundredNiuHandler.status != HundredStatus.CHIPS || GameData.player.uid == HundredNiuHandler.zhuangUid) this.initClipsMask(); else {
          this.showClipsMask();
          this.saveClipsChoose();
        }
        var zhuangSp = cc.find("zhuangSign", this.countNode.parent);
        var ac = GameData.player.uid == HundredNiuHandler.zhuangUid;
        zhuangSp.active = ac;
      },
      showClipsMask: function showClipsMask() {
        var toggleGroup = this.toggleNode.getComponent("cc.ToggleGroup");
        toggleGroup.allowSwitchOff = false;
        var xuyaBtn = cc.find("xuyaBtn", this.toggleNode.parent);
        xuyaBtn.getComponent("cc.Button").interactable = true;
        var selfSumNum = HundredNiuHandler.getselfChipsSum();
        var playerCoin = GameData.player.coin;
        var listLen = this.clipsList.length - 1;
        for (var i = listLen; i >= 0; i--) {
          var selfSum = selfSumNum + this.clipsList[i];
          if (selfSum >= .2 * playerCoin) {
            var maskBtn = cc.find("mask" + i, this.maskNode);
            maskBtn.active = true;
            var toggle = cc.find("toggle" + i, this.toggleNode);
            if (true == toggle.getComponent("cc.Toggle").isChecked && 0 != i) {
              var lastToggle = cc.find("toggle" + (i - 1), this.toggleNode);
              lastToggle.getComponent("cc.Toggle").isChecked = true;
              this.clipsChoose = this.clipsList[i - 1];
            }
            toggle.getComponent("cc.Toggle").isChecked = false;
            toggle.getComponent("cc.Toggle").interactable = false;
          } else {
            var maskBtn = cc.find("mask" + i, this.maskNode);
            maskBtn.active = false;
            var toggle = cc.find("toggle" + i, this.toggleNode);
            toggle.getComponent("cc.Toggle").interactable = true;
          }
        }
      },
      initClipsMask: function initClipsMask() {
        var toggleGroup = this.toggleNode.getComponent("cc.ToggleGroup");
        toggleGroup.allowSwitchOff = true;
        for (var j = 0; j < this.maskNode.childrenCount; j++) {
          var maskBtn = this.maskNode.children[j];
          maskBtn.active = true;
        }
        for (var i = 0; i < this.toggleNode.childrenCount; i++) {
          var toggle = this.toggleNode.children[i];
          var toggleBtn = toggle.getComponent("cc.Toggle");
          toggleBtn.isChecked = false;
          toggleBtn.interactable = false;
        }
        var xuyaBtn = cc.find("xuyaBtn", this.toggleNode.parent);
        xuyaBtn.getComponent("cc.Button").interactable = false;
      },
      showTipsForZhuang: function showTipsForZhuang() {
        var scorelev = roomHandler.room.opts.scorelv;
        var shangzhuangNum = getMatchShangZhuangFinal(gameDefine.GameType.Game_Niu_Hundred, scorelev);
        GameData.player.coin < shangzhuangNum && niuniuCreateMoveMessage("未满足上庄条件");
      },
      startAnimation: function startAnimation(callback) {
        HundredNiuHandler.isStartAnimationPlayed = true;
        if (this.NowZhuang != HundredNiuHandler.zhuangUid) {
          this.shangzhuangAnimation();
          var self = this;
          this.scheduleOnce(function() {
            self.gameStartAnimation(callback);
          }, 2);
        } else this.gameStartAnimation(callback);
        this.NowZhuang = HundredNiuHandler.zhuangUid;
      },
      gameStartAnimation: function gameStartAnimation(callback) {
        soundMngr.instance.playHundredOther("start");
        var starActNode = cc.find("/beginXiaZhu", this.actionNode);
        starActNode.active = true;
        var anim = starActNode.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("kaishixiazhu", 1);
        var self = this;
        this.scheduleOnce(function() {
          starActNode.active = false;
          HundredNiuHandler.isStartAnimationPlayed = false;
          callback();
        }, 1.5);
      },
      shangzhuangAnimation: function shangzhuangAnimation() {
        soundMngr.instance.playHundredOther("shangzhuang");
        var shangzhuang = cc.find("shangzhuang", this.actionNode);
        var zhuangName = cc.find("name", shangzhuang);
        zhuangName.getComponent("cc.Label").string = HundredNiuHandler.zhuangInfo.name;
        shangzhuang.active = true;
        var anim = shangzhuang.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("xxxyishangzhuang", 1);
        this.zhuangHeadAnimation();
        var self = this;
        this.scheduleOnce(function() {
          shangzhuang.active = false;
        }, 1.5);
      },
      zhuangHeadAnimation: function zhuangHeadAnimation() {
        var zhuangAc = cc.find("layer_ui_show/zhuangHead", this.node);
        var zhuangSign = cc.find("zhuang", zhuangAc);
        zhuangAc.active = true;
        var anim1 = zhuangAc.getComponent(dragonBones.ArmatureDisplay);
        anim1.playAnimation("newAnimation", 0);
        var anim2 = zhuangSign.getComponent(dragonBones.ArmatureDisplay);
        anim2.playAnimation("newAnimation", 1);
        var self = this;
        this.scheduleOnce(function() {
          zhuangAc.active = false;
        }, 1.5);
      },
      chipsStopAnimation: function chipsStopAnimation(callback) {
        soundMngr.instance.playHundredOther("stop");
        var endActNode = cc.find("/stopXiaZhu", this.actionNode);
        endActNode.active = true;
        var anim = endActNode.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("tingzhixiazhu", 1);
        var self = this;
        this.scheduleOnce(function() {
          endActNode.active = false;
          self.dealAction();
          callback();
        }, 1.5);
      },
      showAllWinAnimation: function showAllWinAnimation(type) {
        var tongying = cc.find("/tongying", this.actionNode);
        tongying.active = true;
        var anim = tongying.getComponent(dragonBones.ArmatureDisplay);
        "zhuang" == type ? anim.playAnimation("zhuangjiatongchi", 1) : "xian" == type && anim.playAnimation("zhuangjiatongpei", 1);
        var self = this;
        this.scheduleOnce(function() {
          tongying.active = false;
        }, 1.5);
      },
      winnerAnimation: function winnerAnimation(index) {
        var winerNode = cc.find("winAct" + index, this.winPlayerNode);
        winerNode.active = true;
        var anim = winerNode.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("newAnimation", 1);
        var self = this;
        this.scheduleOnce(function() {
          winerNode.active = false;
        }, 1.5);
      },
      showWinIcon: function showWinIcon() {
        for (var i = 0; i < this.areaWin.childrenCount; i++) {
          var animationNode = this.areaWin.children[i];
          var winLb = cc.find("winLb", animationNode);
          if (HundredNiuHandler.pokerResult[i]) animationNode.active = false; else {
            animationNode.active = true;
            var animation = winLb.getComponent(dragonBones.ArmatureDisplay);
            var anim = animationNode.getComponent(dragonBones.ArmatureDisplay);
            anim.playAnimation("faguang", 0);
            animation.playAnimation("ying", 1);
          }
        }
      },
      baoZhuangAnim: function baoZhuangAnim() {
        soundMngr.instance.playHundredOther("baozhuang");
        var baozhuang = cc.find("/baozhuang", this.actionNode);
        baozhuang.active = true;
        var anim = baozhuang.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("baozhuang", 1);
        var self = this;
        this.scheduleOnce(function() {
          baozhuang.active = false;
        }, 1.5);
      },
      fapaiAnimation: function fapaiAnimation() {
        var fapai = cc.find("/fapai", this.actionNode);
        fapai.active = true;
        var anim = fapai.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("newAnimation", 0);
      },
      selectClips: function selectClips() {
        this.toggle0.isChecked ? this.clipsChoose = this.clipsList[0] : this.toggle1.isChecked ? this.clipsChoose = this.clipsList[1] : this.toggle2.isChecked ? this.clipsChoose = this.clipsList[2] : this.toggle3.isChecked ? this.clipsChoose = this.clipsList[3] : this.toggle4.isChecked && (this.clipsChoose = this.clipsList[4]);
      },
      clickSetClips: function clickSetClips(evt, area) {
        HundredNiuHandler.requestSetChips(this.clipsChoose, area, this.toggle0.interactable);
        HundredNiuHandler.status != niuniuPokerHandler.HUNDREDNIUSTATUS.CHIPS || GameData.player.uid == HundredNiuHandler.zhuangUid ? this.initClipsMask() : this.showClipsMask();
      },
      continueChips: function continueChips() {
        HundredNiuHandler.requestContinueChips();
      },
      dealAction: function dealAction() {
        var self = this;
        this.fapaiAnimation();
        this.pokerAnimBase.dealAction(this.pokerArr, this.dealerNode.position, this.pokerPosArr, .13, function(delayTime) {
          self.scheduleOnce(function() {
            var fapai = cc.find("/fapai", self.actionNode);
            fapai.active = false;
            self.showAreaPokerCards();
          }, delayTime);
        });
        for (var i = 0; i < this.pokerArr.length; i++) this.scheduleOnce(function() {
          soundMngr.instance.playHundredOther("fapai");
        }, .1 * (i + 1));
      },
      showAreaPokerCards: function showAreaPokerCards() {
        var pokerLen = this.pokerCradsNode.childrenCount;
        var pokerCards = HundredNiuHandler.pokerCards;
        for (var i = pokerLen - 1; i >= 0; i--) this.delayTimeShowPoker(this.pokerCradsNode.children[i], pokerCards[i], i);
      },
      delayTimeShowPoker: function delayTimeShowPoker(handCardNode, cards, index) {
        var runNum = 5 - index;
        var self = this;
        setTimeout(function() {
          var cardPos = true;
          var playercardInfo = self.showPokerForm(index, cards, cardPos);
          self.rotatePoker(handCardNode, playercardInfo.newHandCards, index);
        }, 1200 * runNum);
      },
      showPokerForm: function showPokerForm(index, cards, cardPos) {
        var pokerTypeCards = [];
        HundredNiuHandler.pokerCards3[index] && (pokerTypeCards = HundredNiuHandler.pokerCards3[index]);
        var newArray = pokerTypeCards.concat(cards);
        var newHandCards = niuniuPokerHandler.unequally(newArray);
        var cardsType = HundredNiuHandler.pokerType[index];
        if (cardsType > this.niuniuPokerType.NIU_NONE && cardsType <= this.niuniuPokerType.NIU_NIU) {
          newHandCards.splice(3, 0, 0);
          cardPos = false;
        } else {
          newHandCards.splice(5, 0, 0);
          cardPos = true;
        }
        return {
          newHandCards: newHandCards,
          cardPos: cardPos
        };
      },
      rotatePoker: function rotatePoker(handCardNode, cards, index) {
        var self = this;
        var rotate = function rotate(pokerScp, card, index) {
          var action1 = cc.scaleTo(.25, 0, .3);
          var action2 = cc.scaleTo(.25, .3, .3);
          pokerScp.runAction(cc.sequence(action1, action2, cc.callFunc(function() {
            var pokerScpInfo = pokerScp.getComponent("niuNiuPoker");
            self.showPokerContent(pokerScpInfo, card);
            self.playCardType(index);
          }, self)));
        };
        for (var j = 0; j < handCardNode.childrenCount; j++) {
          var pokerScp = handCardNode.children[j];
          pokerScp.active = true;
          rotate(pokerScp, cards[j], index);
        }
      },
      showPokerContent: function showPokerContent(handCardNode, cards) {
        if (null == cards) handCardNode.initCardInfo(null); else if (0 == cards) handCardNode.clearCardsUI(); else {
          handCardNode.turnOver();
          handCardNode.initCardInfo(cards);
        }
      },
      playCardType: function playCardType(localIndex) {
        var record = null;
        HundredNiuHandler.pokerType && (record = HundredNiuHandler.pokerType[localIndex]);
        if (this.playSign == localIndex) return;
        if (void 0 === record || null === record) return;
        var actNode = cc.find("act" + localIndex, this.pokerTypeNode);
        actNode.removeAllChildren();
        var pokerTypePrefab = this.otherPokerTypePrefab;
        pokerTypePrefab = cc.instantiate(pokerTypePrefab);
        record > this.niuniuPokerType.NIU_NONE && record <= this.niuniuPokerType.NIU_NIU ? pokerTypePrefab.position = cc.p(0, 0) : pokerTypePrefab.position = cc.p(-7, 0);
        actNode.addChild(pokerTypePrefab);
        pokerTypePrefab.getComponent("pokerTypeAnimation").changeMaskBg(record);
        pokerTypePrefab.getComponent("pokerTypeAnimation").initFanInfo(record, 1);
        soundMngr.instance.playNiuNiuAudio(record, 2);
        pokerTypePrefab.getComponent("pokerTypeAnimation").pokerTypeAnim();
        record >= 10 && pokerTypePrefab.getComponent("pokerTypeAnimation").pokerAnimation();
        this.playSign = localIndex;
      },
      changeChipsAndScore: function changeChipsAndScore(data) {
        if (!data) return;
        var ChipsData = data.detail;
        var turnUid = ChipsData.uid;
        var chipsArea = ChipsData.idx;
        var setChips = ChipsData.num;
        var selfChipsNum = ChipsData.all;
        var areaChipsNum = ChipsData.total;
        this.xingxingAnimation(turnUid, chipsArea);
        this.addChip(setChips, turnUid, chipsArea);
        this.addClipsNum(turnUid, chipsArea, selfChipsNum, areaChipsNum);
      },
      addClipsNum: function addClipsNum(turnUid, chipsArea, selfChipsNum, areaChipsNum) {
        var newValue = 0;
        newValue = null != selfChipsNum ? ConversionCoinValue(selfChipsNum, 2) : null;
        var sumAreaNode = cc.find("chips" + chipsArea, this.allCostChips);
        var selfSetAreaNode = cc.find("chips" + chipsArea, this.selfCostChips);
        turnUid == GameData.player.uid && (selfSetAreaNode.getComponent(cc.Label).string = newValue);
        sumAreaNode.getComponent(cc.Label).string = ConversionCoinValue(areaChipsNum, 2);
      },
      clipFlyToTableAnimation: function clipFlyToTableAnimation(clipNode, toArea) {
        var toAreaNode = cc.find("area" + toArea, this.areaNode);
        var posX = toAreaNode.x;
        var posY = toAreaNode.y;
        var x = posX - this.randomNum(-75, 75);
        var y = posY - this.randomNum(-100, 20);
        var action1 = cc.moveTo(.4, cc.p(x, y));
        var action2 = cc.scaleTo(.1, .6, .6);
        var actionC = cc.scaleTo(.1, .4, .4);
        var action = cc.sequence(action1, action2, actionC);
        var action3 = cc.callFunc(function() {
          clipNode.removeFromParent(true);
        }, clipNode);
        var action4 = cc.fadeOut(.1);
        soundMngr.instance.playHundredOther("chouma");
        var chipsParent = this.chipsNode.getChildByName("chips" + toArea);
        chipsParent.childrenCount > 30 ? clipNode.runAction(cc.sequence(action, action4, action3)).easing(cc.easeCubicActionOut()) : clipNode.runAction(action).easing(cc.easeCubicActionOut());
      },
      randomNum: function randomNum(min, max) {
        var distance = max - min;
        var num = Math.random() * distance + min;
        return parseInt(num, 10);
      },
      addChip: function addChip(data, turnerUid, toArea) {
        var score = data;
        score = data > 1e6 ? .2 * data : data;
        var clip1Num = 0;
        var clip2Num = 0;
        var clip3Num = 0;
        var clip4Num = 0;
        var clip5Num = 0;
        this.coinArry = [];
        var scoreArry = [ clip5Num, clip4Num, clip3Num, clip2Num, clip1Num ];
        for (var i = 0; i < scoreArry.length; i++) scoreArry[i] = this.spliceScore(score)[i];
        for (var i = 0; i < scoreArry.length; i++) for (var j = 0; j < scoreArry[i]; j++) {
          var localIdx = HundredNiuHandler.getPlayerPosByUid(turnerUid);
          var clipNode = cc.instantiate(this.chipPrefab);
          clipNode.scaleX = .4;
          clipNode.scaleY = .4;
          var handenode;
          if (-1 == localIdx) handenode = cc.find("tableInfo/otherPlayer", this.node); else if (0 == localIdx) switch (this.coinArry[i]) {
           case 50:
            handenode = this.toggle0.node;
            break;

           case 100:
            handenode = this.toggle1.node;
            break;

           case 1e3:
            handenode = this.toggle2.node;
            break;

           case 1e4:
            handenode = this.toggle3.node;
            break;

           case 2e4:
            handenode = this.toggle4.node;
          } else {
            handenode = this.playerNodes[localIdx];
            var moveLeft = cc.moveBy(.1, cc.p(-8, 0));
            var moveRight = cc.moveBy(.1, cc.p(8, 0));
            localIdx <= 3 || 5 == localIdx ? handenode.runAction(cc.sequence(moveRight, moveLeft)) : (4 == localIdx || localIdx >= 6) && handenode.runAction(cc.sequence(moveLeft, moveRight));
          }
          clipNode.parent = this.chipsNode.getChildByName("chips" + toArea);
          clipNode.getComponent("hundred_pokerPanel").setChipImg(this.coinArry[i]);
          clipNode.x = handenode.x;
          clipNode.y = handenode.y;
          clipNode.active = true;
          this.clipFlyToTableAnimation(clipNode, toArea);
        }
      },
      spliceScore: function spliceScore(score) {
        var clip1 = 50;
        var clip2 = 100;
        var clip3 = 1e3;
        var clip4 = 1e4;
        var clip5 = 2e4;
        var arry = [];
        this.coinArry = [ clip5, clip4, clip3, clip2, clip1 ];
        for (var i = 0; i < this.coinArry.length; i++) {
          var num = Math.floor(score / this.coinArry[i]);
          arry.push(num);
          score -= Math.floor(score / this.coinArry[i]) * this.coinArry[i];
        }
        return arry;
      },
      xingxingAnimation: function xingxingAnimation(uid, localIndex) {
        var xingxingNode = cc.find("xing" + localIndex, this.shensuanNode);
        if (uid == HundredNiuHandler.guideId && 0 == xingxingNode.childrenCount) {
          var guidePrefab = cc.instantiate(this.guideNodePrefab);
          xingxingNode.addChild(guidePrefab);
          soundMngr.instance.playHundredOther("guide");
          guidePrefab.getComponent("hundred_fortunePanel").playXingAnimation();
        }
      },
      gambleCountTime: function gambleCountTime(callback) {
        var self = this;
        var updateCountDownTime = function updateCountDownTime() {
          HundredNiuHandler.gameTimes--;
          var countLb1 = cc.find("countTime1", self.countNode);
          self.countNode.active = true;
          HundredNiuHandler.isStartAnimationPlayed ? self.countNode.active = false : self.countNode.active = true;
          countLb1.getComponent(cc.Label).string = HundredNiuHandler.gameTimes;
          if (HundredNiuHandler.gameTimes > 0 && HundredNiuHandler.gameTimes <= 3) {
            soundMngr.instance.playHundredOther("countDown");
            var scaleAc1 = cc.scaleTo(.25, 1, 1);
            var scaleAc2 = cc.scaleTo(.25, .6, .6);
            self.countNode.runAction(cc.sequence(scaleAc1, scaleAc2));
          } else if (HundredNiuHandler.gameTimes <= 0) {
            self.countNode.active = false;
            self.countNode.setScale(.6);
            self.countNode.active = false;
            countLb1.getComponent(cc.Label).string = "";
            HundredNiuHandler.readyLabelActive = true;
            self.unschedule(updateCountDownTime);
            callback();
          }
        };
        if (HundredNiuHandler.gameTimes <= 0) {
          self.countNode.setScale(.6);
          this.unschedule(updateCountDownTime);
          return;
        }
        updateCountDownTime(callback);
        this.schedule(updateCountDownTime, 1);
      },
      confirmWinnerOrLoser: function confirmWinnerOrLoser() {
        niuniuPokerHandler.clearArray(this._winnerToLoser.winPos);
        niuniuPokerHandler.clearArray(this._winnerToLoser.losePos);
        this._winnerToLoser.winnerList = {
          0: [],
          1: [],
          2: [],
          3: []
        };
        var result = HundredNiuHandler.pokerResult;
        for (var i = 0; i < result.length; i++) result[i] ? this._winnerToLoser.losePos.push(i) : this._winnerToLoser.winPos.push(i);
        for (var j = 0; j < HundredNiuHandler.betPosPlayer.length; j++) {
          var winnerInfo = HundredNiuHandler.betPosPlayer[j];
          for (var indx = 0; indx < winnerInfo.length; indx++) {
            var uid = winnerInfo[indx];
            var scores = HundredNiuHandler.getRoundCoinByUid(uid);
            var isOnDesk = HundredNiuHandler.containsArray(HundredNiuHandler.playerInfo, uid);
            scores > 0 && uid != HundredNiuHandler.zhuangUid && (isOnDesk ? this._winnerToLoser.winnerList[j].push(uid) : uid == GameData.player.uid ? this._winnerToLoser.winnerList[j].push(uid) : this._winnerToLoser.winnerList[j].push(-1));
          }
        }
        for (var i = 0; i < Object.keys(this._winnerToLoser.winnerList).length; i++) {
          var array = this._winnerToLoser.winnerList[i];
          this._winnerToLoser.winnerList[i] = niuniuPokerHandler.unequally(array);
        }
      },
      showChipsFlyAnimation: function showChipsFlyAnimation() {
        this.showWinIcon();
        this.confirmWinnerOrLoser();
        if (0 == this._winnerToLoser.winPos.length) {
          soundMngr.instance.playHundredOther("zhuangWin");
          this.showAllWinAnimation("zhuang");
        } else if (0 == this._winnerToLoser.losePos.length) {
          soundMngr.instance.playHundredOther("zhuangLose");
          this.showAllWinAnimation("xian");
        }
        this._winnerToLoser.losePos.length > 0 ? this.zhuangWinner() : this._winnerToLoser.winPos.length > 0 && this.xianWinAction();
      },
      zhuangWinner: function zhuangWinner() {
        var index = HundredNiuHandler.getPlayerPosByUid(HundredNiuHandler.zhuangUid);
        var zhuangPlayer = this.playerNodes[index];
        var self = this;
        for (var i = 0; i < this._winnerToLoser.losePos.length; i++) {
          var onPos = this._winnerToLoser.losePos[i];
          var chipsParent = this.chipsNode.getChildByName("chips" + onPos);
          for (var j = 0; j < chipsParent.childrenCount; j++) {
            var actionX = zhuangPlayer.x + this.randomNum(-50, 50);
            var actionY = zhuangPlayer.y + this.randomNum(-20, 50);
            var child = chipsParent.children[j];
            this.resultChipsAnimation(child, cc.p(actionX, actionY));
          }
        }
        soundMngr.instance.playHundredOther("result");
        this._winnerToLoser.winPos.length > 0 ? this.scheduleOnce(function() {
          self.zhuangToAreaAc();
        }, 1) : this.scheduleOnce(function() {
          self.moveAboutScore();
        }, 1);
      },
      xianWinAction: function xianWinAction() {
        var self = this;
        var playerLen = this._winnerToLoser.winPos.length;
        for (var i = 0; i < playerLen; i++) {
          var onPos = this._winnerToLoser.winPos[i];
          var lastWinner = this._winnerToLoser.winnerList[onPos].length - 1;
          if (0 == this._winnerToLoser.winnerList[onPos].length) continue;
          var num = 0;
          var chipsParen = this.chipsNode.getChildByName("chips" + onPos);
          for (var j = 0; j < chipsParen.childrenCount; j++) {
            num > lastWinner && (num = 0);
            var uid = this._winnerToLoser.winnerList[onPos][num];
            var player;
            if (-1 == uid) player = cc.find("tableInfo/otherPlayer", this.node); else {
              var playerPos = HundredNiuHandler.getPlayerPosByUid(uid);
              player = this.playerNodes[playerPos];
            }
            num++;
            var actionX = player.x + this.randomNum(-50, 50);
            var actionY = player.y + this.randomNum(-20, 50);
            var child = chipsParen.children[j];
            this.resultChipsAnimation(child, cc.p(actionX, actionY));
          }
        }
        soundMngr.instance.playHundredOther("result");
        this.scheduleOnce(function() {
          self.moveAboutScore();
        }, 1);
      },
      zhuangToAreaAc: function zhuangToAreaAc() {
        var self = this;
        var zhuangIndex = HundredNiuHandler.getPlayerPosByUid(HundredNiuHandler.zhuangUid);
        var zhuangPlayer = this.playerNodes[zhuangIndex];
        for (var i = 0; i < this._winnerToLoser.winPos.length; i++) for (var j = 0; j < this.chipsNum; j++) {
          var node = this.createCoinNode(this._winnerToLoser.winPos[i], j);
          node.setPosition(zhuangPlayer.getPosition());
        }
        for (var i = 0; i < this._coinList.length; i++) {
          var clipNode = this._coinList[i];
          var onPos = clipNode.getTag();
          var toAreaNode = cc.find("area" + onPos, this.areaNode);
          var actionX = toAreaNode.getPosition().x - this.randomNum(-75, 75);
          var actionY = toAreaNode.getPosition().y - this.randomNum(-100, 20);
          this.resultChipsAnimation(clipNode, cc.p(actionX, actionY));
        }
        soundMngr.instance.playHundredOther("result");
        this.scheduleOnce(function() {
          self.xianWinAction();
        }, 1);
      },
      createCoinNode: function createCoinNode(area, coinNum) {
        var node;
        var coinName = area.toString() + coinNum.toString();
        if (this.chipsNode.getChildByName("coinNode" + coinName)) node = this.chipsNode.getChildByName("coinNode" + coinName); else {
          node = cc.instantiate(this.chipPrefab);
          node.name = "coinNode" + coinName;
          node.setTag(area);
          var index = this.randomNum(0, 4);
          var num = this.clipsList[index];
          node.getComponent("hundred_pokerPanel").setChipImg(num);
          node.scaleX = .5;
          node.scaleY = .5;
          this.chipsNode.addChild(node);
        }
        node.active = true;
        this._coinList.push(node);
        return node;
      },
      resultChipsAnimation: function resultChipsAnimation(node, position) {
        var action1 = cc.moveTo(.4, position);
        var fade = cc.fadeOut(.4);
        var action2 = cc.callFunc(function() {
          node.active = false;
          node.destroy();
        }, node);
        node.runAction(cc.sequence(action1, fade, action2)).easing(cc.easeCubicActionOut());
      },
      moveAboutScore: function moveAboutScore() {
        var self = this;
        var players = this.getPlayerInfoOnDesk();
        for (var j = 0; j < players.length; j++) {
          if (null == players[j]) continue;
          var player = players[j];
          var index = HundredNiuHandler.getPlayerPosByUid(player.uid);
          var runScore = player.score;
          var headNode = this.scoreParent.getChildByName("score" + index);
          var playerGetScore = headNode.getChildByName("resultScore");
          if (null == playerGetScore) {
            playerGetScore = cc.instantiate(this.scoreNode);
            4 == index || index >= 6 ? playerGetScore.getComponent("hundred_runscorePanel").setAnchor(1) : playerGetScore.getComponent("hundred_runscorePanel").setAnchor(0);
            playerGetScore.getComponent("hundred_runscorePanel").getScoreColor(runScore);
            playerGetScore.active = true;
            headNode.addChild(playerGetScore);
          }
          if (runScore > 0) {
            this.winnerAnimation(index);
            player.uid == GameData.player.uid && soundMngr.instance.playHundredOther("winsign");
          }
          var move1 = cc.moveBy(1.5, cc.p(0, 60));
          playerGetScore.runAction(move1);
        }
        this.scheduleOnce(function() {
          for (var i = 0; i < self.scoreParent.children.length; i++) self.scoreParent.children[i].removeAllChildren();
          HundredNiuHandler.isFlyChipsAndCoin = false;
          self.changeCoinNumOnHead();
          self.initUI();
          HundredNiuHandler.readyLabelActive = false;
        }, 2);
      },
      getPlayerInfoOnDesk: function getPlayerInfoOnDesk() {
        var playerArray = [];
        var playScoreInfo = roomHandler.coinData.coin;
        for (var i = 0; i < playScoreInfo.length; i++) {
          var uid = playScoreInfo[i].uid;
          var isOnDesk = HundredNiuHandler.containsArray(HundredNiuHandler.playerInfo, uid);
          isOnDesk ? playerArray.push(playScoreInfo[i]) : uid == GameData.player.uid && playerArray.push(playScoreInfo[i]);
        }
        return playerArray;
      },
      changeCoinNumOnHead: function changeCoinNumOnHead() {
        var playerOnDesk = this.getPlayerInfoOnDesk();
        for (var i = 0; i < this.playerNodes.length; i++) {
          var headNode = this.playerNodes[i].getChildByName("rightOrLeftPlayerInfo");
          var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
          if (void 0 == playerHeadScp) continue;
          var playerInfo = HundredNiuHandler.getPlayerInfoByUid(playerHeadScp.uid);
          if (null == playerInfo) continue;
          var newScore = 0;
          var coin = playerInfo.coin;
          var runscore = 0;
          var onDesk = HundredNiuHandler.containsArray(playerOnDesk, playerHeadScp.uid);
          if (onDesk) for (var j = 0; j < playerOnDesk.length; j++) {
            if (null == playerOnDesk[j]) continue;
            var player = playerOnDesk[j];
            player.uid == playerHeadScp.uid && (runscore = player.score);
          }
          newScore = playerHeadScp.uid == GameData.player.uid ? coin : parseInt(coin, 10) + parseInt(runscore, 10);
          playerHeadScp.setGold(newScore, gameDefine.GameType.Game_Niu_Hundred);
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    hundredNiuHandler: "hundredNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    pokerAnimationBase: "pokerAnimationBase",
    roomHandler: "roomHandler"
  } ],
  "hundredNiu-roomWait": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42322CIdbZGS63ZLBSGAMe8", "hundredNiu-roomWait");
    "use strict";
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    var HundredNiuHandler = require("hundredNiuHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerHeads: [ cc.Node ],
        twoPlayerPrefab: cc.Prefab,
        dragonBonesNode: cc.Prefab,
        lastTimeLabel: cc.Label,
        readyNode: cc.Node
      },
      onLoad: function onLoad() {
        this.headers = new Array();
        this.handlerMsg();
        this.initTabelUI();
        this.showPlayers();
        this.addDynAnimation();
      },
      handlerMsg: function handlerMsg() {
        registEvent("onPrepareInfo", this, this.beginUI);
        registEvent("dynChat", this, this.dynChatHandler);
        registEvent("onJoinerLost", this, this.showPlayers);
        registEvent("niuhun-onGameInfo", this, this.beginUI);
        registEvent("onJoinerConnect", this, this.showPlayers);
        registEvent("onPlayerUpdate", this, this.refreshPlayers);
        registEvent("niuhun-onGameStart", this, this.showPlayers);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPrepareInfo", this, this.beginUI);
        unregistEvent("dynChat", this, this.dynChatHandler);
        unregistEvent("onJoinerLost", this, this.showPlayers);
        unregistEvent("niuhun-onGameInfo", this, this.beginUI);
        unregistEvent("onJoinerConnect", this, this.showPlayers);
        unregistEvent("onPlayerUpdate", this, this.refreshPlayers);
        unregistEvent("niuhun-onGameStart", this, this.showPlayers);
      },
      initTabelUI: function initTabelUI() {
        this.lastTimeLabel.node.active = false;
        this.beginUI();
        this.showPlayers();
      },
      refreshPlayers: function refreshPlayers() {
        HundredNiuHandler.isFlyChipsAndCoin || this.showPlayers();
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        this.initPlayerHeads();
        this.showPlayer();
      },
      initPlayerHeads: function initPlayerHeads() {
        for (var i = 0; i < this.playerHeads.length; i++) {
          var headNode = this.playerHeads[i].getChildByName("rightOrLeftPlayerInfo");
          var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
          playerHeadScp.setName("");
          playerHeadScp.setPlayer({});
          playerHeadScp.initHeadIcon();
          playerHeadScp.setIsOnline(true);
          playerHeadScp.showHeadBg(true);
          playerHeadScp.setCoinShow(false);
          playerHeadScp.HeadBtnIsClick(false);
          playerHeadScp.showZhuangNumNode(false);
          playerHeadScp.setGold("", gameDefine.GameType.Game_Niu_Hundred);
          1 == i || 2 == i || 7 == i ? playerHeadScp.showZhuang(true) : playerHeadScp.showZhuang(false);
        }
      },
      showPlayer: function showPlayer() {
        this.showSelfInfo();
        this.showOtherPlayer();
      },
      showSelfInfo: function showSelfInfo() {
        if (null == GameData.player || void 0 == GameData.player) return;
        var selfHeadInfo = GameData.player;
        this.showHeadInfo(selfHeadInfo, this.playerHeads[0], 0);
      },
      showOtherPlayer: function showOtherPlayer() {
        if (void 0 == HundredNiuHandler.playerInfo || null == HundredNiuHandler.playerInfo) return;
        var players = HundredNiuHandler.playerInfo;
        for (var j = 0; j < players.length; j++) {
          var player = players[j];
          null != player && this.showHeadInfo(player, this.playerHeads[j + 1], j + 1);
        }
      },
      showHeadInfo: function showHeadInfo(playerInfo, Pos, sign) {
        var headNode = Pos.getChildByName("rightOrLeftPlayerInfo");
        var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
        var zhuangUid = HundredNiuHandler.zhuangUid;
        var zhuangAc = playerInfo.uid == zhuangUid;
        var xitongZhuang = playerInfo.uid == HundredNiuHandler.zhuangPlayers.uid;
        if (zhuangAc && 0 != sign && playerInfo.uid != HundredNiuHandler.zhuangPlayers.uid) {
          playerHeadScp.lianZhuangNum(5 - HundredNiuHandler.lianzhuangNum);
          playerHeadScp.showZhuangNumNode(zhuangAc);
        }
        playerHeadScp.HeadBtnIsClick(true);
        playerHeadScp.setPlayer(playerInfo);
        playerHeadScp.setName(playerInfo.name);
        playerHeadScp.setHeadIcon(playerInfo.headimgurl);
        playerHeadScp.setLabelNodePos(zhuangAc, xitongZhuang);
        playerHeadScp.setGold(playerInfo.coin, gameDefine.GameType.Game_Niu_Hundred);
        sign >= 3 && sign <= 6 || playerInfo.uid == HundredNiuHandler.zhuangPlayers.uid ? playerHeadScp.setCoinShow(false) : playerHeadScp.setCoinShow(true);
        this.headers.push(headNode);
      },
      beginUI: function beginUI() {
        cc.log("===========roomHandler.room.status = " + roomHandler.room.status);
        cc.log("-----------roomHandler.readyCountDown = " + roomHandler.readyCountDown);
        if (HundredNiuHandler.status == niuniuPokerHandler.HUNDREDNIUSTATUS.CHIPS) {
          this.readyNode.active = false;
          this.lastTimeLabel.string = "";
          this.lastTimeLabel.node.active = false;
          this.unschedule(this.updateLastTime);
          return;
        }
        roomHandler.readyCountDown > 0 && (roomHandler.room.status == gameDefine.RoomState.WAIT ? this.readyAnimation() : this.beginCountDown());
      },
      beginCountDown: function beginCountDown() {
        cc.log("beginCountDownbeginCountDownbeginCountDownbeginCountDown");
        this.lastTimeLabel.string = "";
        this.lastTimeLabel.node.active = true;
        this.handleCloseTimer();
      },
      handleCloseTimer: function handleCloseTimer() {
        cc.log("ready start count: roomHandler.readyCountDown = " + roomHandler.readyCountDown);
        this.updateLastTime();
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        roomHandler.readyCountDown--;
        roomHandler.readyCountDown <= 0 || HundredNiuHandler.readyLabelActive ? this.lastTimeLabel.string = "" : this.lastTimeLabel.string = "休息一下：" + roomHandler.readyCountDown;
        if (roomHandler.readyCountDown <= 0) {
          this.lastTimeLabel.string = "";
          this.lastTimeLabel.node.active = false;
          this.unschedule(this.updateLastTime);
        }
      },
      readyAnimation: function readyAnimation() {
        this.readyNode.active = true;
        var readyAnim = cc.find("readyAnim", this.readyNode);
        var anim2 = readyAnim.getComponent(dragonBones.ArmatureDisplay);
        anim2.playAnimation("newAnimation", 0);
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        cc.log("playerPosition = " + HundredNiuHandler.getPlayerPosByUid(uid));
        var localIdx = HundredNiuHandler.getPlayerPosByUid(uid);
        var player;
        if (-1 == localIdx) player = cc.find("tableInfo/otherPlayer", this.node); else {
          var playerPos = HundredNiuHandler.getPlayerPosByUid(uid);
          player = this.headers[playerPos].parent;
        }
        return player.position;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    hundredNiuHandler: "hundredNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler"
  } ],
  hundredNiuHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93b8aJSy9BKL4ytRVTatl/F", "hundredNiuHandler");
    "use strict";
    var roomHandler = require("roomHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    var hundredNiuHandler = {
      status: 0,
      gameTimes: 0,
      isStartAnimationPlayed: false,
      readyLabelActive: false,
      zhuangUid: 0,
      zhuangInfo: {},
      lianzhuangNum: 0,
      chipsList: [],
      playerInfo: [],
      guideId: 0,
      guideInfo: {},
      pokerCards: [],
      pokerCards3: [],
      pokerType: [],
      pokerResult: [],
      betPosPlayer: [],
      isFlyChipsAndCoin: false,
      selfChipsNum: {
        0: 0,
        1: 0,
        2: 0,
        3: 0
      },
      zhuangPlayers: {
        uid: 0,
        name: "系统庄",
        sex: 2,
        headimgurl: "http://47.104.25.227/bots_head/24.png"
      }
    };
    module.exports = hundredNiuHandler;
    hundredNiuHandler.initHundredData = function(argument) {
      this.status = 0;
      this.gameTimes = 0;
      this.isStartAnimationPlayed = false;
      this.readyLabelActive = false;
      this.zhuangUid = 0;
      this.zhuangInfo = {};
      this.lianzhuangNum = 0;
      this.chipsList = [];
      this.playerInfo = [];
      this.guideId = 0;
      this.guideInfo = {};
      this.pokerCards = [];
      this.pokerCards3 = [];
      this.pokerType = [];
      this.pokerResult = [];
      this.betPosPlayer = [];
      this.isFlyChipsAndCoin = false;
      this.selfChipsNum = {
        0: 0,
        1: 0,
        2: 0,
        3: 0
      };
    };
    hundredNiuHandler.getPlayerPosByUid = function(userid) {
      if (userid == GameData.player.uid && userid != this.zhuangUid) return 0;
      var isOnDesk = hundredNiuHandler.containsArray(this.playerInfo, userid);
      if (!isOnDesk) return -1;
      for (var i = 0; i < this.playerInfo.length; i++) {
        var player = this.playerInfo[i];
        if (player && player.uid == userid) return i + 1;
      }
    };
    hundredNiuHandler.getRoundCoinByUid = function(userid) {
      var roundCoin = roomHandler.coinData.coin;
      if (roundCoin.length <= 0) return null;
      var sign = hundredNiuHandler.containsArray(roundCoin, userid);
      if (!sign) return null;
      for (var i = 0; i < roundCoin.length; i++) {
        var player = roundCoin[i];
        if (player && player.uid == userid) return player.score;
      }
    };
    hundredNiuHandler.getPlayerInfoByUid = function(userid) {
      if (userid == GameData.player.uid) return GameData.player;
      var isOnDesk = hundredNiuHandler.containsArray(this.playerInfo, userid);
      if (!isOnDesk) return null;
      for (var i = 0; i < this.playerInfo.length; i++) {
        var player = this.playerInfo[i];
        if (player && player.uid == userid) return player;
      }
    };
    hundredNiuHandler.containsArray = function(arr, obj) {
      var i = arr.length;
      while (i--) if (arr[i] && arr[i].uid == obj) return true;
      return false;
    };
    hundredNiuHandler.getselfChipsSum = function() {
      var sum = 0;
      for (var key in this.selfChipsNum) sum += this.selfChipsNum[key];
      return sum;
    };
    hundredNiuHandler.requestSetChips = function(chipNum, chipsLocal, interac) {
      var self = this;
      var chips = {
        num: chipNum,
        idx: chipsLocal
      };
      GameNet.getInstance().request("room.niuHundredHandler.setChips", chips, function(rtn) {
        var niuniuErrorType = niuniuPokerHandler.ERRORTYPE;
        if (!rtn || void 0 == rtn.result || 1 == rtn.result) return;
        if (rtn.result != niuniuErrorType.SUCCESSE) {
          var errorLb = "";
          switch (rtn.result) {
           case niuniuErrorType.Niu100_Chips_Zhuang:
            errorLb = "庄家无法下注";
            break;

           case niuniuErrorType.Niu100_Chips_State:
           case 1:
            errorLb = "等候下一局下注";
            break;

           case niuniuErrorType.Niu100_Chips_Continue:
            errorLb = "上一局无下注记录";
            break;

           case niuniuErrorType.Niu100_Chips_PlayerMax:
            errorLb = "已超过自身下注上限";
            break;

           case niuniuErrorType.Niu100_Chips_ZhuangMax:
            errorLb = "已超过四门下注上限";
          }
          if ("已超过自身下注上限" == errorLb && interac) return;
          niuniuCreateMoveMessage(errorLb);
        }
      });
    };
    hundredNiuHandler.requestContinueChips = function() {
      GameNet.getInstance().request("room.niuHundredHandler.continueChips", {}, function(rtn) {
        var niuniuErrorType = niuniuPokerHandler.ERRORTYPE;
        if (!rtn || void 0 == rtn.result) return;
        if (rtn.result != niuniuErrorType.SUCCESSE) {
          var errorLb = "";
          switch (rtn.result) {
           case niuniuErrorType.Niu100_Chips_Zhuang:
            errorLb = "庄家无法下注";
            break;

           case niuniuErrorType.Niu100_Chips_State:
           case 1:
            errorLb = "等候下一局下注";
            break;

           case niuniuErrorType.Niu100_Chips_Continue:
            errorLb = "上一局无下注记录";
            break;

           case niuniuErrorType.Niu100_Chips_PlayerMax:
            errorLb = "已超过自身下注上限";
            break;

           case niuniuErrorType.Niu100_Chips_ZhuangMax:
            errorLb = "已超过四门下注上限";
          }
          niuniuCreateMoveMessage(errorLb);
        }
      });
    };
    hundredNiuHandler.requestAlwaysChips = function(isClick) {
      GameNet.getInstance().request("room.niuHundredHandler.alwaysChips", function(rtn) {});
    };
    hundredNiuHandler.registMessage = function() {
      var self = this;
      GameNet.getInstance().setCallBack("niuhun-onGameStart", function(data) {
        self.playerInfo = [];
        if (null != data.zhuang) if (null != data.zhuang.player) {
          self.playerInfo.push(data.zhuang.player);
          self.zhuangUid = data.zhuang.player.uid;
          self.zhuangInfo = data.zhuang.player;
          self.lianzhuangNum = data.zhuang.count;
        } else {
          self.playerInfo.push(self.zhuangPlayers);
          self.zhuangInfo = self.zhuangPlayers;
          self.zhuangUid = self.zhuangPlayers.uid;
        }
        if (data.players) for (var i = 0; i < data.players.length; i++) self.playerInfo.push(data.players[i]);
        if (data.guide) {
          null != data.guide.player ? self.guideId = data.guide.player.uid : self.guideId = 0;
          self.guideInfo = data.guide;
          self.playerInfo.push(data.guide.player);
        }
        sendEvent("niuhun-onGameStart", data);
      });
      GameNet.getInstance().setCallBack("niuhun-onBaoZhuang", function(data) {
        sendEvent("niuhun-onBaoZhuang");
      });
      GameNet.getInstance().setCallBack("niuhun-onGameEnd", function(data) {
        self.isFlyChipsAndCoin = true;
        self.selfChipsNum = {
          0: 0,
          1: 0,
          2: 0,
          3: 0
        }, sendEvent("niuhun-onGameEnd", data);
      });
      GameNet.getInstance().setCallBack("niuhun-onGameInfo", function(data) {
        self.status = data.status;
        self.gameTimes = data.timer;
        self.chipsList = data.chips;
        sendEvent("niuhun-onGameInfo", data);
      });
      GameNet.getInstance().setCallBack("niuhun-onCardInfo", function(data) {
        self.pokerType = [];
        self.pokerCards = [];
        self.pokerCards3 = [];
        self.pokerResult = [];
        self.betPosPlayer = [];
        self.pokerType.push(data.zhuang.type);
        self.pokerCards.push(data.zhuang.cards);
        self.pokerCards3.push(data.zhuang.card3);
        for (var i = 0; i < data.xian.length; i++) {
          self.pokerType.push(data.xian[i].type);
          self.pokerCards.push(data.xian[i].cards);
          self.pokerCards3.push(data.xian[i].card3);
        }
        self.pokerResult = data.result;
        self.betPosPlayer = data.xianChips;
        sendEvent("niuhun-onCardInfo", data);
      });
      GameNet.getInstance().setCallBack("niuhun-onGameChips", function(data) {
        var index = data.idx;
        var selfNum = data.all;
        var allNum = data.total;
        var userId = data.uid;
        for (var key in self.selfChipsNum) key == index && userId == GameData.player.uid && (self.selfChipsNum[key] = selfNum);
        sendEvent("niuhun-onGameChips", data);
      });
      GameNet.getInstance().setCallBack("niuhun-onChipsInfo", function(data) {});
      GameNet.getInstance().setCallBack("niuhun-onZhuangCoin", function(data) {
        sendEvent("niuhun-onZhuangCoin", data);
      });
    };
    cc._RF.pop();
  }, {
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler"
  } ],
  hundred_backPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87abfEEw19BabmdmJlYYyIw", "hundred_backPanel");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        tipsSp: cc.Sprite
      },
      onLoad: function onLoad() {},
      showBackUI: function showBackUI(type) {
        var url = "";
        "zhuang" == type ? url = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/backHome/bg_zaiwanyihui_wenzi2.png")) : "xian" == type && (url = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/backHome/bg_zaiwanyihui_wenzi3.png")));
        this.tipsSp.spriteFrame = new cc.SpriteFrame(url);
      },
      quitRoom: function quitRoom() {
        RoomHandler.quitRoom(RoomHandler.room.id);
      },
      closePanel: function closePanel() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  hundred_dealerPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbb8b38+lZJPpG7qG2qwnQH", "hundred_dealerPanel");
    "use strict";
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    var HundredNiuHandler = require("hundredNiuHandler");
    var NiuNiuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        dealerNode: cc.Node,
        contentNode: cc.Node,
        playerInfo: cc.Node,
        lineUpNum: cc.Label,
        scrollView: cc.ScrollView,
        upZhuangCdtion: cc.Label,
        costPanel: cc.Node
      },
      onLoad: function onLoad() {},
      showUI: function showUI(data) {
        this.initUI();
        if (!data) return;
        this.setLineUpNum(data);
        this.setUpCondition();
        this.showHeadInfo(data);
      },
      initUI: function initUI() {
        this.lineUpNum.string = "";
        this.dealerNode.active = true;
        this.costPanel.active = false;
        this.upZhuangCdtion.string = "";
        this.contentNode.removeAllChildren();
      },
      showHeadInfo: function showHeadInfo(data) {
        for (var i = 0; i < data.length; i++) {
          var player = this.contentNode.getChildByName("player" + i);
          if (void 0 == player) {
            player = cc.instantiate(this.playerInfo);
            player.y = -51 - i * this.playerInfo.height;
            this.contentNode.height = (i + 1) * this.playerInfo.height;
            player.parent = this.contentNode;
            player.name = "player" + i;
          }
          var numNode = cc.find("num", player);
          var numLb = cc.find("numLb", player);
          var coinNode = cc.find("coin", player);
          var nameNode = cc.find("name", player);
          var headNode = cc.find("headMask/headIcon", player);
          void 0 != data[i].name && this.setName(nameNode, data[i].name);
          void 0 != data[i].headimgurl && this.setHeadIcon(headNode, data[i].headimgurl);
          void 0 != data[i].coin && (coinNode.getComponent("cc.Label").string = ConversionCoinValue(data[i].coin, 0));
          this.showSign(numNode, numLb, i);
        }
      },
      setName: function setName(nameNode, nameLb) {
        nameNode.getComponent("cc.Label").string = getShortStr(nameLb, 4);
      },
      setHeadIcon: function setHeadIcon(headNode, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          headNode.getComponent("cc.Sprite").spriteFrame = null;
          return;
        }
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showSign: function showSign(node, lbNode, num) {
        if (num <= 2) {
          var url = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/shangzhuang/jp_" + num + ".png"));
          node.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(url);
          node.active = true;
          lbNode.active = false;
        } else {
          lbNode.getComponent("cc.Label").string = num + 1;
          lbNode.active = true;
          node.active = false;
        }
      },
      setLineUpNum: function setLineUpNum(data) {
        this.lineUpNum.string = "当前排队" + data.length + "人";
      },
      setUpCondition: function setUpCondition() {
        var scorelev = roomHandler.room.opts.scorelv;
        var shangzhuangNum = getMatchShangZhuangFinal(gameDefine.GameType.Game_Niu_Hundred, scorelev);
        this.upZhuangCdtion.string = "上庄条件：" + ConversionCoinValue(shangzhuangNum, 0);
      },
      clickUpZhuang: function clickUpZhuang() {
        var self = this;
        GameNet.getInstance().request("room.niuHundredHandler.upZhuang", {}, function(rtn) {
          switch (rtn.result) {
           case NiuNiuPokerHandler.ERRORTYPE.SUCCESSE:
            self.showUI(rtn.zhuanglist);
            var index = self.getSelfPosition(rtn.zhuanglist);
            var playNode = self.contentNode.getChildByName("player" + index);
            self.scrollView.scrollToOffset(cc.p(0, -playNode.y), .1);
            cc.log("is upZhuangCdtion");
            break;

           case NiuNiuPokerHandler.ERRORTYPE.Niu100_Zhuang_Coin:
            self.costPanel.active = true;
            self.dealerNode.active = false;
            break;

           case NiuNiuPokerHandler.ERRORTYPE.Niu100_Zhuang_Already:
            niuniuCreateMoveMessage("您已在队列中");
            break;

           case NiuNiuPokerHandler.ERRORTYPE.Niu100_Zhuang_UpAlready:
            niuniuCreateMoveMessage("您已上庄");
            break;

           default:
            cc.log("error");
          }
        });
      },
      getSelfPosition: function getSelfPosition(zhuangData) {
        var i = zhuangData.length;
        while (i--) if (zhuangData[i] && zhuangData[i].uid == GameData.player.uid) return i;
        return 0;
      },
      clickGoingShop: function clickGoingShop() {
        var self = this;
        openView("shoppingPanel", void 0, function(target) {
          self.close();
          target.getComponent("shoppingPanel").showPanel(2);
        });
      },
      close: function close() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    hundredNiuHandler: "hundredNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler"
  } ],
  hundred_fortunePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82d1d49tBxFI4nVnGT4/RAy", "hundred_fortunePanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        xingSp: cc.Node,
        xingAnim: cc.Node
      },
      onLoad: function onLoad() {
        this.xingSp.active = false;
        this.xingAnim.active = false;
      },
      playXingAnimation: function playXingAnimation() {
        this.xingAnim.active = true;
        var anim = this.xingAnim.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("newAnimation", 1);
        var self = this;
        this.scheduleOnce(function() {
          self.xingAnim.active = false;
          self.xingSp.active = true;
        }, 1.5);
      },
      cliskShowTips: function cliskShowTips() {
        niuniuCreateMoveMessage("神算子已在该区域下注");
      }
    });
    cc._RF.pop();
  }, {} ],
  hundred_pokerPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c29e7cP8TxBuLyZZu8eoWnH", "hundred_pokerPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        chipSp: cc.Sprite
      },
      onLoad: function onLoad() {},
      setChipImg: function setChipImg(num) {
        if (num) {
          var iconUrl = "resources/hundredNiuNiu/uiResources/table/chips/x_" + num + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.chipSp.spriteFrame = new cc.SpriteFrame(texture);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  hundred_rulePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d73fH39KVODLcO5MPjDJp3", "hundred_rulePanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      close: function close() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {} ],
  hundred_runscorePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c47fNbiqNNuIIfydDFvIMH", "hundred_runscorePanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreLabel: cc.Label,
        fonts: [ cc.Font ]
      },
      onLoad: function onLoad() {},
      getScoreColor: function getScoreColor(score) {
        this.scoreLabel.string = score;
        if (score > 0) {
          this.scoreLabel.string = "+" + score;
          this.scoreLabel.font = this.fonts[0];
        } else if (score < 0) {
          this.scoreLabel.string = score;
          this.scoreLabel.font = this.fonts[1];
        } else if (0 == score) {
          this.scoreLabel.string = score;
          this.scoreLabel.font = this.fonts[2];
        }
      },
      setAnchor: function setAnchor(anchor) {
        this.scoreLabel.node.anchorX = anchor;
      }
    });
    cc._RF.pop();
  }, {} ],
  hundred_sankePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8bc9eHlWs5LoaokI3KypRC6", "hundred_sankePanel");
    "use strict";
    var HundredNiuHandler = require("hundredNiuHandler");
    var NiuNiuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        contentNode: cc.Node,
        playerInfo: cc.Node
      },
      onLoad: function onLoad() {},
      showUI: function showUI(data) {
        this.initUI();
        if (!data) return;
        this.showList(data);
      },
      initUI: function initUI() {
        this.contentNode.removeAllChildren();
      },
      showList: function showList(data) {
        var playerInfom = data.players;
        var winNums = data.winNums;
        var guideInfo = HundredNiuHandler.guideInfo;
        if (null != guideInfo.player) {
          var guideId = guideInfo.player.uid;
          for (var j = 0; j < playerInfom.length; j++) {
            var playerData = playerInfom[j];
            if (playerData.uid == guideId) {
              playerInfom = NiuNiuPokerHandler.itemtoArraytop(playerInfom, j);
              winNums = NiuNiuPokerHandler.itemtoArraytop(winNums, j);
            }
          }
        }
        for (var i = 0; i < playerInfom.length; i++) {
          var playerData = playerInfom[i];
          var player = this.contentNode.getChildByName("player" + i);
          if (void 0 == player) {
            player = cc.instantiate(this.playerInfo);
            player.y = -48 - i * this.playerInfo.height;
            this.contentNode.height = (i + 1) * this.playerInfo.height;
            player.parent = this.contentNode;
            player.name = "player" + i;
          }
          var signSp = cc.find("bg/signSp", player);
          var signLb = cc.find("bg/signLb", player);
          var headIcon = cc.find("headNode/headMask/headIcon", player);
          var name = cc.find("headNode/name", player);
          var coin = cc.find("headNode/coin", player);
          void 0 != playerData.name && this.setName(name, playerData.name);
          void 0 != playerData.headimgurl && this.setHeadIcon(headIcon, playerData.headimgurl);
          void 0 != playerData.coin && (coin.getComponent("cc.Label").string = ConversionCoinValue(playerData.coin, 0));
          this.showSignSp(signSp, i);
          this.showSignLb(signLb, i);
          this.showWinAndChips(player, winNums[i]);
        }
      },
      setName: function setName(nameNode, nameLb) {
        nameNode.getComponent("cc.Label").string = getShortStr(nameLb, 4);
      },
      setHeadIcon: function setHeadIcon(headNode, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          headNode.getComponent("cc.Sprite").spriteFrame = null;
          return;
        }
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showSignSp: function showSignSp(signSp, num) {
        var url = "";
        if (null != HundredNiuHandler.guideInfo.player) {
          if (0 == num) url = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/xian/shensuanzi.png")); else if (1 == num) url = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/xian/dafuhao.png")); else if (num > 1) {
            signSp.active = false;
            return;
          }
        } else if (0 == num) url = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/xian/dafuhao.png")); else if (num >= 1) {
          signSp.active = false;
          return;
        }
        signSp.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(url);
        signSp.active = true;
      },
      showSignLb: function showSignLb(signLb, num) {
        if (null != HundredNiuHandler.guideInfo.player && num <= 1 || null == HundredNiuHandler.guideInfo.player && num < 1) {
          signLb.active = false;
          return;
        }
        null != HundredNiuHandler.guideInfo.player ? signLb.getComponent("cc.Label").string = num : signLb.getComponent("cc.Label").string = num + 1;
        signLb.active = true;
      },
      showWinAndChips: function showWinAndChips(playerNode, num) {
        var winNum = cc.find("winNode/winNum", playerNode);
        winNum.getComponent("cc.Label").string = num;
      },
      close: function close() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    hundredNiuHandler: "hundredNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler"
  } ],
  hundred_trendPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "417d4IgrOBA9a6GAtsy27RG", "hundred_trendPanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        contentNode: cc.Node,
        playerInfo: cc.Node
      },
      onLoad: function onLoad() {},
      showUI: function showUI(data) {
        this.initUI();
        if (!data) return;
        this.showList(data);
      },
      initUI: function initUI() {
        this.contentNode.removeAllChildren();
      },
      showList: function showList(data) {
        for (var i = data.length - 1; i >= 0; i--) {
          var index = data.length - (i + 1);
          var list = this.contentNode.getChildByName("list" + index);
          if (void 0 == list) {
            list = cc.instantiate(this.playerInfo);
            list.y = -22 - index * this.playerInfo.height;
            this.contentNode.height = (index + 1) * this.playerInfo.height;
            list.parent = this.contentNode;
            list.name = "list" + index;
          }
          var listData = data[i];
          for (var j = 0; j < list.childrenCount; j++) {
            var child = list.children[j];
            var childResult = listData[j];
            this.setResultIcon(child, childResult);
          }
        }
      },
      setResultIcon: function setResultIcon(headNode, sign) {
        var texture;
        texture = sign ? cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/zoushi/bai.png")) : cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/panelUI/zoushi/sheng.png"));
        headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
      },
      close: function close() {
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {} ],
  joinControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "638fezSDt9JXZMp8H88cXbB", "joinControl");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_join: cc.Node,
        room_number: cc.String
      },
      onLoad: function onLoad() {
        this.resetNumber();
      },
      onEnable: function onEnable() {},
      onDestroy: function onDestroy() {},
      loadSpriteImg: function loadSpriteImg(sprite, imgUrl) {
        if (void 0 == sprite || void 0 == imgUrl || imgUrl.length <= 0) return;
        var texture = cc.textureCache.addImage(cc.url.raw(imgUrl));
        texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
      },
      enterNumber: function enterNumber(evt, data) {
        soundMngr.instance.playAudioOther("button");
        if (this.room_number.length < 6) {
          this.room_number += data;
          this.showNumber();
          this.room_number.length >= 6 && RoomHandler.enterRoom(this.room_number);
        }
      },
      deleteNumber: function deleteNumber(evt) {
        soundMngr.instance.playAudioOther("button");
        this.room_number = this.room_number.substring(0, this.room_number.length - 1);
        this.showNumber();
      },
      resetNumber: function resetNumber(evt) {
        evt && soundMngr.instance.playAudioOther("button");
        this.room_number = "";
        this.showNumber();
      },
      showNumber: function showNumber() {
        for (var i = 1; i <= this.room_number.length; i++) {
          var number = this.room_number.substr(i - 1, 1);
          var sprite = cc.find("panel/enter_number/room_number/number" + i, this.layer_join);
          sprite.getComponent("cc.Label").string = number;
          sprite.active = true;
        }
        for (var i = 6; i > this.room_number.length; i--) {
          var node = cc.find("panel/enter_number/room_number/number" + i, this.layer_join);
          node.active = false;
        }
      },
      enterRoom: function enterRoom(evt) {
        soundMngr.instance.playAudioOther("button");
        "" !== this.room_number && RoomHandler.enterRoom(this.room_number);
      },
      backToHome: function backToHome(evt) {
        soundMngr.instance.playAudioOther("button");
        this.layer_join.active = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    matchHandler: "matchHandler",
    roomHandler: "roomHandler"
  } ],
  joinclubPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c780x9SZJCS7Fs4ZvlcELc", "joinclubPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        joinClubEditBox: cc.EditBox
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      joinClubClick: function joinClubClick() {
        soundMngr.instance.playAudioOther("button");
        var clubID = this.joinClubEditBox.getComponent(cc.EditBox).string;
        ClubHandler.getInstance().reqJoinClub(clubID);
      },
      close: function close() {
        soundMngr.instance.playAudioOther("button");
        closeView("joinclubIDPanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  locationView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "558b3uUt/JCxZ+omzMWAqSA", "locationView");
    "use strict";
    cc._RF.pop();
  }, {} ],
  loginHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8db04S6iu1P25FUEdEhAa35", "loginHandler");
    "use strict";
    var configMgr = require("configMgr");
    var errorCode = require("errorCode");
    var configMgr = require("configMgr");
    var updateHandler = require("updateHandler");
    var STATUS = {
      DISCONNECT: 0,
      CONNECTING: 1,
      CONNECTED: 2
    };
    var login = {
      status: STATUS.DISCONNECT
    };
    module.exports = login;
    login.loginBtn = function(account) {
      try {
        if (this.status != STATUS.DISCONNECT) return;
        openView("Loading");
        if (!cc.sys.isNative) {
          this.onWebLogin(account);
          return;
        }
        if (this.loginByLocalData()) return;
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "wx_login", "()V") : cc.sys.OS_IOS == cc.sys.os ? jsb.reflection.callStaticMethod("AppController", "wx_login") : this.onSimulatorLogin();
      } catch (e) {
        WriteLog("loginHandler.loginBtn throw error:" + JSON.stringify(e));
      }
    };
    login.loginByLocalData = function() {
      if (!cc.sys.isNative) return false;
      var localData = cc.sys.localStorage.getItem("loginData");
      if (!localData) return false;
      var Data = eval("(" + localData + ")");
      this.connect(Data);
      return true;
    };
    login.onWebLogin = function(account) {
      var accountData = account || "Web-" + new Date().getTime();
      cc.sys.localStorage.setItem("testName", accountData);
      var loginData = {
        account: accountData,
        nickname: accountData,
        sex: Math.floor(2 * Math.random() + 1),
        app: {
          appid: "com.mahjong.tianjin",
          os: "web"
        }
      };
      this.connect(loginData);
    };
    login.onSimulatorLogin = function() {
      var accountData = cc.sys.localStorage.getItem("account") || "Simulator-" + new Date().getTime();
      var loginData = {
        account: accountData,
        nickname: accountData,
        app: {
          appid: "com.mahjong.tianjin",
          os: "simulator"
        }
      };
      this.connect(loginData);
    };
    login.login = function(loginData) {
      loginData.version = updateHandler.getVersion();
      GameNet.getInstance().request("connector.entryHandler.login", loginData, function(rtn) {
        if (rtn.result == errorCode.Success) {
          cc.sys.localStorage.setItem("loginData", JSON.stringify(loginData));
          GameData.player = rtn.pinfo;
          loginYunwa(GameData.player.uid.toString(), GameData.player.name);
          if (void 0 === GameData.player.roomid || GameData.player.roomid <= 0) {
            cc.director.loadScene("home");
            closeView("Loading");
          } else GameNet.getInstance().request("room.roomHandler.enterRoom", {
            roomid: GameData.player.roomid,
            posInfo: getPosInfo()
          }, function(rtn) {
            if (rtn.result != errorCode.Success) {
              GameData.player.roomid = void 0;
              cc.director.loadScene("home");
              closeView("Loading");
            }
          });
        } else {
          if (rtn.result == errorCode.accountHasSeal) {
            createMessageBox("帐号已封停,无法登录！", function() {
              closeView("Loading");
            });
            return;
          }
          if (rtn.result == errorCode.codeVersionError) {
            createMessageBox("请更新至最新版本,体验更优质的游戏内容.", function() {
              closeView("Loading");
            });
            return;
          }
          if (rtn.result == errorCode.packetVersionError) {
            createMessageBox("请下载最新的安装包,更多精彩值得期待.", function() {
              closeView("Loading");
            });
            return;
          }
          WriteLog("login error " + JSON.stringify(rtn));
          GameData.restart();
        }
      });
    };
    login.logout = function(uid) {
      cc.sys.localStorage.removeItem("loginData");
      cc.game.end();
    };
    login.connect = function(loginData) {
      var self = this;
      this.status = STATUS.CONNECTING;
      GameNet.getInstance().connect(configMgr.getIP(), configMgr.getPort(), function() {
        WriteLog("connect suc...");
        self.status = STATUS.CONNECTED;
        self.login(loginData);
      }, function() {
        WriteLog("connect failed...");
        self.status = STATUS.DISCONNECT;
        createMessageBox("网络断开，请重新连接", function() {
          GameData.autoLogin = true;
          WriteLog("点击重连...");
          cc.director.loadScene("login");
        });
      });
    };
    login.OnWXLogin = function(wxinfo) {
      var userinfo = eval("(" + wxinfo + ")");
      if (null == userinfo.unionid) return;
      userinfo.nickname = emoji2Str(userinfo.nickname);
      var self = this;
      GameData.client.sex = userinfo.sex;
      GameData.client.nickname = userinfo.nickname;
      GameData.client.headurl = userinfo.headimgurl;
      var loginData = {
        account: "wx_" + userinfo.unionid,
        openid: userinfo.openid,
        nickname: userinfo.nickname,
        sex: userinfo.sex,
        headimgurl: userinfo.headimgurl,
        app: {
          appid: "com.mahjong.tianjin",
          os: cc.sys.os,
          area: configMgr.getAreaType()
        }
      };
      self.connect(loginData);
    };
    login.OnWXFailed = function() {};
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    errorCode: "errorCode",
    updateHandler: "updateHandler"
  } ],
  login: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57cf4uTldVG94VmXKfa9Rof", "login");
    "use strict";
    var configMgr = require("configMgr");
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    var matchHandler = require("matchHandler");
    var loginHandler = require("loginHandler");
    var updateHandler = require("updateHandler");
    var mahjongProtocol = require("TuiDaoHu-Protocol");
    var tdk_roomData = require("tdkRoomData");
    var ZJH_roomData = require("ZJH-RoomData");
    var niuNiuHandler = require("niuNiuHandler");
    var hundredNiuHandler = require("hundredNiuHandler");
    var competitionHandler = require("competitionHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        manifestUrl: cc.RawAsset,
        versionfile: cc.RawAsset,
        toggle_agree: cc.Toggle,
        label_version: cc.Label,
        login_panel: cc.Node,
        update_panel: cc.Node,
        update_progress: cc.ProgressBar,
        uidInputBox: cc.EditBox,
        updateText: cc.Label,
        gengxinStr: cc.Label,
        huaNode: cc.Node,
        loginImage: cc.Node,
        wenAn: cc.Node
      },
      onLoad: function onLoad() {
        configMgr.init();
        registEvent("updateStart", this, this.showUpdatePanel);
        registEvent("updateProgress", this, this.showUpdateProgress);
        registEvent("updateFinish", this, this.showLoginPanel);
        registEvent("updateError", this, this.showUpdateError);
        this.uidInputBox.node.active = !cc.sys.isNative;
        cc.sys.os == cc.sys.OS_WINDOWS && (this.uidInputBox.node.active = true);
        this.login_panel.active = false;
        tdk_roomData.unregistAllMessage();
        RoomHandler.registMessage();
        matchHandler.registMessage();
        tdk_roomData.registMessage();
        ZJH_roomData.registMessage();
        competitionHandler.registMessage();
        niuNiuHandler.registMessage();
        hundredNiuHandler.registMessage();
        GameData.init();
        GameData13.init();
        GameDataPDK.init();
        GameDataTJDDZ.init();
        profileNiuNiu.init();
        mahjongProtocol.registMessage();
        updateHandler.checkUpdate(this.manifestUrl);
        competitionHandler.getActivityList();
        this.label_version.string = "版本号:" + updateHandler.getVersion();
        this.flag_init_x = this.huaNode.x;
        this.setLoginWenAn();
        this.setLoginImage();
      },
      onEnable: function onEnable() {
        soundMngr.instance.stopAll();
        soundMngr.instance.playMusic("sound/wait");
      },
      onDestroy: function onDestroy() {
        unregistEvent("updateStart", this, this.showUpdatePanel);
        unregistEvent("updateProgress", this, this.showUpdateProgress);
        unregistEvent("updateFinish", this, this.showLoginPanel);
        unregistEvent("updateError", this, this.showUpdateError);
      },
      showLoginPanel: function showLoginPanel() {
        this.login_panel.active = true;
        this.update_panel.active = false;
        loginHandler.loginByLocalData();
      },
      showUpdatePanel: function showUpdatePanel() {
        this.login_panel.active = false;
        this.update_panel.active = true;
        this.showUpdateProgress({
          detail: 0
        });
      },
      showUpdateProgress: function showUpdateProgress(data) {
        if (null == data) return;
        this.gengxinStr.node.active = true;
        this.update_progress.node.active = true;
        this.huaNode.active = true;
        var nowPrg = 100 * data.detail;
        nowPrg = parseInt(nowPrg);
        if (nowPrg > 100) return;
        this.updateText.string = "正在更新资源";
        this.gengxinStr.string = nowPrg + "%";
        this.update_progress.progress = data.detail;
        this.huaNode.x = this.flag_init_x + this.update_progress.totalLength * this.update_progress.progress;
      },
      showUpdateError: function showUpdateError(data) {
        var self = this;
        createMessageBox(data.detail, function() {
          updateHandler.retry();
        });
      },
      loginBtnCliecked: function loginBtnCliecked(evt) {
        soundMngr.instance.playAudioOther("button");
        var inputUid = this.uidInputBox.string;
        loginHandler.loginBtn(inputUid);
      },
      setLoginImage: function setLoginImage() {
        var textureUrl = configMgr.getLogo();
        var texture = cc.textureCache.addImage(cc.url.raw(textureUrl));
        texture && this.loginImage && (this.loginImage.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      },
      setLoginWenAn: function setLoginWenAn() {
        var label1 = cc.find("label1", this.wenAn);
        var label2 = cc.find("label2", this.wenAn);
        label1.getComponent(cc.Label).string = configMgr.getNotice();
        label2.getComponent(cc.Label).string = configMgr.getVersionText();
      },
      showAgreePanel: function showAgreePanel() {
        soundMngr.instance.playAudioOther("button");
        openView("AgreePanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    "TuiDaoHu-Protocol": "TuiDaoHu-Protocol",
    "ZJH-RoomData": "ZJH-RoomData",
    competitionHandler: "competitionHandler",
    configMgr: "configMgr",
    hundredNiuHandler: "hundredNiuHandler",
    loginHandler: "loginHandler",
    matchHandler: "matchHandler",
    niuNiuHandler: "niuNiuHandler",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler",
    tdkRoomData: "tdkRoomData",
    updateHandler: "updateHandler"
  } ],
  mahjong_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8c42vxgMtJ/aKotXFHiDzy", "mahjong_changchun");
    "use strict";
    var mahjong = require("mahjong");
    var util = require("utils");
    var GangType = {
      GT_MING_GANG: 0,
      GT_AN_GANG: 1,
      GT_FENG_GANG: 2,
      GT_XI_GANG: 3,
      GT_YAO_GANG: 4,
      GT_JIU_GANG: 5
    };
    var ChangChunMj = function ChangChunMj() {
      mahjong.call(this);
    };
    util.inherits(ChangChunMj, mahjong);
    module.exports = ChangChunMj;
    ChangChunMj.prototype.canChi = function(uid, card) {
      var chiCards = [];
      var handcard = GameData.getMyHandCards();
      handcard.sort();
      var res = [ handcard[0] ];
      for (var i = 1; i < handcard.length; i++) handcard[i] !== res[res.length - 1] && res.push(handcard[i]);
      var c1 = card - 2, c2 = card - 1, c3 = card - 0 + 1, c4 = card - 0 + 2;
      for (var i = 0; i < res.length; i++) if (c1 == res[i]) for (var j = 0; j < res.length; j++) if (c2 == res[j]) {
        chiCards.push([ c1, c2 ]);
        break;
      }
      for (var i = 0; i < res.length; i++) if (c2 == res[i]) for (var j = 0; j < res.length; j++) if (c3 == res[j]) {
        chiCards.push([ c2, c3 ]);
        break;
      }
      for (var i = 0; i < res.length; i++) if (c3 == res[i]) for (var j = 0; j < res.length; j++) if (c4 == res[j]) {
        chiCards.push([ c3, c4 ]);
        break;
      }
      return chiCards;
    };
    ChangChunMj.prototype.canDianPao = function(uid, card) {};
    ChangChunMj.prototype.isHuier = function(card) {
      if (GameData.game.cardHuier1 == card) return true;
      return false;
    };
    ChangChunMj.prototype.canHu = function(handcards, obCard, checkFlag) {
      return mahjong.prototype.canHu.call(this, handcards, obCard, checkFlag);
    };
    ChangChunMj.prototype.getGangCardsByType = function(type) {};
    cc._RF.pop();
  }, {
    mahjong: "mahjong",
    utils: "utils"
  } ],
  mahjong_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b1c2bDdow1Eur+9AHSrUWGw", "mahjong_huadian");
    "use strict";
    var mahjong = require("mahjong");
    var util = require("utils");
    var CardsType = {
      CT_None: 0,
      CT_Diliu: 1,
      CT_Supai: 2,
      CT_Hundiao: 3,
      CT_DHundiao: 4,
      CT_Zhuowu: 5,
      CT_Yitiaolong: 6,
      CT_Benhuilong: 7,
      CT_Tianhu: 8,
      CT_Dihu: 9,
      CT_Gangkaihua: 10,
      CT_SuBenlong: 11,
      CT_Chan: 12,
      CT_Wulong: 13,
      CT_JinGang: 14
    };
    var HuadianMj = function HuadianMj() {
      mahjong.call(this);
    };
    util.inherits(HuadianMj, mahjong);
    module.exports = HuadianMj;
    HuadianMj.prototype.canChi = function(uid, card) {
      var chiCards = [];
      var handcard = GameData.getMyHandCards();
      handcard.sort();
      var res = [ handcard[0] ];
      for (var i = 1; i < handcard.length; i++) handcard[i] !== res[res.length - 1] && res.push(handcard[i]);
      var c1 = card - 2, c2 = card - 1, c3 = card - 0 + 1, c4 = card - 0 + 2;
      for (var i = 0; i < res.length; i++) if (c1 == res[i]) for (var j = 0; j < res.length; j++) if (c2 == res[j]) {
        chiCards.push([ c1, c2 ]);
        break;
      }
      for (var i = 0; i < res.length; i++) if (c2 == res[i]) for (var j = 0; j < res.length; j++) if (c3 == res[j]) {
        chiCards.push([ c2, c3 ]);
        break;
      }
      for (var i = 0; i < res.length; i++) if (c3 == res[i]) for (var j = 0; j < res.length; j++) if (c4 == res[j]) {
        chiCards.push([ c3, c4 ]);
        break;
      }
      return chiCards;
    };
    HuadianMj.prototype.canDianPao = function(uid, card) {
      return false;
    };
    HuadianMj.prototype.isHuier = function(card) {
      if (GameData.game.cardHuier1 == card) return true;
      if (GameData.game.cardHuier2 == card) return true;
      return false;
    };
    HuadianMj.prototype.canHu = function(handcards, obCard, checkFlag) {
      if (GameData.player.isXiangGong) return false;
      return mahjong.prototype.canHu.call(this, handcards, obCard, checkFlag);
    };
    HuadianMj.prototype.getHuType = function(huCards, handcards, obCard, checkFlag) {
      var i = 0;
      var type = [];
      var len = huCards.length;
      for (;i < len; i++) {
        type[i] = [];
        var deck = huCards[i];
        if (checkFlag) {
          this.isGangkaihua() && type[i].push(CardsType.CT_Gangkaihua);
          this.isTianhu() ? type[i].push(CardsType.CT_Tianhu) : this.isDihu() && type[i].push(CardsType.CT_Dihu);
        }
        if (this.isSuBenLong(deck, GameData.game.cardHuier1)) {
          type[i].push(CardsType.CT_SuBenlong);
          this.isZhuowu(deck, obCard) && type[i].push(CardsType.CT_Zhuowu);
          continue;
        }
        if (this.isBenLong(deck, GameData.game.cardHuier1)) {
          type[i].push(CardsType.CT_Benhuilong);
          if (this.isHundiao(deck, obCard)) type[i].push(CardsType.CT_Hundiao); else {
            this.isDHundiao(deck, obCard, true) && type[i].push(CardsType.CT_DHundiao);
            this.isZhuowu(deck, obCard) && type[i].push(CardsType.CT_Zhuowu);
          }
          continue;
        }
        if (this.isLong(deck, GameData.game.cardHuier1)) {
          type[i].push(CardsType.CT_Yitiaolong);
          if (this.isSupai(deck)) type[i].push(CardsType.CT_Supai); else if (this.isHundiao(deck, obCard)) type[i].push(CardsType.CT_Hundiao); else {
            this.isDHundiao(deck, obCard, true) && type[i].push(CardsType.CT_DHundiao);
            this.isZhuowu(deck, obCard) && type[i].push(CardsType.CT_Zhuowu);
          }
          continue;
        }
        if (this.isZhuowu(deck, obCard)) {
          type[i].push(CardsType.CT_Zhuowu);
          this.isSupai(deck) ? type[i].push(CardsType.CT_Supai) : this.isDHundiao(deck, obCard, false) && type[i].push(CardsType.CT_DHundiao);
          continue;
        }
        this.isSupai(deck) ? type[i].push(CardsType.CT_Supai) : this.isHundiao(deck, obCard) ? type[i].push(CardsType.CT_Hundiao) : this.isDHundiao(deck, obCard, false) && type[i].push(CardsType.CT_DHundiao);
      }
      var deck = [];
      if (this.isJinGang(handcards, deck)) {
        type[i] = [];
        type[i].push(CardsType.CT_JinGang);
        huCards[i] = deck;
        this.isGangkaihua() && type[i].push(CardsType.CT_Gangkaihua);
        this.isTianhu() ? type[i].push(CardsType.CT_Tianhu) : this.isDihu() && type[i].push(CardsType.CT_Dihu);
      }
      var typemax = -1;
      var scoremax = 0;
      for (var i = 0; i < type.length; i++) {
        if (!GameData.room.opts.hd && 1 == type[i].length && (type[i][0] == CardsType.CT_Hundiao || type[i][0] == CardsType.CT_DHundiao)) continue;
        var score = this.calcHuScore(type[i]);
        if (score > scoremax) {
          typemax = i;
          scoremax = score;
        }
      }
      return [ type[typemax], huCards[typemax], obCard, scoremax ];
    };
    HuadianMj.prototype.calcHuScore = function(type) {
      if (type.length <= 0) return 0;
      var times = 1, point = 0;
      for (var i = 0; i < type.length; i++) switch (type[i]) {
       case CardsType.CT_Supai:
       case CardsType.CT_Hundiao:
       case CardsType.CT_DHundiao:
       case CardsType.CT_Gangkaihua:
        times *= 2;
        break;

       case CardsType.CT_Zhuowu:
        point += 3;
        break;

       case CardsType.CT_Yitiaolong:
        point += 4;
        break;

       case CardsType.CT_Benhuilong:
        point += 8;
        break;

       case CardsType.CT_Tianhu:
        times *= 8;
        break;

       case CardsType.CT_Dihu:
        times *= 4;
        break;

       case CardsType.CT_SuBenlong:
        point += 4, times *= 4;
        break;

       case CardsType.CT_JinGang:
        point += GameData.createRoomOpts.jGangScore;
      }
      times = times || 1;
      point = point || 1;
      return times * point;
    };
    HuadianMj.prototype.getHuTypeString = function() {
      var detail = "", chan = false;
      var size = GameData.game.winnerType.length;
      for (var i = 0; i < size; i++) switch (GameData.game.winnerType[i]) {
       case CardsType.CT_Tianhu:
        detail += "天胡 *8   ";
        break;

       case CardsType.CT_Dihu:
        detail += "地胡 *4   ";
        break;

       case CardsType.CT_Supai:
        detail += "没混 *2   ";
        break;

       case CardsType.CT_Hundiao:
        detail += "混吊 *2   ";
        break;

       case CardsType.CT_DHundiao:
        detail += size > 1 ? "双混吊 *2   " : "混吊 *2   ";
        break;

       case CardsType.CT_Gangkaihua:
        detail += "杠开花 *2   ";
        break;

       case CardsType.CT_Zhuowu:
        detail += "捉五 +3   ";
        break;

       case CardsType.CT_Yitiaolong:
        detail += "一条龙 +4   ";
        break;

       case CardsType.CT_Benhuilong:
        detail += "本混龙 +4 *2 ";
        break;

       case CardsType.CT_Chan:
        chan = true;
        break;

       case CardsType.CT_Wulong:
        detail += "拉五龙   ";
        break;

       case CardsType.CT_SuBenlong:
        detail += "素本龙 +4 *4   ";
        break;

       case CardsType.CT_JinGang:
        4 == GameData.room.opts.jingang ? detail += "金杠胡 +4   " : 8 == GameData.room.opts.jingang && (detail += "金杠胡 +8   ");
      }
      chan && (detail += " 铲牌 -1");
      return detail;
    };
    HuadianMj.prototype.isSupai = function(deck) {
      for (var i = 0; i < deck.length; i++) if (this.isHuier(deck[i])) return false;
      return true;
    };
    HuadianMj.prototype.isHundiao = function(deck, obCard) {
      if (!this.isHuier(deck[1])) return false;
      if (!this.isHuier(obCard) && obCard == deck[0]) return true;
      if (this.isHuier(obCard) && this.isHuier(deck[0])) return true;
      return false;
    };
    HuadianMj.prototype.isDHundiao = function(deck, obCard, long) {
      var tempDeck = deck.concat();
      if (long) for (var n = 0; n < 3; n++) if (this.checkLong(tempDeck, 10 * n)) break;
      for (var i = 2; i < tempDeck.length; i += 3) {
        if (tempDeck[i] <= 0) continue;
        if (this.isHuier(obCard)) {
          if (this.isHuier(tempDeck[i]) && this.isHuier(tempDeck[i + 1]) && this.isHuier(tempDeck[i + 2])) return true;
        } else {
          if (obCard == tempDeck[i] && this.isHuier(tempDeck[i + 1]) && this.isHuier(tempDeck[i + 2])) return true;
          if (obCard == tempDeck[i + 1] && this.isHuier(tempDeck[i]) && this.isHuier(tempDeck[i + 2])) return true;
          if (obCard == tempDeck[i + 2] && this.isHuier(tempDeck[i]) && this.isHuier(tempDeck[i + 1])) return true;
        }
      }
      return false;
    };
    HuadianMj.prototype.isZhuowu = function(deck, obCard) {
      if (this.isHuier(obCard)) for (var i = 2; i < deck.length; i += 3) {
        if (14 == deck[i] && this.isHuier(deck[i + 1]) && 16 == deck[i + 2]) return true;
        if (14 == deck[i] && this.isHuier(deck[i + 1]) && this.isHuier(deck[i + 2])) return true;
        if (16 == deck[i] && this.isHuier(deck[i + 1]) && this.isHuier(deck[i + 2])) return true;
        if (this.isHuier(deck[i]) && this.isHuier(deck[i + 1]) && this.isHuier(deck[i + 2])) return true;
      } else if (15 == obCard) for (var i = 2; i < deck.length; i += 3) {
        if (14 == deck[i] && 15 == deck[i + 1] && 16 == deck[i + 2]) return true;
        if (14 == deck[i] && 15 == deck[i + 1] && this.isHuier(deck[i + 2])) return true;
        if (15 == deck[i] && 16 == deck[i + 1] && this.isHuier(deck[i + 2])) return true;
        if (15 == deck[i] && this.isHuier(deck[i + 1]) && this.isHuier(deck[i + 2])) return true;
      }
      return false;
    };
    HuadianMj.prototype.checkLong = function(deck, key) {
      if (!this.matchGroup(deck, [ key + 1, key + 2, key + 3 ])) return false;
      if (!this.matchGroup(deck, [ key + 4, key + 5, key + 6 ])) return false;
      if (!this.matchGroup(deck, [ key + 7, key + 8, key + 9 ])) return false;
      return true;
    };
    HuadianMj.prototype.isLong = function(deck) {
      for (var n = 0; n < 3; n++) {
        var key = 10 * n, tempDeck = deck.concat();
        if (!this.checkLong(tempDeck, key)) continue;
        return true;
      }
      return false;
    };
    HuadianMj.prototype.isBenLong = function(deck, huierCard) {
      var n = parseInt(huierCard / 10);
      if (n >= 3) return false;
      var key = 10 * n, tempDeck = deck.concat();
      return this.checkLong(tempDeck, key);
    };
    HuadianMj.prototype.isSuBenLong = function(deck, huierCard) {
      var n = parseInt(huierCard / 10);
      if (n >= 3) return false;
      var tempDeck = deck.concat();
      var huierNum = 0, lastHuier = 0;
      for (var i = 0; i < tempDeck.length; i++) if (this.isHuier(tempDeck[i])) {
        if (++huierNum > 2) return false;
        if (lastHuier == tempDeck[i]) return false;
        lastHuier = tempDeck[i];
      }
      if (2 != huierNum) return false;
      var key = 10 * n;
      return this.checkLong(tempDeck, key);
    };
    HuadianMj.prototype.isGangkaihua = function() {
      return 1 == GameData.game.gangOver;
    };
    HuadianMj.prototype.isTianhu = function() {
      return GameData.game.noActions && GameData.player.uid == GameData.game.zhuangUid && 0 == GameData.game.discard;
    };
    HuadianMj.prototype.isDihu = function() {
      return GameData.game.noActions && GameData.player.uid != GameData.game.zhuangUid && 0 == GameData.game.discard;
    };
    HuadianMj.prototype.isJinGang = function(handcards, deck) {
      var huier1 = handcards[GameData.game.cardHuier1], huier2 = handcards[GameData.game.cardHuier2];
      if (4 != huier1 && 4 != huier2) return false;
      for (var key in handcards) for (var i = 0; i < handcards[key]; i++) deck.push(key);
      return true;
    };
    cc._RF.pop();
  }, {
    mahjong: "mahjong",
    utils: "utils"
  } ],
  mahjong_hz: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "927b4oQEShCsrXAFWybULtX", "mahjong_hz");
    "use strict";
    var mahjong = require("mahjong");
    var util = require("utils");
    var hongzhongData = require("hongzhongData");
    var CardsType = {
      CT_None: 0
    };
    var HongZhongMj = function HongZhongMj() {
      mahjong.call(this);
    };
    util.inherits(HongZhongMj, mahjong);
    module.exports = HongZhongMj;
    HongZhongMj.prototype.getCardNumber = function(HandCards, cardId) {
      var number = 0;
      if (void 0 == HandCards || cardId <= 0) return number;
      for (var ii = 0; ii < HandCards.length; ii++) HandCards[ii] == cardId && number++;
      return number;
    };
    HongZhongMj.prototype.isHuier = function(cardId) {
      var gameInfoData = hongzhongData.getGameInfoData();
      if (gameInfoData && gameInfoData.wildcard) for (var ii = 0; ii < gameInfoData.wildcard.length; ii++) if (cardId == gameInfoData.wildcard[ii]) return true;
      return false;
    };
    HongZhongMj.prototype.canChi = function(uid, card) {
      var chiCards = [];
      var HandCards = hongzhongData.getHandCards(uid);
      if (void 0 == HandCards || card <= 0) return chiCards;
      var c1 = card - 2, c2 = card - 1, c3 = card - 0 + 1, c4 = card - 0 + 2;
      !this.isHuier(c1) && !this.isHuier(c2) && this.getCardNumber(HandCards, c1) > 0 && this.getCardNumber(HandCards, c2) > 0 && chiCards.push([ c1, c2 ]);
      !this.isHuier(c2) && !this.isHuier(c3) && this.getCardNumber(HandCards, c2) > 0 && this.getCardNumber(HandCards, c3) > 0 && chiCards.push([ c2, c3 ]);
      !this.isHuier(c3) && !this.isHuier(c4) && this.getCardNumber(HandCards, c3) > 0 && this.getCardNumber(HandCards, c4) > 0 && chiCards.push([ c3, c4 ]);
      cc.log("....chi:" + JSON.stringify(chiCards));
      return chiCards;
    };
    HongZhongMj.prototype.canAnGang = function(uid) {
      var gangCards = [];
      var HandCards = hongzhongData.getHandCards(uid);
      if (void 0 == HandCards) return gangCards;
      for (var ii = 0; ii < HandCards.length; ii++) {
        var cardId = HandCards[ii];
        if (void 0 == cardId || cardId <= 0) continue;
        var number = this.getCardNumber(HandCards, cardId);
        if (number >= 4) {
          if (this.getCardNumber(gangCards, cardId) > 0) continue;
          gangCards.push(cardId);
        }
      }
      cc.log("....anGang:" + JSON.stringify(gangCards));
      return gangCards;
    };
    HongZhongMj.prototype.canBuGang = function(uid) {
      var gangCards = [];
      var HandCards = hongzhongData.getHandCards(uid);
      var PengCards = hongzhongData.getPengCards(uid);
      if (void 0 == PengCards || void 0 == HandCards) return gangCards;
      for (var ii = 0; ii < PengCards.length; ii++) {
        var cardObject = PengCards[ii];
        if (void 0 == cardObject || Object.keys(cardObject).length <= 0) continue;
        var cardArray = cardObject.cards;
        if (void 0 == cardArray || cardArray.length <= 0) continue;
        var cardId = cardArray[0];
        var number = this.getCardNumber(HandCards, cardId);
        number >= 1 && gangCards.push(cardId);
      }
      cc.log("....buGang:" + JSON.stringify(gangCards));
      return gangCards;
    };
    cc._RF.pop();
  }, {
    hongzhongData: "hongzhongData",
    mahjong: "mahjong",
    utils: "utils"
  } ],
  mahjong_shishi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a6c9ehY5lBvKgLCS2MbK20", "mahjong_shishi");
    "use strict";
    var mahjong = require("mahjong");
    var util = require("utils");
    var CardsType = {
      CT_None: 0,
      CT_Sudao: 1,
      CT_Zimo: 2,
      CT_Dizhen: 3,
      CT_Mingyou: 4,
      CT_Anyou1: 5,
      CT_Anyou2: 6,
      CT_Anyou3: 7
    };
    var ShishiMj = function ShishiMj() {
      mahjong.call(this);
    };
    util.inherits(ShishiMj, mahjong);
    module.exports = ShishiMj;
    ShishiMj.prototype.isHuier = function(card) {
      return GameData.game.cardHuier1 == card;
    };
    ShishiMj.prototype.canChi = function(uid, card) {
      for (var i in GameData.cards) {
        var youNum = GameData.cards[i]["youNum"];
        if (youNum > 0) return false;
      }
      var ret = mahjong.prototype.canChi.call(this, uid, card);
      return ret;
    };
    ShishiMj.prototype.canPeng = function(uid, card) {
      for (var i in GameData.cards) {
        var youNum = GameData.cards[i]["youNum"];
        if (youNum > 0) return false;
      }
      var ret = mahjong.prototype.canPeng.call(this, uid, card);
      return ret;
    };
    ShishiMj.prototype.canAnGang = function(uid) {
      if (0 == GameData.game.cardleft) return 0;
      if (uid != GameData.player.uid) return 0;
      for (var i in GameData.cards) {
        var youNum = GameData.cards[i]["youNum"];
        if (3 == youNum || 10 == youNum) return false;
      }
      var ret = mahjong.prototype.canAnGang.call(this, uid);
      return ret;
    };
    ShishiMj.prototype.canMingGang = function(uid, card) {
      if (true == this.isHuier(card)) return 0;
      if (0 == GameData.game.cardleft) return 0;
      for (var i in GameData.cards) {
        var youNum = GameData.cards[i]["youNum"];
        if (3 == youNum || 10 == youNum) return false;
      }
      var ret = mahjong.prototype.canMingGang.call(this, uid, card);
      return ret;
    };
    ShishiMj.prototype.canMingGangSelf = function() {
      if (0 == GameData.game.cardleft) return 0;
      for (var i in GameData.cards) {
        var youNum = GameData.cards[i]["youNum"];
        if (3 == youNum || 10 == youNum) return false;
      }
      var ret = mahjong.prototype.canMingGangSelf.call(this);
      return ret;
    };
    ShishiMj.prototype.canDianPao = function(uid, card) {
      var youNum = GameData.cards[GameData.player.uid]["youNum"];
      if (youNum > 0) return false;
      var handcards = GameData.getMyHandCards();
      var jinCard = GameData.game.cardHuier1;
      var jinNum = handcards[jinCard];
      var shuangjin = GameData.room.opts.shuangjin;
      if (shuangjin && jinNum > 1 && 0 == GameData.cards[GameData.game.lastdisUid]["youNum"]) return false;
      var tempJson = JSON.stringify(handcards);
      var tempCard = JSON.parse(tempJson);
      tempCard[card] = tempCard[card] > 0 ? tempCard[card] + 1 : 1;
      this.getHuDecks(tempCard);
      var hu = this.checkHuType(tempCard, card, false);
      var youjin = [];
      return [ hu[0], hu[1], card, youjin[0], youjin[1] ];
    };
    ShishiMj.prototype.canZimo = function(handcards, obCard) {
      this.getHuDecks(handcards);
      var hu = this.checkHuType(handcards, obCard, true);
      var youNum = GameData.cards[GameData.player.uid]["youNum"];
      var youjin = [];
      this.isMingYou(youNum) ? youjin = this.getYoujinDeck(youNum, handcards) : this.isAnYou(youNum) && (youjin = this.getYoujinDeck(youNum, handcards));
      return [ hu[0], hu[1], obCard, youjin[0], youjin[1] ];
    };
    ShishiMj.prototype.checkHuType = function(cards, obcard, zimo) {
      var deck = [], type = [];
      var len = this.huCards.length;
      if (zimo && this.isDizhen(cards)) type.push(CardsType.CT_Dizhen); else if (len > 0) {
        var youNum = GameData.cards[GameData.player.uid]["youNum"];
        var t = this.isYoujinHu(youNum);
        if (t[0] > 0) {
          deck = t[1];
          type.push(t[0]);
        } else if (zimo) {
          deck = this.huCards[0].slice();
          type.push(CardsType.CT_Zimo);
        } else {
          var len = this.huCards.length;
          for (var i = 0; i < len; i++) {
            if (this.isHuier(this.huCards[i][0]) && obcard == this.huCards[i][1] || this.isHuier(this.huCards[i][1]) && obcard == this.huCards[i][0]) continue;
            var flag = true;
            for (var t = 2; t < this.huCards[i].length; t += 3) if (obcard == this.huCards[i][t] && this.isHuier(this.huCards[i][t + 1]) && this.isHuier(this.huCards[i][t + 2]) || obcard == this.huCards[i][t + 1] && this.isHuier(this.huCards[i][t]) && this.isHuier(this.huCards[i][t + 2]) || obcard == this.huCards[i][t + 2] && this.isHuier(this.huCards[i][t]) && this.isHuier(this.huCards[i][t + 1])) {
              flag = false;
              break;
            }
            if (flag) {
              deck = this.huCards[i].slice();
              type.push(CardsType.CT_Sudao);
              break;
            }
          }
        }
      }
      return [ type, deck ];
    };
    ShishiMj.prototype.checkYoujin = function(discard) {
      var cards = [], huiers = [];
      var handcards = GameData.getMyHandCards();
      this.formatCards(handcards, cards, huiers);
      this.huCards.splice(0, this.huCards.length);
      if (this.isHuier(discard)) {
        if (huiers.length > 1) {
          var deck = [ huiers.pop(), huiers.pop() ];
          this.canGroup(cards, huiers, deck);
          return this.huCards.length > 0;
        }
      } else if (huiers.length > 0) {
        var deck = [ discard, huiers.pop() ];
        cards[discard]--;
        this.canGroup(cards, huiers, deck);
        return this.huCards.length > 0;
      }
      return false;
    };
    ShishiMj.prototype.isYoujinHu = function(youNum) {
      var type = CardsType.CT_None, deck = [];
      if (youNum > 0) {
        var len = this.huCards.length;
        for (var i = 0; i < len; i++) if (this.isHuier(this.huCards[i][0]) || this.isHuier(this.huCards[i][1])) {
          deck = this.huCards[i].slice();
          break;
        }
        youNum == YoujinType.Ming ? type = CardsType.CT_Mingyou : youNum == YoujinType.An1 ? type = CardsType.CT_Anyou1 : youNum == YoujinType.An2 ? type = CardsType.CT_Anyou2 : youNum == YoujinType.An3 && (type = CardsType.CT_Anyou3);
      }
      return [ type, deck ];
    };
    ShishiMj.prototype.isMingYou = function(youNum) {
      if (GameData.room.opts.youJin != YoujinType.Ming) return false;
      cc.log("isMingYou " + GameData.room.opts.youJin + " " + youNum);
      return true;
    };
    ShishiMj.prototype.isAnYou = function(youNum) {
      cc.log("isAnYou " + GameData.room.opts.youJin + " " + youNum);
      if (youNum >= GameData.room.opts.youJin) return false;
      return true;
    };
    ShishiMj.prototype.getYoujinDeck = function(youNum, handcards) {
      var ret = false;
      var len = this.huCards.length;
      var jinCard = GameData.game.cardHuier1;
      var jinNum = handcards[jinCard];
      for (var i = 0; i < len; i++) if (1 == youNum || 2 == youNum) {
        cc.log("huCards:" + this.huCards[i][0] + " " + this.huCards[i][1]);
        if (this.isHuier(this.huCards[i][0]) && this.isHuier(this.huCards[i][1])) {
          GameData.youJinDeck = this.huCards[i].slice();
          ret = true;
          cc.log("getYoujinDeck:" + GameData.youJinDeck);
          break;
        }
      } else if (jinNum > 1) {
        if (this.isHuier(this.huCards[i][0]) && this.isHuier(this.huCards[i][1])) {
          GameData.youJinDeck = this.huCards[i].slice();
          ret = true;
          break;
        }
        if (this.isHuier(this.huCards[i][0]) || this.isHuier(this.huCards[i][1])) {
          GameData.youJinDeck = this.huCards[i].slice();
          ret = true;
        }
      } else if (this.isHuier(this.huCards[i][0]) || this.isHuier(this.huCards[i][1])) {
        GameData.youJinDeck = this.huCards[i].slice();
        ret = true;
        break;
      }
      return [ ret, GameData.youJinDeck ];
    };
    ShishiMj.prototype.isDizhen = function(handcards) {
      var jinCard = GameData.game.cardHuier1;
      return 3 == handcards[jinCard];
    };
    ShishiMj.prototype.calcHuScore = function(type) {
      return 1;
    };
    ShishiMj.prototype.calcHuaScore = function(uid) {
      var hua = GameData.getHuaCard(uid);
      this.huaScore(hua);
    };
    ShishiMj.prototype.huaScore = function(hua) {
      var huaNum = hua.length;
      console.log("..hua = " + JSON.stringify(hua));
      console.log(huaNum);
      if (huaNum < 4) return 0;
      if (huaNum >= 4 && huaNum < 8) {
        for (var n = 0; n < huaNum; n++) {
          var same = parseInt(hua[n] / 10), sameNum = 0;
          for (var i = 0; i < huaNum; i++) same == parseInt(hua[i] / 10) && sameNum++;
          if (4 == sameNum) return 2;
        }
        return 1;
      }
      if (8 == huaNum) return 4;
      return 0;
    };
    ShishiMj.prototype.getHuType = function(huCards, handcards, obCard, checkFlag) {
      return huCards.length > 0 ? [ [ CardsType.CT_Sudao ], huCards[0], obCard, 0 ] : [];
    };
    ShishiMj.prototype.getHuTypeString = function() {
      var detail = "";
      var size = GameData.game.winnerType.length;
      for (var i = 0; i < size; i++) switch (GameData.game.winnerType[i]) {
       case CardsType.CT_Sudao:
        detail += "速到*1   ";
        break;

       case CardsType.CT_Zimo:
        detail += "自摸*2   ";
        break;

       case CardsType.CT_Dizhen:
        detail += "地震*3   ";
        break;

       case CardsType.CT_Mingyou:
        detail += "明游*3   ";
        break;

       case CardsType.CT_Anyou1:
        detail += "暗游1游*3   ";
        break;

       case CardsType.CT_Anyou2:
        detail += "暗游2游*6   ";
        break;

       case CardsType.CT_Anyou3:
        detail += "暗游3游*9   ";
      }
      return detail;
    };
    cc._RF.pop();
  }, {
    mahjong: "mahjong",
    utils: "utils"
  } ],
  mahjong_tianjin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31711tPAhJCS6GIhX+jwGyK", "mahjong_tianjin");
    "use strict";
    var mahjong = require("mahjong");
    var util = require("utils");
    var CardsType = {
      CT_None: 0,
      CT_Diliu: 1,
      CT_Supai: 2,
      CT_Hundiao: 3,
      CT_DHundiao: 4,
      CT_Zhuowu: 5,
      CT_Yitiaolong: 6,
      CT_Benhuilong: 7,
      CT_Tianhu: 8,
      CT_Dihu: 9,
      CT_Gangkaihua: 10,
      CT_SuBenlong: 11,
      CT_Chan: 12,
      CT_Wulong: 13,
      CT_JinGang: 14
    };
    var TianjinMj = function TianjinMj() {
      mahjong.call(this);
    };
    util.inherits(TianjinMj, mahjong);
    module.exports = TianjinMj;
    TianjinMj.prototype.canChi = function(uid, card) {
      return [];
    };
    TianjinMj.prototype.canDianPao = function(uid, card) {
      return false;
    };
    TianjinMj.prototype.isHuier = function(card) {
      if (GameData.game.cardHuier1 == card) return true;
      if (GameData.game.cardHuier2 == card) return true;
      return false;
    };
    TianjinMj.prototype.isDeckHuier = function(card, id) {
      return card - 100 == id;
    };
    TianjinMj.prototype.canHu = function(handcards, obCard, checkFlag) {
      if (GameData.player.isXiangGong) return false;
      return mahjong.prototype.canHu.call(this, handcards, obCard, checkFlag);
    };
    TianjinMj.prototype.getHuType = function(huCards, handcards, obCard, checkFlag) {
      cc.log("TianjinMj.prototype.getHuType");
      var i = 0, typemax = -1, scoremax = 0;
      var huType = [], huDeck = [], mDeck = [];
      var getMaxScore = function getMaxScore(self, deck, type) {
        var score = self.calcHuScore(type);
        cc.log("score: deck:" + JSON.stringify(deck) + " type:" + JSON.stringify(type) + " score:" + score);
        if (score > scoremax) {
          huType = type;
          huDeck = deck;
          scoremax = score;
        }
      };
      var len = huCards.length;
      for (;i < len; i++) {
        var deck = huCards[i];
        var long = this.isLong(deck, mDeck);
        if (long) {
          var type = [];
          var tempDeck = JSON.stringify(mDeck);
          var LongDeck = JSON.parse(tempDeck);
          if (checkFlag) {
            this.isGangkaihua() && type.push(CardsType.CT_Gangkaihua);
            this.isTianhu() ? type.push(CardsType.CT_Tianhu) : this.isDihu() && type.push(CardsType.CT_Dihu);
          }
          if (this.isSuBenLong(deck, mDeck, GameData.game.cardHuier1)) {
            type.push(CardsType.CT_SuBenlong);
            15 == obCard && this.isZhuowu(mDeck, obCard) && type.push(CardsType.CT_Zhuowu);
          } else if (this.isBenLong(deck, mDeck, GameData.game.cardHuier1)) {
            type.push(CardsType.CT_Benhuilong);
            if (this.isDHundiao(deck, obCard, true)) {
              type.push(CardsType.CT_DHundiao);
              this.isZhuowu(mDeck, obCard) && type.push(CardsType.CT_Zhuowu);
            } else this.isHundiao(deck, obCard) ? type.push(CardsType.CT_Hundiao) : this.isZhuowu(mDeck, obCard) && type.push(CardsType.CT_Zhuowu);
          } else {
            type.push(CardsType.CT_Yitiaolong);
            if (this.isSupai(deck)) {
              type.push(CardsType.CT_Supai);
              this.isZhuowu(LongDeck, obCard) && type.push(CardsType.CT_Zhuowu);
            } else if (this.isDHundiao(deck, obCard, true)) {
              type.push(CardsType.CT_DHundiao);
              this.isZhuowu(LongDeck, obCard) && type.push(CardsType.CT_Zhuowu);
            } else this.isHundiao(deck, obCard) ? type.push(CardsType.CT_Hundiao) : this.isZhuowu(LongDeck, obCard) && type.push(CardsType.CT_Zhuowu);
          }
          getMaxScore(this, deck, type);
        }
        var zhuowu = this.isZhuowu(deck, obCard);
        if (zhuowu) {
          var type = [];
          if (checkFlag) {
            this.isGangkaihua() && type.push(CardsType.CT_Gangkaihua);
            this.isTianhu() ? type.push(CardsType.CT_Tianhu) : this.isDihu() && type.push(CardsType.CT_Dihu);
          }
          type.push(CardsType.CT_Zhuowu);
          this.isSupai(deck) ? type.push(CardsType.CT_Supai) : this.isDHundiao(deck, obCard, false) && type.push(CardsType.CT_DHundiao);
          getMaxScore(this, deck, type);
        }
        if (!long && !zhuowu) {
          var type = [];
          if (checkFlag) {
            this.isGangkaihua() && type.push(CardsType.CT_Gangkaihua);
            this.isTianhu() ? type.push(CardsType.CT_Tianhu) : this.isDihu() && type.push(CardsType.CT_Dihu);
          }
          this.isSupai(deck) ? type.push(CardsType.CT_Supai) : (type.length > 0 || GameData.room.opts.hd) && this.isHundiao(deck, obCard) ? type.push(CardsType.CT_Hundiao) : (type.length > 0 || GameData.room.opts.hd) && this.isDHundiao(deck, obCard, false) && type.push(CardsType.CT_DHundiao);
          getMaxScore(this, deck, type);
        }
      }
      var deck = [];
      if (this.isJinGang(handcards, deck)) {
        var type = [];
        type.push(CardsType.CT_JinGang);
        this.isGangkaihua() && type.push(CardsType.CT_Gangkaihua);
        this.isTianhu() ? type.push(CardsType.CT_Tianhu) : this.isDihu() && type.push(CardsType.CT_Dihu);
        getMaxScore(this, deck, type);
      }
      return [ huType, huDeck, obCard, scoremax ];
    };
    TianjinMj.prototype.calcHuScore = function(type) {
      if (type.length <= 0) return 0;
      var fan = false;
      var times = 1, point = 0;
      for (var i = 0; i < type.length; i++) switch (type[i]) {
       case CardsType.CT_Supai:
       case CardsType.CT_Hundiao:
       case CardsType.CT_DHundiao:
       case CardsType.CT_Gangkaihua:
        times *= 2;
        break;

       case CardsType.CT_Zhuowu:
        GameData.room.opts.longwufan && (fan = true);
        point += 3;
        break;

       case CardsType.CT_Yitiaolong:
        GameData.room.opts.longwufan && (fan = true);
        point += 4;
        break;

       case CardsType.CT_Benhuilong:
        GameData.room.opts.longwufan && (fan = true);
        point += 8;
        break;

       case CardsType.CT_Tianhu:
        times *= 8;
        break;

       case CardsType.CT_Dihu:
        times *= 4;
        break;

       case CardsType.CT_SuBenlong:
        GameData.room.opts.longwufan && (times *= 2);
        point += 4, times *= 4;
        break;

       case CardsType.CT_JinGang:
        point += GameData.createRoomOpts.jGangScore;
      }
      point = point || 1;
      times = times || 1;
      times = fan ? 2 * times : times;
      return times * point;
    };
    TianjinMj.prototype.getHuTypeString = function() {
      var detail = "", chan = false, flag = false;
      var size = GameData.game.winnerType.length;
      for (var i = 0; i < size; i++) switch (GameData.game.winnerType[i]) {
       case CardsType.CT_Tianhu:
        detail += "天胡 *4  ";
        break;

       case CardsType.CT_Supai:
        detail += "没混 *2  ";
        break;

       case CardsType.CT_Hundiao:
        detail += "混吊 *2  ";
        break;

       case CardsType.CT_DHundiao:
        detail += size > 1 ? "双混吊 *2  " : "混吊 *2  ";
        break;

       case CardsType.CT_Gangkaihua:
        detail += "杠开花 *2  ";
        break;

       case CardsType.CT_Zhuowu:
        detail += "捉五 +3  ";
        flag = true;
        break;

       case CardsType.CT_Yitiaolong:
        detail += "一条龙 +4  ";
        flag = true;
        break;

       case CardsType.CT_Benhuilong:
        detail += "本混龙 +4 *2  ";
        flag = true;
        break;

       case CardsType.CT_Chan:
        chan = true;
        break;

       case CardsType.CT_Wulong:
        detail += "拉五龙  ";
        break;

       case CardsType.CT_SuBenlong:
        detail += "素本龙 +4 *4  ";
        flag = true;
        break;

       case CardsType.CT_JinGang:
        4 == GameData.room.opts.jingang ? detail += "金杠胡 +4  " : 8 == GameData.room.opts.jingang && (detail += "金杠胡 +8  ");
      }
      flag && GameData.room.opts.longwufan && (detail += "龙五翻 *2  ");
      return [ detail, chan ];
    };
    TianjinMj.prototype.isSupai = function(deck) {
      for (var i = 0; i < deck.length; i++) if (this.isHuier(deck[i])) return false;
      return true;
    };
    TianjinMj.prototype.isHundiao = function(deck, obCard) {
      if (!this.isHuier(deck[1])) return false;
      if (!this.isHuier(obCard) && obCard == deck[0]) return true;
      if (this.isHuier(obCard) && this.isHuier(deck[0])) return true;
      return false;
    };
    TianjinMj.prototype.isDHundiao = function(deck, obCard, long) {
      var tempDeck = [];
      if (long) for (var n = 0; n < 3; n++) {
        var key = 10 * n;
        tempDeck = deck.concat();
        if (!this.removeGroup(tempDeck, [ key + 1, key + 2, key + 3 ])) continue;
        if (!this.removeGroup(tempDeck, [ key + 4, key + 5, key + 6 ])) continue;
        if (!this.removeGroup(tempDeck, [ key + 7, key + 8, key + 9 ])) continue;
        break;
      } else tempDeck = deck.concat();
      for (var i = 2; i < tempDeck.length; i += 3) {
        if (tempDeck[i] <= 0) continue;
        if (this.isHuier(obCard)) {
          if (this.isHuier(tempDeck[i]) && this.isHuier(tempDeck[i + 1]) && this.isHuier(tempDeck[i + 2])) return true;
        } else {
          if (obCard == tempDeck[i] && this.isHuier(tempDeck[i + 1]) && this.isHuier(tempDeck[i + 2])) return true;
          if (obCard == tempDeck[i + 1] && this.isHuier(tempDeck[i]) && this.isHuier(tempDeck[i + 2])) return true;
          if (obCard == tempDeck[i + 2] && this.isHuier(tempDeck[i]) && this.isHuier(tempDeck[i + 1])) return true;
        }
      }
      return false;
    };
    TianjinMj.prototype.isZhuowu = function(deck, obCard) {
      if (this.isHuier(obCard)) for (var i = 2; i < deck.length; i += 3) {
        if (14 == deck[i] && (this.isHuier(deck[i + 1]) || this.isDeckHuier(deck[i + 1], 15)) && (16 == deck[i + 2] || this.isHuier(deck[i + 2]) || this.isDeckHuier(deck[i + 2], 16))) return true;
        if (16 == deck[i] && (this.isHuier(deck[i + 1]) || this.isDeckHuier(deck[i + 1], 14)) && (this.isHuier(deck[i + 2]) || this.isDeckHuier(deck[i + 2], 15))) return true;
        if ((this.isHuier(deck[i]) || this.isDeckHuier(deck[i], 14)) && (this.isHuier(deck[i + 1]) || this.isDeckHuier(deck[i + 1], 15)) && (this.isHuier(deck[i + 2]) || this.isDeckHuier(deck[i + 2], 16))) return true;
        if ((14 == deck[i] || this.isDeckHuier(deck[i], 14)) && this.isDeckHuier(deck[i + 1], 15) && (16 == deck[i + 2] || this.isDeckHuier(deck[i + 2], 16))) return true;
      } else if (15 == obCard) for (var i = 2; i < deck.length; i += 3) {
        if (14 == deck[i] && 15 == deck[i + 1] && 16 == deck[i + 2]) return true;
        if (14 == deck[i] && 15 == deck[i + 1] && this.isHuier(deck[i + 2])) return true;
        if (14 == deck[i] && 15 == deck[i + 1] && this.isDeckHuier(deck[i + 2], 16)) return true;
        if (15 == deck[i] && 16 == deck[i + 1] && this.isHuier(deck[i + 2])) return true;
        if (15 == deck[i] && 16 == deck[i + 1] && this.isDeckHuier(deck[i + 2], 14)) return true;
        if (15 == deck[i] && (this.isHuier(deck[i + 1]) || this.isDeckHuier(deck[i + 1], 14)) && (this.isHuier(deck[i + 2]) || this.isDeckHuier(deck[i + 2], 16))) return true;
        if (14 == deck[i] && 15 == deck[i + 1] && this.isDeckHuier(deck[i + 2], 16)) return true;
        if (this.isDeckHuier(deck[i], 14) && 15 == deck[i + 1] && 16 == deck[i + 2]) return true;
        if (this.isDeckHuier(deck[i], 14) && 15 == deck[i + 1] && this.isDeckHuier(deck[i + 2], 16)) return true;
      }
      return false;
    };
    TianjinMj.prototype.checkLong = function(deck, key) {
      if (!this.matchGroup(deck, [ key + 1, key + 2, key + 3 ])) return false;
      if (!this.matchGroup(deck, [ key + 4, key + 5, key + 6 ])) return false;
      if (!this.matchGroup(deck, [ key + 7, key + 8, key + 9 ])) return false;
      return true;
    };
    TianjinMj.prototype.isLong = function(deck, mDeck) {
      for (var n = 0; n < 3; n++) {
        var key = 10 * n;
        cloneArray(deck, mDeck);
        if (this.checkLong(mDeck, key)) return true;
      }
      return false;
    };
    TianjinMj.prototype.isBenLong = function(deck, mDeck, huierCard) {
      var n = parseInt(huierCard / 10);
      if (n >= 3) return false;
      var key = 10 * n;
      cloneArray(deck, mDeck);
      return this.checkLong(mDeck, key);
    };
    TianjinMj.prototype.isSuBenLong = function(deck, mDeck, huierCard) {
      var n = parseInt(huierCard / 10);
      if (n >= 3) return false;
      var huierNum = 0, lastHuier = 0;
      for (var i = 0; i < deck.length; i++) if (this.isHuier(deck[i])) {
        if (++huierNum > 2) return false;
        if (lastHuier == deck[i]) return false;
        lastHuier = deck[i];
      }
      if (2 != huierNum) return false;
      var key = 10 * n;
      cloneArray(deck, mDeck);
      return this.checkLong(mDeck, key);
    };
    TianjinMj.prototype.isGangkaihua = function() {
      return 1 == GameData.game.gangOver;
    };
    TianjinMj.prototype.isTianhu = function() {
      return GameData.game.noActions && GameData.player.uid == GameData.game.zhuangUid;
    };
    TianjinMj.prototype.isDihu = function() {
      return false;
    };
    TianjinMj.prototype.isJinGang = function(handcards, deck) {
      var huier1 = handcards[GameData.game.cardHuier1], huier2 = handcards[GameData.game.cardHuier2];
      if (4 != huier1 && 4 != huier2) return false;
      for (var key in handcards) for (var i = 0; i < handcards[key]; i++) deck.push(key);
      return true;
    };
    TianjinMj.prototype.getHuTypeArry = function(huType) {
      for (var i = 0; i < GameData.game.winnerType.length; i++) if (huType == GameData.game.winnerType[i]) return true;
      return false;
    };
    cc._RF.pop();
  }, {
    mahjong: "mahjong",
    utils: "utils"
  } ],
  mahjong: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "219e5KZKEpD3pUWCeIQHVLZ", "mahjong");
    "use strict";
    var roomHandler = require("roomHandler");
    var MjCards = {
      tiao: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
      wan: [ 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
      tong: [ 21, 22, 23, 24, 25, 26, 27, 28, 29 ],
      feng: [ 31, 41, 51, 61 ],
      jian: [ 71, 81, 91 ],
      hua: [ 111, 112, 113, 114, 121, 122, 123, 124 ]
    };
    var Mahjong = function Mahjong() {
      this.huCards = [];
    };
    module.exports = Mahjong;
    Mahjong.prototype.isHuier = function(card) {
      return card >= MjCards["hua"][0] && card <= MjCards["hua"][7];
    };
    Mahjong.prototype.canDianPao = function(uid, card) {
      var handcards = GameData.cards[uid]["hand"];
      var tempJson = JSON.stringify(handcards);
      var tempCard = JSON.parse(tempJson);
      tempCard[card] = tempCard[card] > 0 ? tempCard[card] + 1 : 1;
      return this.canHu(tempCard, card, false);
    };
    Mahjong.prototype.canZimo = function(handcards, obCard, checkFlag) {
      return this.canHu(handcards, obCard, checkFlag);
    };
    Mahjong.prototype.canHu = function(handcards, obCard, checkFlag) {
      this.getHuDecks(handcards);
      return this.getHuType(this.huCards, handcards, obCard, checkFlag);
    };
    Mahjong.prototype.getHuDecks = function(handcards) {
      var cards = [], huiers = [];
      this.formatCards(handcards, cards, huiers);
      this.huCards.splice(0, this.huCards.length);
      var cardNum = cards.length, huierNum = huiers.length;
      for (var key = 0; key < cardNum; key++) {
        if (cards[key] > 1) {
          var tempCards = cards.concat();
          tempCards[key] -= 2;
          this.canGroup(tempCards, huiers, [ key, key ]);
        }
        if (cards[key] >= 1 && huierNum > 0) {
          var tempCards = cards.concat(), tempHuiers = huiers.concat(), tempDeck = [ key, tempHuiers.pop() ];
          tempCards[key]--;
          this.canGroup(tempCards, tempHuiers, tempDeck);
        }
      }
      if (huierNum > 1) {
        var tempCards = cards.concat(), tempHuiers = huiers.concat(), tempDeck = [ tempHuiers.pop(), tempHuiers.pop() ];
        this.canGroup(tempCards, tempHuiers, tempDeck);
      }
    };
    Mahjong.prototype.canTing = function(handcards) {
      var tingCards = [];
      var tempJson = JSON.stringify(handcards);
      for (var n in MjCards) {
        if ("hua" == n) continue;
        for (var i = 0; i < MjCards[n].length; i++) {
          var card = MjCards[n][i];
          if (this.isHuier(card)) continue;
          var tempCard = JSON.parse(tempJson);
          tempCard[card] = tempCard[card] > 0 ? tempCard[card] + 1 : 1;
          var huData = this.canHu(tempCard, card, false);
          false != huData && huData[0] && huData[0].length > 0 && tingCards.push({
            obcard: card,
            type: huData[0],
            score: huData[3]
          });
        }
      }
      return tingCards;
    };
    Mahjong.prototype.discardTip = function(handcards) {
      var discards = [];
      var tempJson = JSON.stringify(handcards);
      for (var card in handcards) {
        if (this.isHuier(card)) continue;
        if (handcards[card] <= 0) continue;
        var tempCard = JSON.parse(tempJson);
        tempCard[card]--;
        var tingCards = this.canTing(tempCard);
        tingCards.length > 0 && discards.push({
          discard: card,
          ting: tingCards
        });
      }
      return discards;
    };
    Mahjong.prototype.formatCards = function(cardObj, cards, huiers) {
      cards.push(0);
      for (var i = 1; i <= 91; i++) if (cardObj[i] > 0) if (this.isHuier(i)) {
        for (var n = 0; n < cardObj[i]; n++) huiers.push(i);
        cards.push(0);
      } else cards.push(cardObj[i]); else cards.push(0);
    };
    Mahjong.prototype.canGroup = function(cards, huiers, deck) {
      var cardSize = cards.length, huierSize = huiers.length;
      for (var i = 0; i < cardSize; i++) {
        if (cards[i] <= 0) continue;
        if (cards[i + 1] > 0 && cards[i + 2] > 0) {
          var tempCards = cards.concat(), tempDeck = deck.concat(i, i + 1, i + 2);
          tempCards[i]--;
          tempCards[i + 1]--;
          tempCards[i + 2]--;
          this.canGroup(tempCards, huiers, tempDeck);
        }
        if (cards[i + 1] > 0 && huierSize > 0) {
          var tempCards = cards.concat(), tempHuiers = huiers.concat(), tempDeck = deck.concat(i, i + 1, tempHuiers.pop());
          tempCards[i]--;
          tempCards[i + 1]--;
          this.canGroup(tempCards, tempHuiers, tempDeck);
        }
        if (cards[i + 2] > 0 && huierSize > 0 && i % 10 < 9) {
          var tempCards = cards.concat(), tempHuiers = huiers.concat(), tempDeck = deck.concat(i, tempHuiers.pop(), i + 2);
          tempCards[i]--;
          tempCards[i + 2]--;
          this.canGroup(tempCards, tempHuiers, tempDeck);
        }
        if (3 == cards[i]) {
          var tempCards = cards.concat(), tempDeck = deck.concat(i, i, i);
          tempCards[i] -= 3;
          this.canGroup(tempCards, huiers, tempDeck);
        }
        if (2 == cards[i] && huierSize > 0) {
          var tempCards = cards.concat(), tempHuiers = huiers.concat(), tempDeck = deck.concat(i, i, tempHuiers.pop());
          tempCards[i] -= 2;
          this.canGroup(tempCards, tempHuiers, tempDeck);
        }
        if (huierSize > 1) {
          var tempCards = cards.concat(), tempHuiers = huiers.concat(), tempDeck = deck.concat(i, tempHuiers.pop(), tempHuiers.pop());
          tempCards[i]--;
          this.canGroup(tempCards, tempHuiers, tempDeck);
        }
        return;
      }
      if (huierSize % 3 != 0) return;
      for (var i = 0; i < huierSize; i++) deck.push(huiers[i]);
      this.huCards.push(deck);
    };
    Mahjong.prototype.matchGroup = function(deck, cards) {
      for (var i = 2; i < deck.length; i += 3) {
        if (deck[i] <= 0) continue;
        var tempDeck = [ deck[i], deck[i + 1], deck[i + 2] ];
        if (this.equal(tempDeck, cards)) {
          deck[i] = tempDeck[0];
          deck[i + 1] = tempDeck[1];
          deck[i + 2] = tempDeck[2];
          return true;
        }
      }
      return false;
    };
    Mahjong.prototype.removeGroup = function(deck, cards) {
      for (var i = 2; i < deck.length; i += 3) {
        if (deck[i] <= 0) continue;
        var tempDeck = [ deck[i], deck[i + 1], deck[i + 2] ];
        if (this.equal(tempDeck, cards)) {
          deck[i] = deck[i + 1] = deck[i + 2] = 0;
          return true;
        }
      }
      return false;
    };
    Mahjong.prototype.equal = function(deck, cards) {
      if (deck[0] == cards[0] && deck[1] == cards[1] && deck[2] == cards[2]) return true;
      if (deck[0] == cards[0] && this.isHuier(deck[1]) && deck[2] == cards[2]) {
        deck[1] = cards[1] + 100;
        return true;
      }
      if (deck[0] == cards[0] && deck[1] == cards[1] && this.isHuier(deck[2])) {
        deck[2] = cards[2] + 100;
        return true;
      }
      if (deck[0] == cards[0] && this.isHuier(deck[1]) && this.isHuier(deck[2])) {
        deck[1] = cards[1] + 100;
        deck[2] = cards[2] + 100;
        return true;
      }
      if (deck[0] == cards[1] && deck[1] == cards[2] && this.isHuier(deck[2])) {
        deck[0] = cards[0] + 100;
        deck[1] = cards[1];
        deck[2] = cards[2];
        return true;
      }
      if (deck[0] == cards[1] && this.isHuier(deck[1]) && this.isHuier(deck[2])) {
        deck[0] = cards[0] + 100;
        deck[1] = cards[1];
        deck[2] = cards[2] + 100;
        return true;
      }
      if (deck[0] == cards[2] && this.isHuier(deck[1]) && this.isHuier(deck[2])) {
        deck[0] = cards[0] + 100;
        deck[1] = cards[1] + 100;
        deck[2] = cards[2];
        return true;
      }
      if (this.isHuier(deck[0]) && this.isHuier(deck[1]) && this.isHuier(deck[2])) {
        deck[0] = cards[0] + 100;
        deck[1] = cards[1] + 100;
        deck[2] = cards[2] + 100;
        return true;
      }
      return false;
    };
    Mahjong.prototype.canChi = function(uid, card) {
      if (!GameData.isPrevPlayer(uid)) return false;
      if (this.isHuier(card)) return false;
      var chiCards = [];
      var handcard = GameData.getMyHandCards();
      var c1 = card - 2, c2 = card - 1, c3 = card - 0 + 1, c4 = card - 0 + 2;
      !this.isHuier(c1) && !this.isHuier(c2) && handcard[c1] > 0 && handcard[c2] > 0 && chiCards.push([ c1, c2 ]);
      !this.isHuier(c2) && !this.isHuier(c3) && handcard[c2] > 0 && handcard[c3] > 0 && chiCards.push([ c2, c3 ]);
      !this.isHuier(c3) && !this.isHuier(c4) && handcard[c3] > 0 && handcard[c4] > 0 && chiCards.push([ c3, c4 ]);
      return chiCards;
    };
    Mahjong.prototype.canPeng = function(uid, card) {
      if (uid == GameData.player.uid) return false;
      if (true == this.isHuier(card)) return false;
      return GameData.cards[GameData.player.uid]["hand"][card] > 1;
    };
    Mahjong.prototype.canAnGang = function(uid) {
      if (0 == GameData.game.cardleft) return 0;
      if (uid != GameData.player.uid) return 0;
      var cards = GameData.getMyHandCards();
      for (var key in cards) if (cards[key] >= 4) return key;
      return 0;
    };
    Mahjong.prototype.canMingGang = function(uid, card) {
      if (true == this.isHuier(card)) return 0;
      if (0 == GameData.game.cardleft) return 0;
      if (uid != GameData.player.uid) {
        var cards = GameData.getMyHandCards();
        if (3 == cards[card]) return card;
      }
      return 0;
    };
    Mahjong.prototype.canMingGangSelf = function() {
      var list = [];
      if (0 == GameData.game.cardleft) return list;
      var cards = GameData.cards[GameData.player.uid]["peng"];
      var handcards = GameData.getMyHandCards();
      for (var i = 0; i < cards.length; i++) handcards[cards[i][0]] > 0 && list.push(cards[i][0]);
      return list;
    };
    Mahjong.prototype.getHuType = function(huCards, handcards, obCard, checkFlag) {
      return [];
    };
    Mahjong.prototype.calcHuScore = function(type) {
      return 0;
    };
    Mahjong.prototype.getHuTypeString = function() {
      return "";
    };
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  matchHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "447a5nPemhOXKOPWznTZIS/", "matchHandler");
    "use strict";
    var roomHandler = require("roomHandler");
    var errorCode = require("errorCode");
    var matchHandler = {
      matchTime: 0,
      onMatch: false,
      selectGameType: void 0,
      selectGameLv: void 0
    };
    module.exports = matchHandler;
    matchHandler.signup = function() {
      cc.log("..match game type:" + this.selectGameType + "..lv:" + this.selectGameLv);
      var self = this;
      GameNet.getInstance().request("game.matchHandler.signup", {
        gameType: this.selectGameType,
        level: this.selectGameLv
      }, function(rtn) {
        if (rtn.ret == errorCode.Success) {
          self.matchTime = 0;
          var fun = function fun(panel) {
            var SelectGameLvPanel = cc.director.getScene().getChildByName("Canvas").getChildByName("SelectGameLvPanel");
            SelectGameLvPanel && panel.setLocalZOrder(SelectGameLvPanel.getLocalZOrder() + 2);
          };
          openView("UIMatch", void 0, fun);
        } else {
          var errorChar = "";
          console.log("match ret:" + rtn.ret);
          switch (rtn.ret) {
           case errorCode.lessCoin:
            createMoveMessage("", errorCode.LessCoin);
            break;

           default:
            errorChar = "匹配失败";
            messageBoxWithoutCB(errorChar);
          }
        }
        closeView("Loading");
      });
    };
    matchHandler.cancel = function(cb) {
      var self = this;
      GameNet.getInstance().request("game.matchHandler.cancel", {}, function(rtn) {
        if (rtn.ret == errorCode.Success) {
          self.matchTime = 0;
          self.onMatch = false;
          cb();
        }
      });
    };
    matchHandler.registMessage = function() {
      var self = this;
      GameNet.getInstance().setCallBack("createMatchRoom", function(ret) {
        self.onMatch = false;
        self.matchTime = 0;
        roomHandler.enterRoom(ret.roomid);
      });
      GameNet.getInstance().setCallBack("onMatchData", function(ret) {
        self.onMatch = true;
        self.matchTime = Math.abs(parseInt((new Date().getTime() - ret.time) / 1e3));
        sendEvent("onMatchData");
      });
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    roomHandler: "roomHandler"
  } ],
  md5: [ function(require, module, exports) {
    (function(process, global) {
      "use strict";
      cc._RF.push(module, "243c38+gUpFn6lr5r5BEkqH", "md5");
      "use strict";
      var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      (function() {
        var ERROR = "input is invalid type";
        var WINDOW = "object" === ("undefined" === typeof window ? "undefined" : _typeof(window));
        var root = WINDOW ? window : {};
        root.JS_MD5_NO_WINDOW && (WINDOW = false);
        var WEB_WORKER = !WINDOW && "object" === ("undefined" === typeof self ? "undefined" : _typeof(self));
        var NODE_JS = !root.JS_MD5_NO_NODE_JS && "object" === ("undefined" === typeof process ? "undefined" : _typeof(process)) && process.versions && process.versions.node;
        NODE_JS ? root = global : WEB_WORKER && (root = self);
        var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && "object" === ("undefined" === typeof module ? "undefined" : _typeof(module)) && module.exports;
        var AMD = "function" === typeof define && define.amd;
        var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && "undefined" !== typeof ArrayBuffer;
        var HEX_CHARS = "0123456789abcdef".split("");
        var EXTRA = [ 128, 32768, 8388608, -2147483648 ];
        var SHIFT = [ 0, 8, 16, 24 ];
        var OUTPUT_TYPES = [ "hex", "array", "digest", "buffer", "arrayBuffer", "base64" ];
        var BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
        var blocks = [], buffer8;
        if (ARRAY_BUFFER) {
          var buffer = new ArrayBuffer(68);
          buffer8 = new Uint8Array(buffer);
          blocks = new Uint32Array(buffer);
        }
        !root.JS_MD5_NO_NODE_JS && Array.isArray || (Array.isArray = function(obj) {
          return "[object Array]" === Object.prototype.toString.call(obj);
        });
        !ARRAY_BUFFER || !root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(obj) {
          return "object" === ("undefined" === typeof obj ? "undefined" : _typeof(obj)) && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        });
        var createOutputMethod = function createOutputMethod(outputType) {
          return function(message) {
            return new Md5(true).update(message)[outputType]();
          };
        };
        var createMethod = function createMethod() {
          var method = createOutputMethod("hex");
          NODE_JS && (method = nodeWrap(method));
          method.create = function() {
            return new Md5();
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
            var type = OUTPUT_TYPES[i];
            method[type] = createOutputMethod(type);
          }
          return method;
        };
        var nodeWrap = function nodeWrap(method) {
          var crypto = eval("require('crypto')");
          var Buffer = eval("require('buffer').Buffer");
          var nodeMethod = function nodeMethod(message) {
            if ("string" === typeof message) return crypto.createHash("md5").update(message, "utf8").digest("hex");
            if (null === message || void 0 === message) throw ERROR;
            message.constructor === ArrayBuffer && (message = new Uint8Array(message));
            return Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer ? crypto.createHash("md5").update(new Buffer(message)).digest("hex") : method(message);
          };
          return nodeMethod;
        };
        function Md5(sharedMemory) {
          if (sharedMemory) {
            blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            this.blocks = blocks;
            this.buffer8 = buffer8;
          } else if (ARRAY_BUFFER) {
            var buffer = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(buffer);
            this.blocks = new Uint32Array(buffer);
          } else this.blocks = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
          this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
          this.finalized = this.hashed = false;
          this.first = true;
        }
        Md5.prototype.update = function(message) {
          if (this.finalized) return;
          var notString, type = "undefined" === typeof message ? "undefined" : _typeof(message);
          if ("string" !== type) {
            if ("object" !== type) throw ERROR;
            if (null === message) throw ERROR;
            if (ARRAY_BUFFER && message.constructor === ArrayBuffer) message = new Uint8Array(message); else if (!Array.isArray(message) && (!ARRAY_BUFFER || !ArrayBuffer.isView(message))) throw ERROR;
            notString = true;
          }
          var code, index = 0, i, length = message.length, blocks = this.blocks;
          var buffer8 = this.buffer8;
          while (index < length) {
            if (this.hashed) {
              this.hashed = false;
              blocks[0] = blocks[16];
              blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            }
            if (notString) if (ARRAY_BUFFER) for (i = this.start; index < length && i < 64; ++index) buffer8[i++] = message[index]; else for (i = this.start; index < length && i < 64; ++index) blocks[i >> 2] |= message[index] << SHIFT[3 & i++]; else if (ARRAY_BUFFER) for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) buffer8[i++] = code; else if (code < 2048) {
                buffer8[i++] = 192 | code >> 6;
                buffer8[i++] = 128 | 63 & code;
              } else if (code < 55296 || code >= 57344) {
                buffer8[i++] = 224 | code >> 12;
                buffer8[i++] = 128 | code >> 6 & 63;
                buffer8[i++] = 128 | 63 & code;
              } else {
                code = 65536 + ((1023 & code) << 10 | 1023 & message.charCodeAt(++index));
                buffer8[i++] = 240 | code >> 18;
                buffer8[i++] = 128 | code >> 12 & 63;
                buffer8[i++] = 128 | code >> 6 & 63;
                buffer8[i++] = 128 | 63 & code;
              }
            } else for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) blocks[i >> 2] |= code << SHIFT[3 & i++]; else if (code < 2048) {
                blocks[i >> 2] |= (192 | code >> 6) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              } else if (code < 55296 || code >= 57344) {
                blocks[i >> 2] |= (224 | code >> 12) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              } else {
                code = 65536 + ((1023 & code) << 10 | 1023 & message.charCodeAt(++index));
                blocks[i >> 2] |= (240 | code >> 18) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              }
            }
            this.lastByteIndex = i;
            this.bytes += i - this.start;
            if (i >= 64) {
              this.start = i - 64;
              this.hash();
              this.hashed = true;
            } else this.start = i;
          }
          if (this.bytes > 4294967295) {
            this.hBytes += this.bytes / 4294967296 << 0;
            this.bytes = this.bytes % 4294967296;
          }
          return this;
        };
        Md5.prototype.finalize = function() {
          if (this.finalized) return;
          this.finalized = true;
          var blocks = this.blocks, i = this.lastByteIndex;
          blocks[i >> 2] |= EXTRA[3 & i];
          if (i >= 56) {
            this.hashed || this.hash();
            blocks[0] = blocks[16];
            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          }
          blocks[14] = this.bytes << 3;
          blocks[15] = this.hBytes << 3 | this.bytes >>> 29;
          this.hash();
        };
        Md5.prototype.hash = function() {
          var a, b, c, d, bc, da, blocks = this.blocks;
          if (this.first) {
            a = blocks[0] - 680876937;
            a = (a << 7 | a >>> 25) - 271733879 << 0;
            d = (-1732584194 ^ 2004318071 & a) + blocks[1] - 117830708;
            d = (d << 12 | d >>> 20) + a << 0;
            c = (-271733879 ^ d & (-271733879 ^ a)) + blocks[2] - 1126478375;
            c = (c << 17 | c >>> 15) + d << 0;
            b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;
            b = (b << 22 | b >>> 10) + c << 0;
          } else {
            a = this.h0;
            b = this.h1;
            c = this.h2;
            d = this.h3;
            a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;
            a = (a << 7 | a >>> 25) + b << 0;
            d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;
            d = (d << 12 | d >>> 20) + a << 0;
            c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;
            c = (c << 17 | c >>> 15) + d << 0;
            b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;
            b = (b << 22 | b >>> 10) + c << 0;
          }
          a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;
          b = (b << 22 | b >>> 10) + c << 0;
          a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks[10] - 42063;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;
          b = (b << 22 | b >>> 10) + c << 0;
          a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;
          b = (b << 22 | b >>> 10) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;
          b = (b << 20 | b >>> 12) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;
          b = (b << 20 | b >>> 12) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;
          b = (b << 20 | b >>> 12) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;
          b = (b << 20 | b >>> 12) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[5] - 378558;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[8] - 2022574463;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[11] + 1839030562;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[14] - 35309556;
          b = (b << 23 | b >>> 9) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[1] - 1530992060;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[4] + 1272893353;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[7] - 155497632;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[10] - 1094730640;
          b = (b << 23 | b >>> 9) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[13] + 681279174;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[0] - 358537222;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[3] - 722521979;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[6] + 76029189;
          b = (b << 23 | b >>> 9) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[9] - 640364487;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[12] - 421815835;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[15] + 530742520;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[2] - 995338651;
          b = (b << 23 | b >>> 9) + c << 0;
          a += (c ^ (b | ~d)) + blocks[0] - 198630844;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[7] + 1126891415;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[14] - 1416354905;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[5] - 57434055;
          b = (b << 21 | b >>> 11) + c << 0;
          a += (c ^ (b | ~d)) + blocks[12] + 1700485571;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[3] - 1894986606;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[10] - 1051523;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[1] - 2054922799;
          b = (b << 21 | b >>> 11) + c << 0;
          a += (c ^ (b | ~d)) + blocks[8] + 1873313359;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[15] - 30611744;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[6] - 1560198380;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[13] + 1309151649;
          b = (b << 21 | b >>> 11) + c << 0;
          a += (c ^ (b | ~d)) + blocks[4] - 145523070;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[11] - 1120210379;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[2] + 718787259;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[9] - 343485551;
          b = (b << 21 | b >>> 11) + c << 0;
          if (this.first) {
            this.h0 = a + 1732584193 << 0;
            this.h1 = b - 271733879 << 0;
            this.h2 = c - 1732584194 << 0;
            this.h3 = d + 271733878 << 0;
            this.first = false;
          } else {
            this.h0 = this.h0 + a << 0;
            this.h1 = this.h1 + b << 0;
            this.h2 = this.h2 + c << 0;
            this.h3 = this.h3 + d << 0;
          }
        };
        Md5.prototype.hex = function() {
          this.finalize();
          var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
          return HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[15 & h0] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[15 & h1] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[15 & h2] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[15 & h3] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15];
        };
        Md5.prototype.toString = Md5.prototype.hex;
        Md5.prototype.digest = function() {
          this.finalize();
          var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
          return [ 255 & h0, h0 >> 8 & 255, h0 >> 16 & 255, h0 >> 24 & 255, 255 & h1, h1 >> 8 & 255, h1 >> 16 & 255, h1 >> 24 & 255, 255 & h2, h2 >> 8 & 255, h2 >> 16 & 255, h2 >> 24 & 255, 255 & h3, h3 >> 8 & 255, h3 >> 16 & 255, h3 >> 24 & 255 ];
        };
        Md5.prototype.array = Md5.prototype.digest;
        Md5.prototype.arrayBuffer = function() {
          this.finalize();
          var buffer = new ArrayBuffer(16);
          var blocks = new Uint32Array(buffer);
          blocks[0] = this.h0;
          blocks[1] = this.h1;
          blocks[2] = this.h2;
          blocks[3] = this.h3;
          return buffer;
        };
        Md5.prototype.buffer = Md5.prototype.arrayBuffer;
        Md5.prototype.base64 = function() {
          var v1, v2, v3, base64Str = "", bytes = this.array();
          for (var i = 0; i < 15; ) {
            v1 = bytes[i++];
            v2 = bytes[i++];
            v3 = bytes[i++];
            base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[63 & (v1 << 4 | v2 >>> 4)] + BASE64_ENCODE_CHAR[63 & (v2 << 2 | v3 >>> 6)] + BASE64_ENCODE_CHAR[63 & v3];
          }
          v1 = bytes[i];
          base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + "==";
          return base64Str;
        };
        var exports = createMethod();
        if (COMMON_JS) module.exports = exports; else {
          root.md5 = exports;
          AMD && define(function() {
            return exports;
          });
        }
      })();
      cc._RF.pop();
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    _process: 1
  } ],
  messagebox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8932erMsF1OE5oe4fGje+2N", "messagebox");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnOk: cc.Button,
        btnCancel: cc.Button,
        content: cc.Label,
        artWordSp: cc.Node,
        nameStr: cc.Label,
        content1: cc.Label,
        content2: cc.Label,
        content3: cc.Label
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
      },
      setContent: function setContent(text) {
        cc.log("text:" + text);
        this.content.node.active = true;
        if (null != text) this.content.string = text; else {
          cc.log("11111111111111");
          this.content.node.active = false;
        }
      },
      setName: function setName(text) {
        if (!text || text.length <= 0) {
          this.nameStr.node.active = false;
          return;
        }
        this.nameStr.node.active = true;
        this.nameStr.string = text;
      },
      setContent1: function setContent1(text) {
        if (!text || text.length <= 0) {
          this.content1.node.active = false;
          return;
        }
        this.content1.node.active = true;
        this.content1.string = text;
      },
      setContent2: function setContent2(text) {
        if (!text || text.length <= 0) {
          this.content2.node.active = false;
          return;
        }
        this.content2.node.active = true;
        this.content2.string = text;
        this.content2.node.x = 30 + this.content1.node.getPositionX() + this.content1.node.getContentSize().width + this.nameStr.node.getContentSize().width;
      },
      setContent3: function setContent3(text) {
        if (!text || text.length <= 0) {
          this.content3.node.active = false;
          return;
        }
        this.content3.node.active = true;
        this.content3.string = text;
      },
      setArtwordSp: function setArtwordSp(img) {
        cc.log("img:" + img);
        this.artWordSp.active = true;
        if (null != img) {
          this.artWordSp.getComponent(cc.Sprite).spriteFrame = null;
          var texture = cc.textureCache.addImage(cc.url.raw(img));
          this.artWordSp.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        } else this.artWordSp.active = false;
      },
      setStringVisbile: function setStringVisbile() {
        if (false == this.nameStr.node.active && false == this.content2.node.active) {
          this.content1.node.active = false;
          this.content3.node.active = false;
        } else {
          this.content1.node.active = true;
          this.content3.node.active = true;
        }
      },
      setOkFunc: function setOkFunc(func) {
        var self = this;
        this.btnOk.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.node.active = false;
          func();
        });
      },
      setCancelFunc: function setCancelFunc(func) {
        var self = this;
        this.btnCancel.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          self.node.active = false;
          func();
        });
      },
      updateBtnPos: function updateBtnPos(hasCancel) {
        if (hasCancel) {
          this.btnOk.node.x = -140;
          this.btnOk.node.active = true;
          this.btnCancel.node.active = true;
        } else {
          this.btnOk.node.x = 0;
          this.btnOk.node.active = true;
          this.btnCancel.node.active = false;
        }
      },
      update13BtnPos: function update13BtnPos(hasCancel) {
        if (hasCancel) {
          this.node.width / 2 - this.btnOk.width - 10;
          this.btnOk.node.active = true;
          this.btnCancel.node.active = true;
        } else {
          this.btnOk.node.x = 0;
          this.btnOk.node.active = true;
          this.btnCancel.node.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  missionHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "621ff60HQ9FOLvaenfyxUuP", "missionHandler");
    "use strict";
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var missionConfig = require("mission");
    var missionHandler = {
      missionTable: missionConfig.missionTable
    };
    module.exports = missionHandler;
    missionHandler.onShareSucess = function() {
      for (var key in GameData.player.mission) this.missionTable[key] && "share" == this.missionTable[key].event && GameData.player.mission[key].count < this.missionTable[key].count && GameNet.getInstance().request("game.playerHandler.onCompleteShareMission", {
        id: key
      }, function(rtn) {
        rtn.result == errorCode.Success;
      });
    };
    missionHandler.getReward = function(missionId) {
      if (!this.missionTable[missionId]) return;
      if (!GameData.player.mission) return;
      if (!GameData.player.mission[missionId]) return;
      if (GameData.player.mission[missionId].isGet) return;
      GameNet.getInstance().request("game.playerHandler.getMissionReward", {
        missionId: missionId
      }, function(rtn) {
        rtn.result == errorCode.Success && sendEvent("taskGetReward", missionId);
      });
    };
    missionHandler.checkAllComplete = function(data) {
      if (void 0 == data) return false;
      for (var key in data) {
        var data = data[key];
        if (void 0 == data) continue;
        if (0 != data.isGet) continue;
        return false;
      }
      return true;
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    mission: "mission"
  } ],
  mission: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "64f8exjJtNAYI4ieXLVyI0d", "mission");
    "use strict";
    var gameDefine = require("gameDefine");
    var mission = {
      missionTable: [ {
        id: 0,
        desc: "分享游戏到微信",
        event: "share",
        gameType: 0,
        timeType: 0,
        count: 1,
        reward: 10001,
        icon: "resources/home/jinbi02.png"
      } ],
      rewardTable: {
        10001: {
          type: gameDefine.taskRewardType.coin,
          count: 5e3
        }
      }
    };
    mission.getMissionData = function(missionId) {
      if (void 0 == missionId) return null;
      for (var i = 0; i < mission.missionTable.length; i++) {
        var data = mission.missionTable[i];
        if (void 0 == data) continue;
        if (missionId == data.id) return data;
      }
      return null;
    };
    mission.getMissionRewardData = function(missionId) {
      if (void 0 == missionId) return null;
      var data = this.getMissionData(missionId);
      if (null == data) return null;
      for (var key in mission.rewardTable) {
        if (key != data.reward) continue;
        return mission.rewardTable[key];
      }
      return null;
    };
    mission.getMissionRewardStr = function(rewardId) {
      var str = "";
      if (void 0 == rewardId) return str;
      var rewardData = mission.rewardTable[rewardId];
      if (void 0 == rewardData) return str;
      switch (rewardData.type) {
       case gameDefine.taskRewardType.coin:
        str += "金币";
      }
      str += "X" + rewardData.count;
      return str;
    };
    module.exports = mission;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  niuNiuHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01c92fdxPpCZoCIvnPtESFD", "niuNiuHandler");
    "use strict";
    var roomHandler = require("roomHandler");
    var niuNiuHandler = {
      isStartAnimationPlayed: false,
      isSelfClickAdviseBtn: false,
      status: 0,
      zhuangUid: 0,
      gameTimes: 0,
      gameStart: false,
      readyBtnActive: false,
      playerCards: {},
      playerCard3: {},
      playerScore: {},
      playerChips: {},
      playerZhuang: {},
      playerSendCard: {},
      recordType: {}
    };
    module.exports = niuNiuHandler;
    niuNiuHandler.initAllData = function() {
      this.isStartAnimationPlayed = false;
      this.isSelfClickAdviseBtn = false;
      this.status = 0;
      this.zhuangUid = 0;
      this.gameTimes = 0;
      this.gameStart = false;
      this.readyBtnActive = false;
      this.playerCards = {};
      this.playerCard3 = {};
      this.playerScore = {};
      this.playerChips = {};
      this.playerZhuang = {};
      this.playerSendCard = {};
      this.recordType = {};
    };
    niuNiuHandler.initRoundData = function() {
      this.zhuangUid = 0;
      this.playerCards = {};
      this.playerCard3 = {};
      this.playerScore = {};
      this.playerChips = {};
      this.playerZhuang = {};
      this.playerSendCard = {};
      this.recordType = {};
      this.readyBtnActive = false, this.isSelfClickAdviseBtn = false;
    };
    niuNiuHandler.spectator = function(uid) {
      var index = true;
      for (var userId in this.playerScore) if (userId == uid) {
        index = false;
        break;
      }
      return index;
    };
    niuNiuHandler.setTexture = function(url, node) {
      var texture2D;
      if (null == url || 0 == url.length || void 0 == url) {
        var spriteComponent;
        if (node.getComponent(cc.Sprite)) {
          spriteComponent = node.getComponent(cc.Sprite);
          spriteComponent.spriteFrame = null;
        }
      } else {
        var textureUrl = cc.url.raw(url);
        textureUrl && (texture2D = cc.textureCache.addImage(textureUrl));
        var spriteComponent;
        if (node.getComponent(cc.Sprite)) {
          spriteComponent = node.getComponent(cc.Sprite);
          spriteComponent.spriteFrame = new cc.SpriteFrame(texture2D);
        }
      }
    }, niuNiuHandler.randomNum = function(min, max) {
      var distance = max - min;
      var num = Math.random() * distance + min;
      return num;
    }, niuNiuHandler.getZhuangMax = function() {
      var maxScore = [];
      for (var key in this.playerZhuang) maxScore.push(parseInt(this.playerZhuang[key], 10));
      var index = 0;
      for (var i = 1; i < maxScore.length; i++) maxScore[i] && maxScore[i] > maxScore[index] && (index = i);
      return maxScore[index];
    };
    niuNiuHandler.getZhuangMaxArray = function() {
      var maxZhuang = this.getZhuangMax();
      var zhuangArray = [];
      for (var key in this.playerZhuang) parseInt(this.playerZhuang[key], 10) === maxZhuang && zhuangArray.push(key);
      return zhuangArray;
    };
    niuNiuHandler.requestZhuang = function(zhuangNum) {
      var self = this;
      var data = {
        num: zhuangNum
      };
      GameNet.getInstance().request("room.niuNiuHandler.setZhuang", data, function(rtn) {});
    };
    niuNiuHandler.requestStart = function() {
      var self = this;
      GameNet.getInstance().request("room.niuNiuHandler.setStart", {}, function(rtn) {
        if (0 == rtn.result) return 0;
      });
    };
    niuNiuHandler.requestChips = function(chipNum) {
      var self = this;
      var chips = {
        num: chipNum
      };
      GameNet.getInstance().request("room.niuNiuHandler.setChips", chips, function(rtn) {});
    };
    niuNiuHandler.requestSend = function() {
      var self = this;
      GameNet.getInstance().request("room.niuNiuHandler.setShow", {}, function(rtn) {});
    };
    niuNiuHandler.registMessage = function() {
      var self = this;
      GameNet.getInstance().setCallBack("douniu-onGameStart", function(data) {
        self.gameStart = true;
        self.isStartAnimationPlayed = true;
        sendEvent("douniu-onGameStart", data);
      });
      GameNet.getInstance().setCallBack("douniu-onGameEnd", function(data) {
        self.status = 0;
        self.gameStart = false;
        sendEvent("douniu-onGameEnd", data);
      });
      GameNet.getInstance().setCallBack("douniu-onGameInfo", function(data) {
        self.status = data.status;
        self.zhuangUid = data.zhuangUid;
        self.playerZhuang = data.zhuangs;
        self.playerChips = data.chips;
        self.playerScore = data.score;
        self.playerSendCard = data.show;
        self.gameTimes = data.timer;
        sendEvent("douniu-onGameInfo", data);
      });
      GameNet.getInstance().setCallBack("douniu-onGameCards", function(data) {
        self.playerCards[data.uid] = data.cards;
        void 0 == data.type || (self.recordType[data.uid] = data.type);
        data.card3 && (self.playerCard3[data.uid] = data.card3);
        cc.log("self.playerCards = " + JSON.stringify(self.playerCards));
        sendEvent("douniu-onGameCards", data);
      });
      GameNet.getInstance().setCallBack("douniu-onShowCards", function(data) {
        cc.log("douniu-onShowCards = " + JSON.stringify(data));
        sendEvent("douniu-onShowCards", data);
      });
    };
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  niuNiuPlayerInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3dde8K/SCJJJr8T51cP1f+P", "niuNiuPlayerInfo");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: 0,
        headBg: cc.Node,
        headBtn: cc.Button,
        headIcon: cc.Sprite,
        zhuangIcon: cc.Sprite,
        nameLabel: cc.Label,
        _player: null,
        zhuangBg: cc.Node
      },
      onLoad: function onLoad() {},
      setPlayer: function setPlayer(data) {
        this._player = data;
        this._player.uid && (this.uid = this._player.uid);
      },
      setName: function setName(name) {
        this.nameLabel.string = getShortStr(name, 4);
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) {
          this.headIcon.spriteFrame = null;
          return;
        }
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      initHeadIcon: function initHeadIcon(type) {
        var texture;
        texture = cc.textureCache.addImage(cc.url.raw("resources/hundredNiuNiu/uiResources/playerInfo/kongHead.png"));
        this.headIcon.spriteFrame = new cc.SpriteFrame(texture);
      },
      showHeadBg: function showHeadBg(show) {
        this.headBg.active = show;
      },
      showZhuang: function showZhuang(show) {
        this.zhuangIcon.node.active = show;
      },
      enableHeadBtn: function enableHeadBtn(flag) {
        this.headBtn.node.active = flag;
      },
      HeadBtnIsClick: function HeadBtnIsClick(flag) {
        this.headBtn.interactable = flag;
      },
      onHeadBtnClicked: function onHeadBtnClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        var sceneName = cc.director.getScene().name;
        cc.log("..sceneName:", sceneName);
        if ("home" == sceneName) createPlayerInfoPanel(this._player); else {
          var self = this;
          var fun = function fun(panel) {
            if (panel) {
              var template = panel.getComponent("uiRoomPlayerInfo");
              template && template.onShow(self._player);
            }
          };
          var roomData = RoomHandler.getRoomData();
          if (roomData && roomData.opts && roomData.opts.gameType) {
            cc.log("..gameType:" + roomData.opts.gameType);
            openPlayerInfoView(roomData.opts.gameType, fun);
          }
        }
      },
      setIsOnline: function setIsOnline(isOnline) {
        var disConncetNode = cc.find("/Disconnect", this.node);
        disConncetNode.active = !isOnline;
      },
      getLiuGuang: function getLiuGuang(isPlay) {
        var liuguang = cc.find("liuguang", this.node);
        liuguang.active = isPlay;
      },
      setCoin: function setCoin(value) {
        var coinNode = cc.find("coin", this.node);
        var showStr = "";
        if (value > 0) {
          showStr = "+" + value;
          coinNode.color = new cc.Color(255, 204, 0);
        } else if (value < 0) {
          showStr = value;
          coinNode.color = new cc.Color(0, 255, 246);
        } else {
          showStr = value;
          coinNode.color = new cc.Color(0, 255, 36);
        }
        coinNode.getComponent(cc.Label).string = showStr;
      },
      setGold: function setGold(value, type) {
        var coinNode;
        type == gameDefine.GameType.Game_niu_niu ? coinNode = cc.find("coin", this.node) : type == gameDefine.GameType.Game_Niu_Hundred && (coinNode = cc.find("labelNode/coin", this.node));
        var showStr = "";
        void 0 != value ? showStr = value : null;
        var newValue = 0;
        newValue = null != showStr ? ConversionCoinValue(showStr, 0) : null;
        coinNode.getComponent(cc.Label).string = newValue;
        coinNode.color = new cc.Color(255, 204, 0);
      },
      setCoinShow: function setCoinShow(show) {
        var nameNode = this.nameLabel.node;
        var coinNode = cc.find("labelNode/coin", this.node);
        if (show) {
          nameNode.active = show;
          coinNode.active = show;
        } else {
          nameNode.active = !show;
          coinNode.active = show;
        }
      },
      setLabelNodePos: function setLabelNodePos(isChange, isXiTong) {
        if (!isChange) return;
        var coinNode = cc.find("labelNode", this.node);
        coinNode.y = isXiTong ? -25 : 2;
      },
      showZhuangNumNode: function showZhuangNumNode(isAc) {
        this.zhuangBg.active = isAc;
      },
      lianZhuangNum: function lianZhuangNum(num) {
        var zhuangLb = cc.find("zhuangLabel", this.zhuangBg);
        zhuangLb.getComponent("cc.Label").string = "连庄剩余" + num + "次";
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  niuNiuPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fa4fCosKVEv7jGsGKPTf1v", "niuNiuPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bgImg: cc.Sprite
      },
      onLoad: function onLoad() {
        this.isShow = true;
        this.isTurn = false;
        this.cardInfo = null;
      },
      initCardInfo: function initCardInfo(cardInfo) {
        this.cardInfo = cardInfo;
        this.updateUI();
      },
      updateUI: function updateUI() {
        var imgName = this.getSpriteNameByCardId();
        var strImgName = imgName + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/niuNiuTable/poker/" + strImgName));
        this.bgImg.spriteFrame = new cc.SpriteFrame(texture);
      },
      initUI: function initUI() {
        var texture = cc.textureCache.addImage(cc.url.raw("resources/niuNiuTable/poker/0.png"));
        this.bgImg.spriteFrame = new cc.SpriteFrame(texture);
      },
      clearCardsUI: function clearCardsUI() {
        this.bgImg.spriteFrame = null;
      },
      turnOver: function turnOver(isTurn) {
        void 0 === isTurn && (isTurn = true);
        this.isTurn = isTurn;
        this.updateUI();
      },
      getSpriteNameByCardId: function getSpriteNameByCardId() {
        if (!this.cardInfo) return "0";
        if (!this.isTurn) return "0";
        var suitType = parseInt(this.cardInfo / 100);
        var baseNum = 16 * (suitType - 1);
        var cardNum = this.cardInfo - 100 * suitType;
        return cardNum + baseNum + "";
      },
      showTipAction: function showTipAction() {
        this.node.runAction(cc.moveBy(.2, cc.p(0, 60)));
      }
    });
    cc._RF.pop();
  }, {} ],
  niuNiuProcessResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10fe3lm22pL3YVVXlXP2zfU", "niuNiuProcessResult");
    "use strict";
    var roomHandler = require("roomHandler");
    var niuNiuHandler = require("niuNiuHandler");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        resultNode: cc.Node,
        scoreNode: cc.Node,
        scoreContent: cc.Node,
        lastTimeLabel: cc.Label,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {},
      showUI: function showUI() {
        var resultData = roomHandler.recordData;
        if (0 == resultData.length) return;
        this.scoreNode.removeAllChildren();
        var roomInfo = roomHandler.room;
        var thisRoundScore = resultData[roomInfo.gameNum - 1].score;
        var index = 0;
        for (var key in thisRoundScore) if (void 0 != thisRoundScore[key]) {
          var scorelist = cc.instantiate(this.scoreContent);
          var playerInfo = roomHandler.getPlayerByUid(key);
          var headNode = cc.find("headNode/headSp", scorelist);
          this.showPlayerHead(headNode, playerInfo.headimgurl);
          var nameLb = cc.find("name", scorelist);
          nameLb.getComponent("cc.Label").string = playerInfo.name.substring(0, 4);
          key == GameData.player.uid ? nameLb.color = new cc.Color(172, 234, 111) : nameLb.color = new cc.Color(255, 229, 178);
          var scoreLb = cc.find("score", scorelist);
          if (thisRoundScore[key] > 0) {
            scoreLb.getComponent("cc.Label").string = "+" + thisRoundScore[key];
            scoreLb.getComponent("cc.Label").font = this.fonts[0];
          } else if (0 == thisRoundScore[key]) {
            scoreLb.getComponent("cc.Label").string = thisRoundScore[key];
            scoreLb.getComponent("cc.Label").font = this.fonts[1];
          } else if (thisRoundScore[key] < 0) {
            scoreLb.getComponent("cc.Label").string = thisRoundScore[key];
            scoreLb.getComponent("cc.Label").font = this.fonts[2];
          }
          scorelist.y = -47 * index;
          this.scoreNode.addChild(scorelist);
          index++;
        }
        this.getWinOrLose(thisRoundScore);
        this.handleCloseTimer();
        sendEvent("onPrepareInfo", roomHandler.readyData);
      },
      showPlayerHead: function showPlayerHead(headNode, headimgurl) {
        if ("" == headimgurl || void 0 == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            headNode.getComponent(cc.Sprite).spriteFrame = null;
            headNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      getWinOrLose: function getWinOrLose(gameData) {
        var win = cc.find("win", this.resultNode);
        var ping = cc.find("ping", this.resultNode);
        var lose = cc.find("lose", this.resultNode);
        var isActive = true;
        if (void 0 != gameData[GameData.player.uid]) {
          var selfScore = gameData[GameData.player.uid];
          if (selfScore > 0) {
            win.active = isActive;
            ping.active = !isActive;
            lose.active = !isActive;
          } else if (0 == selfScore) {
            win.active = !isActive;
            ping.active = isActive;
            lose.active = !isActive;
          } else if (selfScore < 0) {
            win.active = !isActive;
            ping.active = !isActive;
            lose.active = isActive;
          }
        }
      },
      handleCloseTimer: function handleCloseTimer() {
        this.lastTimeLabel.string = "(3)";
        this.lastTime = 3;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        cc.log("this.lastTime = " + this.lastTime);
        this.lastTime--;
        var labelStr = "(" + this.lastTime + ")";
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          GameData.roomClose && this.node.getComponent("niuNiuRoomMain").showSummaryLayer();
          this.resultLayer.active = false;
          sendEvent("onPrepareInfo", roomHandler.readyData);
          this.unschedule(this.updateLastTime);
        }
      },
      readyClick: function readyClick(evt) {
        soundMngr.instance.playAudioOther("button");
        if (GameData.roomClose) this.node.getComponent("niuNiuRoomMain").showSummaryLayer(); else {
          this.clearCard();
          roomHandler.setReady();
        }
        this.resultLayer.active = false;
        niuNiuHandler.readyBtnActive = true;
        sendEvent("onPrepareInfo", roomHandler.readyData);
        this.unschedule(this.updateLastTime);
      },
      clearCard: function clearCard() {
        var parentNode = cc.find("Canvas/layer_ui/layer_ui_table");
        parentNode.getComponent("niuNiuRoomPlay").clearUI();
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    niuNiuHandler: "niuNiuHandler",
    roomHandler: "roomHandler"
  } ],
  niuNiuResultRender: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "608e741QaBD0YAqx6HDv3he", "niuNiuResultRender");
    "use strict";
    var roomHandler = require("roomHandler");
    var niuNiuHandler = require("niuNiuHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        maxWinner: cc.Node,
        nameLbl: cc.Label,
        userIdLbl: cc.Label,
        niuNiuNumLbl: cc.Label,
        wuNiuNumLbl: cc.Label,
        winNumLbl: cc.Label,
        selfBgFrame: cc.Node,
        creatorIcon: cc.Node,
        headIcon: cc.Node,
        roomScoreLbl: cc.Label,
        fonts: [ cc.Font ],
        _playerInfo: null,
        infoNode: cc.Node
      },
      onLoad: function onLoad() {},
      initUI: function initUI() {
        var player = this._playerInfo;
        JSON.stringify("结算玩家数据  " + JSON.stringify(player));
        this.nameLbl.string = getShortStr(player.name, 10);
        this.userIdLbl.string = "ID " + player.uid;
        if (player.uid === GameData.player.uid) {
          this.nameLbl.node.color = new cc.Color(254, 255, 215);
          this.userIdLbl.node.color = new cc.Color(254, 255, 215);
        } else {
          this.nameLbl.node.color = new cc.Color(210, 172, 111);
          this.userIdLbl.node.color = new cc.Color(210, 172, 111);
        }
        var self = this;
        null != player.headimgurl && "" != player.headimgurl && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
        var score = roomHandler.scores[player.uid];
        if (score > 0) {
          this.roomScoreLbl.string = "+" + score;
          this.roomScoreLbl.node.color = new cc.Color(117, 190, 92);
        } else if (score < 0) {
          this.roomScoreLbl.string = score;
          this.roomScoreLbl.node.color = new cc.Color(255, 92, 92);
        } else if (0 == score) {
          this.roomScoreLbl.string = score;
          this.roomScoreLbl.node.color = new cc.Color(235, 224, 129);
        }
        var GetScoreMaxScore = function GetScoreMaxScore() {
          var maxScore = [];
          for (var key in roomHandler.scores) maxScore.push(roomHandler.scores[key]);
          var index = 0;
          for (var i = 1; i < maxScore.length; i++) maxScore[i] && maxScore[i] > maxScore[index] && (index = i);
          return maxScore[index];
        };
        GetScoreMaxScore() == score && (this.maxWinner.active = true);
        this.creatorIcon.active = player.uid == roomHandler.room.creator;
      },
      getActiveNode: function getActiveNode() {
        return this.infoNode;
      },
      showTypeNum: function showTypeNum(uid) {
        var recordData = roomHandler.getRecordData();
        var niuniuNum = 0;
        var wuNiuNum = 0;
        var winNum = 0;
        if (recordData.length <= 0) ; else {
          var niuniuPokerType = niuniuPokerHandler.getPokerType();
          for (var i = 0; i < recordData.length; i++) {
            var roundData = recordData[i];
            roundData.score[uid] > 0 && winNum++;
            roundData.result[uid] == niuniuPokerType.NIU_NIU ? niuniuNum++ : roundData.result[uid] == niuniuPokerType.NIU_NONE && wuNiuNum++;
          }
        }
        this.niuNiuNumLbl.string = niuniuNum;
        this.winNumLbl.string = winNum;
        this.wuNiuNumLbl.string = wuNiuNum;
      },
      initData: function initData(playerInfo) {
        this._playerInfo = playerInfo;
        this._playerInfo && this.initUI();
      }
    });
    cc._RF.pop();
  }, {
    niuNiuHandler: "niuNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler"
  } ],
  niuNiuRoomDissolve: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7442760LSVGgqTqZJQ3C8Q/", "niuNiuRoomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    var niuNiuHandler = require("niuNiuHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        if (null != GameData.game.onRoomDissolve) {
          cc.log("GameData.game.onRoomDissolve = " + JSON.stringify(GameData.game.onRoomDissolve));
          sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        }
        this.openDisAgree = false;
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showHeaderConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showHeaderConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + index % 6 * 170;
          hNode.y = this.headerNode.y - 115 * parseInt(index / 6);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          if (GameData.joiners[i]) {
            var joiner = GameData.joiners[i];
            if (null != joiner) {
              var uid = joiner.uid;
              var headimgurl = joiner.headimgurl;
              this.showHeaderIcon(index, headimgurl);
              this.showHeaderName(index, joiner.name);
              var isOnLine = RoomHandler.isPlayerOnline(uid);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = !isOnLine;
            }
          } else {
            var headNode = cc.find("header_" + index, this.headerNode.parent);
            headNode.active = false;
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        var iconNode = cc.find("header_" + index + "/headimg", this.headerNode.parent);
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          iconNode.getComponent(cc.Sprite).spriteFrame = null;
          return;
        }
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            NiuNiuMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            var parentNode = cc.find("Canvas/layer_ui");
            parentNode.parent.getComponent("niuNiuRoomMain").showDissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        var parentNode = cc.find("Canvas/layer_ui");
        parentNode.parent.getComponent("niuNiuRoomMain").showDissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          var parentNode = cc.find("Canvas/layer_ui");
          parentNode.parent.getComponent("niuNiuRoomMain").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        var parentNode = cc.find("Canvas/layer_ui");
        parentNode.parent.getComponent("niuNiuRoomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        soundMngr.instance.playAudioOther("button");
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        soundMngr.instance.playAudioOther("button");
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      },
      showHeaderConnect: function showHeaderConnect() {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var userId = GameData.joiners[i].uid;
          var isOnLine = RoomHandler.isPlayerOnline(userId);
          var index = i + 1;
          var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
          disNode.active = !isOnLine;
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    niuNiuHandler: "niuNiuHandler",
    roomHandler: "roomHandler"
  } ],
  niuNiuRoomMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbc4d0azUhDcbfZWXIskv9w", "niuNiuRoomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    var RuleHandler = require("ruleHandler");
    var niuNiuHandler = require("niuNiuHandler");
    var NiuNiuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        dissolveLayer: cc.Node,
        dissolvePrefab: cc.Prefab,
        summaryLayer: cc.Node,
        summaryPrefab: cc.Prefab,
        debugLayer: cc.Node,
        debugPrefab: cc.Prefab,
        resultLayer: cc.Node,
        waitLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        quitRoomBtn: cc.Node
      },
      onLoad: function onLoad() {
        soundMngr.instance.playMusic("shisanshui/sound/sss_table_bg1");
        this.initUIData();
        this.initUIShow();
        this.addUIDissolve();
        this.addUISummary();
        this.addUIDebug();
        this.handlerMsg();
        this.talkClick();
        GameData.game.onRoomDissolve && Object.keys(GameData.game.onRoomDissolve).length > 0 && this.showDissolveLayer(1, 1);
      },
      initUIData: function initUIData() {
        cc.log("...room main init data.");
        RuleHandler.instance.setGameType(GameData.client.gameType);
        this.setCurGameData();
      },
      initUIShow: function initUIShow() {
        this.resultLayer.active = false;
        this.summaryLayer.active = false;
        this.dissolveLayer.active = false;
        this.showLayer();
      },
      addUIDissolve: function addUIDissolve() {
        var uiDissolveNode = this.dissolveLayer.getChildByName("uiDissolve");
        if (void 0 == uiDissolveNode) {
          uiDissolveNode = cc.instantiate(this.dissolvePrefab);
          uiDissolveNode.parent = this.dissolveLayer;
          uiDissolveNode.name = "uiDissolve";
          uiDissolveNode.active = true;
        }
      },
      addUISummary: function addUISummary() {
        var uiSummaryNode = this.summaryLayer.getChildByName("uiSummary");
        if (void 0 == uiSummaryNode) {
          uiSummaryNode = cc.instantiate(this.summaryPrefab);
          uiSummaryNode.parent = this.summaryLayer;
          uiSummaryNode.name = "uiSummary";
        }
      },
      addUIDebug: function addUIDebug() {
        var uiDebug = this.debugLayer.getChildByName("uiDebug");
        if (void 0 == uiDebug) {
          uiDebug = cc.instantiate(this.debugPrefab);
          uiDebug.parent = this.debugLayer;
          uiDebug.name = "uiDebug";
          uiDebug.active = false;
        }
      },
      RoomInfoHandler: function RoomInfoHandler(data) {
        if (void 0 == data) return;
        this.setCurGameData();
        this.showLayer();
        this.addUISummary();
      },
      setCurGameData: function setCurGameData() {
        var roomData = roomHandler.getRoomData();
        if (void 0 == roomData) return;
      },
      showLayer: function showLayer() {
        GameData.room.status > gameDefine.RoomState.WAIT || roomHandler.readyCountDown > 0 ? this.showWaitLayer(false) : this.showWaitLayer(true);
        roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin ? this.showCoinQuitRoomBtn() : this.showCardsQuitRoomBtn();
      },
      showCardsQuitRoomBtn: function showCardsQuitRoomBtn() {
        var playGames = roomHandler.playGame;
        if (void 0 == playGames[GameData.player.uid]) return;
        0 == playGames[GameData.player.uid] ? roomHandler.readyData[GameData.player.uid] && roomHandler.readyCountDown > 0 ? this.quitRoomBtn.active = false : this.quitRoomBtn.active = true : this.quitRoomBtn.active = false;
      },
      showCoinQuitRoomBtn: function showCoinQuitRoomBtn() {
        if (roomHandler.room.opts.currencyType != gameDefine.currencyType.Currency_Coin) return;
        void 0 == roomHandler.readyData[GameData.player.uid] && roomHandler.readyCountDown > 0 && (niuNiuHandler.readyBtnActive ? this.quitRoomBtn.active = false : this.quitRoomBtn.active = true);
        var niuniuStatus = niuNiuHandler.status;
        var niuniuGameStatus = NiuNiuPokerHandler.getGameStatus();
        niuniuStatus == niuniuGameStatus.WAIT || niuniuStatus == niuniuGameStatus.SETTLE ? niuNiuHandler.readyBtnActive || niuNiuHandler.gameStart ? this.quitRoomBtn.active = false : this.quitRoomBtn.active = true : niuNiuHandler.spectator(GameData.player.uid) ? this.quitRoomBtn.active = true : this.quitRoomBtn.active = false;
      },
      showWaitLayer: function showWaitLayer(act) {
        this.waitLayer.active = act;
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        soundMngr.instance.playAudioOther("button");
        openView("niuniu_settingPrefab", gameDefine.GameType.Game_niu_niu);
      },
      showResultLayer: function showResultLayer() {
        !niuNiuHandler.spectator(GameData.player.uid);
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.waitLayer.active = !flag;
        this.node.getComponent("niuNiuProcessResult").showUI();
      },
      registShowDisLayer: function registShowDisLayer() {
        this.showDissolveLayer(1, 1);
      },
      showDissolveLayer: function showDissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        var uiSummaryNode = this.summaryLayer.getChildByName("uiSummary");
        uiSummaryNode.getComponent("niuNiuRoomResult").initUI();
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
      },
      showDebugLayer: function showDebugLayer() {
        var uiDebug = this.debugLayer.getChildByName("uiDebug");
        uiDebug && (uiDebug.active = true);
      },
      showChat: function showChat() {
        if (inCD(2e3)) return;
        soundMngr.instance.playAudioOther("button");
        openView("NiuNiuChatPanel", gameDefine.GameType.Game_niu_niu);
      },
      talkClick: function talkClick() {
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          soundMngr.instance.playAudioOther("button");
          if (inCD(2e3)) return;
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > 2 * this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
      },
      handlerMsg: function handlerMsg() {
        registEvent("onRoomInfo", this, this.RoomInfoHandler);
        registEvent("onPrepareInfo", this, this.showLayer);
        registEvent("douniu-onGameStart", this, this.showLayer);
        registEvent("douniu-onGameEnd", this, this.showResultLayer);
        registEvent("douniu-onGameInfo", this, this.showQuitRoomBtn);
        registEvent("onRoomDissolve", this, this.registShowDisLayer);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.RoomInfoHandler);
        unregistEvent("onPrepareInfo", this, this.showLayer);
        unregistEvent("douniu-onGameStart", this, this.showLayer);
        unregistEvent("douniu-onGameEnd", this, this.showResultLayer);
        unregistEvent("douniu-onGameInfo", this, this.showQuitRoomBtn);
        unregistEvent("onRoomDissolve", this, this.registShowDisLayer);
        this.unscheduleAllCallbacks();
        niuNiuHandler.initAllData();
        GameData.initGameData();
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    niuNiuHandler: "niuNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  niuNiuRoomPlay: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d98c8dMnY1Pz7eK60Bqj6qv", "niuNiuRoomPlay");
    "use strict";
    var soundMngr = require("SoundMngr");
    var roomHandler = require("roomHandler");
    var niuNiuHandler = require("niuNiuHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        tableNode: {
          default: null,
          type: cc.Node
        },
        coinNode: {
          default: null,
          type: cc.Node
        },
        qiangzhuangNode: cc.Node,
        multipleNode: cc.Node,
        otherHandCardNode: cc.Node,
        selfHandCardNode: cc.Node,
        adviseBtn: cc.Node,
        sendBtn: cc.Node,
        actionNode: cc.Node,
        selfPokerTypePrefab: cc.Prefab,
        otherPokerTypePrefab: cc.Prefab,
        betSp: cc.Sprite,
        pinNiuSp: cc.Sprite,
        qiangzhuangSp: cc.Sprite,
        playerHeads: [ cc.Node ],
        scoreNode: cc.Prefab,
        scoreParent: cc.Node,
        lastTimeLabel: cc.Label,
        debugBtn: cc.Node,
        spectatorNode: cc.Node,
        randomNode: cc.Node,
        dingzhuangNode: cc.Node,
        winPlayerNode: cc.Node
      },
      onLoad: function onLoad() {
        this.debugBtn.active = configMgr.getSetCardsOpen();
        this.handlerMsg();
        this.coinFlyData();
        this.initNodeActive();
        this.getCardsPosition();
        this._selfHandCards = [];
        this._selfHandCardInitialPos = [];
        var handCardNode = cc.find("/handCard", this.selfHandCardNode);
        for (var i = 0; i < handCardNode.childrenCount; i++) this._selfHandCardInitialPos.push(handCardNode.children[i].getPosition());
        this.initUI();
      },
      initNodeActive: function initNodeActive() {
        this.qiangzhuangSp.node.active = false;
        this.pinNiuSp.node.active = false;
        this.betSp.node.active = false;
        this.qiangzhuangNode.active = false;
        this.otherHandCardNode.active = false;
        this.selfHandCardNode.active = false;
        this.multipleNode.active = false;
        this.adviseBtn.active = false;
        this.sendBtn.active = false;
        this.niuniuStayType = niuniuPokerHandler.getGameStatus();
        this.niuniuPokerType = niuniuPokerHandler.getPokerType();
      },
      getCardsPosition: function getCardsPosition() {
        this.handCardsInitialPos = [];
        for (var i = 0; i < this.otherHandCardNode.children.length; i++) this.handCardsInitialPos.splice(i + 1, 0, this.otherHandCardNode.children[i].getPosition());
        var selfcardNode = this.selfHandCardNode.getChildByName("handCardDis");
        this.handCardsInitialPos.splice(0, 0, selfcardNode.getPosition());
      },
      coinFlyData: function coinFlyData() {
        this._coinIndex = 0;
        this._coinList = [];
        this._coinCount = 8;
        this._winnerIndex = 0;
        this._isLoserClear = true;
        this._isWinnerClear = true;
        this._winnerToLoser = {
          winner: [],
          loser: []
        };
      },
      initUI: function initUI() {
        this.playAudio = false;
        var self = this;
        var runInfo = GameData.room;
        if (!runInfo || "" == runInfo.id) return;
        var runState = runInfo.status;
        this.qiangzhuangNode.active = false;
        this.otherHandCardNode.active = false;
        this.selfHandCardNode.active = false;
        if (true == niuNiuHandler.isStartAnimationPlayed) {
          if (runState < gameDefine.RoomState.GAMEING && niuNiuHandler.status != this.niuniuStayType.SETTLE) {
            this.handleGameStart();
            return;
          }
          niuNiuHandler.isStartAnimationPlayed = false;
        }
        this.showHandCards();
        var niuNiustatus = niuNiuHandler.status;
        niuNiustatus < this.niuniuStayType.CHIPS && this.showGetZhuangUI();
        this.getGameInfo();
      },
      initPokerType: function initPokerType() {
        var players = GameData.joiners;
        for (var j = 0; j < roomHandler.room.opts.joinermax; j++) {
          var pokerActNode = cc.find("/act" + j, this.actionNode);
          for (var i = 0; i < players.length; i++) if (null == players[i]) {
            var localIndex = roomHandler.getLocalPosition(i);
            localIndex == j && pokerActNode && pokerActNode.removeAllChildren();
          } else {
            var userId = players[i].uid;
            var localIndex = roomHandler.getLocalPosition(i);
            localIndex === j && niuNiuHandler.spectator(userId) && pokerActNode && pokerActNode.removeAllChildren();
          }
          j >= players.length && pokerActNode && pokerActNode.removeAllChildren();
        }
      },
      clearUI: function clearUI() {
        this.zhuangId = 0;
        this.playAudio = false;
        this.isclick = void 0;
        this.showpokers = void 0;
        this.initNodeActive();
        if (this._coinList.length > 0) for (var i = 0; i < this._coinList.length; i++) {
          this._coinList[i].active = false;
          this.tableNode.removeChild(this._coinList[i]);
        }
        this.coinFlyData();
        for (var i = 0; i < roomHandler.room.opts.joinermax; i++) {
          var pokerActNode = cc.find("/act" + i, this.actionNode);
          pokerActNode && pokerActNode.removeAllChildren();
        }
        var players = GameData.joiners;
        for (var i = 0; i < players.length; i++) {
          if (null == players[i]) continue;
          var userId = players[i].uid;
          var localIndex = roomHandler.getLocalPosition(i);
          if (0 == localIndex) {
            var handCardNode = this.selfHandCardNode.getChildByName("handCardDis");
            for (var j = 0; j < handCardNode.children.length; j++) {
              var pokerScp = handCardNode.children[j].getComponent("niuNiuPoker");
              pokerScp.initUI();
            }
            continue;
          }
          var handCardNode = this.otherHandCardNode.getChildByName("handCard" + localIndex);
          for (var j = 0; j < handCardNode.children.length; j++) {
            var pokerScp = handCardNode.children[j].getComponent("niuNiuPoker");
            pokerScp.initUI();
          }
        }
        niuNiuHandler.initRoundData();
        this.unschedule(this.loserCoinAnimation);
        this.unschedule(this.winnerAllIsPlayer);
      },
      getGameInfo: function getGameInfo() {
        this.handleGameStart();
        var niuNiustatus = niuNiuHandler.status;
        var randomZhuang = [];
        if (niuNiustatus > this.niuniuStayType.WAIT && niuNiustatus <= this.niuniuStayType.SETTLE) {
          if (niuNiustatus > this.niuniuStayType.ZHUANG) {
            randomZhuang = niuNiuHandler.getZhuangMaxArray();
            if (this.zhuangId != niuNiuHandler.zhuangUid && niuNiustatus == this.niuniuStayType.CHIPS) if (randomZhuang.length >= 2) this.randomZhuangUI(randomZhuang); else {
              this.dingzhuangAnimation();
              this.showBetUI();
              this.zhuangId = niuNiuHandler.zhuangUid;
            } else this.showBetUI();
            niuNiustatus >= this.niuniuStayType.COMPARE && this.showDisCardUI();
            this.showGetZhuangUI();
          }
          this.showHandCards();
        }
        this.statusSign = niuNiuHandler.status;
        this.showHintImg();
      },
      handleGameStart: function handleGameStart() {
        if (this.statusSign != niuNiuHandler.status && niuNiuHandler.status == this.niuniuStayType.ZHUANG) {
          soundMngr.instance.playNiuNiuAudio(-1);
          this.actionNode.active = true;
          var starActNode = cc.find("/actGameStart", this.actionNode);
          starActNode.active = true;
          var anim = starActNode.getComponent(dragonBones.ArmatureDisplay);
          anim.playAnimation("newAnimation", 1);
          var handCardNode = cc.find("/handCard", this.selfHandCardNode);
          for (var i = 0; i < handCardNode.childrenCount; i++) handCardNode.children[i].position = this._selfHandCardInitialPos[i];
          var self = this;
          this.scheduleOnce(function() {
            starActNode.active = false;
            self.initUI();
          }, 1.5);
        }
      },
      randomZhuangUI: function randomZhuangUI(randomZhuang) {
        this.zhuangId = niuNiuHandler.zhuangUid;
        this.zhuangPos = [];
        for (var i = 0; i < randomZhuang.length; i++) {
          var userid = randomZhuang[i];
          var index = roomHandler.getPlayerPosByUid(userid);
          var localIndex = roomHandler.getLocalPosition(index);
          var player = this.playerHeads[localIndex];
          if (null == player) continue;
          this.zhuangPos.splice(localIndex, 0, {
            uid: userid,
            pos: player.getPosition()
          });
        }
        for (var j = 0; j < this.zhuangPos.length; j++) if (null == this.zhuangPos[j] || void 0 == this.zhuangPos[j]) {
          this.zhuangPos.splice(j, 1);
          j--;
        }
        this.makeSureZhuangTimer();
      },
      makeSureZhuangTimer: function makeSureZhuangTimer() {
        this.surplus = 1;
        this.zhuangSign = 0;
        this.updateRandomZhuangPos();
        this.schedule(this.updateRandomZhuangPos, .09);
      },
      updateRandomZhuangPos: function updateRandomZhuangPos() {
        this.surplus -= .09;
        this.randomNode.active = true;
        soundMngr.instance.playNiuNiuAudio(-6);
        var uId = this.zhuangPos[this.zhuangSign].uid;
        var index = roomHandler.getPlayerPosByUid(uId);
        var localIndex = roomHandler.getLocalPosition(index);
        var positions = this.zhuangPos[this.zhuangSign].pos;
        this.randomNode.x = positions.x;
        this.randomNode.y = positions.y;
        if (0 == localIndex) {
          this.randomNode.scaleX = 1;
          this.randomNode.scaleY = 1;
        } else {
          this.randomNode.scaleX = .62;
          this.randomNode.scaleY = .62;
        }
        this.zhuangSign++;
        this.zhuangSign >= this.zhuangPos.length && (this.zhuangSign = 0);
        if (this.surplus <= 0) {
          this.randomNode.x = positions.x;
          this.randomNode.y = positions.y;
          this.randomNode.active = false;
          this.zhuangSign = 0;
          this.dingzhuangAnimation();
          this.showBetUI();
          this.unschedule(this.updateRandomZhuangPos);
        }
      },
      dingzhuangAnimation: function dingzhuangAnimation() {
        var index = roomHandler.getPlayerPosByUid(niuNiuHandler.zhuangUid);
        var localIndex = roomHandler.getLocalPosition(index);
        soundMngr.instance.playNiuNiuAudio(-7);
        var headNode = this.playerHeads[localIndex];
        this.dingzhuangNode.position = headNode.getPosition();
        this.dingzhuangNode.scale = 0 == localIndex ? 1 : .62;
        var zhuangSign = cc.find("zhuangAc", this.dingzhuangNode);
        this.dingzhuangNode.active = true;
        var anim1 = this.dingzhuangNode.getComponent(dragonBones.ArmatureDisplay);
        anim1.playAnimation("newAnimation", 0);
        var anim2 = zhuangSign.getComponent(dragonBones.ArmatureDisplay);
        anim2.playAnimation("newAnimation", 1);
        var self = this;
        this.scheduleOnce(function() {
          self.dingzhuangNode.active = false;
          self.showZhuangUI();
        }, 1.5);
      },
      showZhuangUI: function showZhuangUI() {
        this.clearZhuangUI();
        var players = GameData.joiners;
        for (var j = 0; j < players.length; j++) {
          var player = players[j];
          if (null != player) {
            var localIndex = roomHandler.getLocalPosition(j);
            var headNode = this.playerHeads[localIndex].getChildByName("TableNiuNiuPlayerTemplate");
            var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
            var zhuang = player.uid == niuNiuHandler.zhuangUid;
            playerHeadScp.showZhuang(zhuang);
            playerHeadScp.getLiuGuang(zhuang);
            var zhuangNode = this.playerHeads[localIndex].getChildByName("numQiang");
            if (niuNiuHandler.status > this.niuniuStayType.ZHUANG && niuNiuHandler.zhuangUid != player.uid) for (var i = 0; i < zhuangNode.childrenCount; i++) zhuangNode.children[i].active = false;
          }
        }
      },
      clearZhuangUI: function clearZhuangUI() {
        for (var j = 0; j < this.playerHeads.length; j++) {
          var headNode = this.playerHeads[j].getChildByName("TableNiuNiuPlayerTemplate");
          var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
          playerHeadScp.showZhuang(false);
          playerHeadScp.getLiuGuang(false);
        }
      },
      showGetZhuangUI: function showGetZhuangUI() {
        for (var i = 0; i < this.qiangzhuangNode.childrenCount; i++) {
          var button = this.qiangzhuangNode.children[i].getComponent("cc.Button");
          button.interactable = true;
        }
        if (roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          var coinNumber = roomHandler.getPlayerByUid(GameData.player.uid).coin;
          for (var j = 0; j < this.qiangzhuangNode.childrenCount; j++) {
            if (0 == j) continue;
            var button = this.qiangzhuangNode.children[j].getComponent("cc.Button");
            var scoreleve = roomHandler.room.opts.scorelv;
            var baseCoin = getMatchCostTableFinal(gameDefine.GameType.Game_niu_niu, scoreleve);
            var standardCoin = baseCoin * (GameData.joiners.length - 1) * 2 * 3 * j;
            button.interactable = coinNumber >= standardCoin;
          }
        }
        -1 == niuNiuHandler.playerZhuang[GameData.player.uid] ? this.qiangzhuangNode.active = true : this.qiangzhuangNode.active = false;
      },
      showBetUI: function showBetUI() {
        var chipsData = niuNiuHandler.playerChips;
        if (-1 === chipsData[GameData.player.uid] && niuNiuHandler.zhuangUid != GameData.player.uid) {
          var betType = roomHandler.room.opts.multipleType;
          this.multipleNode.getChildByName("multipleType" + betType).active = true;
          this.multipleNode.active = true;
        } else this.multipleNode.active = false;
      },
      showDisCardUI: function showDisCardUI() {
        if (niuNiuHandler.spectator(GameData.player.uid)) return;
        var isNeedShow = false;
        var sendList = niuNiuHandler.playerSendCard;
        var actNode = cc.find("act0", this.actionNode);
        Object.keys(sendList).length > 0 && (niuNiuHandler.status === this.niuniuStayType.COMPARE ? sendList[GameData.player.uid] || this.showpokers || (isNeedShow = true) : isNeedShow = false);
        true == isNeedShow && true == this.isclick ? this.adviseBtn.active = false : this.adviseBtn.active = isNeedShow;
        this.sendBtn.active = isNeedShow;
      },
      showHandCards: function showHandCards() {
        if (gameDefine.currencyType.Currency_Coin != roomHandler.room.opts.currencyType && (niuNiuHandler.status < this.niuniuStayType.ZHUANG || niuNiuHandler.status > this.niuniuStayType.COMPARE) && roomHandler.readyData[GameData.player.uid]) return;
        var players = GameData.joiners;
        if (!players || 0 == players.length || null == players) return;
        this.otherHandCardNode.active = true;
        for (var i = 0; i < this.otherHandCardNode.children.length; i++) this.otherHandCardNode.children[i].active = false;
        var zhuangUserId = niuNiuHandler.zhuangUid;
        var playerCards = niuNiuHandler.playerCards;
        for (var i = 0; i < players.length; i++) {
          if (null == players[i]) continue;
          var userId = players[i].uid;
          var localIndex = roomHandler.getLocalPosition(i);
          if (userId == GameData.player.uid) this.showSelfHandCards(playerCards[GameData.player.uid], 0); else {
            niuNiuHandler.status > this.niuniuStayType.WAIT && niuNiuHandler.status < this.niuniuStayType.COMPARE && delete playerCards[userId];
            var cardPos = true;
            if (!playerCards[userId] || playerCards[userId] && 0 == playerCards[userId].length) this.showOthersHandCards(userId, localIndex, null, cardPos); else if (playerCards[userId] && playerCards[userId].length > 0) {
              var playercardInfo = this.showPokerForm(userId, playerCards[userId], cardPos);
              userId == zhuangUserId ? this.showZhuangCards(localIndex, playercardInfo.newHandCards, playercardInfo.cardPos) : this.showOthersHandCards(userId, localIndex, playercardInfo.newHandCards, playercardInfo.cardPos);
              var actNode = cc.find("act" + localIndex, this.actionNode);
              5 == playerCards[userId].length && userId != zhuangUserId && this.playCardType(userId, localIndex);
            }
          }
        }
        niuNiuHandler.readyBtnActive || this.initScore();
        this.initPokerType();
      },
      showSelfHandCards: function showSelfHandCards(cards, type) {
        this._selfHandCards = [];
        for (var i = 0; i < this.selfHandCardNode.childrenCount; i++) this.selfHandCardNode.children[i].active = false;
        this.selfHandCardNode.active = false;
        var niuNiustatus = niuNiuHandler.status;
        var srtNodeName;
        var isActive = niuNiuHandler.playerSendCard[GameData.player.uid];
        0 == type ? srtNodeName = isActive || niuNiustatus == this.niuniuStayType.SETTLE || 0 == niuNiustatus ? "handCardDis" : "handCard" : 1 == type && (srtNodeName = "handCardDis");
        GameData.player.uid == niuNiuHandler.zhuangUid && this.showpokers && (srtNodeName = "handCardDis");
        if (niuNiuHandler.spectator(GameData.player.uid)) {
          this.selfHandCardNode.active = false;
          return;
        }
        this.selfHandCardNode.active = true;
        var handCardNode = this.selfHandCardNode.getChildByName(srtNodeName);
        if (handCardNode) {
          handCardNode.active = true;
          if ("handCardDis" == srtNodeName) {
            var cardPos = true;
            var selfCardInfo = this.showPokerForm(GameData.player.uid, cards, cardPos);
            selfCardInfo.cardPos ? handCardNode.x = this.handCardsInitialPos[0].x + 20 : handCardNode.x = this.handCardsInitialPos[0].x;
            this.showEveryCards(handCardNode, selfCardInfo.newHandCards);
          } else this.showEveryCards(handCardNode, cards);
        }
        var actNode = cc.find("act0", this.actionNode);
        if (0 != actNode.childrenCount) return;
        if ("handCardDis" == srtNodeName) {
          this.playCardType(GameData.player.uid, 0);
          GameData.player.uid == niuNiuHandler.zhuangUid && !this.showpokers && niuNiustatus > this.niuniuStayType.WAIT && this.playCardAudio(GameData.player.uid);
        }
      },
      showOthersHandCards: function showOthersHandCards(uid, localIndex, cards, cardPos) {
        var handCardNode = this.otherHandCardNode.getChildByName("handCard" + localIndex);
        handCardNode.x = cardPos ? this.handCardsInitialPos[localIndex].x + 12 : this.handCardsInitialPos[localIndex].x;
        niuNiuHandler.spectator(uid) ? handCardNode.active = false : handCardNode.active = true;
        this.showEveryCards(handCardNode, cards);
      },
      showZhuangCards: function showZhuangCards(localIndex, cards, cardPos) {
        var handCardNode = this.otherHandCardNode.getChildByName("handCard" + localIndex);
        handCardNode.active = true;
        var self = this;
        setTimeout(function() {
          if ((niuNiuHandler.status < self.niuniuStayType.ZHUANG || niuNiuHandler.status > self.niuniuStayType.COMPARE) && Object.keys(niuNiuHandler.playerCards) <= 0) return;
          handCardNode.x = cardPos ? self.handCardsInitialPos[localIndex].x + 12 : self.handCardsInitialPos[localIndex].x;
          self.showEveryCards(handCardNode, cards);
          self.playCardType(niuNiuHandler.zhuangUid, localIndex);
          if (!self.playAudio) {
            self.playAudio = true;
            self.playCardAudio(niuNiuHandler.zhuangUid);
          }
        }, 1e3);
      },
      showEveryCards: function showEveryCards(handCardNode, cards) {
        for (var j = 0; j < handCardNode.children.length; j++) {
          var pokerScp = handCardNode.children[j].getComponent("niuNiuPoker");
          if (null == cards || null == cards[j]) 5 == j ? pokerScp.clearCardsUI() : pokerScp.initCardInfo(null); else if (0 == cards[j]) pokerScp.clearCardsUI(); else {
            pokerScp.turnOver();
            pokerScp.initCardInfo(cards[j]);
            "handCard" == handCardNode.name && 5 == cards.length && this._selfHandCards.push(pokerScp);
          }
        }
      },
      showPokerForm: function showPokerForm(userId, cards, cardPos) {
        var pokerTypeCards = [];
        niuNiuHandler.playerCard3[userId] && (pokerTypeCards = niuNiuHandler.playerCard3[userId]);
        var newArray = pokerTypeCards.concat(cards);
        var newHandCards = niuniuPokerHandler.unequally(newArray);
        var cardsType = niuNiuHandler.recordType[userId];
        if (cardsType > this.niuniuPokerType.NIU_NONE && cardsType < this.niuniuPokerType.NIU_NIU) {
          newHandCards.splice(3, 0, 0);
          cardPos = false;
        } else {
          newHandCards.splice(5, 0, 0);
          cardPos = true;
        }
        return {
          newHandCards: newHandCards,
          cardPos: cardPos
        };
      },
      onReadyBtnClick: function onReadyBtnClick() {
        soundMngr.instance.playAudioOther("button");
        this.clearUI();
        this.spectatorNode.active = false;
        var readyparentNode = this.qiangzhuangSp.node.parent;
        var readyBtnNode = cc.find("actionAnimations/readyBtn", readyparentNode);
        readyBtnNode.active = false;
        if (GameData.roomClose) {
          var parentNode = cc.find("Canvas/layer_ui");
          parentNode.parent.getComponent("niuNiuRoomMain").showSummaryLayer();
        } else roomHandler.setReady();
      },
      onAdviseBtnClick: function onAdviseBtnClick(event, customEventData) {
        var niuniuPokerStar = niuniuPokerHandler.getPokerStar();
        soundMngr.instance.playAudioOther("button");
        var selfcardType = 0;
        var selfActCard = [];
        niuNiuHandler.isSelfClickAdviseBtn = true;
        niuNiuHandler.recordType[GameData.player.uid] && (selfcardType = niuNiuHandler.recordType[GameData.player.uid]);
        niuNiuHandler.playerCard3[GameData.player.uid] && (selfActCard = niuNiuHandler.playerCard3[GameData.player.uid]);
        this.actionNode.active = true;
        var animationNode = this.actionNode.getChildByName("act0");
        for (var key in this.niuniuPokerType) this.niuniuPokerType[key] == selfcardType && niuniuCreateMoveMessage(niuniuPokerStar[key]);
        if (selfActCard.length > 0 && selfcardType <= this.niuniuPokerType.NIU_Nine) for (var i = 0; i < this._selfHandCards.length; i++) {
          var pokerScp = this._selfHandCards[i];
          for (var j = 0; j < selfActCard.length; j++) if (pokerScp.cardInfo && pokerScp.cardInfo == selfActCard[j]) {
            pokerScp.showTipAction();
            continue;
          }
        }
        this.isclick = true;
        event.target.active = false;
      },
      onBetBtnClick: function onBetBtnClick(event, customEventData) {
        soundMngr.instance.playAudioOther("button");
        var self = this;
        var succes = niuNiuHandler.requestChips(customEventData);
        0 == succes && this.showBetUI();
      },
      onSendBtnClick: function onSendBtnClick() {
        soundMngr.instance.playAudioOther("button");
        var self = this;
        this.showpokers = true;
        if (GameData.player.uid == niuNiuHandler.zhuangUid) {
          var cards = niuNiuHandler.playerCards[GameData.player.uid];
          this.showSelfHandCards(cards, 1);
          this.playCardType(GameData.player.uid, 0);
          this.playCardAudio(GameData.player.uid);
          this.adviseBtn.active = false;
          this.sendBtn.active = false;
        } else GameNet.getInstance().request("room.niuNiuHandler.setShow", {}, function(res) {
          if (0 == res.result) {
            self.adviseBtn.active = false;
            self.sendBtn.active = false;
          }
        });
      },
      clickGetZhuang: function clickGetZhuang(eve, data) {
        soundMngr.instance.playAudioOther("button");
        var zhuangNum = data;
        this.qiangzhuangNode.active = false;
        niuNiuHandler.requestZhuang(zhuangNum);
      },
      getShowActiveAudio: function getShowActiveAudio(data) {
        if (!data) return;
        var showUid = data.detail.uid;
        var index = roomHandler.getPlayerPosByUid(showUid);
        var localIndex = roomHandler.getLocalPosition(index);
        var cards = niuNiuHandler.playerCards[showUid];
        var zhuangUserId = niuNiuHandler.zhuangUid;
        if (showUid != zhuangUserId) {
          this.playCardType(showUid, localIndex);
          this.playCardAudio(showUid);
        }
      },
      playCardType: function playCardType(uid, localIndex) {
        var playerInfo = roomHandler.getPlayerByUid(uid);
        var record = null;
        niuNiuHandler.recordType && (record = niuNiuHandler.recordType[uid]);
        if (void 0 === record || null === record) return;
        var actNode = cc.find("act" + localIndex, this.actionNode);
        actNode.removeAllChildren();
        var pokerTypePrefab = 0 == localIndex ? this.selfPokerTypePrefab : this.otherPokerTypePrefab;
        pokerTypePrefab = cc.instantiate(pokerTypePrefab);
        actNode.addChild(pokerTypePrefab);
        pokerTypePrefab.getComponent("pokerTypeAnimation").initFanInfo(record, 0);
      },
      playCardAudio: function playCardAudio(uid) {
        var playerInfo = roomHandler.getPlayerByUid(uid);
        var record = null;
        niuNiuHandler.recordType && (record = niuNiuHandler.recordType[uid]);
        if (niuNiuHandler.status > this.niuniuStayType.WAIT && niuNiuHandler.status < this.niuniuStayType.COMPARE) return;
        if (void 0 === record || null === record) return;
        cc.log("record = " + record);
        soundMngr.instance.playNiuNiuAudio(record, playerInfo.sex);
      },
      handleCloseTimer: function handleCloseTimer() {
        if (0 == niuNiuHandler.gameTimes) return;
        this.unschedule(this.updateCountDown);
        cc.log("niuNiuHandler.status = " + niuNiuHandler.status);
        cc.log("niuNiuHandler.gameTimes = " + niuNiuHandler.gameTimes);
        if (niuNiuHandler.status < this.niuniuStayType.ZHUANG || niuNiuHandler.status > this.niuniuStayType.COMPARE) {
          niuNiuHandler.gameTimes = 0;
          return;
        }
        cc.log("start game count: countTime = " + niuNiuHandler.gameTimes);
        this.updateCountDown();
        this.schedule(this.updateCountDown, 1);
      },
      updateCountDown: function updateCountDown() {
        niuNiuHandler.gameTimes--;
        cc.log("run game count: countTime = " + niuNiuHandler.gameTimes);
        if (niuNiuHandler.status < this.niuniuStayType.ZHUANG || niuNiuHandler.status > this.niuniuStayType.COMPARE) {
          niuNiuHandler.gameTimes = 0;
          this.unschedule(this.updateCountDown);
          return;
        }
        niuNiuHandler.status == this.niuniuStayType.ZHUANG && niuNiuHandler.isStartAnimationPlayed ? this.lastTimeLabel.node.active = false : this.lastTimeLabel.node.active = true;
        this.lastTimeLabel.string = niuNiuHandler.gameTimes;
        if (niuNiuHandler.gameTimes <= 0) {
          niuNiuHandler.gameTimes = 0;
          this.lastTimeLabel.node.active = false;
          this.unschedule(this.updateCountDown);
          return;
        }
      },
      showHintImg: function showHintImg() {
        var zhuangData = niuNiuHandler.playerZhuang;
        var chipsData = niuNiuHandler.playerChips;
        var timeAct = true;
        if (niuNiuHandler.status == this.niuniuStayType.ZHUANG && false == niuNiuHandler.isStartAnimationPlayed) {
          var Url = "resources/niuNiuTable/artword/qingqiangzhuang.png";
          var texture = cc.textureCache.addImage(cc.url.raw(Url));
          this.qiangzhuangSp.spriteFrame = new cc.SpriteFrame(texture);
          this.qiangzhuangSp.node.active = timeAct;
          this.betSp.node.active = !timeAct;
          this.pinNiuSp.node.active = !timeAct;
        } else if (niuNiuHandler.status == this.niuniuStayType.CHIPS) {
          var zhuangUid = niuNiuHandler.zhuangUid;
          var Url = "";
          Url = zhuangUid == GameData.player.uid ? "resources/niuNiuTable/artword/dengdaixiazhuzi.png" : "resources/niuNiuTable/artword/xianjiaxiazhu.png";
          var texture = cc.textureCache.addImage(cc.url.raw(Url));
          this.betSp.spriteFrame = new cc.SpriteFrame(texture);
          this.betSp.node.active = timeAct;
          this.qiangzhuangSp.node.active = !timeAct;
          this.pinNiuSp.node.active = !timeAct;
        } else if (niuNiuHandler.status == this.niuniuStayType.COMPARE) {
          this.pinNiuSp.node.active = timeAct;
          this.betSp.node.active = !timeAct;
          this.qiangzhuangSp.node.active = !timeAct;
        } else if (niuNiuHandler.status == this.niuniuStayType.SETTLE) {
          this.pinNiuSp.node.active = !timeAct;
          this.betSp.node.active = !timeAct;
          this.qiangzhuangSp.node.active = !timeAct;
        }
        this.showReadyImg();
        this.handleCloseTimer();
      },
      showReadyImg: function showReadyImg() {
        var parentNode = this.pinNiuSp.node.parent;
        var waitStart = cc.find("waitstart", parentNode);
        var pleaseReady = cc.find("pleaseReady", parentNode);
        var ready = roomHandler.readyData;
        if (roomHandler.room.status == gameDefine.RoomState.WAIT || roomHandler.room.status == gameDefine.RoomState.READY) if (roomHandler.readyCountDown > 0) {
          niuNiuHandler.readyBtnActive ? waitStart.active = false : waitStart.active = true;
          this.clearZhuangUI();
          pleaseReady.active = false;
        } else roomHandler.room.status != gameDefine.RoomState.READY || ready[GameData.player.uid] || (pleaseReady.active = true); else {
          pleaseReady.active = false;
          waitStart.active = false;
        }
        if (niuNiuHandler.status >= this.niuniuStayType.ZHUANG && niuNiuHandler.status < this.niuniuStayType.SETTLE) {
          waitStart.active = false;
          pleaseReady.active = false;
        }
        niuNiuHandler.status > this.niuniuStayType.WAIT && niuNiuHandler.status <= this.niuniuStayType.SETTLE && niuNiuHandler.spectator(GameData.player.uid) ? ready[GameData.player.uid] ? this.spectatorNode.active = false : this.spectatorNode.active = true : this.spectatorNode.active = false;
        this.surplus <= 0 && this.showZhuangUI();
      },
      handleRunEnd: function handleRunEnd() {
        niuNiuHandler.readyBtnActive = true;
        var parentNode = this.qiangzhuangSp.node.parent;
        var readyBtnNode = cc.find("actionAnimations/readyBtn", parentNode);
        readyBtnNode.active = false;
        var pleaseReady = cc.find("pleaseReady", parentNode);
        pleaseReady.active = false;
        var self = this;
        this.scheduleOnce(function() {
          self.showClearAnimation();
        }, 1.5);
      },
      moveScoreActive: function moveScoreActive() {
        this.moveAboutScore();
        var self = this;
        this.scheduleOnce(function() {
          self.initScore();
          niuNiuHandler.readyBtnActive = false;
          if (GameData.roomClose) {
            var parentNode = cc.find("Canvas/layer_ui");
            parentNode.parent.getComponent("niuNiuRoomMain").showSummaryLayer();
          } else {
            sendEvent("onPrepareInfo", roomHandler.readyData);
            niuNiuHandler.zhuangUid = 0;
            if (gameDefine.currencyType.Currency_Coin == roomHandler.room.opts.currencyType && checkOpenUISuccour(roomHandler.room.opts.gameType, roomHandler.room.opts.scorelv)) return;
          }
        }, 1);
      },
      moveAboutScore: function moveAboutScore() {
        var self = this;
        var players = GameData.joiners;
        for (var j = 0; j < players.length; j++) {
          if (null == players[j]) continue;
          var player = players[j];
          var playerPos = roomHandler.getLocalPosition(j);
          var runScore = niuNiuHandler.playerScore[player.uid];
          var headNode = self.scoreParent.getChildByName("score" + playerPos);
          var playerGetScore = headNode.getChildByName("resultScore");
          if (null == playerGetScore) {
            playerGetScore = cc.instantiate(self.scoreNode);
            if (gameDefine.currencyType.Currency_Coin == roomHandler.room.opts.currencyType) {
              var scoreleve = roomHandler.room.opts.scorelv;
              var baseCoin = getMatchCostTableFinal(gameDefine.GameType.Game_niu_niu, scoreleve);
              playerGetScore.getComponent("resultRunScore").getScoreColor(runScore * baseCoin);
            } else playerGetScore.getComponent("resultRunScore").getScoreColor(runScore);
            playerGetScore.active = true;
            headNode.addChild(playerGetScore);
            runScore > 0 && this.winnerAnimation(playerPos);
          }
          var move1 = cc.moveBy(1, cc.p(0, 60));
          playerGetScore.runAction(move1);
        }
        this.scheduleOnce(function() {
          for (var i = 0; i < self.scoreParent.children.length; i++) self.scoreParent.children[i].removeAllChildren();
        }, 1);
      },
      initScore: function initScore() {
        var players = GameData.joiners;
        for (var j = 0; j < players.length; j++) {
          var player = players[j];
          if (null == player) continue;
          var localIndex = roomHandler.getLocalPosition(j);
          var headNode = this.playerHeads[localIndex].getChildByName("TableNiuNiuPlayerTemplate");
          var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
          var roomScore = roomHandler.scores[player.uid];
          gameDefine.currencyType.Currency_Coin == roomHandler.room.opts.currencyType ? playerHeadScp.setGold(player.coin, gameDefine.GameType.Game_niu_niu) : playerHeadScp.setCoin(roomScore);
        }
        this.surplus <= 0 && this.showZhuangUI();
      },
      winnerAnimation: function winnerAnimation(index) {
        var winerNode = cc.find("action" + index, this.winPlayerNode);
        winerNode.active = true;
        var anim = winerNode.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("newAnimation", 1);
        var self = this;
        this.scheduleOnce(function() {
          winerNode.active = false;
        }, 1.5);
      },
      showClearAnimation: function showClearAnimation() {
        WriteLog("showClearAnimation");
        this.confirmWinnerOrLoser();
        this._winnerToLoser.loser.length > 0 ? this.loserJetton() : this._winnerToLoser.winner.length > 0 && this.flyToPlayer();
      },
      confirmWinnerOrLoser: function confirmWinnerOrLoser() {
        niuniuPokerHandler.clearArray(this._winnerToLoser.winner);
        niuniuPokerHandler.clearArray(this._winnerToLoser.loser);
        var scoreList = niuNiuHandler.playerScore;
        for (var key in scoreList) {
          if (key == niuNiuHandler.zhuangUid) continue;
          scoreList[key] > 0 ? this._winnerToLoser.winner.push({
            uid: key,
            score: scoreList[key]
          }) : this._winnerToLoser.loser.push({
            uid: key,
            score: scoreList[key]
          });
        }
      },
      winnerCoinCount: function winnerCoinCount() {
        var coinAllCount = this._coinCount * this._winnerToLoser.winner.length;
        var _winnerCoinCount = Math.floor(coinAllCount / this._winnerToLoser.winner.length);
        return _winnerCoinCount;
      },
      createCoinNode: function createCoinNode(coinNum) {
        var node;
        var str = "resources/niuNiuTable/result/jinbiniuniu.png";
        if (this.tableNode.getChildByName("coinNode" + coinNum)) node = this.tableNode.getChildByName("coinNode" + coinNum); else {
          node = cc.instantiate(this.coinNode);
          node.name = "coinNode" + coinNum;
          this.tableNode.addChild(node);
        }
        node.active = true;
        this._coinList.push(node);
        var iconUrl = str;
        niuNiuHandler.setTexture(iconUrl, node);
        return node;
      },
      flyToPlayer: function flyToPlayer() {
        this._coinIndex = 0;
        this.schedule(this.winnerAllIsPlayer, .05);
      },
      loserJetton: function loserJetton() {
        this._coinIndex = 0;
        this.schedule(this.loserCoinAnimation, .05);
      },
      loserCoinAnimation: function loserCoinAnimation() {
        var self = this;
        var index = roomHandler.getPlayerPosByUid(niuNiuHandler.zhuangUid);
        var zhuangIndex = roomHandler.getLocalPosition(index);
        soundMngr.instance.playNiuNiuAudio(-5);
        for (var i = 0; i < this._winnerToLoser.loser.length; i++) {
          var node;
          var coinNum = this._coinIndex + 1;
          node = this.createCoinNode(coinNum);
          var loseIndex = roomHandler.getPlayerPosByUid(this._winnerToLoser.loser[i].uid);
          var seat = roomHandler.getLocalPosition(loseIndex);
          var player = this.playerHeads[seat];
          node.setPosition(player.getPosition());
          var actionX = this.playerHeads[zhuangIndex].x + niuNiuHandler.randomNum(-50, 50);
          var actionY = this.playerHeads[zhuangIndex].y + niuNiuHandler.randomNum(-20, 50);
          var moveTo = cc.moveTo(.25, cc.p(actionX, actionY));
          node.runAction(moveTo).easing(cc.easeCubicActionOut());
          this._coinIndex++;
        }
        if (this._coinIndex >= this._coinCount * this._winnerToLoser.loser.length) {
          this.unschedule(this.loserCoinAnimation);
          this.scheduleOnce(function() {
            for (var i = 0; i < self._coinList.length; i++) {
              self._coinList[i].active = false;
              self.tableNode.removeChild(self._coinList[i]);
            }
          }, .5);
          this._winnerToLoser.winner.length > 0 ? this.winnerAction() : this.scheduleOnce(function() {
            self.moveScoreActive();
          }, .5);
        }
      },
      winnerAction: function winnerAction() {
        var delayTime = cc.delayTime(1);
        var self = this;
        var callFunc = cc.callFunc(function() {
          self.winnerCoin();
        }, this);
        var seq = cc.sequence(delayTime, callFunc);
        this.node.runAction(seq);
      },
      winnerCoin: function winnerCoin() {
        this._coinIndex = 0;
        this.schedule(this.winnerAllIsPlayer, .05);
      },
      winnerAllIsPlayer: function winnerAllIsPlayer() {
        var self = this;
        var removeFunc;
        var lastWinner = this._winnerToLoser.winner.length - 1;
        var loseIndex = roomHandler.getPlayerPosByUid(niuNiuHandler.zhuangUid);
        var seat = roomHandler.getLocalPosition(loseIndex);
        var player = this.playerHeads[seat];
        soundMngr.instance.playNiuNiuAudio(-5);
        for (var i = 0; i < this._winnerToLoser.winner.length; i++) {
          var coinNum = this._coinIndex + 1;
          var node = this.createCoinNode(coinNum);
          node.setPosition(player.getPosition());
          var moveTo;
          var coinAction = function coinAction(num) {
            var winIndex = roomHandler.getPlayerPosByUid(self._winnerToLoser.winner[self._winnerIndex].uid);
            var seat = roomHandler.getLocalPosition(winIndex);
            var player = self.playerHeads[seat];
            var actionX = player.getPosition().x + niuNiuHandler.randomNum(-50, 50);
            var actionY = player.getPosition().y + niuNiuHandler.randomNum(-20, 50);
            moveTo = cc.moveTo(.25, cc.p(actionX, actionY));
            removeFunc = cc.callFunc(function() {
              self._coinList[num - 1].active = false;
              self.tableNode.removeChild(self._coinList[num - 1]);
            }, this);
          };
          if (coinNum <= this.winnerCoinCount() * (this._winnerIndex + 1) && this._winnerIndex < lastWinner) coinAction(coinNum); else if (coinNum > this.winnerCoinCount() * (this._winnerIndex + 1) && this._winnerIndex < lastWinner) {
            this._winnerIndex++;
            coinAction(coinNum);
          } else this._winnerIndex == lastWinner && coinAction(coinNum);
          var fade = cc.fadeOut(.4);
          var seq = cc.sequence(moveTo, fade, removeFunc);
          node.runAction(seq).easing(cc.easeCubicActionOut());
          this._coinIndex++;
        }
        if (this._coinIndex >= this._coinCount * this._winnerToLoser.winner.length) {
          this.unschedule(this.winnerAllIsPlayer);
          this.scheduleOnce(function() {
            self.moveScoreActive();
          }, .5);
        }
      },
      handlerMsg: function handlerMsg() {
        registEvent("onRoomInfo", this, this.showHandCards);
        registEvent("onJoinerConnect", this, this.initScore);
        registEvent("onPrepareInfo", this, this.showReadyImg);
        registEvent("douniu-onGameEnd", this, this.handleRunEnd);
        registEvent("douniu-onGameInfo", this, this.getGameInfo);
        registEvent("douniu-onGameCards", this, this.showHandCards);
        registEvent("douniu-onGameStart", this, this.clearUI);
        registEvent("douniu-onShowCards", this, this.getShowActiveAudio);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showHandCards);
        unregistEvent("onJoinerConnect", this, this.initScore);
        unregistEvent("onPrepareInfo", this, this.showReadyImg);
        unregistEvent("douniu-onGameEnd", this, this.handleRunEnd);
        unregistEvent("douniu-onGameInfo", this, this.getGameInfo);
        unregistEvent("douniu-onGameCards", this, this.showHandCards);
        unregistEvent("douniu-onGameStart", this, this.clearUI);
        unregistEvent("douniu-onShowCards", this, this.getShowActiveAudio);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    niuNiuHandler: "niuNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler"
  } ],
  niuNiuRoomResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35caaumai5K4o60hj7YoXgb", "niuNiuRoomResult");
    "use strict";
    var niuNiuHandler = require("niuNiuHandler");
    var roomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerRender: cc.Prefab,
        content: cc.Node,
        panel: cc.Node,
        dengguang: cc.Node
      },
      onLoad: function onLoad() {
        this.handlerMsg();
        var anim = this.dengguang.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("newAnimation", 0);
        if (GameData.game.close) {
          cc.log("initUI");
          this.initUI();
        }
      },
      initUI: function initUI() {
        this._roomInfo = roomHandler.room;
        this.showTime(this._roomInfo.createtime, this._roomInfo.id);
        this.content.removeAllChildren();
        var playerInfo = GameData.joiners;
        for (var i = 0; i < playerInfo.length; i++) {
          var playerRender = cc.instantiate(this.playerRender);
          playerRender.x = i % 3 * 440 - 560;
          playerRender.y = 165.25 - 111 * parseInt(i / 3);
          this.content.addChild(playerRender);
        }
        var child = this.content.children;
        for (var i = 0; i < child.length; i++) {
          var playerRender = child[i];
          playerRender.getComponent("niuNiuResultRender").initData(playerInfo[i]);
          playerRender.getComponent("niuNiuResultRender").getActiveNode().active = true;
        }
      },
      showTime: function showTime(createTime, roomId) {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(createTime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + roomId;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        soundMngr.instance.playAudioOther("button");
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      },
      handlerMsg: function handlerMsg() {
        registEvent("onRoomClose", this, this.initUI);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomClose", this, this.initUI);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    niuNiuHandler: "niuNiuHandler",
    roomHandler: "roomHandler"
  } ],
  niuNiuRoomWait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44420jvMHxDdKpe2EwjiVZQ", "niuNiuRoomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var roomHandler = require("roomHandler");
    var niuNiuHandler = require("niuNiuHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    var _getBossIntr = function _getBossIntr(idx) {
      var strs = [ "轮流坐庄", "明牌抢庄" ];
      return strs[idx];
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        roomId: cc.Label,
        roomTitle: cc.Node,
        bossType: cc.Label,
        roundInfo: cc.Label,
        scoreBase: cc.Label,
        playerHeads: [ cc.Node ],
        readyNode: cc.Node,
        wifiNode: cc.Node,
        playerTemplate: cc.Prefab,
        btnReady: cc.Node,
        btnStart: cc.Node,
        quitRoomBtn: cc.Node,
        unStartLayer: cc.Node,
        playintrNode: cc.Node,
        lastTimeLabel: cc.Label,
        resultLayer: cc.Node,
        costTips: cc.Node,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.headers = new Array();
        this.handlerMsg();
        this.initUi();
        this.addDynAnimation();
      },
      handlerMsg: function handlerMsg() {
        registEvent("dynChat", this, this.dynChatHandler);
        registEvent("onRoomInfo", this, this.initPlayers);
        registEvent("douniu-onGameStart", this, this.initUi);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("onPrepareInfo", this, this.initReadyInfo);
        registEvent("onJoinerConnect", this, this.initPlayers);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("onJoinerLost", this, this.handleJoinerLost);
        registEvent("alertLottery", this, this.openLotteryPanel);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("douniu-onGameInfo", this, this.showPlayerRoundInfo);
      },
      onDestroy: function onDestroy() {
        unregistEvent("dynChat", this, this.dynChatHandler);
        unregistEvent("onRoomInfo", this, this.initPlayers);
        unregistEvent("douniu-onGameStart", this, this.initUi);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("onPrepareInfo", this, this.initReadyInfo);
        unregistEvent("onJoinerConnect", this, this.initPlayers);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("onJoinerLost", this, this.handleJoinerLost);
        unregistEvent("alertLottery", this, this.openLotteryPanel);
        unregistEvent("yunwaUploaded", this, this.onYunwaUploaded);
        unregistEvent("douniu-onGameInfo", this, this.showPlayerRoundInfo);
        this.unschedule(this.updateLastTime);
      },
      initUi: function initUi() {
        this.readyNode.active = false;
        this.btnStart.active = false;
        this.costTips.active = false;
        this.TipsFlag = true;
        this.gamestatus = niuNiuHandler.status;
        this.niuniuGameStatus = niuniuPokerHandler.getGameStatus();
        var roomInfo = roomHandler.room;
        this.initPlayers();
        this.unStartLayer.active = roomInfo.status == gameDefine.RoomState.WAIT;
      },
      showRuleUI: function showRuleUI() {
        var roomInfo = roomHandler.room;
        var opacitys = 0;
        if (roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          opacitys = 81;
          this.bossType.string = "";
          this.roundInfo.string = "";
          var roundNums = roomInfo.gameNum + 1;
          1 == roundNums.toString().length ? roundNums = "000" + roundNums : 2 == roundNums.toString().length ? roundNums = "00" + roundNums : 3 == roundNums.toString().length ? roundNums = "0" + roundNums : 4 == roundNums.toString().length && (roundNums = roundNums);
          this.roomId.string = roundNums + roomInfo.id;
          this.roomId.node.x = -118;
          var scoreleve = roomHandler.room.opts.scorelv;
          var baseCoin = getMatchCostTableFinal(gameDefine.GameType.Game_niu_niu, scoreleve);
          this.scoreBase.string = "底分: " + baseCoin;
          this.scoreBase.node.parent.y = this.bossType.node.parent.y;
          this.roomTitle.active = false;
        } else {
          opacitys = 255;
          this.roomId.string = roomInfo.id;
          this.roundInfo.string = "局数: " + roomInfo.roundNum + " / " + roomInfo.opts.roundMax;
          this.bossType.string = "人数: " + roomInfo.opts.joinermax;
          this.scoreBase.string = "底分: " + roomInfo.opts.scoreBase;
          this.roomTitle.active = true;
        }
        this.roomId.node.opacity = opacitys;
        this.scoreBase.node.opacity = opacitys;
      },
      initPlayers: function initPlayers() {
        this.headers = [];
        this.initPlayerHeads();
        var players = GameData.joiners;
        for (var j = 0; j < players.length; j++) {
          var player = players[j];
          if (null != player) {
            var localIndex = roomHandler.getLocalPosition(j);
            var headNode = this.playerHeads[localIndex].getChildByName("TableNiuNiuPlayerTemplate");
            headNode.parent.active = true;
            var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
            var isOnline = roomHandler.isPlayerOnline(player.uid);
            playerHeadScp.showHeadBg(true);
            playerHeadScp.setPlayer(player);
            playerHeadScp.HeadBtnIsClick(true);
            playerHeadScp.setName(player.name);
            playerHeadScp.setHeadIcon(player.headimgurl);
            playerHeadScp.setIsOnline(isOnline);
            this.headers.push(headNode);
          }
        }
        this.showPlayerRoundInfo();
      },
      initPlayerHeads: function initPlayerHeads() {
        for (var i = 0; i < this.playerHeads.length; i++) {
          var headNode = this.playerHeads[i].getChildByName("TableNiuNiuPlayerTemplate");
          var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
          playerHeadScp.setPlayer({});
          playerHeadScp.showHeadBg(false);
          playerHeadScp.setName("");
          playerHeadScp.HeadBtnIsClick(false);
          playerHeadScp.initHeadIcon();
          niuNiuHandler.readyBtnActive || playerHeadScp.setCoin("");
          playerHeadScp.setIsOnline(true);
          var betNode = this.playerHeads[i].getChildByName("betNum");
          for (var j = 0; j < betNode.childrenCount; j++) betNode.children[j].active = false;
          var zhuangNode = this.playerHeads[i].getChildByName("numQiang");
          for (var k = 0; k < zhuangNode.childrenCount; k++) zhuangNode.children[k].active = false;
          this.playerHeads[i].active = true;
        }
      },
      showPlayerRoundInfo: function showPlayerRoundInfo() {
        var players = GameData.joiners;
        for (var j = 0; j < players.length; j++) {
          var player = players[j];
          if (null != player) {
            var localIndex = roomHandler.getLocalPosition(j);
            var betNum = niuNiuHandler.playerChips[player.uid];
            var betNode = this.playerHeads[localIndex].getChildByName("betNum");
            for (var i = 0; i < betNode.childrenCount; i++) betNode.children[i].active = false;
            betNum > 0 && betNode.getChildByName(betNum + "jiao") && (betNode.getChildByName(betNum + "jiao").active = true);
            var zhuangNum = niuNiuHandler.playerZhuang[player.uid];
            niuNiuHandler.playerZhuang[player.uid] <= 0 && player.uid === niuNiuHandler.zhuangUid && (zhuangNum = 1);
            var zhuangNode = this.playerHeads[localIndex].getChildByName("numQiang");
            for (var i = 0; i < zhuangNode.childrenCount; i++) zhuangNode.children[i].active = false;
            niuNiuHandler.status >= this.niuniuGameStatus.ZHUANG && zhuangNode.getChildByName(zhuangNum + "qiang") && (zhuangNode.getChildByName(zhuangNum + "qiang").active = true);
            if (niuNiuHandler.status >= this.niuniuGameStatus.COMPARE && niuNiuHandler.zhuangUid != player.uid) for (var i = 0; i < zhuangNode.childrenCount; i++) zhuangNode.children[i].active = false;
          }
        }
        this.showRuleUI();
        this.initReadyInfo();
        roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && this.beginCountDown();
      },
      initReadyInfo: function initReadyInfo() {
        if (roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) return;
        if (roomHandler.room.status == gameDefine.RoomState.WAIT || roomHandler.room.status == gameDefine.RoomState.READY) {
          for (var child in this.readyNode.children) this.readyNode.children[child].active = false;
          var players = GameData.joiners;
          for (var j = 0; j < players.length; j++) {
            var userInfo = players[j];
            if (null != userInfo) {
              var localIndex = roomHandler.getLocalPosition(j);
              var ready = roomHandler.readyData[userInfo.uid];
              0 == localIndex && userInfo.uid == GameData.player.uid && (false == ready && (niuNiuHandler.readyBtnActive || this.gamestatus != niuNiuHandler.status && niuNiuHandler.status == this.niuniuGameStatus.SETTLE || this.gamestatus == niuNiuHandler.status && niuNiuHandler.status == this.niuniuGameStatus.COMPARE) ? this.btnReady.active = ready : this.btnReady.active = !ready);
              ready && (niuNiuHandler.readyBtnActive || this.gamestatus != niuNiuHandler.status && niuNiuHandler.status == this.niuniuGameStatus.SETTLE || this.gamestatus == niuNiuHandler.status && niuNiuHandler.status == this.niuniuGameStatus.COMPARE) ? this.readyNode.getChildByName("ready_hand_" + localIndex).active = !ready : this.readyNode.getChildByName("ready_hand_" + localIndex).active = ready;
            }
          }
          this.readyNode.active = true;
          this.beginCountDown();
        } else {
          this.readyNode.active = false;
          this.btnReady.active = false;
        }
        this.gamestatus = niuNiuHandler.status;
      },
      onSartBtnClick: function onSartBtnClick() {
        soundMngr.instance.playAudioOther("button");
        var players = roomHandler.players;
        if (players.length < 2) {
          createMoveMessage("房间内至少有两名玩家");
          return;
        }
        for (var i = 0; i < players.length; i++) {
          var userInfo = players[i];
          if (null == userInfo) continue;
          if (!roomHandler.readyData[userInfo.uid]) {
            createMoveMessage("房间内的玩家必须都要准备");
            return;
          }
        }
        niuNiuHandler.requestStart();
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        soundMngr.instance.playAudioOther("button");
        var roomId = roomHandler.room.id;
        if (roomId > 0) {
          var gameType = "";
          roomHandler.room.opts.gameType == gameDefine.GameType.Game_Niu_Niu_10 ? gameType = "拼十(10人)," : roomHandler.room.opts.gameType == gameDefine.GameType.Game_niu_niu && (gameType = "拼十(6人),");
          var title = gameType + "房间号:" + roomId + ",";
          var roomInfo = roomHandler.room.opts;
          var des = getRuleStrNiuNiu(roomInfo) + ",邀请您快速进入";
          wxShareCommond(title + des);
        }
      },
      onQuitRoomBtnClick: function onQuitRoomBtnClick() {
        soundMngr.instance.playAudioOther("button");
        this.quitRoomBtn.active = false;
        roomHandler.room.creator == GameData.player.uid ? cc.director.loadScene("home") : roomHandler.quitRoom(roomHandler.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        roomHandler.room.creator != GameData.player.uid ? NiuNiuMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      ruleClick: function ruleClick() {
        soundMngr.instance.playAudioOther("button");
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.onShowPlayIntrClick();
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        soundMngr.instance.playAudioOther("button");
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        if (!roomHandler.room.opts) return;
        var playStr = "";
        playStr += roomHandler.room.opts.roundMax + "局,";
        playStr += "2-6人,";
        1 == roomHandler.room.opts.costType ? playStr += "房主付费," : 2 == roomHandler.room.opts.costType ? playStr += "AA," : 3 == roomHandler.room.opts.costType && (playStr += "赢家付,");
        playStr += "底分:" + roomHandler.room.opts.scoreBase + "分,";
        0 == roomHandler.room.opts.multipleType ? playStr += "下注1/2/3/5," : 1 == roomHandler.room.opts.multipleType && (playStr += "下注1/2,");
        playStr += "明牌抢庄";
        var contentNode = cc.find(size + "/content", this.playintrNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        soundMngr.instance.playAudioOther("button");
        var gameType = "";
        roomHandler.room.opts.gameType == gameDefine.GameType.Game_Niu_Niu_10 ? gameType = "拼十(10人)," : roomHandler.room.opts.gameType == gameDefine.GameType.Game_niu_niu && (gameType = "拼十(6人),");
        var title = gameType + "房间号:" + roomHandler.room.id;
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      handleJoinerLost: function handleJoinerLost() {
        this.initPlayers();
      },
      getInviteStr: function getInviteStr() {
        var str = "玩法: " + this.bossType.string + "," + roomHandler.room.opts.roundMax + "局," + this.scoreBase.string + ",2-" + roomHandler.room.opts.joinermax + "人,";
        1 == roomHandler.room.opts.costType ? str += "房主付费" : 2 == roomHandler.room.opts.costType ? str += "AA" : 3 == roomHandler.room.opts.costType && (str += "赢家付");
        str += ", 请您快速加入";
        cc.log("........str = " + str);
        return str;
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        soundMngr.instance.playAudioOther("button");
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        cc.log("uid = " + uid + ",type = " + type);
        var player = roomHandler.getPlayerByUid(uid);
        if (null == player) return;
        var playerSex = player.sex;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          cc.log(" this.uid:" + headerNode.getComponent("niuNiuPlayerInfo").uid, uid);
          if (headerNode.getComponent("niuNiuPlayerInfo").uid == uid) {
            var chatNode = cc.find("chat", headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                cc.log("soundKey:" + soundKey, playerSex);
                soundMngr.instance.playAudioChat(soundKey, playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      clearSignUI: function clearSignUI() {
        var players = GameData.joiners;
        for (var j = 0; j < players.length; j++) {
          var player = players[j];
          if (null != player) {
            var localIndex = roomHandler.getLocalPosition(j);
            var headNode = this.playerHeads[localIndex].getChildByName("TableNiuNiuPlayerTemplate");
            var playerHeadScp = headNode.getComponent("niuNiuPlayerInfo");
            var betNum = niuNiuHandler.playerChips[player.uid];
            var betNode = this.playerHeads[localIndex].getChildByName("betNum");
            for (var i = 0; i < betNode.childrenCount; i++) betNode.children[i].active = false;
            var zhuangNode = this.playerHeads[localIndex].getChildByName("numQiang");
            for (var i = 0; i < zhuangNode.childrenCount; i++) zhuangNode.children[i].active = false;
          }
        }
      },
      beginCountDown: function beginCountDown() {
        if (roomHandler.readyCountDown > 0 && (roomHandler.room.status == gameDefine.RoomState.WAIT || roomHandler.room.status == gameDefine.RoomState.READY)) {
          this.lastTimeLabel.string = "";
          this.lastTimeLabel.node.active = true;
          this.clearSignUI();
          this.handleCloseTimer();
        } else {
          this.lastTimeLabel.node.active = false;
          this.unschedule(this.updateLastTime);
        }
      },
      handleCloseTimer: function handleCloseTimer() {
        cc.log("ready start count: roomHandler.readyCountDown = " + roomHandler.readyCountDown);
        this.updateLastTime();
        this.TipsFlag = true;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        roomHandler.readyCountDown--;
        cc.log("ready run time: roomHandler.readyCountDown = " + roomHandler.readyCountDown);
        if (niuNiuHandler.status >= this.niuniuGameStatus.ZHUANG && niuNiuHandler.status < this.niuniuGameStatus.SETTLE) {
          this.lastTimeLabel.node.active = false;
          this.unschedule(this.updateLastTime);
          return;
        }
        if (niuNiuHandler.readyBtnActive || roomHandler.readyCountDown <= 0) this.lastTimeLabel.node.active = false; else {
          var firstGame = this.isFirstPlayGame();
          if (this.TipsFlag && firstGame && roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
            this.showCostTips();
            this.TipsFlag = false;
          }
          this.lastTimeLabel.node.active = true;
        }
        this.lastTimeLabel.string = roomHandler.readyCountDown;
        if (roomHandler.readyCountDown <= 0) {
          this.readyLen = 0;
          this.costTips.active = false;
          this.unStartLayer.active = false;
          this.lastTimeLabel.node.active = false;
          this.unschedule(this.updateLastTime);
        }
      },
      showCostTips: function showCostTips() {
        var config = configMgr.getServerConfig();
        var scoreLv = roomHandler.room.opts.scorelv;
        var costNum = config["matchCoin"][GameData.client.gameType].cost[scoreLv];
        this.costTips.active = true;
        this.costTips.getComponent(cc.Label).string = "每局消耗" + costNum + "金币";
      },
      isFirstPlayGame: function isFirstPlayGame() {
        var data = roomHandler.getScoreData();
        for (var key in data) if (key == GameData.player.uid) return 0 == data[key];
      },
      openLotteryPanel: function openLotteryPanel() {
        var roomInfo = roomHandler.room;
        roomInfo.roundNum == roomInfo.opts.roundMax ? setTimeout(function() {
          openView("GetLottery");
        }, 7e3) : openView("GetLottery");
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("niuNiuPlayerInfo");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    niuNiuHandler: "niuNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler",
    roomHandler: "roomHandler"
  } ],
  niuNiuSetting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8086CibLdKm5baHZbgL3fR", "niuNiuSetting");
    "use strict";
    var soundMngr = require("SoundMngr");
    var loginHandler = require("loginHandler");
    var roomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        musicSlider: cc.Slider,
        soundSlider: cc.Slider,
        musicBtn: cc.Node,
        soundBtn: cc.Node,
        musicProgressbar: cc.ProgressBar,
        soundProgressbar: cc.ProgressBar,
        _musicOpen: true,
        _soundOpen: true,
        byeRoomBtn: cc.Node,
        quitRoomBtn: cc.Node
      },
      onLoad: function onLoad() {
        this.musicBtn.getChildByName("guan").active = false;
        this.soundBtn.getChildByName("guan").active = false;
        this.soundSlider.node.on("slide", this.adjustSound, this);
        this.musicSlider.node.on("slide", this.adjustMusic, this);
        this.musicBtn.on(cc.Node.EventType.TOUCH_START, this.musicClick, this);
        this.soundBtn.on(cc.Node.EventType.TOUCH_START, this.soundClick, this);
        this._soundOpen = GameData.SetLayerData.soundOpen;
        this._musicOpen = GameData.SetLayerData.musicOpen;
        var sceneName = cc.director.getScene().name;
        if ("home" == sceneName) {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = true;
        } else {
          roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin ? this.byeRoomBtn.active = false : this.byeRoomBtn.active = true;
          this.quitRoomBtn.active = false;
        }
        this.refreshUI();
      },
      logout: function logout(evt) {
        soundMngr.instance.playAudioOther("button");
        loginHandler.logout();
      },
      requestDissolve: function requestDissolve() {
        soundMngr.instance.playAudioOther("button");
        if (Object.keys(roomHandler.room).length <= 0) {
          this.node.active = false;
          return;
        }
        cc.log("GameData.player.uid == roomHandler.room.creator:" + GameData.player.uid, roomHandler.room.creator);
        if (GameData.room.status === gameDefine.RoomState.WAIT && GameData.player.uid != roomHandler.room.creator) {
          createMoveMessage("游戏开始才允许解散房间");
          this.node.active = false;
          return;
        }
        if ("" != roomHandler.room.id) {
          roomHandler.deleteRoom(GameData.room.id, "apply");
          var parentNode = cc.find("Canvas/layer_ui");
          parentNode.parent.getComponent("niuNiuRoomMain").showDissolveLayer(1, 1);
          var disNode = cc.find("layer_dissolve/uiDissolve", parentNode);
          disNode.getComponent("niuNiuRoomDissolve").showPlayers();
          disNode.getComponent("niuNiuRoomDissolve").alreadyAgree();
          this.node.active = false;
          cc.log("this.node.active = " + this.node.active);
        }
      },
      setMusicOpen: function setMusicOpen() {
        this.musicBtn.getChildByName("kai").active = this._musicOpen;
        this.musicBtn.getChildByName("guan").active = !this._musicOpen;
      },
      setSoundOpen: function setSoundOpen() {
        this.soundBtn.getChildByName("kai").active = this._soundOpen;
        this.soundBtn.getChildByName("guan").active = !this._soundOpen;
      },
      onBtnClose: function onBtnClose() {
        soundMngr.instance.playAudioOther("button");
        this.node.active = false;
      },
      musicClick: function musicClick(event) {
        this._musicOpen = !this._musicOpen;
        this.setMusicOpen();
        GameData.SetLayerData.musicOpen = this._musicOpen;
        var v = true == this._musicOpen ? GameData.SetLayerData.musicVolume : 0;
        soundMngr.instance.bgmVolume(v);
        GameData.saveSetLayerData();
      },
      soundClick: function soundClick(event) {
        this._soundOpen = !this._soundOpen;
        this.setSoundOpen();
        GameData.SetLayerData.soundOpen = this._soundOpen;
        GameData.saveSetLayerData();
      },
      adjustSound: function adjustSound(event) {
        var slider = event.detail;
        GameData.SetLayerData.soundVolume = slider.progress;
        GameData.SetLayerData.soundOpen = true;
        this._soundOpen = true;
        this.soundProgressbar.progress = slider.progress;
        if (0 == slider.progress) {
          this._soundOpen = false;
          GameData.SetLayerData.soundOpen = false;
        }
        this.setSoundOpen();
        GameData.saveSetLayerData();
      },
      adjustMusic: function adjustMusic(event) {
        var slider = event.detail;
        GameData.SetLayerData.musicVolume = slider.progress;
        soundMngr.instance.bgmVolume(GameData.musicVolume);
        this.musicProgressbar.progress = slider.progress;
        GameData.SetLayerData.musicOpen = true;
        this._musicOpen = true;
        if (0 == slider.progress) {
          this._musicOpen = false;
          GameData.SetLayerData.musicOpen = false;
        }
        var v = slider.progress;
        soundMngr.instance.bgmVolume(v);
        this.setMusicOpen();
        GameData.saveSetLayerData();
      },
      refreshUI: function refreshUI() {
        this.musicSlider.progress = GameData.SetLayerData.musicVolume;
        this.soundSlider.progress = GameData.SetLayerData.soundVolume;
        this.soundBtn.getChildByName("kai").active = GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("guan").active = !GameData.SetLayerData.soundOpen;
        this.musicBtn.getChildByName("kai").active = GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("guan").active = !GameData.SetLayerData.musicOpen;
        this.musicProgressbar.progress = GameData.SetLayerData.musicVolume;
        this.soundProgressbar.progress = GameData.SetLayerData.soundVolume;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    loginHandler: "loginHandler",
    roomHandler: "roomHandler"
  } ],
  niuniuGmCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7898cy70JKv4qVBehE60aG", "niuniuGmCard");
    "use strict";
    var configMgr = require("configMgr");
    var roomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox
      },
      onLoad: function onLoad() {},
      onOkBtnClick: function onOkBtnClick() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: roomHandler.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {
          createMoveMessage("调牌成功");
          console.log("--- 调牌结果 " + JSON.stringify(rtn));
        });
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    roomHandler: "roomHandler"
  } ],
  niuniuMoveMessage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "17b220UBbpN/7AmmSiEDgY7", "niuniuMoveMessage");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var actionTo = cc.moveBy(2, cc.p(0, 40));
        this.node.runAction(actionTo);
        var timeCallback = function timeCallback(dt) {
          this.node.destroy();
        };
        this.scheduleOnce(timeCallback, 2);
      }
    });
    cc._RF.pop();
  }, {} ],
  niuniuPokerHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53f64cN3JFOR7HNqseoAzKz", "niuniuPokerHandler");
    "use strict";
    var niuniuPokerHandler = {
      GAMESTATUS: {
        WAIT: 0,
        ZHUANG: 1,
        CHIPS: 2,
        COMPARE: 3,
        SETTLE: 4
      },
      HUNDREDNIUSTATUS: {
        CHIPS: 1,
        SETTLE: 2,
        END: 3
      },
      XIAZHU: [ [ 50, 100, 1e3, 1e4, 2e4 ], [ 50, 100, 1e3, 1e4, 2e4 ], [ 50, 100, 1e3, 1e4, 2e4 ] ],
      ERRORTYPE: {
        SUCCESSE: 0,
        Niu100_Zhuang_Coin: 601,
        Niu100_Chips_State: 602,
        Niu100_Chips_Zhuang: 603,
        Niu100_Chips_ZhuangMax: 604,
        Niu100_Chips_PlayerMax: 605,
        Niu100_Chips_Continue: 606,
        Niu100_Zhuang_Already: 607,
        Niu100_Zhuang_UpAlready: 608
      },
      POKER_TYPE: {
        NIU_NONE: 0,
        NIU_ONE: 1,
        NIU_Two: 2,
        NIU_Three: 3,
        NIU_Four: 4,
        NIU_Five: 5,
        NIU_Six: 6,
        NIU_Seven: 7,
        NIU_Eight: 8,
        NIU_Nine: 9,
        NIU_NIU: 10,
        NIU_HuaFour: 11,
        NIU_HuaFive: 12,
        NIU_Bomb: 13,
        NIU_Little: 14
      },
      POKER_STR: {
        NIU_NONE: "没牛",
        NIU_ONE: "牛一",
        NIU_Two: "牛二",
        NIU_Three: "牛三",
        NIU_Four: "牛四",
        NIU_Five: "牛五",
        NIU_Six: "牛六",
        NIU_Seven: "牛七",
        NIU_Eight: "牛八",
        NIU_Nine: "牛九",
        NIU_NIU: "牛牛",
        NIU_HuaFour: "四花",
        NIU_HuaFive: "五花",
        NIU_Bomb: "炸弹",
        NIU_Little: "小牛牛"
      },
      AllCards: {
        joker: [ 501, 502 ],
        club: [ 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213 ],
        heart: [ 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313 ],
        spade: [ 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413 ],
        dianmond: [ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113 ]
      }
    };
    module.exports = niuniuPokerHandler;
    niuniuPokerHandler.getGameStatus = function() {
      return niuniuPokerHandler.GAMESTATUS;
    };
    niuniuPokerHandler.getPokerType = function() {
      return niuniuPokerHandler.POKER_TYPE;
    };
    niuniuPokerHandler.getPokerStar = function() {
      return niuniuPokerHandler.POKER_STR;
    };
    niuniuPokerHandler.unequally = function(array) {
      var res = [];
      var obj = {};
      for (var i = 0; i < array.length; i++) if (!obj[array[i]]) {
        obj[array[i]] = 1;
        res.push(array[i]);
      }
      return res;
    };
    niuniuPokerHandler.clearArray = function(array) {
      array.length > 0 && array.splice(0, array.length);
    };
    niuniuPokerHandler.itemtoArraytop = function(Arr, index) {
      var temp = Arr[index];
      if (0 == index) return Arr;
      for (var i = 0; i < Arr.length; i++) if (Arr[i] === Arr[index]) {
        Arr.splice(i, 1);
        break;
      }
      Arr.unshift(temp);
      return Arr;
    };
    cc._RF.pop();
  }, {} ],
  playerInfoTemplate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "687d8ZdDPtPI6zf1NLyHqwq", "playerInfoTemplate");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        headNode: cc.Node,
        nameLabel: cc.Label,
        idLabel: cc.Label,
        ipLabel: cc.Label,
        winningLabel: cc.Label,
        roundLabel: cc.Label,
        winperLabel: cc.Label,
        playerTemplate: cc.Prefab
      },
      onLoad: function onLoad() {},
      onShow: function onShow(player) {
        var headNode = cc.instantiate(this.playerTemplate);
        headNode.getComponent("playerTemplate").setName("");
        headNode.getComponent("playerTemplate").showZhuang(false);
        headNode.getComponent("playerTemplate").enableHeadBtn(false);
        headNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
        this.headNode.addChild(headNode);
        isChinese(player.name) ? this.nameLabel.string = getShortStr(player.name, 8) : this.nameLabel.string = getShortStr(player.name, 16);
        this.idLabel.string = player.uid;
        this.ipLabel.string = player.remoteAddr || "";
        this.winningLabel.string = player.winning || 0;
        this.roundLabel.string = player.round || 0;
        this.winperLabel.string = player.winper || 0;
        this.node.active = true;
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  playerInformationLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0dfb3loy2BLObOao8f1bOAZ", "playerInformationLayer");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        EditBox: cc.EditBox
      },
      onLoad: function onLoad() {},
      sendClick: function sendClick() {
        soundMngr.instance.playAudioOther("button");
        createMessageBox("功能暂未开放！", function() {});
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  playerRoundDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d65djh6AVDwo1RhKNrE7Tx", "playerRoundDetail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        playerName: cc.Label,
        playerId: cc.Label,
        scoreNode: cc.Node,
        specialSpriteNode: cc.Node,
        cardRow_1: cc.Node,
        cardRow_2: cc.Node,
        cardRow_3: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        },
        id: 0
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      showPlayerRoundDetail: function showPlayerRoundDetail() {
        this.showPlayer();
        this.showCard();
      },
      showPlayer: function showPlayer() {
        if (void 0 == GameData13.gemaEndResult.history) {
          cc.log("GameData13.gameEndResult.history is undefined");
          return;
        }
        var score = 0;
        GameData13.isEmptyObject(GameData13.gemaEndResult) ? cc.log("GameData13.gemaEndResult is empty.") : GameData13.gemaEndResult.history.length > 0 && (score = GameData13.gemaEndResult.history[this.roundNum][this.playerUidById(this.id)].score);
        this.showScore(score);
        isChinese(GameData13.joiners[this.id].name) ? this.playerName.string = getShortStr(GameData13.joiners[this.id].name, 6) : isChinese(GameData13.joiners[this.id].name) || (this.playerName.string = getShortStr(GameData13.joiners[this.id].name, 8));
        this.playerId.string = GameData13.joiners[this.id].uid;
      },
      showCard: function showCard() {
        this.specialSpriteNode.active = false;
        var cards = {};
        var isSpecial = 0;
        if (GameData13.isEmptyObject(GameData13.gemaEndResult)) cc.log("GameData13.gemaEndResult is empty."); else if (GameData13.gemaEndResult.history.length > 0) {
          GameData13.gemaEndResult.history[this.roundNum][this.playerUidById(this.id)].special && (isSpecial = GameData13.gemaEndResult.history[this.roundNum][this.playerUidById(this.id)].special);
          cards = GameData13.gemaEndResult.history[this.roundNum][this.playerUidById(this.id)].cards;
        }
        if (isSpecial) {
          if (isSpecial) {
            for (var i = 0; i < cards.length; i++) if (i >= 0 && i < 3) {
              var card = cc.find("card" + i, this.cardRow_1);
              this.showCardTextrue(card, cards[i]);
            } else if (i >= 3 && i < 8) {
              var card = cc.find("card" + (i - 3), this.cardRow_2);
              this.showCardTextrue(card, cards[i]);
            } else if (i >= 8 && i < 13) {
              var card = cc.find("card" + (i - 8), this.cardRow_3);
              this.showCardTextrue(card, cards[i]);
            }
            if (60 != isSpecial) {
              this.specialSpriteNode.active = true;
              this.updateSpecialSprite(isSpecial);
            }
          }
        } else {
          for (var i = 0; i < cards.up.length; i++) {
            var card = cc.find("card" + i, this.cardRow_1);
            this.showCardTextrue(card, cards.up[i]);
          }
          for (var i = 0; i < cards.mid.length; i++) {
            var card_mid = cc.find("card" + i, this.cardRow_2);
            var card_down = cc.find("card" + i, this.cardRow_3);
            this.showCardTextrue(card_mid, cards.mid[i]);
            this.showCardTextrue(card_down, cards.down[i]);
          }
        }
      },
      showScore: function showScore(score) {
        if (score > 0) {
          this.scoreNode.getComponent(cc.Label).string = "+" + score;
          this.scoreNode.getComponent(cc.Label).font = this.fonts[0];
        } else if (score < 0) {
          this.scoreNode.getComponent(cc.Label).string = score;
          this.scoreNode.getComponent(cc.Label).font = this.fonts[1];
        } else {
          this.scoreNode.getComponent(cc.Label).string = score;
          this.scoreNode.getComponent(cc.Label).font = this.fonts[2];
        }
      },
      showCardTextrue: function showCardTextrue(node, card) {
        var str = "resources/shisanshui/cardUI";
        var iconUrl = str + "/" + (card.value + 1) + "_" + (card.type + 1) + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      updateSpecialSprite: function updateSpecialSprite(Special) {
        var str = "resources/shisanshui/cardTypeUI/specialName/";
        var iconUrl = str + "special_" + Special + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        this.specialSpriteNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      setRoundNum: function setRoundNum(num) {
        this.roundNum = num;
      },
      playerUidById: function playerUidById(id) {
        return GameData13.joiners[id].uid;
      }
    });
    cc._RF.pop();
  }, {} ],
  playerTemplate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f9f9UhQY1CNaBwdQbVPzV1", "playerTemplate");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: 0,
        headBtn: cc.Button,
        headIcon: cc.Sprite,
        zhuangIcon: cc.Sprite,
        creatorIcon: cc.Sprite,
        zhuangNumIcon: cc.Sprite,
        nameLabel: cc.Label,
        _player: null,
        chaShuiIcon: cc.Sprite,
        sssWinNode: cc.Node,
        sssMainNode: cc.Node,
        piaoIcon: cc.Sprite
      },
      onLoad: function onLoad() {},
      setPlayer: function setPlayer(data) {
        this._player = data;
        this._player.uid && (this.uid = this._player.uid);
      },
      setName: function setName(name) {
        this.nameLabel.string = getShortStr(name, 4);
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) {
          this.headIcon.spriteFrame = null;
          return;
        }
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      initHeadIcon: function initHeadIcon() {
        var texture = cc.textureCache.addImage(cc.url.raw("resources/niuNiuTable/playerHead/touxiangkong.png"));
        this.headIcon.spriteFrame = new cc.SpriteFrame(texture);
      },
      showZhuang: function showZhuang(show) {
        this.zhuangIcon.node.active = show;
      },
      showCreator: function showCreator(show) {
        this.creatorIcon.node.active = show;
      },
      showZhuangNum: function showZhuangNum(zhuang, num) {
        if (zhuang) {
          if (1 == num) {
            var texture = cc.textureCache.addImage(cc.url.raw("resources/newui/zuo1.png"));
            this.zhuangNumIcon.spriteFrame = new cc.SpriteFrame(texture);
            this.zhuangNumIcon.node.active = true;
          } else if (2 == num) {
            var texture = cc.textureCache.addImage(cc.url.raw("resources/newui/zuo2.png"));
            this.zhuangNumIcon.spriteFrame = new cc.SpriteFrame(texture);
            this.zhuangNumIcon.node.active = true;
          }
        } else {
          if (1 == num) {
            var texture = cc.textureCache.addImage(cc.url.raw("resources/newui/la1.png"));
            this.zhuangNumIcon.spriteFrame = new cc.SpriteFrame(texture);
            this.zhuangNumIcon.node.active = true;
          }
          if (2 == num) {
            var texture = cc.textureCache.addImage(cc.url.raw("resources/newui/la2.png"));
            this.zhuangNumIcon.spriteFrame = new cc.SpriteFrame(texture);
            this.zhuangNumIcon.node.active = true;
          }
        }
      },
      enableHeadBtn: function enableHeadBtn(flag) {
        this.headBtn.node.active = flag;
      },
      HeadBtnIsClick: function HeadBtnIsClick(flag) {
        this.headBtn.interactable = flag;
      },
      onHeadBtnClicked: function onHeadBtnClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        var sceneName = cc.director.getScene().name;
        cc.log("..sceneName:", sceneName);
        if ("home" == sceneName) createPlayerInfoPanel(this._player); else {
          var self = this;
          var fun = function fun(panel) {
            if (panel) {
              var template = panel.getComponent("uiRoomPlayerInfo");
              template && template.onShow(self._player);
            }
          };
          var roomData = RoomHandler.getRoomData();
          if (roomData && roomData.opts && roomData.opts.gameType) {
            cc.log("..gameType:" + roomData.opts.gameType);
            openPlayerInfoView(roomData.opts.gameType, fun);
          }
        }
      },
      setIsOnline: function setIsOnline(isOnline) {
        var disConncetNode = cc.find("/Disconnect", this.node);
        disConncetNode.active = !isOnline;
      },
      getLiuGuang: function getLiuGuang(isPlay) {
        var liuguang = cc.find("liuguang", this.node);
        liuguang.active = isPlay;
      },
      setCoin: function setCoin(value, type) {
        var coinNode = cc.find("coin", this.node);
        var showStr = "";
        var ScoreBase;
        1 == type ? ScoreBase = GameData.room.opts.scoreBase : 2 == type && (ScoreBase = ReplayRoomData.opts.scoreBase);
        if (ScoreBase > 0) {
          showStr = value;
          coinNode.color = new cc.Color(255, 204, 0);
        } else if (value > 0) {
          showStr = "+" + value;
          coinNode.color = new cc.Color(255, 204, 0);
        } else if (value < 0) {
          showStr = value;
          coinNode.color = new cc.Color(0, 255, 246);
        } else {
          showStr = value;
          coinNode.color = new cc.Color(0, 255, 36);
        }
        coinNode.getComponent(cc.Label).string = showStr;
      },
      setGold: function setGold(value) {
        var coinNode = cc.find("coin", this.node);
        var showStr = "";
        void 0 != value ? showStr = value : null;
        coinNode.getComponent(cc.Label).string = showStr;
      },
      setChaShuiIconShow: function setChaShuiIconShow(direction) {
        var show = false;
        var player = GameData.getPlayerByPos(direction);
        player && GameDataShiShi.setWater[player.uid] > 0 && (show = true);
        this.setChaShuiShow(show);
        if (true == show) switch (direction) {
         case "down":
         case "right":
         case "left":
          this.chaShuiIcon.node.y = 70;
          break;

         case "up":
          this.chaShuiIcon.node.y = -90;
        }
      },
      setChaShuiShow: function setChaShuiShow(show) {
        this.chaShuiIcon.node.active = show;
      },
      setSSSWinNodeActive: function setSSSWinNodeActive(show) {
        this.sssWinNode.active = show;
      },
      setSSSMainNodeActive: function setSSSMainNodeActive(show) {
        this.sssMainNode.active = show;
      },
      setPiaoIconShow: function setPiaoIconShow(direction) {
        this.piaoIcon.node.active = false;
        var player = GameData.getPlayerByPos(direction);
        player && profileHuaDian.getPiaoStateByUid(player.uid) > 0 && (this.piaoIcon.node.active = true);
      },
      setCoinBgShow: function setCoinBgShow(show) {
        var coinBg = cc.find("coinBg", this.node);
        coinBg && (coinBg.active = show);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    roomHandler: "roomHandler"
  } ],
  poker13: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee201TC661BHoh+wPZAEpb0", "poker13");
    "use strict";
    var CardType = {
      Spade: 0,
      Heart: 1,
      Diamond: 2,
      Club: 3,
      King: 4
    };
    var PokerType = {
      WuLong: 1,
      DuiZi: 2,
      LiangDui: 3,
      SanTiao: 4,
      ShunZi: 5,
      TongHua: 6,
      HuLu: 7,
      TieZhi: 8,
      TongHuaShun: 9,
      WuTong: 10
    };
    var TypeSize = {
      WuLong: 5,
      DuiZi: 2,
      LiangDui: 4,
      SanTiao: 3,
      ShunZi: 5,
      TongHua: 5,
      HuLu: 5,
      TieZhi: 4,
      TongHuaShun: 5,
      WuTong: 5
    };
    function Poker13(cardHand) {
      this._pokerTypeList = {
        DuiZi: [],
        LiangDui: [],
        SanTiao: [],
        ShunZi: [],
        TongHua: [],
        HuLu: [],
        TieZhi: [],
        TongHuaShun: [],
        WuTong: []
      };
      this._cardHandList = [];
      this.initCardHandList(cardHand);
    }
    var prototype = Poker13.prototype;
    prototype.initCardHandList = function(cardHand) {
      this.clearArray(this._cardHandList);
      var cards = cardHand;
      for (var i = 0; i < cards.length; i++) this._cardHandList.push({
        card: cards[i],
        status: 0
      });
    };
    prototype.sortHandCard = function(cards) {
      var tempList = [];
      for (var i = 0; i < cards.length; i++) 0 != cards[i] && (tempList[tempList.length] = cards[i]);
      for (var i = 0; i < tempList.length; i++) {
        tempList[i].value = 50 * tempList[i].value;
        tempList[i].type = tempList[i].type + tempList[i].value;
      }
      tempList.sort(function(a, b) {
        return b.type - a.type;
      });
      for (var i = 0; i < tempList.length; i++) {
        tempList[i].type = tempList[i].type - tempList[i].value;
        tempList[i].value = tempList[i].value / 50;
      }
      this.clearArray(cards);
      for (var j = 0; j < GameData13.handSize; j++) {
        if (j < tempList.length) {
          cards[j] = tempList[j];
          continue;
        }
        cards[j] = 0;
      }
      return tempList.length;
    };
    prototype.compare = function(a, b) {
      if (a > b) return true;
      return false;
    };
    prototype.sortArray = function(begin, end, array) {
      for (var i = begin; i < end; ++i) if (this.compare(array[i + 1].status, array[i].status)) {
        array[i + 1].status = 0;
        array[i].status = 1;
        i = -1;
      }
    };
    prototype.permResult = function(n, array) {
      var cards = [];
      for (var key = 0; key < n; key++) 1 == array[key].status && cards.push(array[key].card);
      return cards;
    };
    prototype.permPoker = function(array, n, m, type) {
      if (m <= n) for (var i = 0; i < n; i++) array[i].status = i < m ? 1 : 0;
      this.pokerType(this.permResult(n, array), type);
      for (var i = 0; i < n; ++i) {
        var index = i + 1;
        if (index < n && 1 == array[i].status && 0 == array[index].status) {
          array[i].status = 0;
          array[index].status = 1;
          this.sortArray(0, i, array);
          var cards = this.permResult(n, array);
          this.pokerType(cards, type);
          i = -1;
        }
      }
    };
    prototype.searchPokerType = function(handSize, type) {
      if (this._cardHandList.length <= 0) {
        cc.log("function:searchPokerType.. _cardHandList is empty.");
        return;
      }
      var array = [];
      for (var i = 0; i < this._cardHandList.length; i++) array.push(this._cardHandList[i]);
      this.permPoker(array, handSize, TypeSize[type], type);
    };
    prototype.isSameValueOfCard = function(cards, cardCount, sameCount) {
      if (cards.length <= 0) return false;
      var _sameCount = 0;
      var tempCardList = [];
      for (var i = 0; i < cards.length; i++) tempCardList.push({
        card: cards[i],
        status: 0
      });
      for (var key = 0; key < tempCardList.length; key++) {
        var _cardCount = 0;
        for (var i = 0; i < tempCardList.length; i++) if (0 == tempCardList[i].status) {
          if (tempCardList[key].card.value != tempCardList[i].card.value) continue;
          tempCardList[i].status = 1;
          _cardCount++;
        }
        if (_cardCount == cardCount) {
          _sameCount++;
          continue;
        }
      }
      if (_sameCount == sameCount) return true;
      return false;
    };
    prototype.isDuiZi = function(cards) {
      if (cards.length <= 0 || cards.length != TypeSize["DuiZi"]) return false;
      if (this.isSameValueOfCard(cards, 2, 1)) return true;
      return false;
    };
    prototype.isLiangDui = function(cards) {
      if (cards.length <= 0 || cards.length != TypeSize["LiangDui"]) return false;
      if (this.isSameValueOfCard(cards, 2, 2)) return true;
      return false;
    };
    prototype.isSanTiao = function(cards) {
      if (cards.length <= 0 || cards.length != TypeSize["SanTiao"]) return false;
      if (this.isSameValueOfCard(cards, 3, 1)) return true;
      return false;
    };
    prototype.isShunZi = function(cards) {
      var count = 0;
      if (cards.length <= 0 || cards.length != TypeSize["ShunZi"]) return false;
      cards.sort(function(a, b) {
        return a.value - b.value;
      });
      for (var i = 0; i < cards.length; i++) {
        var value = cards[0].value;
        cards[i].value - i == value && count++;
      }
      if (5 == count) return true;
      return false;
    };
    prototype.isTongHua = function(cards) {
      var count = 0;
      if (cards.length <= 0 || cards.length != TypeSize["TongHua"]) return false;
      for (var i = 0; i < cards.length; i++) {
        var type = cards[0].type;
        cards[i].type == type && count++;
      }
      if (5 == count) return true;
      return false;
    };
    prototype.isHuLu = function(cards) {
      if (cards.length <= 0 || cards.length != TypeSize["HuLu"]) return false;
      if (this.isSameValueOfCard(cards, 3, 1) && this.isSameValueOfCard(cards, 2, 1)) return true;
      return false;
    };
    prototype.isTieZhi = function(cards) {
      if (cards.length <= 0 || cards.length != TypeSize["TieZhi"]) return false;
      if (this.isSameValueOfCard(cards, 4, 1)) return true;
      return false;
    };
    prototype.isTongHuaShun = function(cards) {
      var tempCard, isTongHua = false, isShunZi, count = 0;
      if (cards.length <= 0 || cards.length != TypeSize["TongHuaShun"]) return false;
      this.isTongHua(cards) && (isTongHua = true);
      if (isTongHua && this.isShunZi(cards)) return true;
      return false;
    };
    prototype.isWuTong = function(cards) {
      var tempCard, count = 0;
      if (cards.length <= 0 || cards.length != TypeSize["WuTong"]) return;
      if (this.isSameValueOfCard(cards, 5, 1)) return true;
      return false;
    };
    prototype.pokerType = function(cards, type) {
      PokerType[type] == PokerType.DuiZi ? this.isDuiZi(cards) && this._pokerTypeList["DuiZi"].push(cards) : PokerType[type] == PokerType.LiangDui ? this.isLiangDui(cards) && this._pokerTypeList["LiangDui"].push(cards) : PokerType[type] == PokerType.SanTiao ? this.isSanTiao(cards) && this._pokerTypeList["SanTiao"].push(cards) : PokerType[type] == PokerType.ShunZi ? this.isShunZi(cards) && this._pokerTypeList["ShunZi"].push(cards) : PokerType[type] == PokerType.TongHua ? this.isTongHua(cards) && this._pokerTypeList["TongHua"].push(cards) : PokerType[type] == PokerType.HuLu ? this.isHuLu(cards) && this._pokerTypeList["HuLu"].push(cards) : PokerType[type] == PokerType.TieZhi ? this.isTieZhi(cards) && this._pokerTypeList["TieZhi"].push(cards) : PokerType[type] == PokerType.TongHuaShun ? this.isTongHuaShun(cards) && this._pokerTypeList["TongHuaShun"].push(cards) : PokerType[type] == PokerType.WuTong && this.isWuTong(cards) && this._pokerTypeList["WuTong"].push(cards);
      return [];
    };
    prototype.getPokerTypeCards = function(handSize, type) {
      this.searchPokerType(handSize, type);
      return this._pokerTypeList;
    };
    prototype.clearArray = function(array) {
      array.length > 0 && array.splice(0, array.length);
    };
    prototype.clearPokerTypeList = function() {
      this.clearArray(this._pokerTypeList);
    };
    module.exports = Poker13;
    cc._RF.pop();
  }, {} ],
  pokerAnimationBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91976faCA1EQpUlFmdov++u", "pokerAnimationBase");
    "use strict";
    var pokerAnimBase = cc.Class({
      extends: cc.Component,
      properties: {},
      dealAction: function dealAction(node, startPos, endPos, startScale, cb) {
        if (!node) return;
        var nodeScaleArr = [];
        var _startScale = startScale;
        for (var j = 0; j < node.length; j++) {
          nodeScaleArr.push(node[j].scale);
          node[j].setScale(_startScale);
          node[j].setPosition(startPos);
        }
        for (var i = 0; i < node.length; i++) {
          node[i].active || (node[i].active = true);
          node[i].parent && !node[i].parent.active && (node[i].parent.active = true);
          node[i].parent.parent && !node[i].parent.parent.active && (node[i].parent.parent.active = true);
          node[i].runAction(cc.sequence(cc.delayTime(.1 * (i + 1)), cc.spawn(cc.rotateBy(.1, 360), cc.moveTo(.1, endPos[i]), cc.scaleTo(.1, nodeScaleArr[i]))));
        }
        var delyTime = 0;
        delyTime = .1 * node.length;
        cb && cb(delyTime);
      },
      flyToMidAction: function flyToMidAction(node, time, offsetX, cb) {
        if (!node) return;
        var endPosX = node.getPosition().x;
        var startPosX = endPosX + offsetX;
        node.x = startPosX;
        node.runAction(cc.moveTo(time, cc.v2(endPosX, node.y)));
        cb && cb(time);
      },
      playFlopAnimation: function playFlopAnimation(node, cb) {
        if (!node) return;
        var scale = node.scale;
        var action1 = cc.scaleTo(.25, 0, scale);
        var action2 = cc.scaleTo(.25, scale, scale);
        node.runAction(cc.sequence(action1, action2));
      },
      playDragAnimation: function playDragAnimation(node, url, actionName, cb) {
        cc.loader.loadResDir(url, function(err, assets) {
          if (err) {
            cc.log(err);
            return;
          }
          if (assets.length <= 0) {
            cc.log("assets length: ", assets.length);
            return;
          }
          var armatureDisplay;
          if (node.getComponent(dragonBones.ArmatureDisplay)) {
            cc.log("dragonBones get");
            armatureDisplay = node.getComponent(dragonBones.ArmatureDisplay);
          } else {
            cc.log("dragonBones add");
            armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
          }
          for (var elem in assets) {
            assets[elem] instanceof dragonBones.DragonBonesAsset && armatureDisplay.dragonAsset != assets[elem] && (armatureDisplay.dragonAsset = assets[elem]);
            assets[elem] instanceof dragonBones.DragonBonesAtlasAsset && armatureDisplay.dragonAtlasAsset != assets[elem] && (armatureDisplay.dragonAtlasAsset = assets[elem]);
          }
          armatureDisplay.armatureName = "armature";
          armatureDisplay.playAnimation(actionName, 1);
          cb && armatureDisplay.addEventListener(dragonBones.EventObject.COMPLETE, cb, this);
        });
      },
      playScaleAnim: function playScaleAnim(node, scale) {
        node.active || (node.active = true);
        node.scale = scale + 1;
        var action1 = cc.scaleTo(.2, scale);
        node.runAction(action1);
      },
      playDragonBonesAnimation: function playDragonBonesAnimation(node, name, time, fromPos, toPos, fun) {
        if (void 0 == node || void 0 == name || name.length <= 0) {
          cc.log("..node or animation name is undefined");
          return;
        }
        var nodeAnimation = node.getComponent(dragonBones.ArmatureDisplay);
        if (void 0 == nodeAnimation) {
          cc.log("..animation dragonBones node is undefined");
          return;
        }
        nodeAnimation.playAnimation(name, time);
        if (fromPos && toPos) {
          node.position = fromPos;
          var move = cc.moveTo(.6, toPos);
          node.runAction(cc.sequence(move.easing(cc.easeIn(1.5)), cc.callFunc(function() {
            fun && fun(node);
          })));
        } else fun && nodeAnimation.addEventListener(dragonBones.EventObject.COMPLETE, function() {
          fun(node);
        }, this);
      }
    });
    module.exports = pokerAnimBase;
    cc._RF.pop();
  }, {} ],
  pokerRoomBaseView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "64d4dxTJ8dMKJiXq6npEo/A", "pokerRoomBaseView");
    "use strict";
    var roomUtil = require("roomUtil");
    var roomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        talkBtn: cc.Button,
        wifiNode: cc.Node,
        roomNum: cc.Label,
        roomRound: cc.Label,
        powerNode: cc.Node,
        yuyinNode: cc.Node,
        roomRule: cc.Label,
        timeLabel: cc.Label,
        playintrNode: cc.Node,
        yuyinShortNode: cc.Node,
        roomDesNodeCard: cc.Node,
        roomDesNodeCoin: cc.Node,
        playersNode: [ cc.Node ],
        playerPrefab: cc.Prefab,
        container: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("nativePower", this, this.showPower);
        registEvent("yunwaUploaded", this, this.handleVoice);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("nativePower", this, this.showPower);
        unregistEvent("yunwaUploaded", this, this.handleVoice);
      },
      onEnable: function onEnable() {
        this.setVoiceBtn();
        this.showTime();
        this.showWifi();
        this.showPlayers();
        this.showRoomDes();
        this.schedule(this.showTime, 1);
        this.schedule(this.showWifi, 5);
        this.schedule(roomUtil.getPower, 60);
      },
      showRoomDes: function showRoomDes() {
        roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin ? this.showRoomDesCoin() : this.showRoomDesCard();
      },
      showRoomDesCoin: function showRoomDesCoin() {
        var bool = true;
        this.roomDesNodeCard.active = !bool;
        this.roomDesNodeCoin.active = bool;
        this.showRoomDesCoinNum();
        this.showRoomDesRule();
      },
      showRoomDesCard: function showRoomDesCard() {
        var bool = true;
        this.roomDesNodeCard.active = bool;
        this.roomDesNodeCoin.active = !bool;
        this.showRoomDesCardNum();
        this.showRoomDesRule();
      },
      showPlayers: function showPlayers() {
        var roomData = roomHandler.getRoomData();
        var showRoundNum = roomData.roundNum > roomData.opts.roundMax ? roomData.opts.roundMax : roomData.roundNum;
        this.roomRound.string = "局数: " + showRoundNum + "/" + roomData.opts.roundMax;
        roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && this.showRoomDesCoinNum();
      },
      showPlayer: function showPlayer(pos, playerNode) {
        var player = GameData.getPlayerByPos(pos);
        if (null != player) {
          var headNode = playerNode.getChildByName("headNode");
          if (null == headNode) {
            headNode = cc.instantiate(this.playerPrefab);
            headNode.getComponent("pokerRoomPlayer").setPlayer(player);
            headNode.getComponent("pokerRoomPlayer").setName(player.name);
            headNode.getComponent("pokerRoomPlayer").setHeadIcon(player.headimgurl);
            headNode.name = "headNode";
            playerNode.addChild(headNode);
          }
          var scores = roomHandler.getScoreData();
          headNode.getComponent("pokerRoomPlayer").setIsOnline(player.uid);
          playerNode.active = true;
        } else playerNode.active = false;
      },
      showWifi: function showWifi() {
        var index = 0;
        var ms = GameNet.getInstance().getPingPong();
        ms < 300 ? index = 3 : ms < 600 ? index = 2 : ms < 1e3 && (index = 1);
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      showPower: function showPower(percent) {
        powerNode.scaleX = percent.detail / 100;
      },
      showTime: function showTime() {
        this.timeLabel.string = roomUtil.getTimeString();
      },
      showRoomDesCardNum: function showRoomDesCardNum() {
        this.roomNum.string = roomUtil.getRoomString(GameData.room.id);
      },
      showRoomDesCoinNum: function showRoomDesCoinNum() {
        var des = cc.find("des", this.roomDesNodeCoin);
        var roomInfo = roomHandler.room;
        var roundNums = roomInfo.gameNum + 1;
        1 == roundNums.toString().length ? roundNums = "000" + roundNums : 2 == roundNums.toString().length ? roundNums = "00" + roundNums : 3 == roundNums.toString().length ? roundNums = "0" + roundNums : 4 == roundNums.toString().length && (roundNums = roundNums);
        des && (des.getComponent(cc.Label).string = roundNums + roomUtil.getRoomString(GameData.room.id));
      },
      showRoomDesRule: function showRoomDesRule() {
        var roomData = roomHandler.getRoomData();
        var gameType = GameData.client.gameType;
        switch (gameType) {
         case gameDefine.GameType.Game_Poker_ZJH:
          if (roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
            var rule = cc.find("roomRule", this.roomDesNodeCoin);
            rule && (rule.getComponent(cc.Label).string = this.getRuleStrZJH(roomData.opts));
          } else this.roomRule.string = this.getRuleStrZJH(roomData.opts);
        }
      },
      setVoiceBtn: function setVoiceBtn() {
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (inCD(1e3)) return;
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin ? this.talkBtn.node.active = false : this.talkBtn.node.active = true;
      },
      handleVoice: function handleVoice(data) {
        var soundurl = data.detail;
        WriteLog("soundurl 语音" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onSettingClicked: function onSettingClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        openView("poker_settingPrefab", gameDefine.GameType.Game_Poker_ZJH);
      },
      onRuleClicked: function onRuleClicked(evt) {
        var intrNode = this.playintrNode;
        if (intrNode.active) return;
        var contentNode = cc.find("small/content", intrNode);
        if (contentNode) {
          contentNode.getComponent(cc.Label).string = this.roomRule.string;
          intrNode.active = true;
          intrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(function() {
            intrNode.active = false;
          })));
        }
      },
      onChatClicked: function onChatClicked(evt) {
        if (inCD(2e3)) return;
        soundMngr.instance.playAudioOther("button");
        openView("NiuNiuChatPanel", gameDefine.GameType.Game_niu_niu);
      },
      addGameNode: function addGameNode() {
        this.container.removeAllChildren(true);
        var gameType = GameData.room.opts.gameType;
        var currGameNode;
        switch (gameType) {
         case gameDefine.GameType.Game_Poker_ZJH:
          currGameNode = cc.instantiate(this.ZJHRoomMainPrefab);
        }
        currGameNode.setPosition(this.container.getPosition());
        this.container.addChild(currGameNode);
      },
      getRuleStrZJH: function getRuleStrZJH(data) {
        if (!data || 0 == Object.keys(data).length) return "";
        var playStr = "";
        0 == data.chipsType ? playStr += "底分1,\n" : 1 == data.chipsType && (playStr += "底分5,\n");
        switch (data.canNotLookTurnNum) {
         case 0:
          playStr += "无必闷,\n";
          break;

         case 1:
          playStr += "闷一轮,\n";
          break;

         case 2:
          playStr += "闷两轮,\n";
          break;

         case 3:
          playStr += "闷三轮,\n";
        }
        switch (data.maxTunNum) {
         case 5:
          playStr += "封顶轮数5,\n";
          break;

         case 10:
          playStr += "封顶轮数10,\n";
          break;

         case 15:
          playStr += "封顶轮数15,\n";
          break;

         case 20:
          playStr += "封顶轮数20,\n";
        }
        data.compareSuit && (playStr += "比花色,\n");
        data.twoThreeFiveBiger && (playStr += "235吃豹子,\n");
        switch (data.a23Type) {
         case 1:
          playStr += "A23地龙\n";
          break;

         case 0:
          playStr += "A23最大\n";
          break;

         case 2:
          playStr += "A23最小\n";
        }
        roomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin && (playStr = "闷1轮\n封顶10轮\n235吃豹子\n");
        return playStr;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    roomUtil: "roomUtil"
  } ],
  pokerRoomPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "333aa+wiZxONonlETWIZ53W", "pokerRoomPlayer");
    "use strict";
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var ZJH_roomData = require("ZJH-RoomData");
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: 0,
        headBtn: cc.Button,
        headIcon: cc.Sprite,
        zhuangIcon: cc.Sprite,
        nameLabel: cc.Label,
        score: cc.Node,
        _player: null,
        countDownNode: cc.Node,
        chatsNode: [ cc.Node ],
        fonts: {
          default: [],
          type: cc.Font
        },
        countDownTotalLen: 15
      },
      onLoad: function onLoad() {},
      setPlayer: function setPlayer(data) {
        this._player = data;
        this.uid = this._player.uid;
      },
      setName: function setName(name) {
        this.nameLabel.string = getShortStr(name, 4);
        var coinNode = cc.find("coin", this.node);
        if (GameData.room.opts.gameType == gameDefine.GameType.Game_Poker_ZJH && GameData.player.uid == this.uid) {
          this.nameLabel.node.y = -8;
          coinNode.y = -30;
        }
      },
      setHeadIcon: function setHeadIcon(headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) {
          this.headIcon.spriteFrame = null;
          return;
        }
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showPlayerIdentity: function showPlayerIdentity(show, type) {
        this.setIsPlayerIcon(show);
        if (1 == type) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/ddz/UI/common/icon/dizhu_icon.png"));
          this.zhuangIcon.spriteFrame = new cc.SpriteFrame(texture);
        } else if (2 == type) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/ddz/UI/common/icon/nongmin_icon.png"));
          this.zhuangIcon.spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      setNamePositionByDir: function setNamePositionByDir(direction) {
        if ("right" == direction) {
          this.nameLabel.node.x = -57;
          this.score.x = -53;
          this.zhuangIcon.node.x = 33;
          this.nameLabel.horizontalAlign = 3;
          this.nameLabel.node.anchorX = 1;
          this.score.horizontalAlign = 3;
          this.score.anchorX = 1;
        }
      },
      showZhuang: function showZhuang(show) {
        this.zhuangIcon.node.active = show;
      },
      enableHeadBtn: function enableHeadBtn(flag) {
        this.headBtn.node.active = flag;
      },
      showCountDownEffect: function showCountDownEffect(bool, time) {
        if (bool) this.playCountAnimtion(time); else {
          this.countDownNode.active = bool;
          this.unschedule(this.countDownBgChange);
        }
      },
      playCountAnimtion: function playCountAnimtion(time) {
        var animationNode = cc.find("animation", this.countDownNode);
        var bg = cc.find("bg", this.countDownNode);
        bg.getComponent(cc.Sprite).fillStart = .44;
        this.startPos = 1 - time / this.countDownTotalLen;
        bg.getComponent(cc.ProgressBar).progress = this.startPos;
        this.schedule(this.countDownBgChange, .5);
      },
      countDownBgChange: function countDownBgChange() {
        ZJH_roomData.isRunAnimation ? this.countDownNode.active = false : this.countDownNode.active = true;
        this.startPos -= 1 / (2 * this.countDownTotalLen);
        var bg = cc.find("bg", this.countDownNode);
        bg.getComponent(cc.ProgressBar).progress = this.startPos;
        this.startPos <= 0 && this.unschedule(this.countDownBgChange);
      },
      onHeadBtnClicked: function onHeadBtnClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        var sceneName = cc.director.getScene().name;
        cc.log("..sceneName:", sceneName);
        if ("home" == sceneName) createPlayerInfoPanel(this._player); else {
          var self = this;
          var fun = function fun(panel) {
            if (panel) {
              var template = panel.getComponent("uiRoomPlayerInfo");
              template && template.onShow(self._player);
            }
          };
          var roomData = RoomHandler.getRoomData();
          if (roomData && roomData.opts && roomData.opts.gameType) {
            cc.log("..gameType:" + roomData.opts.gameType);
            openPlayerInfoView(roomData.opts.gameType, fun);
          }
        }
      },
      setCoin: function setCoin(value) {
        var coinNode = cc.find("coin", this.node);
        var showStr = "";
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          value = ConversionCoinValue(value, 2);
          showStr = value;
        }
        cc.log("coin:" + value);
        value > 0 ? showStr = "+" + value : value < 0 ? showStr = value : 0 == value && (showStr = value);
        coinNode.getComponent(cc.Label).string = showStr;
      },
      getLiuGuang: function getLiuGuang(isPlay) {
        var liuguang = cc.find("liuguang", this.node);
        liuguang.active = isPlay;
      },
      setIsOnline: function setIsOnline(userId) {
        var disConncetNode = cc.find("Disconnect", this.node);
        var isOnlin = RoomHandler.isPlayerOnline(userId);
        disConncetNode.active = !isOnlin;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    "ZJH-RoomData": "ZJH-RoomData",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  pokerTypeAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6cb173UDRhOebS7vvSob2gV", "pokerTypeAnimation");
    "use strict";
    var niuNiuHandler = require("niuNiuHandler");
    var niuniuPokerHandler = require("niuniuPokerHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        maskBg: cc.Sprite,
        actNode: cc.Node,
        skeNode: cc.Node,
        effectAc: cc.Node
      },
      onLoad: function onLoad() {
        this.actNode.active = false;
        this.skeNode.active = false;
        this.effectAc.active = false;
        this._fanInfo = null;
        this.niuniuPokerType = niuniuPokerHandler.getPokerType();
      },
      initFanInfo: function initFanInfo(data, type) {
        cc.log("data = " + data);
        if (null == data) return;
        this._fanInfo = data;
        if (this._fanInfo == this.niuniuPokerType.NIU_Little && 0 == type) {
          var adsp = this.skeNode.getComponent(dragonBones.ArmatureDisplay);
          adsp.playAnimation("newAnimation", -1);
          this.skeNode.parent.active = true;
          this.skeNode.active = true;
        } else {
          var self = this;
          var iconUrl;
          0 == type ? iconUrl = cc.url.raw("resources/niuNiuTable/pokerType/" + this._fanInfo + ".png") : 1 == type && (iconUrl = cc.url.raw("resources/hundredNiuNiu/uiResources/table/pokerType/" + this._fanInfo + ".png"));
          cc.loader.load(iconUrl, function(error, texture) {
            if (!error && texture) {
              self.actNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
              self.actNode.getComponent(cc.Animation).play("niuNiuPokerTypeAnimation");
            }
          });
          self.actNode.active = true;
        }
      },
      pokerTypeAnim: function pokerTypeAnim() {
        this.actNode.scaleX = .5;
        this.actNode.scaleY = .5;
        var action1 = cc.scaleTo(.17, 1.1, 1.1);
        var action2 = cc.scaleTo(.1, 1, 1);
        this.actNode.runAction(cc.sequence(action1, action2));
      },
      pokerAnimation: function pokerAnimation() {
        this.effectAc.parent.active = true;
        this.effectAc.active = true;
        var anim = this.effectAc.getComponent(dragonBones.ArmatureDisplay);
        anim.playAnimation("newAnimation", 1);
        var self = this;
        this.scheduleOnce(function() {
          this.effectAc.active = false;
        }, 1.5);
      },
      changeMaskBg: function changeMaskBg(data) {
        var url = "";
        if (null == data) return;
        url = data > this.niuniuPokerType.NIU_NONE && data <= this.niuniuPokerType.NIU_NIU ? cc.url.raw("resources/hundredNiuNiu/uiResources/table/pokerType/mengban.png") : cc.url.raw("resources/hundredNiuNiu/uiResources/table/pokerType/mengban2.png");
        var texture = cc.textureCache.addImage(url);
        this.maskBg.spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    niuNiuHandler: "niuNiuHandler",
    niuniuPokerHandler: "niuniuPokerHandler"
  } ],
  poker_Mask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "238e2csNahDSbkxqkjk41Rj", "poker_Mask");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        maskNode: cc.Sprite
      },
      onLoad: function onLoad() {},
      setMask: function setMask(scale) {
        this.maskNode.node.scale = scale;
      }
    });
    cc._RF.pop();
  }, {} ],
  poker_ZJH_resultItemPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de096txAeJNJb5hBgZQ3gOW", "poker_ZJH_resultItemPrefab");
    "use strict";
    var ZJH_roomData = require("ZJH-RoomData");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        maxWinner: cc.Node,
        nameLbl: cc.Label,
        userIdLbl: cc.Label,
        winNumLbl: cc.Label,
        loseNumLbl: cc.Label,
        creatorIcon: cc.Node,
        headIcon: cc.Node,
        roomScoreLbl: cc.Label,
        fonts: [ cc.Font ],
        _playerInfo: null,
        infoNode: cc.Node
      },
      onLoad: function onLoad() {},
      initUI: function initUI() {
        var player = this._playerInfo;
        JSON.stringify("结算玩家数据  " + JSON.stringify(player));
        this.nameLbl.string = getShortStr(player.name, 10);
        this.userIdLbl.string = "ID: " + player.uid;
        var self = this;
        this.headIcon.getComponent(cc.Sprite).spriteFrame = null;
        null != player.headimgurl && "" != player.headimgurl && player.headimgurl.length > 0 && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
        this.winNumLbl.string = 0;
        this.loseNumLbl.string = 0;
        var resultInfo = ZJH_roomData.gameResultData;
        for (var key in ZJH_roomData.gameResultData.extraInfo) if (player.uid == key) {
          this.winNumLbl.string = ZJH_roomData.gameResultData.extraInfo[key].winNum;
          this.loseNumLbl.string = ZJH_roomData.gameResultData.extraInfo[key].loseNum;
        }
        var scoreData;
        var eveScore = 0;
        if (ZJH_roomData.gameResultData.socres && ZJH_roomData.gameResultData.socres[player.uid]) {
          scoreData = resultInfo.socres;
          eveScore = scoreData[player.uid];
        }
        if (!eveScore) return;
        if (eveScore > 0) {
          this.roomScoreLbl.string = "+" + eveScore;
          this.roomScoreLbl.font = this.fonts[0];
        } else if (eveScore < 0) {
          this.roomScoreLbl.string = eveScore;
          this.roomScoreLbl.font = this.fonts[1];
        } else if (0 == eveScore) {
          this.roomScoreLbl.string = eveScore;
          this.roomScoreLbl.font = this.fonts[2];
        }
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var maxScore = [];
          for (var key in scoreData) maxScore.push(scoreData[key]);
          var index = 0;
          for (var i = 1; i < maxScore.length; i++) maxScore[i] && maxScore[i] > maxScore[index] && (index = i);
          return maxScore[index];
        };
        GetScoreMaxUid() == scoreData[player.uid] && (this.maxWinner.active = true);
        this.creatorIcon.active = player.uid == GameData.room.creator;
      },
      getActiveNode: function getActiveNode() {
        return this.infoNode;
      },
      initData: function initData(playerInfo) {
        if (!playerInfo) return;
        this._playerInfo = playerInfo;
        Object.keys(ZJH_roomData.gameResultData).length > 0 && this.initUI();
      }
    });
    cc._RF.pop();
  }, {
    "ZJH-RoomData": "ZJH-RoomData",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  poker_chipPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c930c78jCNCtpAI/zD6HIMK", "poker_chipPrefab");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        chipSp: cc.Sprite
      },
      onLoad: function onLoad() {},
      setChipImg: function setChipImg(num) {
        if (num) {
          var iconUrl = "resources/zjh/UI/img/chip/chip_x_" + num + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.chipSp.spriteFrame = new cc.SpriteFrame(texture);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  poker_debugPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "316d6w+AotEdbEfVLqRA4vU", "poker_debugPrefab");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        debugBtn: cc.Node
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        var debugBtn = cc.find("debugBtn", this.node.parent);
        debugBtn && (debugBtn.active = setCardsOpen);
      },
      onOkBtnClick: function onOkBtnClick() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {});
      },
      close: function close() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  poker_playerStateImgPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15ab9wyo21DI5cT1MTDL4kb", "poker_playerStateImgPrefab");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        stateImg: cc.Sprite
      },
      onLoad: function onLoad() {},
      setImg: function setImg(type, scale, posY) {
        if (type) {
          var iconUrl = "resources/zjh/UI/artword/artword_" + type + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.stateImg.spriteFrame = new cc.SpriteFrame(texture);
        }
        scale && (this.stateImg.node.scale = scale);
        posY && (this.stateImg.node.y = posY);
      }
    });
    cc._RF.pop();
  }, {} ],
  poker_settingPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7fa1e7wtSlIw4Gl/McJ7T8g", "poker_settingPrefab");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var loginHandler = require("loginHandler");
    var gameDefine = require("gameDefine");
    var ZJH_RoomData = require("ZJH-RoomData");
    cc.Class({
      extends: cc.Component,
      properties: {
        musicSlider: cc.Slider,
        soundSlider: cc.Slider,
        musicBtn: cc.Node,
        soundBtn: cc.Node,
        musicProgressbar: cc.ProgressBar,
        soundProgressbar: cc.ProgressBar,
        _musicOpen: true,
        _soundOpen: true,
        _LanguageTypeOpen: true,
        byeRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        toggle_tianjin: cc.Toggle,
        toggle_putong: cc.Toggle,
        fangyanLb: cc.Label
      },
      onLoad: function onLoad() {
        this._LanguageTypeOpen = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_local;
        this.musicBtn.getChildByName("guan").active = false;
        this.soundBtn.getChildByName("guan").active = false;
        this.soundSlider.node.on("slide", this.adjustSound, this);
        this.musicSlider.node.on("slide", this.adjustMusic, this);
        this.musicBtn.on(cc.Node.EventType.TOUCH_START, this.musicClick, this);
        this.soundBtn.on(cc.Node.EventType.TOUCH_START, this.soundClick, this);
        this.toggle_tianjin.node.on("toggle", this.selectLanguageTypeClick, this);
        this.toggle_putong.node.on("toggle", this.selectLanguageTypeClick, this);
        var sceneName = cc.director.getScene().name;
        var sceneName = cc.director.getScene().name;
        if ("home" == sceneName) {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = true;
        } else {
          this.byeRoomBtn.active = true;
          this.quitRoomBtn.active = false;
        }
        if (RoomHandler.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = false;
        }
        this._soundOpen = GameData.SetLayerData.soundOpen;
        this._musicOpen = GameData.SetLayerData.musicOpen;
        this.selectLanguageTypeOpen();
        this.refreshUI();
      },
      onEnable: function onEnable() {},
      musicClick: function musicClick(event) {
        this._musicOpen = !this._musicOpen;
        this.setMusicOpen();
        GameData.SetLayerData.musicOpen = this._musicOpen;
        var v = true == this._musicOpen ? GameData.SetLayerData.musicVolume : 0;
        soundMngr.instance.bgmVolume(v);
        GameData.saveSetLayerData();
      },
      soundClick: function soundClick(event) {
        this._soundOpen = !this._soundOpen;
        this.setSoundOpen();
        GameData.SetLayerData.soundOpen = this._soundOpen;
        GameData.saveSetLayerData();
      },
      selectLanguageTypeClick: function selectLanguageTypeClick(event) {
        var languageType = GameData.language_local;
        this.toggle_tianjin.isChecked && (languageType = GameData.language_local);
        this.toggle_putong.isChecked && (languageType = GameData.language_putong);
        cc.sys.localStorage.setItem("languageType" + GameData.player.uid, languageType);
      },
      selectLanguageTypeOpen: function selectLanguageTypeOpen() {
        if (this._LanguageTypeOpen == GameData.language_local) {
          this.toggle_tianjin.isChecked = true;
          this.toggle_putong.isChecked = false;
        } else {
          this.toggle_tianjin.isChecked = false;
          this.toggle_putong.isChecked = true;
        }
      },
      setMusicOpen: function setMusicOpen() {
        this.musicBtn.getChildByName("kai").active = this._musicOpen;
        this.musicBtn.getChildByName("guan").active = !this._musicOpen;
        this.musicBtn.getChildByName("base").active = this._musicOpen;
      },
      setSoundOpen: function setSoundOpen() {
        this.soundBtn.getChildByName("kai").active = this._soundOpen;
        this.soundBtn.getChildByName("guan").active = !this._soundOpen;
        this.soundBtn.getChildByName("base").active = this._soundOpen;
      },
      adjustSound: function adjustSound(event) {
        var slider = event.detail;
        GameData.SetLayerData.soundVolume = slider.progress;
        GameData.SetLayerData.soundOpen = true;
        this._soundOpen = true;
        this.soundProgressbar.progress = slider.progress;
        if (0 == slider.progress) {
          this._soundOpen = false;
          GameData.SetLayerData.soundOpen = false;
        }
        this.setSoundOpen();
        GameData.saveSetLayerData();
      },
      adjustMusic: function adjustMusic(event) {
        var slider = event.detail;
        GameData.SetLayerData.musicVolume = slider.progress;
        soundMngr.instance.bgmVolume(GameData.musicVolume);
        this.musicProgressbar.progress = slider.progress;
        GameData.SetLayerData.musicOpen = true;
        this._musicOpen = true;
        if (0 == slider.progress) {
          this._musicOpen = false;
          GameData.SetLayerData.musicOpen = false;
        }
        var v = slider.progress;
        soundMngr.instance.bgmVolume(v);
        this.setMusicOpen();
        GameData.saveSetLayerData();
      },
      onClose: function onClose() {
        closeView(this.node.name);
      },
      requestDissolve: function requestDissolve() {
        if (!GameData.room.opts) return;
        if (GameData.player.uid != GameData.joiners[0].uid && GameData.room.status === gameDefine.RoomState.WAIT) {
          createMoveMessage("牌局开始后才允许解散房间");
          closeView(this.node.name);
          return;
        }
        if (GameData.room.status > gameDefine.RoomState.WAIT && !RoomHandler.isPlayGameByUid(GameData.player.uid)) {
          createMoveMessage("观战玩家不允许解散房间");
          closeView(this.node.name);
          return;
        }
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        closeView(this.node.name);
        if (GameData.gameType == gameDefine.GameType.Game_Poker_ZJH) {
          var ZJH_main = this.node.parent.getChildByName("pokerRoomBaseView").getChildByName("gamecontent").getChildByName("poker_ZJH_main");
          ZJH_main.getComponent("ZJH_roomMain").showdissolveLayer(1, 1);
          var dissolve = cc.find("layer_dissove/uiDissolve", ZJH_main);
          dissolve.getComponent("ZJH-roomDissolve").showPlayers();
          dissolve.getComponent("ZJH-roomDissolve").alreadyAgree();
          return;
        }
      },
      logout: function logout(evt) {
        loginHandler.logout();
      },
      refreshUI: function refreshUI() {
        this.musicSlider.progress = GameData.SetLayerData.musicVolume;
        this.soundSlider.progress = GameData.SetLayerData.soundVolume;
        this.soundBtn.getChildByName("kai").active = GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("guan").active = !GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("base").active = GameData.SetLayerData.soundOpen;
        this.musicBtn.getChildByName("kai").active = GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("guan").active = !GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("base").active = GameData.SetLayerData.musicOpen;
        this.musicProgressbar.progress = GameData.SetLayerData.musicVolume;
        this.soundProgressbar.progress = GameData.SetLayerData.soundVolume;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    "ZJH-RoomData": "ZJH-RoomData",
    gameDefine: "gameDefine",
    loginHandler: "loginHandler",
    roomHandler: "roomHandler"
  } ],
  poker_summaryPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7bc01SrfTpJxZamGrwJe7Sl", "poker_summaryPrefab");
    "use strict";
    var RoomHandler = require("roomHandler");
    var ZJH_roomData = require("ZJH-RoomData");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerRender: cc.Prefab,
        content: cc.Node,
        panel: cc.Node
      },
      onLoad: function onLoad() {
        this._roomInfo = RoomHandler;
        this.handlerMsg();
        registEvent("onZhaJinHuaRoomEnd", this, this.onShow);
        GameData.game.close && this.initUI();
      },
      onEnable: function onEnable() {},
      onShow: function onShow() {
        var self = this;
        GameData.room.status == gameDefine.RoomState.READY && this.initUI();
        ZJH_RoomData.isCompare ? this.scheduleOnce(function() {
          self.initUI();
        }, 5) : GameData.room.roundNum == GameData.room.opts.roundMax ? this.scheduleOnce(function() {
          self.initUI();
        }, 3) : this.initUI();
      },
      initUI: function initUI() {
        this.showTime(this._roomInfo.room.createtime, this._roomInfo.room.id);
        this.content.removeAllChildren();
        for (var i = 0; i < 6; i++) {
          var playerRender = cc.instantiate(this.playerRender);
          playerRender.x = 6 + 212 * i;
          this.content.addChild(playerRender);
        }
        var child = this.content.children;
        for (var i = 0; i < child.length; i++) {
          var playsLen = RoomHandler.getPlayGamePlayerArr().length;
          GameData.room.status == gameDefine.RoomState.WAIT && (playsLen = GameData.joiners.length);
          if (i < playsLen) {
            var playerRender = child[i];
            var playerInfo = GameData.getPlayerByUid(RoomHandler.getPlayGamePlayerArr()[i]);
            GameData.room.status == gameDefine.RoomState.WAIT && (playerInfo = GameData.joiners[i]);
            playerRender.getComponent("poker_ZJH_resultItemPrefab").initData(playerInfo);
            playerRender.getComponent("poker_ZJH_resultItemPrefab").getActiveNode().active = true;
          } else {
            var playerRender = child[i];
            playerRender.getComponent("poker_ZJH_resultItemPrefab").getActiveNode().active = false;
          }
        }
      },
      showTime: function showTime(createTime, roomId) {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(createTime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房间号 : " + roomId;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        cc.log("summary to home");
        GameData.player.roomid = void 0;
        GameData.joiners = [];
        GameData.game.onRoomDissolve = null;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      },
      handlerMsg: function handlerMsg() {},
      onDestroy: function onDestroy() {
        unregistEvent("onZhaJinHuaRoomEnd", this, this.initUI);
      }
    });
    cc._RF.pop();
  }, {
    "ZJH-RoomData": "ZJH-RoomData",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  powerView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "599aaHrzDFP67jcclmMfE/y", "powerView");
    "use strict";
    var roomUtil = require("roomUtil");
    cc.Class({
      extends: cc.Component,
      properties: {
        powerNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("nativePower", this, this.showPower);
      },
      onDestroy: function onDestroy() {
        unregistEvent("nativePower", this, this.showPower);
      },
      onEnable: function onEnable() {
        this.schedule(roomUtil.getPower, 60);
      },
      showPower: function showPower(percent) {
        this.powerNode.scaleX = percent.detail / 100;
      }
    });
    cc._RF.pop();
  }, {
    roomUtil: "roomUtil"
  } ],
  prepareView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b4ee8UYg+JAQ7FCiD4Yc0vz", "prepareView");
    "use strict";
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        handNode: cc.Node,
        readyNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.updatePlayerReady);
        registEvent("onPrepareInfo", this, this.updatePlayerReady);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.updatePlayerReady);
        unregistEvent("onPrepareInfo", this, this.updatePlayerReady);
      },
      onEnable: function onEnable() {
        this.updatePlayerReady();
      },
      updatePlayerReady: function updatePlayerReady() {
        var posList = [ "left", "right", "up", "down" ];
        for (var i = 0; i < posList.length; i++) this.showReadyIcon(posList[i], false, false);
        var readyData = RoomHandler.getRoomReadyData();
        for (var uid in readyData) {
          var ready1 = !readyData[uid], ready2 = readyData[uid], direction = GameData.getPlayerPosByUid(uid);
          this.showReadyIcon(direction, ready2, ready1);
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        var readyHand = cc.find(direction, this.handNode);
        readyHand && (readyHand.active = showHand);
        var readying = cc.find(direction, this.readyNode);
        readying && (readying.active = showReading);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  replayData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48982FhB6RPMatSAmCo6da7", "replayData");
    "use strict";
    var replayDataJson = '{"id":1498566005,"creator":1498565923389.0,"opts":{},"players":["1498565923389","1498565954673","1498565961578","1498565967754"],"cards":[[16,19,31,13,16,71,15,23,19,29,25,11,41],[71,61,18,51,18,19,26,27,6,7,9,12,18],[27,4,1,31,6,3,91,81,21,8,24,81,12],[81,8,15,24,24,8,4,12,26,7,51,6,51]],"actions":[{"uid":"1498565961578","action":"obtain","card":[14]},{"uid":1498565961578.0,"action":"discard","card":["91"]},{"uid":"1498565967754","action":"obtain","card":[27]},{"uid":1498565967754.0,"action":"discard","card":["81"]},{"uid":1498565961578.0,"action":"peng","card":["81","81","81"]},{"uid":1498565961578.0,"action":"discard","card":["31"]},{"uid":"1498565967754","action":"obtain","card":[23]},{"uid":1498565967754.0,"action":"discard","card":["12"]},{"uid":"1498565923389","action":"obtain","card":[17]},{"uid":1498565923389.0,"action":"discard","card":["71"]},{"uid":"1498565954673","action":"obtain","card":[7]},{"uid":1498565954673.0,"action":"discard","card":["71"]},{"uid":"1498565961578","action":"obtain","card":[23]},{"uid":1498565961578.0,"action":"discard","card":["1"]},{"uid":"1498565967754","action":"obtain","card":[2]},{"uid":1498565967754.0,"action":"discard","card":["15"]},{"uid":"1498565923389","action":"obtain","card":[26]},{"uid":1498565923389.0,"action":"discard","card":["31"]},{"uid":"1498565954673","action":"obtain","card":[91]},{"uid":1498565954673.0,"action":"discard","card":["51"]},{"uid":1498565967754.0,"action":"peng","card":["51","51","51"]},{"uid":1498565967754.0,"action":"discard","card":["27"]},{"uid":"1498565923389","action":"obtain","card":[31]},{"uid":1498565923389.0,"action":"discard","card":[31]},{"uid":"1498565954673","action":"obtain","card":[1]},{"uid":1498565954673.0,"action":"discard","card":["91"]},{"uid":"1498565961578","action":"obtain","card":[41]},{"uid":1498565961578.0,"action":"discard","card":[41]},{"uid":"1498565967754","action":"obtain","card":[15]},{"uid":1498565967754.0,"action":"discard","card":[15]},{"uid":"1498565923389","action":"obtain","card":[61]},{"uid":1498565923389.0,"action":"discard","card":[61]},{"uid":"1498565954673","action":"obtain","card":[15]},{"uid":1498565954673.0,"action":"discard","card":["61"]},{"uid":"1498565961578","action":"obtain","card":[91]},{"uid":1498565961578.0,"action":"discard","card":[91]},{"uid":"1498565967754","action":"obtain","card":[11]},{"uid":1498565967754.0,"action":"discard","card":[11]},{"uid":"1498565923389","action":"obtain","card":[11]},{"uid":1498565923389.0,"action":"discard","card":["41"]},{"uid":"1498565954673","action":"obtain","card":[16]},{"uid":1498565954673.0,"action":"discard","card":["27"]},{"uid":"1498565961578","action":"obtain","card":[27]},{"uid":1498565961578.0,"action":"discard","card":["21"]},{"uid":"1498565967754","action":"obtain","card":[61]},{"uid":1498565967754.0,"action":"discard","card":[61]},{"uid":"1498565923389","action":"obtain","card":[29]},{"uid":1498565923389.0,"action":"discard","card":["23"]},{"uid":"1498565954673","action":"obtain","card":[17]},{"uid":1498565954673.0,"action":"discard","card":["1"]},{"uid":"1498565961578","action":"obtain","card":[22]},{"uid":1498565961578.0,"action":"discard","card":["8"]},{"uid":1498565967754.0,"action":"peng","card":["8","8","8"]},{"uid":1498565967754.0,"action":"discard","card":["2"]},{"uid":"1498565923389","action":"obtain","card":[11]},{"uid":1498565923389.0,"action":"discard","card":["16"]},{"uid":"1498565954673","action":"obtain","card":[3]},{"uid":1498565954673.0,"action":"discard","card":[3]},{"uid":"1498565961578","action":"obtain","card":[7]},{"uid":1498565961578.0,"action":"discard","card":["12"]},{"uid":"1498565967754","action":"obtain","card":[9]},{"uid":1498565967754.0,"action":"discard","card":[9]},{"uid":"1498565923389","action":"obtain","card":[5]},{"uid":1498565923389.0,"action":"discard","card":[5]},{"uid":"1498565954673","action":"obtain","card":[28]},{"uid":1498565954673.0,"action":"discard","card":[28]},{"uid":"1498565961578","action":"obtain","card":[24]},{"uid":1498565961578.0,"action":"discard","card":["14"]},{"uid":"1498565967754","action":"obtain","card":[3]},{"uid":1498565967754.0,"action":"discard","card":["7"]},{"uid":1498565954673.0,"action":"peng","card":["7","7","7"]},{"uid":1498565954673.0,"action":"discard","card":["9"]},{"uid":"1498565961578","action":"obtain","card":[22]},{"uid":1498565961578.0,"action":"discard","card":["7"]},{"uid":"1498565967754","action":"obtain","card":[41]},{"uid":1498565967754.0,"action":"discard","card":[41]},{"uid":"1498565923389","action":"obtain","card":[5]},{"uid":1498565923389.0,"action":"discard","card":[5]},{"uid":"1498565954673","action":"obtain","card":[18]},{"uid":1498565954673.0,"action":"angang","card":["18","18","18","18","18"]},{"uid":"1498565954673","action":"obtain","card":[71]},{"uid":1498565954673.0,"action":"discard","card":[71]},{"uid":"1498565961578","action":"obtain","card":[4]},{"uid":1498565961578.0,"action":"discard","card":["6"]},{"uid":"1498565967754","action":"obtain","card":[21]},{"uid":1498565967754.0,"action":"discard","card":[21]},{"uid":"1498565923389","action":"obtain","card":[29]},{"uid":1498565923389.0,"action":"discard","card":["13"]},{"uid":"1498565954673","action":"obtain","card":[1]},{"uid":1498565954673.0,"action":"discard","card":[1]},{"uid":"1498565961578","action":"obtain","card":[3]},{"uid":1498565961578.0,"action":"discard","card":[3]},{"uid":"1498565967754","action":"obtain","card":[19]},{"uid":1498565967754.0,"action":"discard","card":[19]},{"uid":"1498565923389","action":"obtain","card":[12]}],"result":{"winner":1498565923389.0,"type":[4]}}';
    var ReplayData = {};
    cc._RF.pop();
  }, {} ],
  replayHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1466aLmkixKcr4ud7X66Dxt", "replayHandler");
    "use strict";
    cc._RF.pop();
  }, {} ],
  "replayMain-tdk": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16dc4r9e6hODJjFbdxAeDH/", "replayMain-tdk");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        stopBtn: cc.Button,
        playBtn: cc.Button,
        exitBtn: cc.Button,
        quick_btn: cc.Button,
        overBtn: cc.Button,
        playerNodes: {
          default: [],
          type: cc.Node
        },
        continueBtn: cc.Node,
        playCardsNode: cc.Node,
        escapeNode: cc.Node,
        winnerNode: cc.Node,
        borrowPokerPre: cc.Prefab,
        languo: cc.Node,
        scoreNode: cc.Prefab,
        scoreParent: cc.Node,
        chips: [ cc.Node ],
        chipsNode: cc.Node,
        _actionIndex: -1,
        runSum: cc.Label,
        roomNode: cc.Node
      },
      onLoad: function onLoad() {
        this.stopBtn.node.active = false;
        this.playBtn.node.active = true;
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("ddz-onGameStart", this, this.showTableLayer);
        registEvent("tjddz-onGameStart", this, this.showTableLayer);
      },
      onEnable: function onEnable() {
        cc.director.getScheduler().setTimeScale(1);
        this.initPlayers();
        this.initStopPanel();
        this.schedule(this.runAction, 1);
        this.showRoomRule();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("ddz-onGameStart", this, this.showTableLayer);
        unregistEvent("tjddz-onGameStart", this, this.showTableLayer);
      },
      showTableLayer: function showTableLayer() {
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? cc.director.loadScene("table") : GameData.client.gameType == gameDefine.GameType.Game_Poker_DDZ ? cc.director.loadScene("table-DDZ") : GameData.client.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ && cc.director.loadScene("table-TJDDZ");
      },
      initStopPanel: function initStopPanel() {
        var self = this;
        this.stopBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(1);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.playBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(0);
          self.stopBtn.node.active = true;
          self.playBtn.node.active = false;
        });
        this.exitBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          ReplayDataCenter.openRoundPanel = true;
          cc.director.getScheduler().setTimeScale(1);
          cc.director.loadScene("home");
        });
        this.quick_btn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          cc.director.getScheduler().setTimeScale(2);
          self.stopBtn.node.active = false;
          self.playBtn.node.active = true;
        });
        this.overBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          self.overBtnClick();
        });
      },
      overBtnClick: function overBtnClick() {
        this.unschedule(this.runAction);
        ReplayDataCenter.openRoundPanel = true;
        cc.director.loadScene("home");
      },
      initPlayers: function initPlayers() {
        this.headers = [];
        this.continueBtn.active = false;
        for (var i = 0; i < this.playerNodes.length; i++) this.playerNodes[i].active = false;
        for (var j = 0; j < ReplayData.players.length; j++) if (null != ReplayData.players[j]) {
          var userId = ReplayData.players[j].uid;
          var userInfo = this.getPlayerInfoByUid(userId);
          var localIdx = this.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("TableTDKPlayerTemplate");
          headNode.parent.active = true;
          var playerHeadScp = headNode.getComponent("TDK-playerTemplate");
          playerHeadScp.setPlayer(userInfo);
          playerHeadScp.setHeadIcon(userInfo.headimgurl);
          playerHeadScp.setName(userInfo.name);
          this.headers.push(headNode);
        }
        this.initPokerNode();
      },
      initPokerNode: function initPokerNode() {
        for (var key in this.playCardsNode.children) this.hideNodeChild(this.playCardsNode.children[key]);
        for (var key in this.escapeNode.children) this.escapeNode.children[key].active = false;
        for (var key in this.escapeNode.children) this.winnerNode.children[key].active = false;
        for (var i = 0; i < ReplayData.players.length; i++) {
          var localIdex = this.getLocalPosition(i);
          var headNode = this.playerNodes[localIdex].getChildByName("pokerBg");
          var chipNum = this.playerNodes[localIdex].getChildByName("nowChipsNum");
          chipNum.getChildByName("Num").getComponent(cc.Label).string = "0";
          chipNum.active = false;
          headNode.active = false;
        }
      },
      hideNodeChild: function hideNodeChild(parent) {
        for (var key in parent.children) parent.children[key].active = false;
      },
      showRoomRule: function showRoomRule() {
        var roomNum = cc.find("roomNum", this.roomNode);
        roomNum.getComponent(cc.Label).string = ReplayData.room;
        var opts = ReplayData.opts;
        var lastRoundNum = cc.find("roundBg/txt", this.roomNode);
        lastRoundNum.getComponent(cc.Label).string = "局数:" + opts.roundMax;
        var quanYa = cc.find("quanya/txt", this.roomNode);
        quanYa.getComponent(cc.Label).string = "全压:" + opts.allin;
      },
      runAction: function runAction() {
        this.runNextAction();
      },
      runNextAction: function runNextAction() {
        this._actionIndex++;
        if (this._actionIndex < ReplayData.game.length) {
          var actionNum = this._actionIndex + 1;
          this.runSum.getComponent(cc.Label).string = "进度: " + actionNum + "/" + ReplayData.game.length;
          var replayAction = ReplayData.game[this._actionIndex];
          if (replayAction.type) switch (replayAction.type) {
           case "sendCards":
            this.showPokers(replayAction.data);
            this.showPokerScore();
            break;

           case "initIncScore":
            this.basicScore(replayAction.data);
            break;

           case "result":
            cc.log("game over");
            this.getResultScore(replayAction.data);
            this.gameResult(replayAction.data);
            break;

           default:
            cc.log("data error");
          } else if (replayAction.action) {
            var actionUid = replayAction.uid;
            var actionType = replayAction.action;
            var chipScore = replayAction.score;
            this.turnerActionEffect(actionType, chipScore, actionUid);
            this.getEveryOneScore(actionUid, chipScore);
          }
        }
      },
      showPokers: function showPokers(cardParent) {
        this.pokerScore = {};
        this.darkPoker = {};
        for (var i = 0; i < ReplayData.players.length; i++) {
          var userId = ReplayData.players[i].uid;
          for (var key in cardParent) if (cardParent[userId]) {
            var handPokers = cardParent[userId];
            var scoreSum = TDKPokerCard.calcScore(handPokers);
            this.pokerScore[userId] || (this.pokerScore[userId] = scoreSum);
            var localindex = this.getLocalPosition(i);
            this.showHandPokers(handPokers, this.playCardsNode.children[localindex], userId);
            var chipNum = this.playerNodes[localindex].getChildByName("nowChipsNum");
            chipNum.active = true;
          }
        }
      },
      showHandPokers: function showHandPokers(poker, parent, Uid) {
        var darkArray = [];
        for (var i = 0; i < poker.length; i++) {
          i < 2 && darkArray.push(poker[i]);
          parent.children[i].active = true;
          this.showPokerContent(parent.children[i], poker[i]);
        }
        var darkNum = TDKPokerCard.calcScore(darkArray);
        this.darkPoker[Uid] || (this.darkPoker[Uid] = darkNum);
      },
      showPokerContent: function showPokerContent(cardNode, pokerId) {
        var pokerNum = 0;
        pokerNum = pokerId > 1e3 ? pokerId - 1e3 : pokerId;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/TDK/UI/poker/poker_" + pokerNum + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.showBorrowPoker(cardNode, pokerId);
      },
      showBorrowPoker: function showBorrowPoker(pokerNode, pokerId) {
        var show = false;
        pokerId > 1e3 && (show = true);
        var borrowNode = pokerNode.getChildByName(pokerNode.name + "_borrow");
        if (null == borrowNode) {
          if (true == show) {
            borrowNode = cc.instantiate(this.borrowPokerPre);
            cc.find("borrow", borrowNode).active = true;
            pokerNode.addChild(borrowNode);
            borrowNode.name = pokerNode.name + "_borrow";
          }
        } else borrowNode.active = show;
      },
      getEveryOneScore: function getEveryOneScore(Uid, score) {
        for (var j = 0; j < ReplayData.players.length; j++) if (null != ReplayData.players[j] && ReplayData.players[j].uid === Uid) {
          var localIdx = this.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("nowChipsNum");
          var haveScore = headNode.getChildByName("Num").getComponent(cc.Label).string;
          var scoreToNum = parseInt(haveScore) + score;
          cc.log("scoreToNum = " + scoreToNum);
          headNode.getChildByName("Num").getComponent(cc.Label).string = scoreToNum;
        }
      },
      showPokerScore: function showPokerScore() {
        for (var j = 0; j < ReplayData.players.length; j++) if (null != ReplayData.players[j]) {
          var userId = ReplayData.players[j].uid;
          var localIdx = this.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("pokerBg");
          var pokerLb = headNode.getChildByName("pokerScore");
          headNode.active = true;
          var define;
          if (this.pokerScore[userId] && this.darkPoker[userId]) {
            define = this.darkPoker[userId];
            pokerLb.getComponent(cc.Label).string = this.pokerScore[userId] + "(" + define + ")";
          }
        }
      },
      basicScore: function basicScore(bscScore) {
        for (var i = 0; i < bscScore.length; i++) {
          var score = bscScore[i].score;
          this.clipClick(score, bscScore[i].uid);
          this.getEveryOneScore(bscScore[i].uid, score);
        }
      },
      turnerActionEffect: function turnerActionEffect(action, score, uid) {
        this.showActionType(uid, action);
        2 === action ? this.escapePoker(uid) : 6 === action ? cc.log("buti") : this.clipClick(score, uid);
      },
      showActionType: function showActionType(turnerId, action) {
        for (var j = 0; j < ReplayData.players.length; j++) if (null != ReplayData.players[j] && ReplayData.players[j].uid === turnerId) {
          var localIdx = this.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("actionType");
          for (var i = 0; i < headNode.children.length; i++) {
            var index = i + 2;
            headNode.getChildByName("action" + index).active = index === action;
          }
          this.scheduleOnce(function() {
            for (var i = 0; i < headNode.children.length; i++) {
              var index = i + 2;
              headNode.getChildByName("action" + index).active = false;
            }
          }, 1);
        }
      },
      escapePoker: function escapePoker(escapeUid) {
        for (var i = 0; i < ReplayData.players.length; i++) {
          var uid = ReplayData.players[i].uid;
          var localIdx = this.getLocalPosition(i);
          if (ReplayData.players[i].uid === escapeUid) {
            this.escapeNode.children[localIdx].active = true;
            return;
          }
        }
      },
      gameResult: function gameResult(result) {
        if (null === result || Object.keys(result).length <= 0) return;
        var winner = result.winner;
        var posX, posY;
        if (0 === winner) {
          this.languo.active = true;
          var armDisp = this.languo.getComponent(dragonBones.ArmatureDisplay);
          armDisp.playAnimation("newAnimation", 1);
          this.continueBtn.active = true;
          return;
        }
        var self = this;
        this.scheduleOnce(function() {
          for (var j = 0; j < ReplayData.players.length; j++) if (null != ReplayData.players[j] && ReplayData.players[j].uid === winner) {
            var localIdx = this.getLocalPosition(j);
            var headPos = self.playerNodes[localIdx].position;
            posX = headPos.x;
            posY = headPos.y;
            self.winnerNode.children[localIdx].active = true;
            var armDisp = self.winnerNode.children[localIdx].getComponent(dragonBones.ArmatureDisplay);
            armDisp.playAnimation("newAnimation", 1);
          }
        }, 1);
        this.scheduleOnce(function() {
          for (var i = 0; i < self.chipsNode.children.length; i++) {
            var childNode = self.chipsNode.children[i];
            var flyPos = {};
            cc.log("posX = " + posX + ",posY = " + posY);
            flyPos.x = posX + (this.randomNum(0, 180) - 90);
            flyPos.y = posY + (this.randomNum(0, 90) - 45);
            self.resultChipsAnimation(childNode, flyPos);
          }
          self.moveAboutScore(winner);
          self.continueBtn.active = true;
        }, 3);
        return;
      },
      resultChipsAnimation: function resultChipsAnimation(node, position) {
        var action1 = cc.moveTo(.4, position);
        var action2 = cc.callFunc(function() {
          node.active = false;
          node.destroy();
        }, node);
        node.runAction(cc.sequence(action1, action2));
      },
      moveAboutScore: function moveAboutScore(winner) {
        cc.log("this.preScore = " + JSON.stringify(this.preScore));
        var self = this;
        this.scheduleOnce(function() {
          for (var j = 0; j < ReplayData.players.length; j++) {
            var userId = ReplayData.players[j].uid;
            var localIdx = self.getLocalPosition(j);
            var headNode = self.scoreParent.getChildByName("score" + localIdx);
            var playerGetScore = headNode.getChildByName("resultScore");
            if (null == playerGetScore) {
              playerGetScore = cc.instantiate(self.scoreNode);
              if (winner === userId) {
                var winscore = 0;
                for (var key in self.preScore) key != winner && (winscore += self.preScore[key]);
                playerGetScore.getComponent("tdk-resultFlyScore").getScoreColor(winscore);
              } else playerGetScore.getComponent("tdk-resultFlyScore").getScoreColor(0 - self.preScore[userId]);
              playerGetScore.active = true;
              headNode.addChild(playerGetScore);
            }
            var move1 = cc.moveBy(.75, cc.p(0, 60));
            playerGetScore.runAction(move1);
          }
        }, .5);
        this.scheduleOnce(function() {
          for (var i = 0; i < self.scoreParent.children.length; i++) self.scoreParent.children[i].removeAllChildren();
          self.changeSumScore();
        }, 1.5);
      },
      changeSumScore: function changeSumScore() {
        for (var j = 0; j < ReplayData.players.length; j++) if (null != ReplayData.players[j]) {
          var userId = ReplayData.players[j].uid;
          var userInfo = this.getPlayerInfoByUid(userId);
          var localIdx = this.getLocalPosition(j);
          var headNode = this.playerNodes[localIdx].getChildByName("TableTDKPlayerTemplate");
          var playerHeadScp = headNode.getComponent("TDK-playerTemplate");
          playerHeadScp.setCoin(ReplayData.scores[userId]);
        }
      },
      getResultScore: function getResultScore(data) {
        var resultscore = data.result;
        this.preScore = {};
        for (var key in resultscore) {
          var turnerScore = arraySum(resultscore[key]);
          this.preScore[key], this.preScore[key] = turnerScore;
        }
      },
      clipClick: function clipClick(data, turnerUid) {
        var score = data;
        var clip1Num = 0;
        var clip2Num = 0;
        var clip5Num = 0;
        var clip10Num = 0;
        var scoreArry = [ clip10Num, clip5Num, clip2Num, clip1Num ];
        for (var i = 0; i < scoreArry.length; i++) scoreArry[i] = this.spliceScore(score)[i];
        for (var i = 0; i < scoreArry.length; i++) for (var j = 0; j < scoreArry[i]; j++) {
          for (var index = 0; index < ReplayData.players.length; index++) {
            var localIdx = this.getLocalPosition(index);
            if (ReplayData.players[index].uid === turnerUid) {
              var handenode = this.playCardsNode.children[localIdx];
              this.chips[i].x = handenode.x;
              this.chips[i].y = handenode.y;
            }
          }
          var clipNode = cc.instantiate(this.chips[i]);
          clipNode.parent = this.chipsNode;
          clipNode.x = this.chips[i].x;
          clipNode.y = this.chips[i].y;
          clipNode.active = true;
          this.clipFlyToTableAnimation(clipNode);
        }
        cc.log("筹码数量：" + this.chipsNode.childrenCount);
      },
      clipFlyToTableAnimation: function clipFlyToTableAnimation(node) {
        var x = this.randomNum(0, 400) - 200;
        var y = this.randomNum(0, 100) - 100;
        var action1 = cc.moveTo(.3, cc.p(x, y));
        var action3 = cc.callFunc(function() {
          node.removeFromParent(true);
        }, node);
        var action4 = cc.fadeOut(.1);
        this.chipsNode.childrenCount > 80 ? node.runAction(cc.sequence(action1, action4, action3)).easing(cc.easeCubicActionOut()) : node.runAction(action1).easing(cc.easeCubicActionOut());
      },
      spliceScore: function spliceScore(score) {
        var clip1 = 1;
        var clip2 = 2;
        var clip5 = 5;
        var clip10 = 10;
        var arry = [];
        var coinArry = [ clip10, clip5, clip2, clip1 ];
        for (var i = 0; i < coinArry.length; i++) {
          var num = Math.floor(score / coinArry[i]);
          arry.push(num);
          score -= Math.floor(score / coinArry[i]) * coinArry[i];
        }
        return arry;
      },
      randomNum: function randomNum(min, max) {
        var distance = max - min;
        var num = Math.random() * distance + min;
        return parseInt(num, 10);
      },
      continueClick: function continueClick() {
        ReplayDataCenter.openReplayPanel = true;
        cc.director.loadScene("home");
      },
      getPlayerInfoByUid: function getPlayerInfoByUid(uid) {
        for (var i = 0; i < ReplayData.players.length; i++) if (ReplayData.players[i].uid == uid) return ReplayData.players[i];
        return null;
      },
      getPlayerPosByUid: function getPlayerPosByUid(uid) {
        for (var i = 0; i < ReplayData.players.length; i++) if (ReplayData.players[i].uid == uid) return i;
        return null;
      },
      getLocalPosition: function getLocalPosition(index) {
        var selfIndex = 0;
        var temp = [];
        for (var i = 0; i < ReplayData.players.length; i++) temp.push(i);
        var selfIndx = this.getPlayerPosByUid(GameData.player.uid);
        var prev = temp.slice(temp.indexOf(selfIndx));
        prev = prev.concat(temp.slice(0, temp.indexOf(selfIndx)));
        return prev.indexOf(index);
      }
    });
    cc._RF.pop();
  }, {} ],
  resultRunScore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1b49LAxbVOrYq6YBrFJg7C", "resultRunScore");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreLabel: cc.Label,
        fonts: [ cc.Font ]
      },
      onLoad: function onLoad() {},
      getScoreColor: function getScoreColor(score) {
        this.scoreLabel.getComponent(cc.Label).string = score;
        if (score > 0) {
          this.scoreLabel.getComponent(cc.Label).string = "+" + score;
          this.scoreLabel.getComponent(cc.Label).font = this.fonts[0];
        } else if (score < 0) {
          this.scoreLabel.getComponent(cc.Label).string = score;
          this.scoreLabel.getComponent(cc.Label).font = this.fonts[1];
        } else if (0 == score) {
          this.scoreLabel.getComponent(cc.Label).string = score;
          this.scoreLabel.getComponent(cc.Label).font = this.fonts[2];
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  resultView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e294U7rsNGH6Tc07lEgKtM", "resultView");
    "use strict";
    var game = require("gameConfig");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        playerItem: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        createTime: cc.Label,
        roomID: cc.Label,
        roundNumber: cc.Label,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        shareBtn: cc.Button,
        readyBtn: cc.Button,
        font: {
          default: [],
          type: [ cc.Font ]
        },
        _curGameData: void 0
      },
      onEnable: function onEnable() {
        this.isMark = 0;
        this.onShow();
      },
      initResultData: function initResultData() {
        cc.log("initResultData");
        this.isHuType = false;
        this._curGameData = game.getGameData();
      },
      onShow: function onShow() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        this.initResultData();
        if (roomData.opts.joinermax) {
          this.showResultIcon();
          for (var i = 0; i < roomData.opts.joinermax; i++) {
            this.showPlayer(i);
            this.showCards(i);
            this.showScore(i);
            this.showDetail(i);
            this.showWinIcon(i);
          }
          this.showRoundInfo();
        }
      },
      showPlayer: function showPlayer(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) {
          playerNode = cc.instantiate(this.playerItem);
          playerNode.parent = this.resultLayer;
          playerNode.name = "player" + (index + 1);
          playerNode.x = this.playerItem.x;
          playerNode.y = this.playerItem.y - index * this.playerItem.height;
        }
        var idNode = cc.find("/head/id", playerNode);
        var nameNode = cc.find("/head/name", playerNode);
        var headpicNode = cc.find("/head/headpic", playerNode);
        var zhuangNode = cc.find("/head/zhuang", playerNode);
        var creator = cc.find("/head/creator", playerNode);
        var player = GameData.joiners[index];
        var name = player.name.substring(0, 6) + "...";
        nameNode.getComponent(cc.Label).string = name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == gameInfoData.zhuangUid;
        creator.active = player.uid == roomData.creator;
        var iconSprite = headpicNode.getComponent(cc.Sprite);
        this.setIcon(iconSprite, player.headimgurl);
      },
      showCards: function showCards(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var player = GameData.joiners[index];
        var hu = player.uid == gameInfoData.winnerUid;
        hu && (this.isMark = 0);
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var parent = cc.find("cards", playerNode);
        var handNode = cc.find("cardHand", parent);
        for (var ii = 0; ii < handNode.getChildrenCount(); ii++) {
          var child = handNode.getChildren()[ii];
          child && (child.active = false);
        }
        var cardHand = curGameData.getHandCards(player.uid);
        if (void 0 == cardHand) return;
        var handNumber = cardHand.length;
        var index1 = 1;
        var nodeIndex = 1;
        var show;
        for (var i = handNumber; i >= 0; i--) {
          var cardId = cardHand[i];
          if (void 0 == cardId || cardId <= 0) continue;
          if (game.getGameRule().isWildCard(cardId)) {
            show = true;
            nodeIndex = handNumber;
            handNumber--;
          } else {
            show = false;
            nodeIndex = index1;
            index1++;
          }
          var node = cc.find("cardHand" + nodeIndex, handNode);
          if (node) {
            node.active = true;
            this.showCardContent(node, "mj_face_xia_shou", cardId);
            this.setMyHuierVisible(node, cardId, "down", show);
            this.setMyHuimageVisible(node, cardId, hu);
          }
        }
        this.showPengCards(player, parent, "mj_face_xia_chu");
      },
      showScore: function showScore(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var scoreData = curGameData.getGameScoreData();
        if (void 0 == scoreData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("score", playerNode);
        if (scoreData[uid] > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + scoreData[uid];
        } else if (scoreData[uid] < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = scoreData[uid];
        } else if (0 == scoreData[uid]) {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = scoreData[uid];
        }
      },
      showDetail: function showDetail(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var player = GameData.joiners[index];
        var termNode = cc.find("term", playerNode);
        var label = termNode.getComponent(cc.Label);
      },
      setIcon: function setIcon(sprite, imgurl) {
        if (void 0 == sprite || void 0 == imgurl || imgurl.length <= 0) return;
        cc.loader.load({
          url: imgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId, direction, show) {
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            huierNode.y = huierNode.y - 18;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(direction, huierNode).active = true;
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardId, isHu) {
        var show = false;
        false == isHu ? show = false : 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        if (void 0 == parent || void 0 == player || Object.keys(player).length <= 0) return;
        var pengNode = cc.find("cardPeng", parent);
        for (var ii = 0; ii < pengNode.getChildrenCount(); ii++) {
          var child = pengNode.getChildren()[ii];
          child && (child.active = false);
        }
        var chi = curGameData.getChiCards(player.uid);
        var peng = curGameData.getPengCards(player.uid);
        var gang = curGameData.getGangCards(player.uid);
        if (void 0 == chi || void 0 == gang || void 0 == peng) return;
        var cards = peng.concat(chi);
        var size = parseInt(GameData.client.handsize / 3);
        var index, node, n, face, back, cardsObject, cardsArray, cardId;
        for (index = 0; index < cards.length; index++) {
          if (index >= size) break;
          node = cc.find("cardPeng" + (index + 1), pengNode);
          if (node) {
            for (n = 0; n < 4; n++) {
              face = node.getChildByName("card_face" + (n + 1)).getComponent(cc.Sprite);
              cardsObject = cards[index];
              if (void 0 == cardsObject) break;
              cardsArray = cardsObject.cards;
              if (void 0 == cardsArray || cardsArray.length <= 0) break;
              cardsArray.length >= 1 && cardsArray.sort(function(a, b) {
                return a - b;
              });
              if (n < cardsArray.length) {
                face.node.active = true;
                if (3 == n) {
                  back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                  back.node.active = false;
                }
                cardId = cardsArray[n];
                this.showCardContent(face.node, cardHeader, cardId);
              } else face.node.active = false;
            }
            node.active = true;
          }
        }
        for (;index < gang.length; index++) {
          if (index >= size) break;
          node = cc.find("cardPeng" + (index + 1), pengNode);
          if (node) {
            for (n = 0; n < 4; n++) {
              face = node.getChildByName("card_face" + (n + 1)).getComponent(cc.Sprite);
              cardsObject = gang[index];
              if (void 0 == cardsObject) break;
              cardsArray = cardsObject.cards;
              if (void 0 == cardsArray || cardsArray.length <= 0) break;
              if (n < cardsArray.length) {
                face.node.active = true;
                if (3 == n) {
                  back = node.getChildByName("card_back4").getComponent(cc.Sprite);
                  if (cardsObject.type == GangType.Gang_An) {
                    face.node.active = false;
                    back.node.active = true;
                  } else back.node.active = false;
                }
                cardId = cardsArray[n];
                this.showCardContent(face.node, cardHeader, cardId);
              } else face.node.active = false;
            }
            node.active = true;
          }
        }
      },
      showWinIcon: function showWinIcon(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var uid = GameData.joiners[index].uid;
        var node = cc.find("huIcon", playerNode);
        node.active = uid == gameInfoData.winnerUid;
      },
      showResultIcon: function showResultIcon() {
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var scoreData = curGameData.getGameScoreData();
        if (void 0 == scoreData || Object.keys(scoreData).length <= 0) return;
        var myScore = scoreData[GameData.player.uid];
        if (myScore > 0) {
          this.winSprite.node.active = true;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
        } else if (myScore < 0) {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = true;
          this.pingSprite.node.active = false;
        } else {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = true;
        }
      },
      showRoundInfo: function showRoundInfo() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        this.roomID.string = "房号：" + roomData.id;
        var time = getTimeStr(roomData.createtime);
        this.createTime.string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        var showRoundNum = roomData.gameNum;
        this.roundNumber.string = "第" + showRoundNum + "局";
      },
      setReady: function setReady() {
        if (GameData.roomClose) sendEvent("onShowView", "summaryView"); else {
          RoomHandler.setReady();
          sendEvent("onCloseView", "resultView");
          sendEvent("onRoomInfo", {
            force: true
          });
        }
      },
      shareRet: function shareRet() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig",
    roomHandler: "roomHandler"
  } ],
  "roomChaShui-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2f265yO+JDe7wTuAFQKnqs", "roomChaShui-shishi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_up: cc.Node,
        layer_down: cc.Node,
        layer_left: cc.Node,
        layer_right: cc.Node,
        ok_btn: cc.Button,
        no_btn: cc.Button,
        headNodes: {
          default: [],
          type: cc.Node
        },
        action_up: false,
        action_down: false,
        action_left: false,
        action_right: false
      },
      onLoad: function onLoad() {
        cc.log("..chashui.onLoad");
        registEvent("startWater", this, this.UIControl);
        1 != GameDataShiShi.setWater && this.showChaShuiState();
        var self = this;
        this.ok_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendChaShuiMes(2);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
        });
        this.no_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendChaShuiMes(0);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("startWater", this, this.UIControl);
      },
      sendChaShuiMes: function sendChaShuiMes(waterNum) {
        MjHandler.getInstance().requestSetWater(waterNum, function(res) {});
      },
      ShowUI: function ShowUI() {
        this.setUI(true);
        this.action_up = false;
        this.action_down = false;
        this.action_left = false;
        this.action_right = false;
        this.setWaterFlag(this.headNodes[0], "down");
        this.setWaterFlag(this.headNodes[1], "right");
        this.setWaterFlag(this.headNodes[2], "up");
        this.setWaterFlag(this.headNodes[3], "left");
      },
      CloseUI: function CloseUI() {
        true == this.action_up && true == this.action_down && true == this.action_left && true == this.action_right && this.setUI(false);
      },
      setUI: function setUI(show) {
        this.node.active = show;
      },
      UIControl: function UIControl() {
        false == this.node.active && this.ShowUI();
        this.showChaShuiState();
      },
      showChaShuiState: function showChaShuiState() {
        cc.log("...data...:" + JSON.stringify(GameDataShiShi.setWater));
        var data = GameDataShiShi.setWater;
        this.ok_btn.node.active = false;
        this.ok_btn.node.active = false;
        if (void 0 == GameDataShiShi.setWater) return;
        var player = GameData.getPlayerByPos("down");
        if (player && void 0 == data[player.uid]) {
          this.ok_btn.node.active = true;
          this.no_btn.node.active = true;
        }
        if (player) {
          this.layer_down.active = true;
          cc.find("down/choice", this.node).active = false;
          cc.find("down/no", this.node).active = false;
          cc.find("down/yes", this.node).active = false;
          data[player.uid] >= 0 && (false == this.action_down ? this.runMoveActionFlag("down", data[player.uid]) : this.layer_down.active = false);
        } else {
          this.layer_down.active = false;
          this.action_down = true;
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.layer_right.active = true;
          cc.find("right/choice", this.node).active = true;
          cc.find("right/no", this.node).active = false;
          cc.find("right/yes", this.node).active = false;
          data[player.uid] >= 0 && (false == this.action_right ? this.runMoveActionFlag("right", data[player.uid]) : this.layer_right.active = false);
        } else {
          this.layer_right.active = false;
          this.action_right = true;
        }
        player = GameData.getPlayerByPos("up");
        if (player) {
          this.layer_up.active = true;
          cc.find("up/choice", this.node).active = true;
          cc.find("up/no", this.node).active = false;
          cc.find("up/yes", this.node).active = false;
          data[player.uid] >= 0 && (false == this.action_up ? this.runMoveActionFlag("up", data[player.uid]) : this.layer_up.active = false);
        } else {
          this.layer_up.active = false;
          this.action_up = true;
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.layer_left.active = true;
          cc.find("left/choice", this.node).active = true;
          cc.find("left/no", this.node).active = false;
          cc.find("left/yes", this.node).active = false;
          data[player.uid] >= 0 && (false == this.action_left ? this.runMoveActionFlag("left", data[player.uid]) : this.layer_left.active = false);
        } else {
          this.layer_left.active = false;
          this.action_left = true;
        }
      },
      runMoveActionFlag: function runMoveActionFlag(direction, waterNum) {
        if (void 0 == waterNum) return;
        var flag, parent;
        switch (direction) {
         case "down":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = waterNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[0];
          this.action_down = true;
          break;

         case "right":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = waterNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[1];
          this.action_right = true;
          break;

         case "up":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = waterNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[2];
          this.action_up = true;
          break;

         case "left":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = waterNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[3];
          this.action_left = true;
        }
        this.setWaterFlag(parent, direction);
        var time = 1;
        var scaleBig = cc.scaleTo(time / 4, 1.4);
        var delay = cc.delayTime(time / 2);
        var scaleSmall = cc.scaleTo(time, .6);
        var fadeout = cc.fadeOut(time);
        var self = this;
        flag.stopAllActions();
        flag.runAction(cc.sequence(scaleBig, delay, cc.spawn(scaleSmall, fadeout), cc.callFunc(function() {
          flag.active = false;
          flag.scale = 1;
          flag.opacity = 255;
          self.CloseUI();
        }, this)));
      },
      setWaterFlag: function setWaterFlag(parent, direction) {
        var player = GameData.getPlayerByPos(direction);
        if (player) {
          var headNode = parent.getChildByTag(player.uid);
          headNode && headNode.getComponent("playerTemplate").setChaShuiIconShow(direction);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  "roomDissolve-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18df19/FuFLabawULNokLcL", "roomDissolve-shishi");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        null != GameData.game.onRoomDissolve && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.lastTimeLabel.string = "";
        this.openDisAgree = false;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 2; i <= GameData.room.joinermax; i++) {
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + i;
          hNode.x = this.headerNode.x + 200 * (i - 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.joinermax) for (var i = 0; i < GameData.room.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            if (2 == joiner.status) {
              console.log("joiner.status ==" + joiner.status);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = true;
            }
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("roomMain-shishi").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("roomMain-shishi").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("roomMain-shishi").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("roomMain-shishi").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  roomDissolve_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fe0cFaciJAELrkMqU9+iCM", "roomDissolve_changchun");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        null != GameData.game.onRoomDissolve && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.lastTimeLabel.string = "";
        this.openDisAgree = false;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 2; i <= GameData.room.opts.joinermax; i++) {
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + i;
          hNode.x = this.headerNode.x + 200 * (i - 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          var player = cc.find("header_" + index, this.headerNode.parent);
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            player.active = true;
            if (2 == joiner.status) {
              console.log("joiner.status ==" + joiner.status);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = true;
            }
          } else player.active = false;
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("roomMain_changchun").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("roomMain_changchun").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("roomMain_changchun").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("roomMain_changchun").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  roomDissolve_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "399a5/zgqlKM5BL2MAub3Ry", "roomDissolve_heb");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        null != GameData.game.onRoomDissolve && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.lastTimeLabel.string = "";
        this.openDisAgree = false;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 2; i <= GameData.room.opts.joinermax; i++) {
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + i;
          hNode.x = this.headerNode.x + 200 * (i - 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          var player = cc.find("header_" + index, this.headerNode.parent);
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            player.active = true;
            if (2 == joiner.status) {
              console.log("joiner.status ==" + joiner.status);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = true;
            }
          } else player.active = false;
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("roomMain_heb").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("roomMain_heb").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("roomMain_heb").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("roomMain_heb").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  roomDissolve_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "383edR5a8ZAIJSuq9N82qch", "roomDissolve_huadian");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        null != GameData.game.onRoomDissolve && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.lastTimeLabel.string = "";
        this.openDisAgree = false;
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 2; i <= GameData.room.opts.joinermax; i++) {
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + i;
          hNode.x = this.headerNode.x + 200 * (i - 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.opts.joinermax) for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          var player = cc.find("header_" + index, this.headerNode.parent);
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            player.active = true;
            if (2 == joiner.status) {
              console.log("joiner.status ==" + joiner.status);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = true;
            }
          } else player.active = false;
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.opts.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("roomMain_huadian").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("roomMain_huadian").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          this.node.getComponent("roomMain_huadian").showSummaryLayer();
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("roomMain_huadian").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  roomDissolve: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e167bDTLXFN/qZymDWP84Vf", "roomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.initHeaderUI();
        registEvent("onRoomDissolve", this, this.showDissolveText);
        this.lastTimeLabel.string = "";
        null != GameData.game.onRoomDissolve && GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin && sendEvent("onRoomDissolve", GameData.game.onRoomDissolve);
        this.openDisAgree = false;
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomDissolve", this, this.showDissolveText);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 200 * (i + 1);
        }
      },
      showPlayers: function showPlayers() {
        if (GameData.room.joinermax) for (var i = 0; i < GameData.room.joinermax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            if (2 == joiner.status) {
              console.log("joiner.status ==" + joiner.status);
              var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
              disNode.active = true;
            }
          }
        }
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showAgreeIcon: function showAgreeIcon(index, show) {
        var node = cc.find("header_" + index + "/duigou", this.headerNode.parent);
        node.active = show;
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/headimg", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var self = this;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            var name = joiner.name;
            createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
              self.openDisAgree = false;
            });
            this.openDisAgree = true;
            return;
          }
        }
      },
      resetUI: function resetUI() {
        this.agreeWaitNode.active = false;
        for (var i = 0; i < GameData.room.joinermax; i++) this.showAgreeIcon(i + 1, false);
      },
      showDissolveText: function showDissolveText(data) {
        GameData.showResult = false;
        var dissolove = data.detail;
        var disagreeNum = 0;
        this.alreadyAgree(true);
        this.resetUI();
        var isDis = dissolove.isStart;
        this.showPlayers();
        for (var uid in dissolove.select) {
          var text = "";
          var index = 0;
          for (var i = 0; i < GameData.joiners.length; i++) {
            var joiner = GameData.joiners[i];
            if (joiner && joiner.uid == uid) {
              index = i + 1;
              break;
            }
          }
          if ("apply" == dissolove.select[uid]) {
            text = "申请解散房间";
            for (var i = 0; i < GameData.joiners.length; i++) {
              var joiner = GameData.joiners[i];
              joiner && joiner.uid == uid && (this.dissolvePerson.string = "[" + joiner.name + "]发起投票解散对局");
            }
            this.showAgreeIcon(index, true);
          } else if ("agree" == dissolove.select[uid]) {
            text = "同意解散房间";
            this.showAgreeIcon(index, true);
          } else if ("disagree" == dissolove.select[uid]) {
            text = "拒绝解散房间";
            disagreeNum++;
            this.node.getComponent("roomMain").showdissolveLayer(1, 0);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != dissolove.select[uid] && "apply" != dissolove.select[uid] || uid != GameData.player.uid || this.alreadyAgree(false);
        }
        if (null == dissolove || Object.keys(dissolove).length <= 0) return;
        this.node.getComponent("roomMain").showdissolveLayer(1, 1);
        this.handleVoteResult(isDis);
        this.handleRoomDisbandTimer(dissolove);
      },
      handleVoteResult: function handleVoteResult(data) {
        if (false == data) {
          var self = this;
          this.node.getComponent("roomMain").showdissolveLayer(1, 0);
          var seq = cc.sequence(cc.delayTime(.1), cc.callFunc(function() {
            self.node.getComponent("roomMain").shutDissolveLayer();
          }));
          this.node.runAction(seq);
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolve: function requestDissolve() {
        soundMngr.instance.playAudioOther("button");
        RoomHandler.deleteRoom(GameData.room.id, "apply");
        this.node.getComponent("roomMain").showSettingLayer(1, 0);
      },
      requestDissolveAgree: function requestDissolveAgree() {
        soundMngr.instance.playAudioOther("button");
        RoomHandler.deleteRoom(GameData.room.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        soundMngr.instance.playAudioOther("button");
        RoomHandler.deleteRoom(GameData.room.id, "disagree");
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer(data) {
        this.totalTime = data.startTime;
        this.lastTime = data.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        this.lastTime--;
        var labelStr = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        this.lastTimeLabel.string = labelStr;
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(GameData.room.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/lost", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomEndClear: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "152dfFQiY5G0L+H93VlPRrZ", "roomEndClear");
    "use strict";
    var roomEndClear = cc.Class({
      extends: cc.Component,
      properties: {
        roomEndClear: {
          default: null,
          type: cc.Node
        },
        gainsLayer: {
          default: null,
          type: cc.Node
        },
        detailLayer: {
          default: null,
          type: cc.Node
        },
        gainsBtn: {
          default: null,
          type: cc.Node
        },
        detailBtn: {
          default: null,
          type: cc.Node
        },
        gainsSprite: cc.Node,
        detailSprite: cc.Node,
        roomInfoNode: cc.Node,
        bottomNode: cc.Node,
        UIPlayerRoundDetail: cc.Node,
        content: {
          default: null,
          type: cc.Node
        },
        roomID: {
          default: null,
          type: cc.Label
        },
        roundNum: {
          default: null,
          type: cc.Label
        },
        houseOwner: {
          default: null,
          type: cc.Label
        },
        time: {
          default: null,
          type: cc.Label
        },
        fonts: {
          default: [],
          type: cc.Font
        },
        playerRound: cc.Prefab,
        roundDetailPanel: cc.Prefab,
        playerRoundDetail: cc.Prefab
      },
      onLoad: function onLoad() {
        this.cumulativeScore = 0;
        this.playerAllScoreList = [];
        this.playerRoundScoreList = [];
        this.roundCumulativeScoreList = [];
        this.gainsLayer.active = true;
        this.detailLayer.active = false;
        this.gainsBtn.active = false;
        this.detailBtn.active = true;
        this.gainsSprite.active = true;
        this.detailSprite.active = false;
        this.roomInfoNode.active = true;
        this.bottomNode.active = true;
        this.curPageIndex = 0;
        this.initGainsLayer();
        this.initPlayerRoundScore();
        this.initDetailLayer();
        this.showRoomInfo();
        this.playAnimation();
        this.play();
      },
      onDestroy: function onDestroy() {},
      play: function play() {
        this.schedule(this.playAnimation, 1);
      },
      playAnimation: function playAnimation() {
        var topNode = cc.find("topNode", this.roomEndClear);
        var animate = cc.find("animate", topNode);
        animate.getComponent(cc.Animation).play("paomadengdonghua");
      },
      initGainsLayer: function initGainsLayer() {
        this.initPlayerAllScoreList();
        if (!this.playerRound) return;
        for (var key = 0; key < GameData13.room.joinermax; key++) {
          var newNode = cc.instantiate(this.playerRound);
          newNode.parent = this.content;
          this.setPlayerRound(newNode, key + 1, this.playerAllScoreList[key].score, GameData13.game.roundNum, this.playerAllScoreList[key].uid);
        }
      },
      initDetailLayer: function initDetailLayer() {
        var roundMax = 0;
        var pageMax = 14;
        if (!GameData13.isEmptyObject(GameData13.gemaEndResult)) {
          if (GameData13.gemaEndResult.history.length <= 0) {
            cc.log("GameData13.gemaEndResult.history is empty.");
            return;
          }
          roundMax = GameData13.gemaEndResult.history.length;
        }
        var content = cc.find("layer", this.detailLayer);
        var index = this.curPageIndex * pageMax;
        for (var ii = 0; ii < content.getChildrenCount(); ii++) {
          var tempNode = content.getChildren()[ii];
          tempNode && (tempNode.active = false);
        }
        for (var key = 0; key < pageMax; key++) {
          if (index + key >= roundMax) break;
          var node = content.getChildren()[key];
          if (void 0 == node) {
            node = cc.instantiate(this.roundDetailPanel);
            node.parent = content;
            var init_x = .05 * node.width;
            var init_y = content.height - 1.1 * node.height;
            var node_x = init_x + parseInt(key % 2) * (1.02 * node.width);
            var node_y = init_y - parseInt(key / 2) * (1.1 * node.height);
            node.position = cc.p(node_x, node_y);
          }
          node.tag = index + key;
          node.active = true;
          node.on(cc.Node.EventType.TOUCH_END, this.showUIPlayerRoundDetail, this);
          this.setRoundDetail(node, index + key, this.playerRoundScoreList[index + key], this.roundCumulativeScoreList[index + key]);
        }
        var lastBtn = cc.find("lastButton", this.detailLayer);
        var nextBtn = cc.find("nextButton", this.detailLayer);
        lastBtn.on(cc.Node.EventType.TOUCH_END, this.lastPageBtnClick, this);
        nextBtn.on(cc.Node.EventType.TOUCH_END, this.nextPageBtnClick, this);
      },
      showUIPlayerRoundDetail: function showUIPlayerRoundDetail(event) {
        cc.log("UIPlayerRoundDetail");
        var node_tag = parseInt(event.target.tag);
        this.UIPlayerRoundDetail.active = true;
        this.initPlayerRoundDetailLayer(node_tag);
      },
      closeUIPlayerRoundDetail: function closeUIPlayerRoundDetail() {
        this.UIPlayerRoundDetail.active = false;
      },
      initPlayerRoundDetailLayer: function initPlayerRoundDetailLayer(index) {
        var data = GameData13.gemaEndResult.history[index];
        if (void 0 == data || Object.keys(data).length <= 0) return;
        var soundLabel = cc.find("soundLabel", this.UIPlayerRoundDetail);
        soundLabel.getComponent(cc.Label).string = index + 1;
        var layer = cc.find("layer", this.UIPlayerRoundDetail);
        for (var ii = 0; ii < layer.getChildrenCount(); ii++) {
          var childNode = layer.getChildren()[ii];
          childNode && (childNode.active = false);
        }
        for (var key = 0; key < GameData13.joiners.length; key++) {
          var joinersData = GameData13.joiners[key];
          if (void 0 == joinersData) continue;
          var node = layer.getChildren()[key];
          if (void 0 == node) {
            node = cc.instantiate(this.playerRoundDetail);
            node.parent = layer;
            var init_x = 5;
            var init_y = layer.height - node.height;
            var node_x = init_x + parseInt(key % 2) * (node.width + 5);
            var node_y = init_y - parseInt(key / 2) * node.height;
            node.position = cc.p(node_x, node_y);
          }
          node.active = true;
          var pRDC = node.getComponent("playerRoundDetail");
          pRDC.id = key;
          pRDC.setRoundNum(index);
          pRDC.showPlayerRoundDetail();
        }
      },
      initPlayerAllScoreList: function initPlayerAllScoreList() {
        var allScore = 0;
        if (GameData13.isEmptyObject(GameData13.gemaEndResult)) cc.log("GameData13.gameEndResult is empty."); else {
          if (GameData13.gemaEndResult.score.length <= 0) {
            cc.log("GameData13.gameEndResult.score is empty.");
            return;
          }
          for (var i = 0; i < GameData13.room.joinermax; i++) {
            allScore = GameData13.gemaEndResult.score[GameData13.joiners[i].uid];
            this.playerAllScoreList.push({
              score: Number(allScore),
              uid: GameData13.joiners[i].uid
            });
          }
        }
        this.sortScoreArray(this.playerAllScoreList);
        cc.log("playerAllScoreList: ", JSON.stringify(this.playerAllScoreList));
      },
      initPlayerRoundScore: function initPlayerRoundScore() {
        if (void 0 == GameData13.gemaEndResult.history) {
          cc.log("GameData13.gameEndResult.history is undefined");
          return;
        }
        cc.log("..history:" + JSON.stringify(GameData13.gemaEndResult.history));
        var score = 0;
        if (GameData13.isEmptyObject(GameData13.gemaEndResult)) cc.log("GameData13.gameEndResult is empty."); else {
          if (GameData13.gemaEndResult.history.length <= 0) {
            cc.log("GameData13.gameEndResult.history is empty.");
            return;
          }
          for (var i = 0; i < GameData13.gemaEndResult.history.length; i++) {
            score = GameData13.gemaEndResult.history[i][GameData.player.uid].score;
            this.playerRoundScoreList.push(score);
            this.roundCumulativeScoreList.push(this.roundCumulativeScore(score));
          }
        }
      },
      sortScoreArray: function sortScoreArray(array) {
        array.sort(function(a, b) {
          return b.score - a.score;
        });
      },
      showPlayerHead: function showPlayerHead(parent, uid, winShow, mainShow) {
        var headNode = cc.find("player/headNode", parent);
        cc.loader.loadRes("shisanshui/prefab/poker13PlayerTemplate", function(err, prefab) {
          if (err) return;
          var head = cc.instantiate(prefab);
          headNode.addChild(head);
          head.getComponent("playerTemplate").setHeadIcon(GameData13.getJoinerByUid(uid).headimgurl);
          head.getComponent("playerTemplate").setSSSWinNodeActive(winShow);
          head.getComponent("playerTemplate").setSSSMainNodeActive(mainShow);
        });
      },
      showRoomInfo: function showRoomInfo() {
        isChinese(GameData13.getJoinerByUid(GameData13.owner).name) ? this.houseOwner.string = "房主:" + getShortStr(GameData13.getJoinerByUid(GameData13.owner).name, 5) : isChinese(GameData13.getJoinerByUid(GameData13.owner).name) || (this.houseOwner.string = "房主:" + getShortStr(GameData13.getJoinerByUid(GameData13.owner).name, 8));
        this.roomID.string = "房间:" + GameData13.getJoinerByUid(GameData13.owner).roomid;
        var roundNum = GameData13.game.roundNum > GameData13.room.roundmax ? GameData13.room.roundmax : GameData13.game.roundNum;
        this.roundNum.string = "局数:" + roundNum;
        var date = new Date(GameData13.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute = minute < 10 ? "0" + minute : minute;
        this.time.string = "开局时间:" + month + "-" + day + "  " + hours + minute;
        var lookCard_roomId = cc.find("roomID", this.UIPlayerRoundDetail);
        var lookCard_time = cc.find("time", this.UIPlayerRoundDetail);
        lookCard_roomId.getComponent(cc.Label).string = "房间:" + GameData13.getJoinerByUid(GameData13.owner).roomid;
        lookCard_time.getComponent(cc.Label).string = "开局时间:" + month + "-" + day + "  " + hours + minute;
      },
      roundCumulativeScore: function roundCumulativeScore(score) {
        this.cumulativeScore += score;
        return this.cumulativeScore;
      },
      setPlayerRound: function setPlayerRound(parent, rank, allScore, round, uid) {
        var roundNum = cc.find("roundNum", parent);
        var scoreLabel = cc.find("scoreLabel", parent);
        var name = cc.find("player/name", parent);
        var id = cc.find("player/id", parent);
        var playerRank = cc.find("player/rank", parent);
        isChinese(GameData13.getJoinerByUid(uid).name) ? name.getComponent(cc.Label).string = getShortStr(GameData13.getJoinerByUid(uid).name, 5) : isChinese(GameData13.getJoinerByUid(uid).name) || (name.getComponent(cc.Label).string = getShortStr(GameData13.getJoinerByUid(uid).name, 8));
        id.getComponent(cc.Label).string = uid;
        playerRank.getComponent(cc.Label).string = rank;
        roundNum.getComponent(cc.Label).string = round;
        if (allScore > 0) {
          scoreLabel.getComponent(cc.Label).font = this.fonts[0];
          scoreLabel.getComponent(cc.Label).string = "+" + allScore;
        } else if (allScore < 0) {
          scoreLabel.getComponent(cc.Label).font = this.fonts[1];
          scoreLabel.getComponent(cc.Label).string = allScore;
        } else if (0 == allScore) {
          scoreLabel.getComponent(cc.Label).font = this.fonts[2];
          scoreLabel.getComponent(cc.Label).string = allScore;
        }
        var winShow = false, mainShow = false;
        1 == rank && (winShow = true);
        uid == GameData13.owner && (mainShow = true);
        this.showPlayerHead(parent, uid, winShow, mainShow);
      },
      setRoundDetail: function setRoundDetail(parent, idx, score, cumulativeScore) {
        var roundDetail = parent.getComponent("roundDetail");
        roundDetail.id = idx;
        roundDetail.setRoundNumString(idx + 1);
        roundDetail.setScoreNodeString(score);
        roundDetail.setAllScoreNodeString(cumulativeScore);
      },
      lastPageBtnClick: function lastPageBtnClick() {
        cc.log("..last");
        if (this.curPageIndex <= 0) {
          createSSSMoveMessage("已是第一页");
          return;
        }
        this.curPageIndex--;
        this.initDetailLayer();
      },
      nextPageBtnClick: function nextPageBtnClick() {
        cc.log("..next");
        var length = GameData13.gemaEndResult.history.length;
        var pageSum = parseInt(length / 14);
        pageSum >= 1 && (length % 14 > 0 ? pageSum++ : null);
        if (this.curPageIndex >= pageSum - 1) {
          createSSSMoveMessage("已是最后页");
          return;
        }
        this.curPageIndex++;
        this.initDetailLayer();
      },
      onGainsBtnCliked: function onGainsBtnCliked(evt) {
        this.detailLayer.active = false;
        this.gainsLayer.active = true;
        this.gainsBtn.active = false;
        this.detailBtn.active = true;
        this.gainsSprite.active = true;
        this.detailSprite.active = false;
        this.roomInfoNode.active = true;
        this.bottomNode.active = true;
      },
      onDetailBtnClied: function onDetailBtnClied(evt) {
        this.gainsLayer.active = false;
        this.detailLayer.active = true;
        this.gainsBtn.active = true;
        this.detailBtn.active = false;
        this.gainsSprite.active = false;
        this.detailSprite.active = true;
        this.roomInfoNode.active = false;
        this.bottomNode.active = false;
      },
      onBackBtnClied: function onBackBtnClied(evt) {
        GameData13.clearAllGameData();
        GameData.player.roomid = void 0;
        GameData.SetLayerData.soundOpen = true;
        cc.director.loadScene("home");
      }
    });
    module.exports = roomEndClear;
    cc._RF.pop();
  }, {} ],
  roomHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "196d6LNNThDMaMnHbMhkkya", "roomHandler");
    "use strict";
    var tdk_roomData = require("tdkRoomData");
    var hongzhongData = require("hongzhongData");
    var ZJH_roomData = require("ZJH-RoomData");
    var hhdz_data = require("hhdz_data");
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var roomHandler = {
      room: {},
      coinData: {},
      scores: {},
      players: [],
      onlines: [],
      readyData: {},
      readyCountDown: 0,
      dissolveData: {},
      playGame: {},
      recordData: []
    };
    module.exports = roomHandler;
    roomHandler.createRoom = function(createData) {
      var self = this;
      openView("Loading");
      GameNet.getInstance().request("room.roomHandler.createRoom", createData, function(ret) {
        if (!ret || void 0 == ret.result) {
          messageBoxWithoutCB("_createRoomCallBack error");
          closeView("Loading");
          return;
        }
        if (ret.result != errorCode.Success) {
          var errorChar = "";
          switch (ret.result) {
           case errorCode.LessCard:
            errorChar = "房卡不足.";
            break;

           case errorCode.NoJoinThisClub:
            errorChar = "抱歉!您不在该俱乐部.";
            break;

           case errorCode.AgentMoneyNotEnough:
            errorChar = "代理钻石不足,请通知代理及时充值.";
            break;

           case errorCode.AgentRoomMax:
            errorChar = "同时只能代开20个房间.";
            break;

           case errorCode.LessPoint:
            errorChar = "积分不足.";
            break;

           case errorCode.LessCoin:
            errorChar = "金币不足.";
            break;

           default:
            errorChar = "创建房间失败 " + ret.result;
          }
          messageBoxWithoutCB(errorChar);
          closeView("Loading");
          return;
        }
        if (ret.isAgentRoom) {
          createMoveMessage("代开房间成功.");
          openView("agentPanel");
          closeView("Loading");
          self.reqAgentRoom();
          self.reqAgentResultRoom();
          return;
        }
        if (!ret.roomid) {
          messageBoxWithoutCB("createRoom cb error roomid");
          closeView("Loading");
          return;
        }
        GameData.saveCreateRoomOpts();
        self.enterRoom(ret.roomid);
      });
    };
    roomHandler.enterRoom = function(roomid) {
      var num = Number(roomid);
      if (num < 1e5 || num > 999999) {
        messageBoxWithoutCB("房间号无效");
        closeView("Loading");
        return;
      }
      var enterData = {
        roomid: num,
        posInfo: getPosInfo()
      };
      openView("Loading");
      GameNet.getInstance().request("room.roomHandler.enterRoom", enterData, function(ret) {
        textClipboard("1");
        if (!ret || void 0 == ret.result) {
          closeView("Loading");
          messageBoxWithoutCB("enterRoom without ret");
          return;
        }
        if (ret.result != errorCode.Success) {
          var errorChar = "";
          switch (ret.result) {
           case errorCode.roomNotFound:
            errorChar = "房间不存在.";
            break;

           case errorCode.roomFull:
            errorChar = "房间已满.";
            break;

           case errorCode.LessCard:
            errorChar = "房卡不足.";
            break;

           case errorCode.LessPoint:
            errorChar = "积分不足.";
            break;

           case errorCode.NoJoinThisClub:
            errorChar = "抱歉!您不在该俱乐部.";
            break;

           case errorCode.LessCoin:
            errorChar = "金币不足.";
            break;

           default:
            errorChar = "进入房间失败";
          }
          closeView("Loading");
          createMoveMessage(errorChar);
        }
        GameData.initGameData();
      });
    };
    roomHandler.quitRoom = function(roomid) {
      GameNet.getInstance().request("room.roomHandler.quitRoom", {
        roomid: roomid
      }, function(rtn) {
        if (rtn.result == errorCode.Success) {
          GameData.player.roomid = void 0;
          cc.director.loadScene("home");
        }
      });
    };
    roomHandler.deleteRoom = function(roomid, action) {
      GameNet.getInstance().request("room.roomHandler.disbandRoom", {
        roomid: roomid,
        action: action
      }, function(rtn) {});
    };
    roomHandler.setReady = function() {
      GameNet.getInstance().request("room.roomHandler.ready", {}, function(rtn) {});
    };
    roomHandler.reqAgentRoom = function() {
      GameNet.getInstance().request("game.playerHandler.reqAgentRoom", {}, function(rtn) {
        GameData.AgentRoomsData = rtn;
        sendEvent("refreshAgentRoomUINew");
      });
    };
    roomHandler.reqAgentResultRoom = function() {
      GameNet.getInstance().request("game.playerHandler.AgentResultRoom", {}, function(rtn) {
        GameData.AgentResultRoom = rtn;
        sendEvent("refreshAgentRoomUIResult");
      });
    };
    roomHandler.getRoomData = function() {
      return this.room;
    };
    roomHandler.getPlayersData = function() {
      return this.players;
    };
    roomHandler.getPlayersCoin = function() {
      var playersCoin = {};
      for (var key in this.players) this.players[key] && (playersCoin[this.players[key].uid] = this.players[key].coin);
      return playersCoin;
    };
    roomHandler.getPlayerByUid = function(uid) {
      for (var i = 0; i < GameData.joiners.length; i++) {
        var player = GameData.joiners[i];
        if (player && player.uid == uid) return player;
      }
      return null;
    };
    roomHandler.getPlayerPosByUid = function(uid) {
      for (var i = 0; i < GameData.joiners.length; i++) if (GameData.joiners[i] && GameData.joiners[i].uid && GameData.joiners[i].uid == uid) return i;
      return null;
    };
    roomHandler.getLocalPosition = function(index) {
      var selfIndex = 0;
      var temp = [];
      for (var i = 0; i < GameData.joiners.length; i++) temp.push(i);
      var selfIndx = this.getPlayerPosByUid(GameData.player.uid);
      var prev = temp.slice(temp.indexOf(selfIndx));
      prev = prev.concat(temp.slice(0, temp.indexOf(selfIndx)));
      return prev.indexOf(index);
    };
    roomHandler.getScoreData = function() {
      return this.scores;
    };
    roomHandler.getOnLinesData = function() {
      return this.onlines;
    };
    roomHandler.getRoomReadyData = function() {
      return this.readyData;
    };
    roomHandler.getRoomDissolveData = function() {
      return this.dissolveData;
    };
    roomHandler.getRecordData = function() {
      return this.recordData;
    };
    roomHandler.getCoinData = function() {
      return this.coinData;
    };
    roomHandler.getPlayGame = function() {
      return this.playGame;
    };
    roomHandler.getPlayGamePlayerArr = function() {
      var arr = [];
      for (var i = 0; i < GameData.joiners.length; i++) for (var key in this.playGame) GameData.joiners[i] && GameData.joiners[i].uid == key && this.playGame[key] > 0 && arr.push(parseInt(key));
      return arr;
    };
    roomHandler.isPlayerOnline = function(uid) {
      return -1 != this.onlines.indexOf(uid);
    };
    roomHandler.isPlayGameByUid = function(uid) {
      for (var key in this.playGame) if (key == uid) return this.playGame[key] > 0;
    };
    roomHandler.onRoomInfoSetData = function(data) {
      if (void 0 == data) return;
      this.room = data.room;
      this.scores = data.scores;
      this.players = data.players;
      this.onlines = data.onlines;
      this.playGame = data.playerGames;
      void 0 == data.record || (this.recordData = data.record);
      GameData.room = data.room;
      GameData.players = data.players;
      GameData.setGameType(data.room.opts.gameType);
      GameData.player.roomid = data.room.id;
      GameData.client.gameType = data.room.opts.gameType;
      GameData.joiners = [];
      for (var i = 0; i < data.players.length; i++) {
        var player = data.players[i];
        GameData.joiners[i] = player;
      }
      GameData.room.status == gameDefine.RoomState.GAMEING && GameData.room.opts.gameType == gameDefine.GameType.Game_MJ_HuaDian && (GameData.game.gameStart = true);
      data.room.opts.gameType == gameDefine.GameType.Game_Poker_TianjinDDZ ? GameDataTJDDZ.setPosition() : data.room.opts.gameType == gameDefine.GameType.Game_Poker_DDZ ? GameDataDDZ.setPosition() : data.room.opts.gameType == gameDefine.GameType.Game_Poker_paodekuai ? GameDataPDK.setPosition() : data.room.opts.gameType == gameDefine.GameType.Game_Poker_ZJH ? ZJH_roomData.setPosition() : GameData.setPosition();
      GameData.room.status <= gameDefine.RoomState.READY && profileHuaDian.initGameData();
    };
    roomHandler.onPrepareInfoSetData = function(data) {
      if (void 0 == data) return;
      this.readyData = data;
    };
    roomHandler.onRoomDissolveSetData = function(data) {
      if (void 0 == data) return;
      this.dissolveData = data;
    };
    roomHandler.getCurGameDataOnType = function() {
      if (this.room && this.room.opts) switch (this.room.opts.gameType) {
       case gameDefine.GameType.Game_Mj_HZ:
        return hongzhongData;

       default:
        return;
      }
      return;
    };
    roomHandler.registMessage = function() {
      cc.log("....roomHandler registMessage.");
      var self = this;
      GameNet.getInstance().setCallBack("onRoomMsg", function(data) {
        self.room = data.room;
        self.scores = data.scores;
        WriteLog("onRoomMsg:" + JSON.stringify(data));
        GameData.room = data.room;
        GameData.players = data.players;
        GameData.setGameType(data.room.opts.gameType);
        GameData.player.roomid = data.room.id;
        GameData.joiners.splice(0, GameData.joiners.length);
        for (var uid in data.players) {
          var player = data.players[uid];
          GameData.joiners[player.seat] = player;
        }
        GameData.setPosition();
        GameData.allScores = data.scores;
        GameData.showResult = true;
        sendEvent("onRoomMsg", data);
      });
      GameNet.getInstance().setCallBack("onRoomInfo", function(data) {
        self.onRoomInfoSetData(data);
        sendEvent("onRoomInfo", data);
      });
      GameNet.getInstance().setCallBack("onRoomEnter", function(data) {
        var sceneName, gameType = self.room.opts.gameType;
        switch (gameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          sceneName = "table";
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          sceneName = "table-shishi";
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          profileHuaDian.registAllMessage();
          sceneName = "table-huadian1";
          break;

         case gameDefine.GameType.Game_Mj_CC:
          profileChangChun.registAllMessage();
          sceneName = "table-changchun";
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          profileHeb.registAllMessage();
          sceneName = "table-heb";
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          sceneName = "mahjong";
          break;

         case gameDefine.GameType.Game_niu_niu:
          sceneName = "table-niuNiu";
          break;

         case gameDefine.GameType.Game_Niu_Niu_10:
          sceneName = "table-tenNiuNiu";
          break;

         case gameDefine.GameType.Game_Niu_Hundred:
          sceneName = "hundredNiuNiu";
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          sceneName = "table-DDZ";
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          sceneName = "table-TJDDZ";
          break;

         case gameDefine.GameType.Game_TDK:
          sceneName = "table-TDK";
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          sceneName = "teble-shisanshui";
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          sceneName = "table-PDK";
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          sceneName = "table-ZJH";
          break;

         case gameDefine.GameType.Game_Poker_HHDZ:
          hhdz_data.registMessage_hhdz();
          sceneName = "table-hhdz";
          break;

         default:
          return;
        }
        if (void 0 == sceneName) return;
        GameData.roomClose = false;
        if (sceneName != cc.director.getScene().name) cc.director.loadScene(sceneName); else {
          closeView("UIMatch");
          closeView("Loading");
        }
      });
      GameNet.getInstance().setCallBack("onRoomReadyInfo", function(data) {
        GameData.game.onRoomReadyInfo.data = data;
        self.onPrepareInfoSetData(data);
        sendEvent("onRoomReadyInfo", data);
      });
      GameNet.getInstance().setCallBack("onRoomQuit", function(data) {
        sendEvent("onRoomQuit", data);
        data.uid == GameData.player.uid && cc.director.loadScene("home");
      });
      GameNet.getInstance().setCallBack("onRoomClose", function(data) {
        GameData.roomClose = true;
        sendEvent("onRoomClose", data);
      });
      GameNet.getInstance().setCallBack("onRoomDissolve", function(data) {
        self.onRoomDissolveSetData(data);
        GameData.game.onRoomDissolve = data;
        sendEvent("onRoomDissolve", data);
      });
      GameNet.getInstance().setCallBack("onCreatorQuit", function(data) {
        sendEvent("onCreatorQuit", data);
      });
      GameNet.getInstance().setCallBack("onJoinerLost", function(data) {
        sendEvent("onJoinerLost", data);
      });
      GameNet.getInstance().setCallBack("onJoinerConnect", function(data) {
        GameData.joinContact = data;
        sendEvent("onJoinerConnect", data);
      });
      GameNet.getInstance().setCallBack("onPrepareInfo", function(data) {
        self.readyCountDown = data.countdown;
        self.onPrepareInfoSetData(data.readyInfo);
        GameDataTJDDZ.game.onRoomReadyInfo = data.readyInfo;
        GameDataDDZ.game.onRoomReadyInfo = data.readyInfo;
        tdk_roomData.onRoomReadyInfo = data.readyInfo;
        tdk_roomData.close = false;
        ZJH_roomData.onRoomReadyInfo = data.readyInfo;
        self.readyCountDown > 0 && sendEvent("onReadyCountDown");
        sendEvent("onPrepareInfo", data.readyInfo);
      });
      GameNet.getInstance().setCallBack("onGameCoin", function(data) {
        self.coinData = data;
        GameData.scores = data;
        GameData.game.gameStart = false;
        GameData.player.isXiangGong = false;
        var temp = data;
        temp.zhuangUid = GameData.game.zhuangUid;
        GameData.JushuScore.push(temp);
        switch (GameData.room.opts.gameType) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          sendEvent("onGameScore", data);
          break;

         case gameDefine.GameType.Game_Poker_DDZ:
          sendEvent("coinEndEvent", data);
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
          data.coins[GameData.player.uid] ? sendEvent("coinEndEvent", data) : sendEvent("onShowSummary");
          break;

         case gameDefine.GameType.Game_Niu_Hundred:
          sendEvent("niuhun-onGameCoin", data);
          break;

         default:
          return;
        }
      });
      GameNet.getInstance().setCallBack("alertLottery", function(data) {
        if (!data) return;
        cc.log("data = " + JSON.stringify(data.detail));
        data && (GameData.room.opts.gameType == gameDefine.GameType.Game_niu_niu || GameData.room.opts.gameType == gameDefine.GameType.Game_Niu_Niu_10 ? sendEvent("alertLottery") : openView("GetLottery"));
      });
      GameNet.getInstance().setCallBack("dynChat", function(data) {
        sendEvent("dynChat", data);
      });
    };
    cc._RF.pop();
  }, {
    "ZJH-RoomData": "ZJH-RoomData",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    hhdz_data: "hhdz_data",
    hongzhongData: "hongzhongData",
    tdkRoomData: "tdkRoomData"
  } ],
  "roomMain-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "21fbeHgeUZFUbrB+J447ro/", "roomMain-shishi");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node,
        layer_chaShui: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("onGameScore", this, this.showResultLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("startWater", this, this.openUIChaShui);
        registEvent("initCards", this, this.closeUIChaShui);
        RuleHandler.instance.setGameType(GameData.client.gameType);
        GameData.game.gameStart ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        1 == GameData.openScore && this.showResultDirectly();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(3e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > 2 * this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        GameData.game.zhuangUid > 0 ? this.showTableUI(true) : this.showTableUI(false);
        var playStr = "";
        GameData.room.opts && (playStr = getRuleStrShiShi(GameData.room.opts));
        var rule_label = cc.find("layer_table/term", this.node);
        rule_label && (rule_label.getComponent("cc.Label").string = playStr);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("onGameScore", this, this.showResultLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("startWater", this, this.openUIChaShui);
        unregistEvent("initCards", this, this.closeUIChaShui);
        GameData.initRoomData();
      },
      openUIChaShui: function openUIChaShui() {
        this.showTableUI(false);
      },
      closeUIChaShui: function closeUIChaShui() {
        this.showTableUI(true);
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/wait");
      },
      showTableLayer: function showTableLayer() {
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/wait");
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, 2);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        true == GameData.contact && GameData.joinContact.uid == GameData.player.uid, GameData.contact = false;
        this.node.getComponent("roomResult-shishi").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("SettingsPanel-shishi") : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    ruleHandler: "ruleHandler"
  } ],
  roomMain_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57b9f8CkpRIUJwarZ7UKXMt", "roomMain_changchun");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        cc.log("onEnter 长春 table");
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("onGameReady", this, this.showTableLayer);
        registEvent("onMahjongRunEnd", this, this.showResultLayer);
        registEvent("onHuaDianMahjongReconnecet", this, this.showTableLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("onStarPiao", this, this.openUIPiao);
        registEvent("initCards", this, this.closeUIPiao);
        RuleHandler.instance.setGameType(GameData.client.gameType);
        GameData.room.status >= gameDefine.RoomState.READY ? this.showTableLayer() : this.showWaitLayer();
        GameData.room.status > gameDefine.RoomState.READY ? this.showTableUI(true) : this.showTableUI(false);
        this.lostMessage = false;
        1 == GameData.openScore && this.showResultDirectly();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(2e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > 4 * this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        GameData.game.zhuangUid > 0 ? this.showTableUI(true) : this.showTableUI(false);
        var playStr = "";
        GameData.room.opts && (playStr = getRuleStrCC(GameData.room.opts));
        var rule_label = cc.find("layer_table/term", this.node);
        rule_label && (rule_label.getComponent("cc.Label").string = playStr);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("onMahjongRunEnd", this, this.showResultLayer);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.showTableLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("onStarPiao", this, this.openUIPiao);
        unregistEvent("initCards", this, this.closeUIPiao);
        cc.log("roomMain-destroy");
        GameData.initRoomData();
        profileHuaDian.initRoomData();
      },
      showLayer: function showLayer() {
        GameData.room.status > gameDefine.RoomState.READY ? this.showTableUI(true) : this.showTableUI(false);
      },
      openUIPiao: function openUIPiao() {
        var flag = true;
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        this.showTableUI(false);
      },
      closeUIPiao: function closeUIPiao() {
        this.showTableUI(true);
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showTableLayer: function showTableLayer() {
        cc.log("~~~~~~~~~~~~~~show table layer and hide wait layer~~~~~~~~~~~~~~~~~");
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
        if (GameData.room.status == gameDefine.RoomState.READY) {
          this.showTableUI(!flag);
          MjHandler.getInstance().requestReady(function(res) {});
        }
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, 2);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        true == GameData.contact && GameData.joinContact.uid == GameData.player.uid, GameData.contact = false;
        this.node.getComponent("roomResult_changchun").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("SettingsPanel_CC", gameDefine.GameType.Game_Mj_CC) : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showJoinerConnect: function showJoinerConnect() {
        this.showLayer();
      },
      showChat: function showChat() {
        if (inCD(2e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomMain_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22361P/X6JE340TrO5oc6/b", "roomMain_heb");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        cc.log("onEnter 哈尔滨 table");
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("onGameReady", this, this.showTableLayer);
        registEvent("onMahjongRunEnd", this, this.showResultLayer);
        registEvent("onHuaDianMahjongReconnecet", this, this.showTableLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("onStarPiao", this, this.openUIPiao);
        registEvent("initCards", this, this.closeUIPiao);
        RuleHandler.instance.setGameType(GameData.client.gameType);
        GameData.game.gameStart ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        1 == GameData.openScore && this.showResultDirectly();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(2e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > 2 * this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        GameData.game.zhuangUid > 0 ? this.showTableUI(true) : this.showTableUI(false);
        var playStr = "";
        GameData.room.opts && (playStr = getRuleStrCC(GameData.room.opts));
        var rule_label = cc.find("layer_table/term", this.node);
        rule_label && (rule_label.getComponent("cc.Label").string = playStr);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("onMahjongRunEnd", this, this.showResultLayer);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.showTableLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("onStarPiao", this, this.openUIPiao);
        unregistEvent("initCards", this, this.closeUIPiao);
        cc.log("roomMain-destroy");
        GameData.initRoomData();
        profileHuaDian.initRoomData();
      },
      openUIPiao: function openUIPiao() {
        var flag = true;
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        this.showTableUI(false);
      },
      closeUIPiao: function closeUIPiao() {
        this.showTableUI(true);
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showTableLayer: function showTableLayer() {
        cc.log("~~~~~~~~~~~~~~show table layer and hide wait layer~~~~~~~~~~~~~~~~~");
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
        if (GameData.room.status == gameDefine.RoomState.READY) {
          this.showTableUI(!flag);
          MjHandler.getInstance().requestReady(function(res) {});
        }
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, 2);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        true == GameData.contact && GameData.joinContact.uid == GameData.player.uid, GameData.contact = false;
        this.node.getComponent("roomResult_heb").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("SettingsPanel_CC", gameDefine.GameType.Game_Mj_CC) : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(2e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomMain_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9cf6dR5iVFDaqN3nM/N5yL6", "roomMain_huadian");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        settingLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("onGameReady", this, this.showTableLayer);
        registEvent("onMahjongRunEnd", this, this.showResultLayer);
        registEvent("onHuaDianMahjongReconnecet", this, this.showTableLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("onStarPiao", this, this.openUIPiao);
        registEvent("initCards", this, this.closeUIPiao);
        RuleHandler.instance.setGameType(GameData.client.gameType);
        cc.log("gameStart:" + GameData.game.gameStart);
        WriteLog("gameStart:" + GameData.game.gameStart);
        GameData.room.status > gameDefine.RoomState.WAIT ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        1 == GameData.openScore && this.showResultDirectly();
        Object.keys(profileHuaDian.PiaoInfo).length > 0 && this.openUIPiao();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(2e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > 2 * this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        GameData.game.zhuangUid > 0 ? this.showTableUI(true) : this.showTableUI(false);
        var playStr = "";
        GameData.room.opts && (playStr = getRuleStrHd(GameData.room.opts));
        var rule_label = cc.find("layer_table/term", this.node);
        rule_label && (rule_label.getComponent("cc.Label").string = playStr);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("onMahjongRunEnd", this, this.showResultLayer);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.showTableLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("onStarPiao", this, this.openUIPiao);
        unregistEvent("initCards", this, this.closeUIPiao);
        WriteLog("roomMain-destroy");
        GameData.initRoomData();
        profileHuaDian.initRoomData();
      },
      openUIPiao: function openUIPiao() {
        var flag = true;
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        profileHuaDian.PiaoInfo.runState > HuaDian.RunStateEmnum.PIAO ? this.showTableUI(flag) : this.showTableUI(!flag);
      },
      closeUIPiao: function closeUIPiao() {
        this.showTableUI(true);
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showTableLayer: function showTableLayer() {
        cc.log("~~~~~~~~~~~~~~show table layer and hide wait layer~~~~~~~~~~~~~~~~~");
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
        if (GameData.room.status == gameDefine.RoomState.READY) {
          this.showTableUI(!flag);
          MjHandler.getInstance().requestReady(function(res) {});
        }
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, 2);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        true == GameData.contact && GameData.joinContact.uid == GameData.player.uid, GameData.contact = false;
        this.node.getComponent("roomResult_huadian").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        1 == data ? openView("SettingsPanel_HD", gameDefine.GameType.Game_MJ_HuaDian) : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.dissolveLayer.active = false;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(2e3)) return;
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b661c/afldBWL5J0J1ppnYQ", "roomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        tableUI: {
          default: [],
          type: cc.Node
        },
        resultLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        debugLayer: cc.Node,
        talkBtn: cc.Button,
        yuyinNode: cc.Node,
        yuyinShortNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.showTableLayer);
        registEvent("onGameScore", this, this.showResultLayer);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
        registEvent("onServerNotice", this, handlerServerNotice);
        scheduleLamp(this);
        RuleHandler.instance.setGameType(GameData.client.gameType);
        GameData.game.gameStart ? this.showTableLayer() : this.showWaitLayer();
        this.lostMessage = false;
        (1 == GameData.openScore || GameData.game.winnerUid > 0) && this.showResultDirectly();
        var self = this;
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("TOUCH_START");
          WriteLog("TOUCH_START : ");
          if (inCD(1e3)) return;
          console.log("TOUCH_START and");
          yunwaStartTalk();
          self.yuyinNode.active = true;
          GameData.isPlayVioce = true;
          self.yuyinNode.getComponent(cc.Animation).play("yuyin");
          cc.audioEngine.pauseAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          console.log("TOUCH_MOVE");
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          if (distance > this.width) {
            self.yuyinNode.getComponent(cc.Animation).play("CancelSend");
            GameData.isPlayVioce = false;
          }
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_END, function() {
          console.log("TOUCH_END");
          WriteLog("TOUCH_END : ");
          yunwaStopTalk();
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
        this.talkBtn.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          console.log("TOUCH_CANCEL");
          yunwaStopTalk();
          GameData.isPlayVioce = false;
          self.yuyinNode.active = false;
          cc.audioEngine.resumeAll();
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.showTableLayer);
        unregistEvent("onGameScore", this, this.showResultLayer);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
        unregistEvent("onServerNotice", this, handlerServerNotice);
        GameData.initRoomData();
      },
      showWaitLayer: function showWaitLayer() {
        var flag = true;
        this.uiWaitLayer.active = flag;
        this.showTableUI(!flag);
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showTableLayer: function showTableLayer() {
        var flag = true;
        this.showTableUI(flag);
        this.uiWaitLayer.active = !flag;
        this.resultLayer.active = !flag;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          if (GameData.game.gameStart) return;
          self.showResultDirectly();
        }, 2);
      },
      showTableUI: function showTableUI(show) {
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultDirectly: function showResultDirectly() {
        var flag = true;
        this.resultLayer.active = flag;
        this.uiWaitLayer.active = !flag;
        this.showTableUI(!flag);
        true == GameData.contact && GameData.joinContact.uid == GameData.player.uid, GameData.contact = false;
        this.node.getComponent("roomResult").onShow();
      },
      showSettingLayer: function showSettingLayer(evt, data) {
        soundMngr.instance.playAudioOther("button");
        sendEvent("runlamp");
        1 == data ? openView("SettingsPanel-tianjin") : this.settingLayer.active = false;
      },
      showdissolveLayer: function showdissolveLayer(evt, data) {
        soundMngr.instance.playAudioOther("button");
        if (1 == data) {
          this.dissolveLayer.active = true;
          this.dissolveLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
            evt.stopPropagation();
          });
        } else this.dissolveLayer.active = false;
      },
      showSummaryLayer: function showSummaryLayer() {
        this.summaryLayer.active = true;
        this.summaryLayer.on(cc.Node.EventType.TOUCH_START, function(evt) {
          evt.stopPropagation();
        });
        sendEvent("onShowSummary");
        GameData.player.uid == GameData.room.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      shutDissolveLayer: function shutDissolveLayer() {
        true == GameData.showResult || this.showSummaryLayer();
      },
      showDebugLayer: function showDebugLayer() {
        this.debugLayer.active = !this.debugLayer.active;
      },
      showJoinerLost: function showJoinerLost(data) {},
      showChat: function showChat() {
        if (inCD(3e3)) return;
        soundMngr.instance.playAudioOther("button");
        openView("ChatPanel");
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        WriteLog("YVShortRecordCallback : ");
        this.yuyinShortNode.getComponent(cc.Animation).play("ShortRecoed");
        this.yuyinShortNode.getComponent("HideComponent").show(1);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    ruleHandler: "ruleHandler"
  } ],
  roomNumView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2bce4wdZUFJ7bV1pHDJ8cJE", "roomNumView");
    "use strict";
    var roomUtil = require("roomUtil");
    var roomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        roomNum: cc.Label
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        this.showRoomNum();
      },
      showRoomNum: function showRoomNum() {
        var roomData = roomHandler.getRoomData();
        if (null == roomData) return;
        this.roomNum.string = roomUtil.getRoomString(roomData.id);
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler",
    roomUtil: "roomUtil"
  } ],
  roomPiao_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ed0cUeXZhAz6Xm8Z66xZnz", "roomPiao_changchun");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_up: cc.Node,
        layer_down: cc.Node,
        layer_left: cc.Node,
        layer_right: cc.Node,
        ok_btn: cc.Button,
        no_btn: cc.Button,
        all_btn: cc.Button,
        headNodes: {
          default: [],
          type: cc.Node
        },
        action_up: false,
        action_down: false,
        action_left: false,
        action_right: false
      },
      onLoad: function onLoad() {
        registEvent("onStarPiao", this, this.UIControl);
        registEvent("onMahjongRunEnd", this, this.ShowUI);
        Object.keys(profileHuaDian.PiaoInfo).length > 0 && profileHuaDian.PiaoInfo.runState == HuaDian.RunStateEmnum.PIAO && this.showPiaoState();
        var self = this;
        this.ok_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendPiaoMes(1);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
          self.all_btn.node.active = false;
        });
        this.no_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendPiaoMes(0);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
          self.all_btn.node.active = false;
        });
        this.all_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendPiaoMes(2);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
          self.all_btn.node.active = false;
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("onStarPiao", this, this.UIControl);
      },
      sendPiaoMes: function sendPiaoMes(waterNum) {
        MjHandler.getInstance().requestPiao(waterNum, function(res) {});
      },
      ShowUI: function ShowUI() {
        this.setUI(true);
        this.action_up = false;
        this.action_down = false;
        this.action_left = false;
        this.action_right = false;
        this.setPiaoFlag(this.headNodes[0], "down");
        this.setPiaoFlag(this.headNodes[1], "right");
        this.setPiaoFlag(this.headNodes[2], "up");
        this.setPiaoFlag(this.headNodes[3], "left");
      },
      CloseUI: function CloseUI() {
        true == this.action_up && true == this.action_down && true == this.action_left && true == this.action_right && this.setUI(false);
      },
      setUI: function setUI(show) {
        this.node.active = show;
      },
      UIControl: function UIControl() {
        this.showPiaoState();
      },
      showPiaoState: function showPiaoState() {
        cc.log("...data...:" + JSON.stringify(profileHuaDian.PiaoInfo));
        var data = profileHuaDian.PiaoInfo;
        this.ok_btn.node.active = false;
        this.no_btn.node.active = false;
        this.all_btn.node.active = false;
        if (void 0 == profileHuaDian.PiaoInfo) return;
        var player = GameData.getPlayerByPos("down");
        var piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
        if (player && -1 == piaoState) {
          this.ok_btn.node.active = true;
          this.no_btn.node.active = true;
          this.all_btn.node.active = true;
        }
        if (player) {
          this.layer_down.active = true;
          cc.find("down/choice", this.node).active = false;
          cc.find("down/no", this.node).active = false;
          cc.find("down/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_down ? this.runMoveActionFlag("down", piaoState) : this.layer_down.active = false);
        } else {
          this.layer_down.active = false;
          this.action_down = true;
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
          this.layer_right.active = true;
          cc.find("right/choice", this.node).active = true;
          cc.find("right/no", this.node).active = false;
          cc.find("right/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_right ? this.runMoveActionFlag("right", piaoState) : this.layer_right.active = false);
        } else {
          this.layer_right.active = false;
          this.action_right = true;
        }
        player = GameData.getPlayerByPos("up");
        if (player) {
          piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
          this.layer_up.active = true;
          cc.find("up/choice", this.node).active = true;
          cc.find("up/no", this.node).active = false;
          cc.find("up/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_up ? this.runMoveActionFlag("up", piaoState) : this.layer_up.active = false);
        } else {
          this.layer_up.active = false;
          this.action_up = true;
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
          this.layer_left.active = true;
          cc.find("left/choice", this.node).active = true;
          cc.find("left/no", this.node).active = false;
          cc.find("left/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_left ? this.runMoveActionFlag("left", piaoState) : this.layer_left.active = false);
        } else {
          this.layer_left.active = false;
          this.action_left = true;
        }
      },
      runMoveActionFlag: function runMoveActionFlag(direction, piaoNum) {
        if (void 0 == piaoNum) return;
        var flag, parent;
        switch (direction) {
         case "down":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[0];
          this.action_down = true;
          break;

         case "right":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[1];
          this.action_right = true;
          break;

         case "up":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[2];
          this.action_up = true;
          break;

         case "left":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[3];
          this.action_left = true;
        }
        this.setPiaoFlag(parent, direction);
        var time = 1;
        var scaleBig = cc.scaleTo(time / 4, 1.4);
        var delay = cc.delayTime(time / 2);
        var scaleSmall = cc.scaleTo(time, .6);
        var fadeout = cc.fadeOut(time);
        var self = this;
        flag.stopAllActions();
        flag.runAction(cc.sequence(scaleBig, delay, cc.spawn(scaleSmall, fadeout), cc.callFunc(function() {
          flag.active = false;
          flag.scale = 1;
          flag.opacity = 255;
          self.CloseUI();
        }, this)));
      },
      setPiaoFlag: function setPiaoFlag(parent, direction) {
        var player = GameData.getPlayerByPos(direction);
        if (player) {
          var headNode = parent.getChildByTag(player.uid);
          headNode && headNode.getComponent("playerTemplate").setPiaoIconShow(direction);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  roomPiao_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ab6707iCb9LQryJHn/v4p7T", "roomPiao_huadian");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_up: cc.Node,
        layer_down: cc.Node,
        layer_left: cc.Node,
        layer_right: cc.Node,
        ok_btn: cc.Button,
        no_btn: cc.Button,
        all_btn: cc.Button,
        headNodes: {
          default: [],
          type: cc.Node
        },
        action_up: false,
        action_down: false,
        action_left: false,
        action_right: false
      },
      onLoad: function onLoad() {
        registEvent("onStarPiao", this, this.UIControl);
        registEvent("onMahjongRunEnd", this, this.ShowUI);
        Object.keys(profileHuaDian.PiaoInfo).length > 0 && profileHuaDian.PiaoInfo.runState >= HuaDian.RunStateEmnum.PIAO && this.showPiaoState();
        var self = this;
        this.ok_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendPiaoMes(1);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
          self.all_btn.node.active = false;
        });
        this.no_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendPiaoMes(0);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
          self.all_btn.node.active = false;
        });
        this.all_btn.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          console.log("TOUCH_END");
          self.sendPiaoMes(2);
          self.ok_btn.node.active = false;
          self.no_btn.node.active = false;
          self.all_btn.node.active = false;
        });
      },
      onDestroy: function onDestroy() {
        unregistEvent("onStarPiao", this, this.UIControl);
        unregistEvent("onMahjongRunEnd", this, this.ShowUI);
      },
      sendPiaoMes: function sendPiaoMes(waterNum) {
        MjHandler.getInstance().requestPiao(waterNum, function(res) {});
      },
      ShowUI: function ShowUI() {
        this.setUI(true);
        this.action_up = false;
        this.action_down = false;
        this.action_left = false;
        this.action_right = false;
        this.setPiaoFlag(this.headNodes[0], "down");
        this.setPiaoFlag(this.headNodes[1], "right");
        this.setPiaoFlag(this.headNodes[2], "up");
        this.setPiaoFlag(this.headNodes[3], "left");
      },
      CloseUI: function CloseUI() {
        true == this.action_up && true == this.action_down && true == this.action_left && true == this.action_right && this.setUI(false);
      },
      setUI: function setUI(show) {
        this.node.active = show;
      },
      UIControl: function UIControl() {
        this.showPiaoState();
      },
      showPiaoState: function showPiaoState() {
        cc.log("...data...:" + JSON.stringify(profileHuaDian.PiaoInfo));
        var data = profileHuaDian.PiaoInfo;
        this.ok_btn.node.active = false;
        this.no_btn.node.active = false;
        this.all_btn.node.active = false;
        if (void 0 == profileHuaDian.PiaoInfo) return;
        var player = GameData.getPlayerByPos("down");
        var piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
        if (player && -1 == piaoState) {
          this.ok_btn.node.active = true;
          this.no_btn.node.active = true;
          this.all_btn.node.active = true;
        }
        if (player) {
          this.layer_down.active = true;
          cc.find("down/choice", this.node).active = false;
          cc.find("down/no", this.node).active = false;
          cc.find("down/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_down ? this.runMoveActionFlag("down", piaoState) : this.layer_down.active = false);
        } else {
          this.layer_down.active = false;
          this.action_down = true;
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
          this.layer_right.active = true;
          cc.find("right/choice", this.node).active = true;
          cc.find("right/no", this.node).active = false;
          cc.find("right/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_right ? this.runMoveActionFlag("right", piaoState) : this.layer_right.active = false);
        } else {
          this.layer_right.active = false;
          this.action_right = true;
        }
        player = GameData.getPlayerByPos("up");
        if (player) {
          piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
          this.layer_up.active = true;
          cc.find("up/choice", this.node).active = true;
          cc.find("up/no", this.node).active = false;
          cc.find("up/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_up ? this.runMoveActionFlag("up", piaoState) : this.layer_up.active = false);
        } else {
          this.layer_up.active = false;
          this.action_up = true;
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          piaoState = profileHuaDian.getPiaoStateByUid(player.uid);
          this.layer_left.active = true;
          cc.find("left/choice", this.node).active = true;
          cc.find("left/no", this.node).active = false;
          cc.find("left/yes", this.node).active = false;
          piaoState >= 0 && (false == this.action_left ? this.runMoveActionFlag("left", piaoState) : this.layer_left.active = false);
        } else {
          this.layer_left.active = false;
          this.action_left = true;
        }
      },
      runMoveActionFlag: function runMoveActionFlag(direction, piaoNum) {
        if (void 0 == piaoNum) return;
        var flag, parent;
        switch (direction) {
         case "down":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[0];
          this.action_down = true;
          break;

         case "right":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[1];
          this.action_right = true;
          break;

         case "up":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[2];
          this.action_up = true;
          break;

         case "left":
          cc.find(direction + "/choice", this.node).active = false;
          cc.find(direction + "/no", this.node).active = false;
          cc.find(direction + "/yes", this.node).active = false;
          flag = piaoNum > 0 ? cc.find(direction + "/yes", this.node) : cc.find(direction + "/no", this.node);
          flag.active = true;
          flag.scale = 1;
          flag.opacity = 255;
          parent = this.headNodes[3];
          this.action_left = true;
        }
        this.setPiaoFlag(parent, direction);
        var time = 1;
        var scaleBig = cc.scaleTo(time / 4, 1.4);
        var delay = cc.delayTime(time / 2);
        var scaleSmall = cc.scaleTo(time, .6);
        var fadeout = cc.fadeOut(time);
        var self = this;
        flag.stopAllActions();
        flag.runAction(cc.sequence(scaleBig, delay, cc.spawn(scaleSmall, fadeout), cc.callFunc(function() {
          flag.active = false;
          flag.scale = 1;
          flag.opacity = 255;
          self.CloseUI();
        }, this)));
      },
      setPiaoFlag: function setPiaoFlag(parent, direction) {
        var player = GameData.getPlayerByPos(direction);
        if (player) {
          var headNode = parent.getChildByTag(player.uid);
          headNode && headNode.getComponent("playerTemplate").setPiaoIconShow(direction);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  "roomResult-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aeff4+Ni0lH+5ip38OhU3ve", "roomResult-shishi");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        isMark: 0,
        roomid: cc.Label,
        createTime: cc.Label,
        roundNum: cc.Label,
        jinNum: 0,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        if (GameData.room.joinermax) {
          for (var i = 0; i < GameData.room.joinermax; i++) {
            this.jinNum = 0;
            this.showCards(i);
            this.showPlayer(i);
            this.showScore(i);
            this.showDetail(i);
            this.hideDianpaoIcon(i);
            this.showWinIcon(i);
          }
          for (var i = GameData.room.joinermax; i < 4; i++) {
            var playerNode = cc.find("player" + (i + 1), this.resultLayer);
            playerNode.active = false;
          }
          this.showResultIcon();
          this.showRoomDetail();
        }
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.resultLayer);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.resultLayer);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.resultLayer);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.resultLayer);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == GameData.game.zhuangUid;
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        RuleHandler.instance.isHuier(cardId) && (show = true);
        true == show && this.jinNum++;
        if (null == huierNode) {
          if (show) {
            huierNode = cc.instantiate(this.cardHuier);
            huierNode.y = huierNode.y - 8;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
            var texture = cc.textureCache.addImage(cc.url.raw("resources/shishi/image/youjinbiao.png"));
            var headerNodeIcon = cc.find("huier_icon", huierNode);
            headerNodeIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardId, isHu) {
        var orCard = GameData.game.winnerObtain;
        var show = false;
        false == isHu ? show = false : orCard == cardId && 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.resultLayer);
        var label = termNode.getComponent("cc.Label");
        label.string = "";
        var myScore = GameData.scores[GameData.player.uid];
        GameDataShiShi.setWater[player.uid] > 0 && (label.string += "2水 ");
        if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi) {
          GameData.game.winnerUid == player.uid ? label.string += RuleHandler.instance.getHuTypeString() : label.string += "";
          var gangs = GameData.getGangCards(player.uid);
          for (var i = 0; i < gangs.length; i++) {
            RuleHandler.instance.isHuier(gangs[i][0]) && (label.string += "金杠+" + GameData.room.opts.jingang + "  ");
            var index = 0, index2 = 0;
            for (var i = 0; i < gangs.length; i++) 4 == gangs[i].length ? index++ : 5 == gangs[i].length && index2++;
            0 == index || (label.string += "明杠 +1*" + index + "  ");
            0 == index2 || (label.string += "暗杠 +2*" + index2 + "  ");
          }
          if (GameData.game.zhuangUid == player.uid && GameData.game.zhuangNum[player.uid] > 0) {
            var zhuangNum = GameData.game.zhuangNum[player.uid];
            var score = 2 * zhuangNum;
            label.string += "坐" + zhuangNum + "庄 *" + score + "  ";
          } else if (GameData.game.zhuangUid != player.uid && GameData.game.zhuangNum[player.uid] > 0) {
            var zhuangNum = GameData.game.zhuangNum[player.uid];
            var score = 2 * zhuangNum;
            label.string += "拉" + zhuangNum + "庄 *" + score + "  ";
          }
          if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi) {
            var huaNum = RuleHandler.instance.calcHuaScore(player.uid);
            cc.log("..hua:" + huaNum);
            huaNum && 0 != huaNum && (label.string += "花杠 +" + huaNum + " ");
          }
          if (0 == this.jinNum) return;
          label.string += "金 +" + this.jinNum + "  ";
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        if (void 0 == cardNode || null == cardNode) return;
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var gang = GameData.getGangCards(player.uid);
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng);
          if (GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi) {
            var chi = GameData.getChiCards(player.uid);
            console.log("chi == " + JSON.stringify(chi));
            for (var i = 0; i < chi.length; i++) chi[i].length > 2 && chi[i].sort(function(a, b) {
              return a - b;
            });
            cards = gang.concat(peng, chi);
          }
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].length) {
                  face.node.active = true;
                  var cardId = cards[i][n];
                  this.showCardContent(face.node, cardHeader, cardId);
                  3 == n && true == RuleHandler.instance.isHuier(cardId) && this.addHuierIcon(face.node, direction);
                } else face.node.active = false;
              }
              if (5 == cards[i].length) {
                var face = node.getChildByName("card_face4").getComponent("cc.Sprite");
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                face.node.active = false;
                back.node.active = true;
              } else {
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var textureUrl = "";
          GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi && (textureUrl = cc.url.raw("resources/shishi/image/youjinbiao.png"));
          var huierIconTx = cc.textureCache.addImage(textureUrl);
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCards: function showCards(index) {
        var player = GameData.joiners[index];
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        var parent = cc.find("cards", playerNode);
        var hu = player.uid == GameData.game.winnerUid;
        var totalSize = GameData.client.handsize + 1;
        var cardHand = GameData.getHandCards(player.uid);
        var nodeIdx = GameData.getHandCardNum(player.uid);
        nodeIdx = nodeIdx % 3 == 1 ? nodeIdx + 1 : nodeIdx;
        var nodeIdx2 = nodeIdx;
        hu && (this.isMark = 0);
        for (var card in cardHand) for (var i = 0; i < cardHand[card]; i++) {
          var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
          cc.log("result showCards:" + nodeIdx + " " + card);
          this.showCardContent(node, "mj_face_xia_shou", card);
          this.setMyHuierVisible(node, card);
          this.setMyHuimageVisible(node, card, hu);
          node.active = true;
          nodeIdx--;
        }
        for (var i = nodeIdx; i >= 1; i--) {
          var node = cc.find("cardHand/cardHand" + i, parent);
          node.active = false;
        }
        for (var i = nodeIdx2 + 1; i <= totalSize; i++) {
          var node = cc.find("cardHand/cardHand" + i, parent);
          node.active = false;
        }
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        GameData.client.gameType == gameDefine.GameType.Game_Mj_Shishi && this.showHua(player, parent);
        playerNode.active = true;
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.resultLayer);
        if (GameData.scores[uid] > 0) {
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
          scoreNode.getComponent("cc.Label").string = "+" + GameData.scores[uid];
        } else if (0 == GameData.scores[uid]) {
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
          scoreNode.getComponent("cc.Label").string = GameData.scores[uid];
        } else {
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
          scoreNode.getComponent("cc.Label").string = GameData.scores[uid];
        }
      },
      hideDianpaoIcon: function hideDianpaoIcon(index) {
        var uid = GameData.joiners[index].uid;
        var parent = cc.find("player" + (index + 1), this.resultLayer);
        var paoNode = cc.find("paoIcon", parent);
        paoNode.active = false;
      },
      showWinIcon: function showWinIcon(index) {
        var uid = GameData.joiners[index].uid;
        var parent = cc.find("player" + (index + 1), this.resultLayer);
        var node = cc.find("huIcon", parent);
        node.active = uid == GameData.game.winnerUid;
        var paoNode = cc.find("paoIcon", parent);
        paoNode.active = false;
        if (!GameData.recordInfo[GameData.game.roundNum - 1]) return;
        if (1 == GameData.recordInfo[GameData.game.roundNum - 1].type && uid == GameData.recordInfo[GameData.game.roundNum - 1].dianpao) {
          node.active = false;
          paoNode.active = true;
        } else paoNode.active = false;
      },
      showResultIcon: function showResultIcon() {
        this.winSprite.node.active = false;
        this.loseSprite.node.active = false;
        this.pingSprite.node.active = false;
        var myScore = GameData.scores[GameData.player.uid];
        myScore > 0 ? this.winSprite.node.active = true : myScore < 0 ? this.loseSprite.node.active = true : this.pingSprite.node.active = true;
      },
      showRoomDetail: function showRoomDetail() {
        this.roomid.string = "房间号:" + GameData.room.id;
        this.createTime.string = getDate(GameData.room.createtime);
        var showRoundNum = GameData.game.roundNum;
        this.roundNum.string = "第 " + showRoundNum + " 局";
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("roomMain-shishi").showSummaryLayer();
        } else {
          MjHandler.getInstance().requestReady(function(res) {});
          sendEvent("onGameStart");
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      },
      showHua: function showHua(player, parent) {
        var uid = player.uid;
        var huacard = GameData.cards[uid]["hua"].sort();
        var huaNode = cc.find("cardhua", parent);
        var huaChild = huaNode.children;
        for (var i = 0; i < huaChild.length; i++) huaChild[i].active = false;
        for (var i = 0; i < huacard.length; i++) {
          var index = i + 1;
          var showCard = cc.find("cardhua/" + index, parent);
          showCard.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = this.showHuaTexture(huacard[i]);
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          showCard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          showCard.active = true;
        }
      },
      showHuaTexture: function showHuaTexture(huaId) {
        var textureUrl = "resources/shishi/image/";
        var tetureType = "";
        111 == huaId ? tetureType = "chun" : 112 == huaId ? tetureType = "xia" : 113 == huaId ? tetureType = "qiu" : 114 == huaId ? tetureType = "dong" : 121 == huaId ? tetureType = "mei" : 122 == huaId ? tetureType = "lan" : 123 == huaId ? tetureType = "zhu" : 124 == huaId && (tetureType = "ju");
        textureUrl = textureUrl + tetureType + ".png";
        return textureUrl;
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomResult_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93e38dG6DBMdLXks+dyX+Se", "roomResult_changchun");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    var HuType1 = {
      HUTYPE_PINGHU: 2,
      HUTYPE_SHOU_BA_YI: 25,
      HUTYPE_JIAHU: 3,
      HUTYPE_QIXIAODUI: 10,
      HUTYPE_PIAOHU: 12,
      HUTYPE_HAOHUA: 11,
      HUTYPE_CHAO_HAO_HUA: 24,
      HUTYPE_ZHI_ZHUN_QI_XIAO_DUI: 30
    };
    var HuType2 = {
      HUTYPE_ZHUANG: 21,
      HUTYPE_DIAN_PAO: 31,
      HUTYPE_ZIMO: 4,
      HUTYPE_MENQING: 20,
      HUTYPE_QINGYISE: 18,
      HUTYPE_MOBAO: 5,
      HUTYPE_BAOZHONGBAO: 13
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        createtime: cc.Label,
        roomID: cc.Label,
        roundData: cc.Label,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        cardBugangPre: cc.Prefab,
        isMark: 0,
        baoCardNode: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          this.showCards(i);
          this.showPlayer(i);
          this.showScore(i);
          this.showDetail(i);
          this.showWinIcon(i);
        }
        for (var i = GameData.room.opts.joinermax; i < 4; i++) {
          var playerNode = cc.find("player" + (i + 1), this.resultLayer);
          playerNode.active = false;
        }
        this.showBaoNode();
        this.showRoundInfo();
        this.showResultIcon();
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.resultLayer);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.resultLayer);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.resultLayer);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.resultLayer);
        var creator = cc.find("player" + (index + 1) + "/head/creator", this.resultLayer);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == GameData.game.zhuangUid;
        creator.active = player.uid == GameData.room.creator;
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showBaoNode: function showBaoNode() {
        var baoSp = cc.find("baoCard", this.baoCardNode);
        if (1e3 != GameData.game.cardHuier1 && -1 != GameData.game.cardHuier1 && 0 != GameData.game.cardHuier1) {
          this.baoCardNode.active = true;
          baoSp.getComponents(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + GameData.game.cardHuier1 + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          baoSp.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        } else this.baoCardNode.active = false;
      },
      setMyBaoVisible: function setMyBaoVisible(cardNode, cardData, isHu) {
        var show = false;
        RuleHandler.instance.isHuier(cardData.card) && (show = true);
        false == isHu && (show = false);
        0 == cardData.type && (show = false);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardData, isHu) {
        var orCard = GameData.game.winnerObtain;
        cc.log("orCard:" + orCard);
        var show = false;
        false == isHu ? show = false : orCard == cardData.card && 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.resultLayer);
        var label = termNode.getComponent("cc.Label");
        label.node.active = false;
        var resultStr = profileChangChun.getResultScoreInfoByUid(player.uid);
        label.string = "";
        var ishu = 1 == GameData.ResultData[player.uid].isWin || 3 == GameData.ResultData[player.uid].isWin;
        var isLiuJu = GameData.ResultData[player.uid].isWin == HuaDian.WINTYPE.LIUJU;
        var isDianPao = GameData.ResultData[player.uid].isWin == HuaDian.WINTYPE.DIANPAOLOSE;
        var isZhuang = player.uid == GameData.game.zhuangUid;
        for (var i = 0; i < resultStr.huTypes.length; i++) if (ishu) {
          var flag = false;
          for (var key in HuType2) if (resultStr.huTypes[i].code == HuType2[key]) {
            flag = true;
            break;
          }
          label.string += (flag, resultStr.huTypes[i].des + "*" + resultStr.huTypes[i].fan + " ");
        }
        isDianPao && (label.string += "点炮*2 ");
        isZhuang && ishu ? label.string += "庄家*2 " : isZhuang && 2 == GameData.ResultData[player.uid].isWin ? label.string += "庄家*2 " : isZhuang && 3 == profileChangChun.getHuType() && (label.string += "庄家*2 ");
        var selfGang = GameData.ResultData[player.uid].gangCards;
        var selfAddGangScore = 0;
        var selfDelGangScore = 0;
        for (var key in selfGang) selfAddGangScore += profileChangChun.getGangSorce(selfGang[key].cards) * (GameData.joiners.length - 1);
        0 != selfAddGangScore && (label.string += " 蛋:+" + selfAddGangScore + "分 ");
        selfDelGangScore = selfAddGangScore - resultStr.scoreList[1];
        0 != selfDelGangScore && (label.string += " 蛋:-" + selfDelGangScore + "分 ");
        if (!ishu) {
          var strInfo = GameData.cards[player.uid].hasCheckedBao ? "看宝" : "未看宝";
          label.string += strInfo;
        }
        label.node.active = true;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.active = true;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showHandCardContent: function showHandCardContent(cardNode, cardHeader, cardData) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardData.card);
        cardNode.active = true;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardData.card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + GameData.room.id;
        var time = 1e3 * profileChangChun.resultData.timeStamp;
        time = new Date(time);
        var year = time.getFullYear() + "/";
        var month = time.getMonth() + 1 + "/";
        var date = time.getDate() + "   ";
        var h = time.getHours() + "";
        var m = time.getMinutes() + "";
        var s = time.getSeconds() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        s = 1 == s.length ? "0" + s : s;
        this.createtime.string = year + month + date + h + ":" + m + ":" + s;
        var showRoundNum = GameData.room.gameNum;
        this.roundData.string = "第" + showRoundNum + "局";
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var chi = GameData.getChiCards(player.uid);
          chi.sort(function(a, b) {
            return a - b;
          });
          var gang = GameData.getGangCards(player.uid);
          for (var j = 0; j < gang.length; j++) gang[j].cardType = -1;
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng, chi);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var face7 = cc.find("card_face7", node);
            face7.active = false;
            if (i < cards.length) {
              for (var n = 0; n < 7; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                var bugangIconNode = face.node.getChildByName(face.node.name + "_bugangIcon");
                bugangIconNode && (bugangIconNode.active = false);
                var isPeng = false;
                cards[i].cards.length < 4 && profileChangChun.isAllEqual(cards[i].cards) && !cards[i].cardType && (isPeng = true);
                var isMingGang = false;
                4 == cards[i].cards.length && profileChangChun.isAllEqual(cards[i].cards) && (isMingGang = true);
                var isAnGang = false;
                5 == cards[i].cards.length && profileChangChun.isAllEqual(cards[i].cards) && (isAnGang = true);
                if (n < cards[i].cards.length) {
                  face.node.active = true;
                  var cardId = cards[i].cards[n];
                  if (isPeng) this.showCardContent(face.node, cardHeader, cardId); else if (isMingGang) {
                    if (n < 4) if (3 == n) {
                      this.showCardContent(face7, cardHeader, cardId);
                      face.node.active = false;
                    } else this.showCardContent(face.node, cardHeader, cardId); else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 1);
                  } else if (isAnGang) {
                    if (n < 4) if (3 == n) {
                      this.showCardContent(face7, cardHeader, cardId);
                      face.node.active = false;
                    } else this.showCardContent(face.node, cardHeader, cardId); else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 2);
                  } else if (cards[i].cardType && cards.type != HuaDian.OPERATION.OPERATION_ANGANG && cards.type != HuaDian.OPERATION.OPERATION_MINGGANG && cards.type != HuaDian.OPERATION.OPERATION_GONGGANG) {
                    var array1 = [].concat(cards[i].cards);
                    array1.splice(3, array1.length);
                    var gangCardArray = [].concat(cards[i].cards);
                    var array2 = profileChangChun.guolv(array1, gangCardArray);
                    var array3 = [].concat(array1, array2);
                    var isVisiable = array3.length > n;
                    var num = 1;
                    var index = 3;
                    n >= 3 && (index = cards[i].cards.indexOf(array3[n]) + 1);
                    for (index; index < cards[i].cards.length; index++) if (array3[n] == cards[i].cards[index]) {
                      if (0 != n && cards[i].cards.indexOf(array3[n]) == index) continue;
                      if (1 == n && (cards[i].cards[0] == cards[i].cards[1] || cards[i].cards[1] == cards[i].cards[2])) continue;
                      num++;
                    }
                    if (isVisiable) {
                      num >= 2 && this.addBuGangIcon(face.node, direction, num);
                      this.showCardContent(face.node, cardHeader, array3[n]);
                      face.node.active = true;
                    } else face.node.active = false;
                  } else this.showCardContent(face.node, cardHeader, cardId);
                } else 6 != n && (face.node.active = false);
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addGangIcon: function addGangIcon(node, direction, type) {
        var gangIcon = cc.find("gangType", node);
        var Url;
        var gangType = "";
        var gangDirection = "";
        if ("right" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "1";
        } else if ("down" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "0";
        } else if ("left" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "3";
        } else if ("up" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "2";
        }
        Url = cc.url.raw("resources/huadian/UI/icon/" + gangType + gangDirection + "_icon.png");
        var GangIconTx = cc.textureCache.addImage(Url);
        gangIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
      },
      addBuGangIcon: function addBuGangIcon(node, direction, num) {
        var bugangIconNodes = node.getChildByName(node.name + "_bugangIcon");
        if (null == bugangIconNodes) {
          bugangIconNodes = cc.instantiate(this.cardBugangPre);
          bugangIconNodes.name = node.name + "_bugangIcon";
          bugangIconNodes.setScale(1.2);
          bugangIconNodes.setPosition(bugangIconNodes.x - 5, bugangIconNodes.y - 10);
          node.addChild(bugangIconNodes);
        }
        bugangIconNodes.active = true;
        var Url;
        var gangDirection = "";
        "right" == direction ? gangDirection = "1" : "down" == direction ? gangDirection = "0" : "left" == direction ? gangDirection = "3" : "up" == direction && (gangDirection = "2");
        for (var i = 0; i < bugangIconNodes.childrenCount; i++) if ("down" == bugangIconNodes.children[i].name) {
          bugangIconNodes.children[i].active = true;
          Url = cc.url.raw("resources/changchun/UI/icon/bugang_" + gangDirection + "_" + num + ".png");
          var GangIconTx = cc.textureCache.addImage(Url);
          bugangIconNodes.children[i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
        } else bugangIconNodes.children[i].active = false;
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var textureUrl = "";
          GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? textureUrl = cc.url.raw("resources/table/huier_icon.png") : GameData.client.gameType == gameDefine.GameType.Game_MJ_HuaDian && (textureUrl = cc.url.raw("resources/table/huier_icon.png"));
          var huierIconTx = cc.textureCache.addImage(textureUrl);
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCards: function showCards(index) {
        var player = GameData.joiners[index];
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        var parent = cc.find("cards", playerNode);
        var hu;
        var isBao = 0;
        GameData.ResultData[player.uid] && (hu = 1 == GameData.ResultData[player.uid].isWin || 3 == GameData.ResultData[player.uid].isWin);
        var totalSize = GameData.client.handsize + 1;
        var cardHand = GameData.cards[player.uid]["Resulthand"];
        cardHand.sort(function(a, b) {
          return a.card - b.card;
        });
        var nodeIdx = GameData.getHandCardNum(player.uid);
        nodeIdx = nodeIdx % 3 == 1 ? nodeIdx + 1 : nodeIdx;
        hu && (this.isMark = 0);
        var handCardNode = cc.find("cardHand", parent);
        for (var i = 0; i < handCardNode.childrenCount; i++) handCardNode.children[i].active = false;
        var pengCardNode = cc.find("cardPeng", parent);
        for (var j = 0; j < pengCardNode.childrenCount; j++) pengCardNode.children[j].active = false;
        for (var kk = 0; kk < cardHand.length; kk++) 1 == cardHand[kk].type && isBao++;
        var isLou = profileChangChun.resultData.isLouBao;
        var pengAndGangNum = 3 * GameData.getPengCards(player.uid).length + 3 * GameData.getGangCards(player.uid).length + 3 * GameData.getChiCards(player.uid).length;
        for (var k = 0; k < cardHand.length; k++) {
          if (!hu && isLou) {
            cc.log("nodeIdx:" + nodeIdx);
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            this.showHandCardContent(node, "mj_face_xia_shou", cardHand[k]);
            if (nodeIdx == totalSize - cardHand.length - pengAndGangNum) {
              cc.log("nodeIdxnodeIdxnodeIdxnodeIdx:" + nodeIdx);
              var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
              node.active = false;
            }
            if (1 == nodeIdx) {
              var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
              node.active = false;
            }
          } else {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            this.showHandCardContent(node, "mj_face_xia_shou", cardHand[k]);
          }
          nodeIdx--;
        }
        this.removeCardIcon(parent);
        if (isBao != cardHand.length) for (var kkk = 0; kkk < cardHand.length; kkk++) {
          var nodeIdx1 = GameData.getHandCardNum(player.uid);
          var node = cc.find("cardHand/cardHand" + (nodeIdx1 - kkk), parent);
          if (1 == cardHand[kkk].type) {
            this.setMyBaoVisible(node, cardHand[kkk]);
            this.setMyHuimageVisible(node, cardHand[kkk], hu);
          }
        } else for (var jj = 0; jj < cardHand.length; jj++) {
          var nodeIdx2 = GameData.getHandCardNum(player.uid);
          var node = cc.find("cardHand/cardHand" + (nodeIdx2 - jj), parent);
          this.setMyHuimageVisible(node, cardHand[jj], hu);
        }
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        playerNode.active = true;
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.resultLayer);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[uid] && (score = coinData.coin[uid]);
        } else score = GameData.scores[uid];
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.color = new cc.Color(255, 255, 0);
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.color = new cc.Color(255, 46, 53);
        }
      },
      removeCardIcon: function removeCardIcon(parent) {
        var handCardNode = cc.find("cardHand", parent);
        for (var key in handCardNode.children) {
          var baoIcon = handCardNode.children[key].getChildByName(handCardNode.children[key].name + "_huier");
          var HurIcon = handCardNode.children[key].getChildByName(handCardNode.children[key].name + "_hu");
          baoIcon && baoIcon.removeFromParent(true);
          HurIcon && HurIcon.removeFromParent(true);
        }
      },
      showWinIcon: function showWinIcon(index, parent) {
        var uid = GameData.joiners[index].uid;
        var parent = cc.find("player" + (index + 1), this.resultLayer);
        var node = cc.find("huIcon", parent);
        var isHu = false;
        1 != GameData.ResultData[uid].isWin && 3 != GameData.ResultData[uid].isWin || (isHu = true);
        node.active = isHu;
        var paoNode = cc.find("paoIcon", parent);
        paoNode.active = false;
        if (2 == GameData.ResultData[uid].isWin) {
          node.active = false;
          paoNode.active = true;
        } else paoNode.active = false;
      },
      showResultIcon: function showResultIcon() {
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[GameData.player.uid] && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameData.scores[GameData.player.uid];
        void 0 == myScore ? myScore = 0 : null;
        if (myScore > 0) {
          this.winSprite.node.active = true;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
        } else if (myScore < 0) {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = true;
          this.pingSprite.node.active = false;
        } else {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = true;
        }
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("roomMain_changchun").showSummaryLayer();
        } else {
          MjHandler.getInstance().requestReady(function(res) {});
          GameData.game.zhuangUid = 0;
          sendEvent("onGameReady");
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  roomResult_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b4eeb74sFFe5E7CN7/+PHY", "roomResult_heb");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    var HuType1 = {
      HUTYPE_PINGHU: 2,
      HUTYPE_SHOU_BA_YI: 25,
      HUTYPE_JIAHU: 3,
      HUTYPE_QIXIAODUI: 10,
      HUTYPE_PIAOHU: 12,
      HUTYPE_HAOHUA: 11,
      HUTYPE_CHAO_HAO_HUA: 24,
      HUTYPE_ZHI_ZHUN_QI_XIAO_DUI: 30
    };
    var HuType2 = {
      HUTYPE_ZHUANG: 21,
      HUTYPE_DIAN_PAO: 31,
      HUTYPE_ZIMO: 4,
      HUTYPE_MENQING: 20,
      HUTYPE_QINGYISE: 18,
      HUTYPE_MOBAO: 5,
      HUTYPE_BAOZHONGBAO: 13
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        createtime: cc.Label,
        roomID: cc.Label,
        roundData: cc.Label,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        cardBugangPre: cc.Prefab,
        isMark: 0,
        baoCardNode: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          this.showCards(i);
          this.showPlayer(i);
          this.showScore(i);
          this.showDetail(i);
          this.showWinIcon(i);
        }
        for (var i = GameData.room.opts.joinermax; i < 4; i++) {
          var playerNode = cc.find("player" + (i + 1), this.resultLayer);
          playerNode.active = false;
        }
        this.showBaoNode();
        this.showRoundInfo();
        this.showResultIcon();
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.resultLayer);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.resultLayer);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.resultLayer);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.resultLayer);
        var creator = cc.find("player" + (index + 1) + "/head/creator", this.resultLayer);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == GameData.game.zhuangUid;
        creator.active = player.uid == GameData.room.creator;
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showBaoNode: function showBaoNode() {
        var baoSp = cc.find("baoCard", this.baoCardNode);
        if (1e3 != GameData.game.cardHuier1 && -1 != GameData.game.cardHuier1 && 0 != GameData.game.cardHuier1) {
          this.baoCardNode.active = true;
          baoSp.getComponents(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + GameData.game.cardHuier1 + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          baoSp.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        } else this.baoCardNode.active = false;
      },
      setMyBaoVisible: function setMyBaoVisible(cardNode, cardData, isHu) {
        var show = false;
        RuleHandler.instance.isHuier(cardData.card) && (show = true);
        false == isHu && (show = false);
        0 == cardData.type && (show = false);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardData, isHu) {
        var orCard = GameData.game.winnerObtain;
        cc.log("orCard:" + orCard);
        var show = false;
        false == isHu ? show = false : orCard == cardData.card && 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.resultLayer);
        var label = termNode.getComponent("cc.Label");
        label.node.active = false;
        var resultStr = profileHeb.getResultScoreInfoByUid(player.uid);
        label.string = "";
        var ishu = 1 == GameData.ResultData[player.uid].isWin || 3 == GameData.ResultData[player.uid].isWin;
        var isLiuJu = GameData.ResultData[player.uid].isWin == HuaDian.WINTYPE.LIUJU;
        var isDianPao = GameData.ResultData[player.uid].isWin == HuaDian.WINTYPE.DIANPAOLOSE;
        var isZhuang = player.uid == GameData.game.zhuangUid;
        for (var i = 0; i < resultStr.huTypes.length; i++) if (ishu) {
          var flag = false;
          for (var key in HuType2) if (resultStr.huTypes[i].code == HuType2[key]) {
            flag = true;
            break;
          }
          label.string += flag ? resultStr.huTypes[i].des + "*" + resultStr.huTypes[i].fan + " " : resultStr.huTypes[i].des + "+" + resultStr.huTypes[i].fan + " ";
        }
        isDianPao && (label.string += "点炮*2 ");
        isZhuang && ishu ? label.string += "庄家*2 " : isZhuang && 2 == GameData.ResultData[player.uid].isWin ? label.string += "庄家*2 " : isZhuang && 3 == profileHeb.getHuType() && (label.string += "庄家*2 ");
        var selfGang = GameData.ResultData[player.uid].gangCards;
        var selfAddGangScore = 0;
        var selfDelGangScore = 0;
        for (var key in selfGang) selfAddGangScore += profileHeb.getGangSorce(selfGang[key].cards) * (GameData.joiners.length - 1);
        0 != selfAddGangScore && (label.string += " 杠:+" + selfAddGangScore + "分 ");
        selfDelGangScore = selfAddGangScore - resultStr.scoreList[1];
        0 != selfDelGangScore && (label.string += " 杠:-" + selfDelGangScore + "分 ");
        var tingState = GameData.cards[player.uid]["tingState"];
        tingState && !ishu && (1 == tingState ? label.string += "报搂 " : 2 == tingState && (label.string += "报听 "));
        label.node.active = true;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.active = true;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showHandCardContent: function showHandCardContent(cardNode, cardHeader, cardData) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardData.card);
        cardNode.active = true;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardData.card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + GameData.room.id;
        var time = 1e3 * profileHeb.resultData.timeStamp;
        time = new Date(time);
        var year = time.getFullYear() + "/";
        var month = time.getMonth() + 1 + "/";
        var date = time.getDate() + "   ";
        var h = time.getHours() + "";
        var m = time.getMinutes() + "";
        var s = time.getSeconds() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        s = 1 == s.length ? "0" + s : s;
        this.createtime.string = year + month + date + h + ":" + m + ":" + s;
        var showRoundNum = GameData.room.gameNum;
        this.roundData.string = "第" + showRoundNum + "局";
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var chi = GameData.getChiCards(player.uid);
          chi.sort(function(a, b) {
            return a - b;
          });
          var gang = GameData.getGangCards(player.uid);
          for (var j = 0; j < gang.length; j++) gang[j].cardType = -1;
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng, chi);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var face7 = cc.find("card_face7", node);
            face7.active = false;
            if (i < cards.length) {
              for (var n = 0; n < 7; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                var bugangIconNode = face.node.getChildByName(face.node.name + "_bugangIcon");
                bugangIconNode && (bugangIconNode.active = false);
                var isPeng = false;
                cards[i].cards.length < 4 && profileHeb.isAllEqual(cards[i].cards) && !cards[i].cardType && (isPeng = true);
                var isMingGang = false;
                4 == cards[i].cards.length && profileHeb.isAllEqual(cards[i].cards) && (isMingGang = true);
                var isAnGang = false;
                5 == cards[i].cards.length && profileHeb.isAllEqual(cards[i].cards) && (isAnGang = true);
                if (n < cards[i].cards.length) {
                  face.node.active = true;
                  var cardId = cards[i].cards[n];
                  if (isPeng) this.showCardContent(face.node, cardHeader, cardId); else if (isMingGang) {
                    if (n < 4) if (3 == n) {
                      this.showCardContent(face7, cardHeader, cardId);
                      face.node.active = false;
                    } else this.showCardContent(face.node, cardHeader, cardId); else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 1);
                  } else if (isAnGang) {
                    if (n < 4) if (3 == n) {
                      this.showCardContent(face7, cardHeader, cardId);
                      face.node.active = false;
                    } else this.showCardContent(face.node, cardHeader, cardId); else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 2);
                  } else if (cards[i].cardType && cards.type != HuaDian.OPERATION.OPERATION_ANGANG && cards.type != HuaDian.OPERATION.OPERATION_MINGGANG && cards.type != HuaDian.OPERATION.OPERATION_GONGGANG) {
                    var array1 = [].concat(cards[i].cards);
                    array1.splice(3, array1.length);
                    var gangCardArray = [].concat(cards[i].cards);
                    var array2 = profileHeb.guolv(array1, gangCardArray);
                    var array3 = [].concat(array1, array2);
                    var isVisiable = array3.length > n;
                    var num = 1;
                    var index = 3;
                    n >= 3 && (index = cards[i].cards.indexOf(array3[n]) + 1);
                    for (index; index < cards[i].cards.length; index++) if (array3[n] == cards[i].cards[index]) {
                      if (0 != n && cards[i].cards.indexOf(array3[n]) == index) continue;
                      num++;
                    }
                    if (isVisiable) {
                      num >= 2 && this.addBuGangIcon(face.node, direction, num);
                      this.showCardContent(face.node, cardHeader, array3[n]);
                      face.node.active = true;
                    } else face.node.active = false;
                  } else this.showCardContent(face.node, cardHeader, cardId);
                } else 6 != n && (face.node.active = false);
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addGangIcon: function addGangIcon(node, direction, type) {
        var gangIcon = cc.find("gangType", node);
        var Url;
        var gangType = "";
        var gangDirection = "";
        if ("right" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "1";
        } else if ("down" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "0";
        } else if ("left" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "3";
        } else if ("up" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "2";
        }
        Url = cc.url.raw("resources/huadian/UI/icon/" + gangType + gangDirection + "_icon.png");
        var GangIconTx = cc.textureCache.addImage(Url);
        gangIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
      },
      addBuGangIcon: function addBuGangIcon(node, direction, num) {
        var bugangIconNodes = node.getChildByName(node.name + "_bugangIcon");
        if (null == bugangIconNodes) {
          bugangIconNodes = cc.instantiate(this.cardBugangPre);
          bugangIconNodes.name = node.name + "_bugangIcon";
          bugangIconNodes.setScale(1.2);
          bugangIconNodes.setPosition(bugangIconNodes.x - 5, bugangIconNodes.y - 10);
          node.addChild(bugangIconNodes);
        }
        bugangIconNodes.active = true;
        var Url;
        var gangDirection = "";
        "right" == direction ? gangDirection = "1" : "down" == direction ? gangDirection = "0" : "left" == direction ? gangDirection = "3" : "up" == direction && (gangDirection = "2");
        for (var i = 0; i < bugangIconNodes.childrenCount; i++) if ("down" == bugangIconNodes.children[i].name) {
          bugangIconNodes.children[i].active = true;
          Url = cc.url.raw("resources/changchun/UI/icon/bugang_" + gangDirection + "_" + num + ".png");
          var GangIconTx = cc.textureCache.addImage(Url);
          bugangIconNodes.children[i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
        } else bugangIconNodes.children[i].active = false;
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var textureUrl = "";
          GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? textureUrl = cc.url.raw("resources/table/huier_icon.png") : GameData.client.gameType == gameDefine.GameType.Game_MJ_HuaDian && (textureUrl = cc.url.raw("resources/table/huier_icon.png"));
          var huierIconTx = cc.textureCache.addImage(textureUrl);
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCards: function showCards(index) {
        var player = GameData.joiners[index];
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        var parent = cc.find("cards", playerNode);
        var hu;
        var isBao = 0;
        GameData.ResultData[player.uid] && (hu = 1 == GameData.ResultData[player.uid].isWin || 3 == GameData.ResultData[player.uid].isWin);
        var totalSize = GameData.client.handsize + 1;
        var cardHand = GameData.cards[player.uid]["Resulthand"];
        cardHand.sort(function(a, b) {
          return a.card - b.card;
        });
        var nodeIdx = GameData.getHandCardNum(player.uid);
        nodeIdx = nodeIdx % 3 == 1 ? nodeIdx + 1 : nodeIdx;
        hu && (this.isMark = 0);
        var handCardNode = cc.find("cardHand", parent);
        for (var i = 0; i < handCardNode.childrenCount; i++) handCardNode.children[i].active = false;
        var pengCardNode = cc.find("cardPeng", parent);
        for (var j = 0; j < pengCardNode.childrenCount; j++) pengCardNode.children[j].active = false;
        for (var kk = 0; kk < cardHand.length; kk++) 1 == cardHand[kk].type && isBao++;
        var isLou = profileHeb.resultData.isLouBao;
        var pengAndGangNum = 3 * GameData.getPengCards(player.uid).length + 3 * GameData.getGangCards(player.uid).length + 3 * GameData.getChiCards(player.uid).length;
        for (var k = 0; k < cardHand.length; k++) {
          if (!hu && isLou) {
            cc.log("nodeIdx:" + nodeIdx);
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            this.showHandCardContent(node, "mj_face_xia_shou", cardHand[k]);
            if (nodeIdx == totalSize - cardHand.length - pengAndGangNum) {
              cc.log("nodeIdxnodeIdxnodeIdxnodeIdx:" + nodeIdx);
              var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
              node.active = false;
            }
            if (1 == nodeIdx) {
              var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
              node.active = false;
            }
          } else {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            this.showHandCardContent(node, "mj_face_xia_shou", cardHand[k]);
          }
          nodeIdx--;
        }
        this.removeCardIcon(parent);
        if (isBao != cardHand.length) for (var kkk = 0; kkk < cardHand.length; kkk++) {
          var nodeIdx1 = GameData.getHandCardNum(player.uid);
          var node = cc.find("cardHand/cardHand" + (nodeIdx1 - kkk), parent);
          if (1 == cardHand[kkk].type) {
            this.setMyBaoVisible(node, cardHand[kkk]);
            this.setMyHuimageVisible(node, cardHand[kkk], hu);
          }
        } else for (var jj = 0; jj < cardHand.length; jj++) {
          var nodeIdx2 = GameData.getHandCardNum(player.uid);
          var node = cc.find("cardHand/cardHand" + (nodeIdx2 - jj), parent);
          this.setMyHuimageVisible(node, cardHand[jj], hu);
        }
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        playerNode.active = true;
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.resultLayer);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[uid] && (score = coinData.coin[uid]);
        } else score = GameData.scores[uid];
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.color = new cc.Color(255, 255, 0);
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.color = new cc.Color(255, 46, 53);
        }
      },
      removeCardIcon: function removeCardIcon(parent) {
        var handCardNode = cc.find("cardHand", parent);
        for (var key in handCardNode.children) {
          var baoIcon = handCardNode.children[key].getChildByName(handCardNode.children[key].name + "_huier");
          var HurIcon = handCardNode.children[key].getChildByName(handCardNode.children[key].name + "_hu");
          baoIcon && baoIcon.removeFromParent(true);
          HurIcon && HurIcon.removeFromParent(true);
        }
      },
      showWinIcon: function showWinIcon(index, parent) {
        var uid = GameData.joiners[index].uid;
        var parent = cc.find("player" + (index + 1), this.resultLayer);
        var node = cc.find("huIcon", parent);
        var isHu = false;
        1 != GameData.ResultData[uid].isWin && 3 != GameData.ResultData[uid].isWin || (isHu = true);
        node.active = isHu;
        var paoNode = cc.find("paoIcon", parent);
        paoNode.active = false;
        if (2 == GameData.ResultData[uid].isWin) {
          node.active = false;
          paoNode.active = true;
        } else paoNode.active = false;
      },
      showResultIcon: function showResultIcon() {
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[GameData.player.uid] && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameData.scores[GameData.player.uid];
        void 0 == myScore ? myScore = 0 : null;
        if (myScore > 0) {
          this.winSprite.node.active = true;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
        } else if (myScore < 0) {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = true;
          this.pingSprite.node.active = false;
        } else {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = true;
        }
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("roomMain_heb").showSummaryLayer();
        } else {
          MjHandler.getInstance().requestReady(function(res) {});
          GameData.game.zhuangUid = 0;
          sendEvent("onGameReady");
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  roomResult_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d014NOwohHLaO8U874PAKK", "roomResult_huadian");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        createtime: cc.Label,
        roomID: cc.Label,
        roundData: cc.Label,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        isMark: 0,
        baoCardNode: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        for (var i = 0; i < GameData.room.opts.joinermax; i++) {
          this.showCards(i);
          this.showPlayer(i);
          this.showScore(i);
          this.showDetail(i);
          this.showWinIcon(i);
        }
        for (var i = GameData.room.opts.joinermax; i < 4; i++) {
          var playerNode = cc.find("player" + (i + 1), this.resultLayer);
          playerNode.active = false;
        }
        this.showBaoNode();
        this.showRoundInfo();
        this.showResultIcon();
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.resultLayer);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.resultLayer);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.resultLayer);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.resultLayer);
        var creator = cc.find("player" + (index + 1) + "/head/creator", this.resultLayer);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == GameData.game.zhuangUid;
        creator.active = player.uid == GameData.room.creator;
        if (void 0 == player.headimgurl || "" == player.headimgurl || player.headimgurl.length <= 0) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showBaoNode: function showBaoNode() {
        var baoSp = cc.find("baoCard", this.baoCardNode);
        if (1e3 != GameData.game.cardHuier1 && -1 != GameData.game.cardHuier1 && 0 != GameData.game.cardHuier1) {
          this.baoCardNode.active = true;
          baoSp.getComponents(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + GameData.game.cardHuier1 + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          baoSp.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        } else this.baoCardNode.active = false;
      },
      setMyBaoVisible: function setMyBaoVisible(cardNode, cardData, isHu) {
        var show = false;
        RuleHandler.instance.isHuier(cardData.card) && (show = true);
        false == isHu && (show = false);
        0 == cardData.type && (show = false);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardData, isHu) {
        var orCard = GameData.game.winnerObtain;
        cc.log("orCard:" + orCard);
        var show = false;
        false == isHu ? show = false : orCard == cardData.card && 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.resultLayer);
        var label = termNode.getComponent("cc.Label");
        label.node.active = false;
        var resultStr = profileHuaDian.getResultScoreInfoByUid(player.uid);
        label.string = "";
        var ishu = 1 == GameData.ResultData[player.uid].isWin || 3 == GameData.ResultData[player.uid].isWin;
        var isLiuJu = GameData.ResultData[player.uid].isWin == HuaDian.WINTYPE.LIUJU;
        for (var i = 0; i < resultStr.huTypes.length; i++) 0 == GameData.room.opts.isBigFan || 1 == GameData.room.opts.isBigFan && ishu && (2 == resultStr.huTypes[i].code || 3 == resultStr.huTypes[i].code || 9 == resultStr.huTypes[i].code ? label.string += resultStr.huTypes[i].des + "+" + resultStr.huTypes[i].fan + " " : label.string += resultStr.huTypes[i].des + "*" + resultStr.huTypes[i].fan + " ");
        var selfGang = GameData.ResultData[player.uid].gangCards;
        var selfAddGangScore = 0;
        var selfDelGangScore = 0;
        for (var key in selfGang) 4 == selfGang[key].cards.length ? selfAddGangScore += 1 : 5 == selfGang[key].cards.length && (selfAddGangScore += GameData.joiners.length - 1);
        0 != selfAddGangScore && (label.string += " 杠:+" + selfAddGangScore + "分 ");
        selfDelGangScore = selfAddGangScore - resultStr.scoreList[1];
        0 != selfDelGangScore && (label.string += " 杠:-" + selfDelGangScore + "分 ");
        1 != GameData.ResultData[player.uid].hasPiao && 2 != GameData.ResultData[player.uid].hasPiao || (label.string += "飘 ");
        var tingState = GameData.cards[player.uid]["tingState"];
        tingState && !ishu && (1 == tingState ? label.string += "报搂 " : 2 == tingState && (label.string += "报听 "));
        label.node.active = true;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.active = true;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showHandCardContent: function showHandCardContent(cardNode, cardHeader, cardData) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardData.card);
        cardNode.active = true;
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardData.card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + GameData.room.id;
        var time = 1e3 * profileHuaDian.resultData.timeStamp;
        time = new Date(time);
        var year = time.getFullYear() + "/";
        var month = time.getMonth() + 1 + "/";
        var date = time.getDate() + "   ";
        var h = time.getHours() + "";
        var m = time.getMinutes() + "";
        var s = time.getSeconds() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        s = 1 == s.length ? "0" + s : s;
        this.createtime.string = year + month + date + h + ":" + m + ":" + s;
        var showRoundNum = GameData.room.gameNum;
        this.roundData.string = "第" + showRoundNum + "局";
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var gang = GameData.getGangCards(player.uid);
          var peng = GameData.getPengCards(player.uid);
          var chi = GameData.getChiCards(player.uid);
          var cards = [];
          for (var key in gang) cards.push(gang[key]);
          for (var key in peng) cards.push(peng[key]);
          for (var key in chi) cards.push(chi[key]);
          cc.log("resultCards:" + JSON.stringify(cards));
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var face4 = cc.find("card_face4", node);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].cards.length) {
                  face.node.active = true;
                  var cardId = cards[i].cards[n];
                  4 == cards[i].cards.length && this.addGangIcon(face4, direction, 1);
                  5 == cards[i].cards.length && this.addGangIcon(face4, direction, 2);
                  this.showCardContent(face.node, cardHeader, cardId);
                } else face.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addGangIcon: function addGangIcon(node, direction, type) {
        var gangIcon = cc.find("gangType", node);
        var Url;
        var gangType = "";
        var gangDirection = "";
        if ("right" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "1";
        } else if ("down" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "0";
        } else if ("left" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "3";
        } else if ("up" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "2";
        }
        Url = cc.url.raw("resources/huadian/UI/icon/" + gangType + gangDirection + "_icon.png");
        var GangIconTx = cc.textureCache.addImage(Url);
        gangIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var textureUrl = "";
          GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin ? textureUrl = cc.url.raw("resources/table/huier_icon.png") : GameData.client.gameType == gameDefine.GameType.Game_MJ_HuaDian && (textureUrl = cc.url.raw("resources/table/huier_icon.png"));
          var huierIconTx = cc.textureCache.addImage(textureUrl);
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCards: function showCards(index) {
        var player = GameData.joiners[index];
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        var parent = cc.find("cards", playerNode);
        var hu;
        var isBao = 0;
        hu = 1 == GameData.ResultData[player.uid].isWin || 3 == GameData.ResultData[player.uid].isWin;
        var totalSize = GameData.client.handsize + 1;
        var cardHand = GameData.cards[player.uid]["Resulthand"];
        cardHand.sort(function(a, b) {
          return a.card - b.card;
        });
        var nodeIdx = GameData.getHandCardNum(player.uid);
        nodeIdx = nodeIdx % 3 == 1 ? nodeIdx + 1 : nodeIdx;
        hu && (this.isMark = 0);
        var handCardNode = cc.find("cardHand", parent);
        for (var i = 0; i < handCardNode.childrenCount; i++) handCardNode.children[i].active = false;
        var pengCardNode = cc.find("cardPeng", parent);
        for (var j = 0; j < pengCardNode.childrenCount; j++) pengCardNode.children[j].active = false;
        for (var kk = 0; kk < cardHand.length; kk++) 1 == cardHand[kk].type && isBao++;
        var isLou = profileHuaDian.resultData.isLouBao;
        var pengAndGangNum = 3 * GameData.getPengCards(player.uid).length + 3 * GameData.getGangCards(player.uid).length + 3 * GameData.getChiCards(player.uid).length;
        for (var k = 0; k < cardHand.length; k++) {
          if (!hu && isLou) {
            cc.log("nodeIdx:" + nodeIdx);
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            this.showHandCardContent(node, "mj_face_xia_shou", cardHand[k]);
            if (nodeIdx == totalSize - cardHand.length - pengAndGangNum) {
              cc.log("nodeIdxnodeIdxnodeIdxnodeIdx:" + nodeIdx);
              var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
              node.active = false;
            }
            if (1 == nodeIdx) {
              var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
              node.active = false;
            }
          } else {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            this.showHandCardContent(node, "mj_face_xia_shou", cardHand[k]);
          }
          nodeIdx--;
        }
        this.removeCardIcon(parent);
        if (isBao != cardHand.length) for (var kkk = 0; kkk < cardHand.length; kkk++) {
          var nodeIdx1 = GameData.getHandCardNum(player.uid);
          var node = cc.find("cardHand/cardHand" + (nodeIdx1 - kkk), parent);
          if (1 == cardHand[kkk].type) {
            this.setMyBaoVisible(node, cardHand[kkk]);
            this.setMyHuimageVisible(node, cardHand[kkk], hu);
          }
        } else for (var jj = 0; jj < cardHand.length; jj++) {
          var nodeIdx2 = GameData.getHandCardNum(player.uid);
          var node = cc.find("cardHand/cardHand" + (nodeIdx2 - jj), parent);
          this.setMyHuimageVisible(node, cardHand[jj], hu);
        }
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        playerNode.active = true;
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.resultLayer);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[uid] && (score = coinData.coin[uid]);
        } else score = GameData.scores[uid];
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.color = new cc.Color(255, 255, 0);
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.color = new cc.Color(255, 46, 53);
        }
      },
      removeCardIcon: function removeCardIcon(parent) {
        var handCardNode = cc.find("cardHand", parent);
        for (var key in handCardNode.children) {
          var baoIcon = handCardNode.children[key].getChildByName(handCardNode.children[key].name + "_huier");
          var HurIcon = handCardNode.children[key].getChildByName(handCardNode.children[key].name + "_hu");
          baoIcon && baoIcon.removeFromParent(true);
          HurIcon && HurIcon.removeFromParent(true);
        }
      },
      showWinIcon: function showWinIcon(index, parent) {
        var uid = GameData.joiners[index].uid;
        var parent = cc.find("player" + (index + 1), this.resultLayer);
        var node = cc.find("huIcon", parent);
        var isHu = false;
        1 != GameData.ResultData[uid].isWin && 3 != GameData.ResultData[uid].isWin || (isHu = true);
        node.active = isHu;
        var paoNode = cc.find("paoIcon", parent);
        paoNode.active = false;
        if (2 == GameData.ResultData[uid].isWin) {
          node.active = false;
          paoNode.active = true;
        } else paoNode.active = false;
      },
      showResultIcon: function showResultIcon() {
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[GameData.player.uid] && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameData.scores[GameData.player.uid];
        void 0 == myScore ? myScore = 0 : null;
        if (myScore > 0) {
          this.winSprite.node.active = true;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
        } else if (myScore < 0) {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = true;
          this.pingSprite.node.active = false;
        } else {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = true;
        }
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("roomMain_huadian").showSummaryLayer();
        } else {
          MjHandler.getInstance().requestReady(function(res) {});
          GameData.game.zhuangUid = 0;
          sendEvent("onGameReady");
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eee815muQpPk4gtMBEwDD2Y", "roomResult");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        resultTitle: cc.Node,
        createtime: cc.Label,
        roomID: cc.Label,
        roundData: cc.Label,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        isMark: 0,
        maskbg: cc.Node,
        shareBtn: cc.Button,
        readyBtn: cc.Button,
        font: {
          default: [],
          type: [ cc.Font ]
        }
      },
      onLoad: function onLoad() {},
      initResultData: function initResultData() {
        cc.log("initResultData");
        this.isHuType = false;
        this.moveToPosY = -190;
        var player1 = cc.find("player1", this.resultLayer);
        var player2 = cc.find("player2", this.resultLayer);
        var player3 = cc.find("player3", this.resultLayer);
        var player4 = cc.find("player4", this.resultLayer);
        player1.y = 215;
        player2.y = 80;
        player3.y = -55;
        player4.y = -190;
        player1.setScale(1);
        player2.setScale(1);
        player3.setScale(1);
        player4.setScale(1);
        this.shareBtn.node.x = -213;
        this.shareBtn.node.y = -310;
        this.readyBtn.node.x = 227;
        this.readyBtn.node.y = -310;
        this.maskbg.active = false;
        this.resultTitle.active = true;
        this.juShuStr = cc.find("roomInfo/roundNum", this.resultLayer);
        this.resultTime = cc.find("roomInfo/resultTime", this.resultLayer);
        this.roomIdStr = cc.find("roomInfo/roomID", this.resultLayer);
        this.juShuStr.color = new cc.Color(0, 0, 0);
        this.resultTime.color = new cc.Color(0, 0, 0);
        this.roomIdStr.color = new cc.Color(0, 0, 0);
      },
      onDestroy: function onDestroy() {},
      onShow: function onShow() {
        this.initResultData();
        if (GameData.room.joinermax) {
          this.showResultIcon();
          for (var i = 0; i < GameData.room.joinermax; i++) {
            this.showCards(i);
            this.showPlayer(i);
            this.showScore(i);
            this.showDetail(i);
            this.showWinIcon(i);
          }
          for (var j = 0; j < GameData.room.joinermax; j++) ;
          for (var k = GameData.room.joinermax; k < 4; k++) {
            var playerNode = cc.find("player" + (k + 1), this.resultLayer);
            playerNode.active = false;
          }
          this.showRoundInfo();
        }
      },
      showPlayer: function showPlayer(index) {
        var player = GameData.joiners[index];
        var idNode = cc.find("player" + (index + 1) + "/head/id", this.resultLayer);
        var nameNode = cc.find("player" + (index + 1) + "/head/name", this.resultLayer);
        var headpicNode = cc.find("player" + (index + 1) + "/head/headpic", this.resultLayer);
        var zhuangNode = cc.find("player" + (index + 1) + "/head/zhuang", this.resultLayer);
        var creator = cc.find("player" + (index + 1) + "/head/creator", this.resultLayer);
        var player_name = player.name.substring(0, 4) + "...";
        nameNode.getComponent(cc.Label).string = player_name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == GameData.game.zhuangUid;
        creator.active = player.uid == GameData.room.creator;
        if (void 0 == player.headimgurl || "" == player.headimgurl) return;
        cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headpicNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId, direction) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            huierNode.y = huierNode.y - 18;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(direction, huierNode).active = true;
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardId, isHu) {
        var orCard = GameData.game.winnerObtain;
        var show = false;
        false == isHu ? show = false : orCard == cardId && 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showDetail: function showDetail(index) {
        var player = GameData.joiners[index];
        var termNode = cc.find("player" + (index + 1) + "/term", this.resultLayer);
        var label = termNode.getComponent("cc.Label");
        var myScore = GameData.scores[GameData.player.uid];
        var handcard = GameData.getHandCards(player.uid);
        termNode.parent.active = true;
        var resultItems = RuleHandler.instance.getHuTypeString();
        console.log("resultItems = " + JSON.stringify(resultItems));
        GameData.game.winnerUid == player.uid ? label.string = resultItems[0] : label.string = "";
        GameData.game.zhuangUid == player.uid ? true == resultItems[1] && (label.string += "铲牌 -2  ") : label.string += "";
        GameData.room.opts.times && (1 == GameData.room.opts.times ? label.string += "底分 *1  " : 2 == GameData.room.opts.times ? label.string += "底分 *2  " : 5 == GameData.room.opts.times && (label.string += "底分 *5  "));
        var gangs = GameData.getGangCards(player.uid);
        var index1 = 0, index2 = 0;
        for (var i = 0; i < gangs.length; i++) RuleHandler.instance.isHuier(gangs[i][0]) ? label.string += "金杠 +" + GameData.room.opts.jingang + "  " : 4 == gangs[i].length ? index1++ : 5 == gangs[i].length && index2++;
        0 == index1 || (label.string += "明杠 +1*" + index1 + "  ");
        0 == index2 || (label.string += "暗杠 +2*" + index2 + "  ");
        (index1 > 0 || index2 > 0) && true == GameData.room.opts.doubleGang && GameData.game.zhuangNum[GameData.game.zhuangUid] > 0 && (label.string += "杠翻番  ");
        if (GameData.game.zhuangUid == player.uid && GameData.game.zhuangNum[player.uid] > 0) {
          var zhuangNum = GameData.game.zhuangNum[player.uid];
          var score = 2 * zhuangNum;
          label.string += "坐" + zhuangNum + "庄 *" + score;
        } else if (GameData.game.zhuangUid != player.uid && GameData.game.zhuangNum[player.uid] > 0) {
          var zhuangNum = GameData.game.zhuangNum[player.uid];
          var score = 2 * zhuangNum;
          label.string += "拉" + zhuangNum + "庄 *" + score;
        }
        GameData.game.winnerUid == GameData.player.uid && (RuleHandler.instance.getHuTypeArry(5) && RuleHandler.instance.getHuTypeArry(7) || RuleHandler.instance.getHuTypeArry(5) && RuleHandler.instance.getHuTypeArry(6) && RuleHandler.instance.getHuTypeArry(10) || RuleHandler.instance.getHuTypeArry(5) && RuleHandler.instance.getHuTypeArry(10)) && (this.isHuType = true);
      },
      showShare: function showShare(index) {
        if (this.isHuType && 4 == GameData.room.opts.joinermax) {
          this.maskbg.active = true;
          for (var i = 0; i < GameData.room.joinermax; i++) {
            var player = GameData.joiners[i];
            var termNode = cc.find("player" + (i + 1) + "/term", this.resultLayer);
            GameData.player.uid == player.uid ? termNode.parent.active = true : termNode.parent.active = false;
            termNode.parent.y = -215;
            termNode.parent.x = 41;
            termNode.parent.setScale(.8);
          }
          cc.log("winSpritebg ");
          this.shareBtn.node.x = -408;
          this.shareBtn.node.y = -324;
          this.readyBtn.node.x = 425;
          this.readyBtn.node.y = -324;
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
          this.resultTitle.active = false;
          this.isHuType = false;
          this.juShuStr.color = new cc.Color(125, 133, 133);
          this.resultTime.color = new cc.Color(125, 133, 133);
          this.roomIdStr.color = new cc.Color(125, 133, 133);
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
      },
      showRoundInfo: function showRoundInfo() {
        this.roomID.string = "房号：" + GameData.room.id;
        var time = getTimeStr(GameData.room.createtime);
        this.createtime.string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        var showRoundNum = GameData.game.roundCount;
        this.roundData.string = "第" + showRoundNum + "局";
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var gang = GameData.getGangCards(player.uid);
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].length) {
                  face.node.active = true;
                  var cardId = cards[i][n];
                  this.showCardContent(face.node, cardHeader, cardId);
                  3 == n && true == RuleHandler.instance.isHuier(cardId) && this.addHuierIcon(face.node, direction);
                } else face.node.active = false;
              }
              if (5 == cards[i].length) {
                var face = node.getChildByName("card_face4").getComponent("cc.Sprite");
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                face.node.active = false;
                back.node.active = true;
              } else {
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var textureUrl = "";
          GameData.client.gameType == gameDefine.GameType.Game_Mj_Tianjin && (textureUrl = cc.url.raw("resources/table/huier_icon.png"));
          var huierIconTx = cc.textureCache.addImage(textureUrl);
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCards: function showCards(index) {
        var player = GameData.joiners[index];
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        var parent = cc.find("cards", playerNode);
        var hu = player.uid == GameData.game.winnerUid;
        var totalSize = GameData.client.handsize + 1;
        var cardHand = GameData.getHandCards(player.uid);
        var nodeIdx = GameData.getHandCardNum(player.uid);
        nodeIdx = nodeIdx % 3 == 1 ? nodeIdx + 1 : nodeIdx;
        var nodeIdx2 = nodeIdx;
        hu && (this.isMark = 0);
        for (var card in cardHand) for (var i = 0; i < cardHand[card]; i++) {
          var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
          cc.log("result showCards:" + nodeIdx + " " + card);
          this.showCardContent(node, "mj_face_xia_shou", card);
          this.setMyHuierVisible(node, card, "down");
          this.setMyHuimageVisible(node, card, hu);
          node.active = true;
          nodeIdx--;
        }
        for (var i = nodeIdx; i >= 1; i--) {
          var node = cc.find("cardHand/cardHand" + i, parent);
          node.active = false;
        }
        for (var i = nodeIdx2 + 1; i <= totalSize; i++) {
          var node = cc.find("cardHand/cardHand" + i, parent);
          node.active = false;
        }
        this.showPengCards(player, parent, "mj_face_xia_chu", "down");
        playerNode.active = true;
      },
      showScore: function showScore(index) {
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("player" + (index + 1) + "/score", this.resultLayer);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[uid] && (score = coinData.coin[uid]);
        } else score = GameData.scores[uid];
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + score;
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = score;
        } else if (0 == score) {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = score;
        }
      },
      showWinIcon: function showWinIcon(index, parent) {
        var uid = GameData.joiners[index].uid;
        var parent = cc.find("player" + (index + 1), this.resultLayer);
        var node = cc.find("huIcon", parent);
        node.active = uid == GameData.game.winnerUid;
      },
      showResultIcon: function showResultIcon() {
        var myScore = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coin && coinData.coin[GameData.player.uid] && (myScore = coinData.coin[GameData.player.uid]);
        } else myScore = GameData.scores[GameData.player.uid];
        void 0 == myScore ? myScore = 0 : null;
        if (myScore > 0) {
          this.winSprite.node.active = true;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
        } else if (myScore < 0) {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = true;
          this.pingSprite.node.active = false;
        } else {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = true;
        }
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          this.node.getComponent("roomMain").showSummaryLayer();
        } else {
          MjHandler.getInstance().requestReady(function(res) {});
          sendEvent("onGameStart");
        }
      },
      shareRet: function shareRet() {
        false == inCD(3e3) && screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  "roomScore-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ae54iSasJBa4tGQtK9JVeY", "roomScore-shishi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreScollView: cc.ScrollView,
        scoreLayer: cc.Node,
        playerHeadNode: cc.Node,
        playerScoreItem: cc.Node,
        playerSumScore: cc.Node,
        ScoreList: []
      },
      onLoad: function onLoad() {
        cc.log("GameData.room.joinermax1 " + JSON.stringify(GameData.room));
        GameData.room && (this.playerNum = GameData.room.joinermax);
        registEvent("onRoomMsg", this, this.ShowsPlayerTitle);
      },
      onEnable: function onEnable() {
        GameData.joiners && this.ShowsPlayerTitle();
        this.ScoreList = [];
      },
      onDestroy: function onDestroy() {},
      initPlayerHeadNode: function initPlayerHeadNode() {
        for (var i = 0; i < this.playerNum - 1; i++) {
          var index = i + 1;
          var headNode = this.playerHeadNode.parent.getChildByName("Player_" + (i + 2));
          if (headNode) continue;
          headNode = cc.instantiate(this.playerHeadNode);
          this.playerHeadNode.parent.addChild(headNode);
          headNode.name = "Player_" + (i + 2);
          headNode.x = this.playerHeadNode.x + 200 * (i + 1);
        }
      },
      ShowsPlayerTitle: function ShowsPlayerTitle() {
        void 0 != this.playerNum && (this.playerNum = GameData.room.joinermax);
        cc.log("this.playerNum2" + this.playerNum);
        this.initPlayerHeadNode();
        for (var i = 0; i < this.playerNum; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (joiner) {
            var playerhead = joiner.headimgurl;
            this.ShowPlayerNameOnItme(index, joiner.name);
            this.ShowsPlayerImageOnItme(index, playerhead);
            this.ShowPlayerOwner(index, joiner);
          }
        }
      },
      ShowPlayerNameOnItme: function ShowPlayerNameOnItme(index, nameStr) {
        var nameNode = cc.find("Player_" + index + "/nick_name", this.playerHeadNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      ShowsPlayerImageOnItme: function ShowsPlayerImageOnItme(index, playIma) {
        if (void 0 == playIma || "" == playIma) return;
        var self = this;
        cc.loader.load({
          url: playIma,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var nameNode = cc.find("Player_" + index + "/head", self.playerHeadNode.parent);
            nameNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      ShowPlayerOwner: function ShowPlayerOwner(index, player) {
        if (GameData.room.creator == player.uid) {
          var owner = cc.find("Player_" + index + "/owner", this.playerHeadNode.parent);
          owner.active = true;
        }
      },
      ShowPlayerScoreItem: function ShowPlayerScoreItem() {
        var len;
        len = GameData.game.roundNum;
        for (var i = 0; i < len; i++) {
          var index = i + 1;
          var scoreNode = this.playerScoreItem.parent.getChildByName("" + i);
          if (null == scoreNode) {
            scoreNode = cc.instantiate(this.playerScoreItem);
            this.playerScoreItem.parent.addChild(scoreNode);
            this.ScoreList.push(scoreNode);
            scoreNode.active = true;
            scoreNode.name = "" + i;
            scoreNode.y = this.playerScoreItem.y - i * this.playerScoreItem.height;
          }
          this.scoreScollView.content.height < this.ScoreList.length * this.playerScoreItem.height && (this.scoreScollView.content.height = this.scoreScollView.content.height + this.playerScoreItem.height);
          var jushuNode = cc.find(i + "/roundNum", this.playerScoreItem.parent);
          jushuNode.getComponent(cc.Label).string = "第" + index + "局：";
          for (var m = 0; m < 4; m++) {
            var index = m + 1;
            var scoreNum = cc.find("scoreNum_" + index, scoreNode);
            m >= this.playerNum && (scoreNum.active = false);
          }
          for (var j = 0; j < this.playerNum; j++) {
            var indem = j + 1;
            var playerUid = GameData.joiners[j].uid;
            var scoreNum = cc.find("scoreNum_" + indem, scoreNode);
            if (GameData.JushuScore[i][playerUid] > 0) {
              scoreNum.getComponent("cc.Label").string = "+" + GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(254, 48, 0);
            } else if (0 == GameData.JushuScore[i][playerUid]) {
              scoreNum.getComponent("cc.Label").string = "0 分";
              scoreNum.color = new cc.Color(0, 164, 54);
            } else {
              scoreNum.getComponent("cc.Label").string = GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(24, 51, 55);
            }
            if (playerUid == GameData.JushuScore[i].zhuangUid) {
              var zhuangIndex = j + 1;
              var zhuangSaw = cc.find("zhuang_" + zhuangIndex, scoreNode);
              zhuangSaw.active = true;
            }
          }
        }
        cc.log("GameData.room.joinermax2 " + GameData.room.joinermax);
        if (void 0 != this.playerNum) {
          this.playerNum = GameData.room.joinermax;
          this.AddSumScore();
        }
      },
      AddSumScore: function AddSumScore() {
        var children = this.playerSumScore.children;
        for (var i = 0; i < children.length; i++) {
          console.log("this.playerNum = " + this.playerNum + ",i = " + i);
          i >= this.playerNum && (children[i].active = false);
        }
        for (var i = 0; i < this.playerNum; i++) {
          var index = i + 1;
          var Allscore = cc.find("scoreNum_" + index, this.playerSumScore);
          var playUid = GameData.joiners[i].uid;
          if (GameData.allScores[playUid] > 0) {
            0 != GameData.room.opts.scoreBase ? Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分" : Allscore.getComponent("cc.Label").string = "+" + GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(254, 48, 0);
          } else if (0 == GameData.allScores[playUid]) {
            Allscore.getComponent("cc.Label").string = "0 分";
            Allscore.color = new cc.Color(0, 164, 54);
          } else {
            Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(24, 51, 55);
          }
        }
      },
      close: function close() {
        this.scoreLayer.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  roomScore_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a6c0DskQ1DDr/7Stu3iRa1", "roomScore_changchun");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreScollView: cc.ScrollView,
        scoreLayer: cc.Node,
        playerHeadNode: cc.Node,
        playerScoreItem: cc.Node,
        playerSumScore: cc.Node,
        ScoreList: []
      },
      onLoad: function onLoad() {
        GameData.room && (this.playerNum = GameData.room.opts.joinermax);
        registEvent("onRoomInfo", this, this.ShowsPlayerTitle);
      },
      onEnable: function onEnable() {
        GameData.joiners && this.ShowsPlayerTitle();
        this.ScoreList = [];
      },
      onDestroy: function onDestroy() {},
      initPlayerHeadNode: function initPlayerHeadNode() {
        for (var i = 0; i < this.playerNum - 1; i++) {
          var index = i + 1;
          var headNode = this.playerHeadNode.parent.getChildByName("Player_" + (i + 2));
          if (headNode) continue;
          headNode = cc.instantiate(this.playerHeadNode);
          this.playerHeadNode.parent.addChild(headNode);
          headNode.name = "Player_" + (i + 2);
          headNode.x = this.playerHeadNode.x + 200 * (i + 1);
        }
      },
      ShowsPlayerTitle: function ShowsPlayerTitle() {
        void 0 != this.playerNum && (this.playerNum = GameData.room.opts.joinermax);
        cc.log("this.playerNum2" + this.playerNum);
        this.initPlayerHeadNode();
        for (var i = 0; i < this.playerNum; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (joiner) {
            var playerhead = joiner.headimgurl;
            this.ShowPlayerNameOnItme(index, joiner.name);
            this.ShowsPlayerImageOnItme(index, playerhead);
            this.ShowPlayerOwner(index, joiner);
          }
        }
      },
      ShowPlayerNameOnItme: function ShowPlayerNameOnItme(index, nameStr) {
        var nameNode = cc.find("Player_" + index + "/nick_name", this.playerHeadNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      ShowsPlayerImageOnItme: function ShowsPlayerImageOnItme(index, playIma) {
        if (void 0 == playIma || "" == playIma) return;
        var self = this;
        cc.loader.load({
          url: playIma,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var nameNode = cc.find("Player_" + index + "/head", self.playerHeadNode.parent);
            nameNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      ShowPlayerOwner: function ShowPlayerOwner(index, player) {
        if (GameData.room.creator == player.uid) {
          var owner = cc.find("Player_" + index + "/owner", this.playerHeadNode.parent);
          owner.active = true;
        }
      },
      ShowPlayerScoreItem: function ShowPlayerScoreItem() {
        var len;
        len = GameData.game.roundNum;
        for (var i = 0; i < len; i++) {
          var index = i + 1;
          var scoreNode = this.playerScoreItem.parent.getChildByName("" + i);
          if (null == scoreNode) {
            scoreNode = cc.instantiate(this.playerScoreItem);
            this.playerScoreItem.parent.addChild(scoreNode);
            this.ScoreList.push(scoreNode);
            scoreNode.active = true;
            scoreNode.name = "" + i;
            scoreNode.y = this.playerScoreItem.y - i * this.playerScoreItem.height;
          }
          this.scoreScollView.content.height < this.ScoreList.length * this.playerScoreItem.height && (this.scoreScollView.content.height = this.scoreScollView.content.height + this.playerScoreItem.height);
          var jushuNode = cc.find(i + "/roundNum", this.playerScoreItem.parent);
          jushuNode.getComponent(cc.Label).string = "第" + index + "局：";
          for (var m = 0; m < 4; m++) {
            var index = m + 1;
            var scoreNum = cc.find("scoreNum_" + index, scoreNode);
            m >= this.playerNum && (scoreNum.active = false);
          }
          for (var j = 0; j < this.playerNum; j++) {
            var indem = j + 1;
            var playerUid = GameData.joiners[j].uid;
            var scoreNum = cc.find("scoreNum_" + indem, scoreNode);
            if (GameData.JushuScore[i][playerUid] > 0) {
              scoreNum.getComponent("cc.Label").string = "+" + GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(254, 48, 0);
            } else if (0 == GameData.JushuScore[i][playerUid]) {
              scoreNum.getComponent("cc.Label").string = "0 分";
              scoreNum.color = new cc.Color(0, 164, 54);
            } else {
              scoreNum.getComponent("cc.Label").string = GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(24, 51, 55);
            }
            if (playerUid == GameData.JushuScore[i].zhuangUid) {
              var zhuangIndex = j + 1;
              var zhuangSaw = cc.find("zhuang_" + zhuangIndex, scoreNode);
              zhuangSaw.active = true;
            }
          }
        }
        if (void 0 != this.playerNum) {
          this.playerNum = GameData.room.opts.joinermax;
          this.AddSumScore();
        }
      },
      AddSumScore: function AddSumScore() {
        var children = this.playerSumScore.children;
        for (var i = 0; i < children.length; i++) {
          console.log("this.playerNum = " + this.playerNum + ",i = " + i);
          i >= this.playerNum && (children[i].active = false);
        }
        for (var i = 0; i < this.playerNum; i++) {
          var index = i + 1;
          var Allscore = cc.find("scoreNum_" + index, this.playerSumScore);
          var playUid = GameData.joiners[i].uid;
          if (GameData.allScores[playUid] > 0) {
            0 != GameData.room.opts.scoreBase ? Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分" : Allscore.getComponent("cc.Label").string = "+" + GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(254, 48, 0);
          } else if (0 == GameData.allScores[playUid]) {
            Allscore.getComponent("cc.Label").string = "0 分";
            Allscore.color = new cc.Color(0, 164, 54);
          } else {
            Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(24, 51, 55);
          }
        }
      },
      close: function close() {
        this.scoreLayer.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  roomScore_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d2ceMKIKdA5KAtT6KF/IFU", "roomScore_huadian");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreScollView: cc.ScrollView,
        scoreLayer: cc.Node,
        playerHeadNode: cc.Node,
        playerScoreItem: cc.Node,
        playerSumScore: cc.Node,
        ScoreList: []
      },
      onLoad: function onLoad() {
        GameData.room && (this.playerNum = GameData.room.opts.joinermax);
        registEvent("onRoomInfo", this, this.ShowsPlayerTitle);
      },
      onEnable: function onEnable() {
        GameData.joiners && this.ShowsPlayerTitle();
        this.ScoreList = [];
      },
      onDestroy: function onDestroy() {},
      initPlayerHeadNode: function initPlayerHeadNode() {
        for (var i = 0; i < this.playerNum - 1; i++) {
          var index = i + 1;
          var headNode = this.playerHeadNode.parent.getChildByName("Player_" + (i + 2));
          if (headNode) continue;
          headNode = cc.instantiate(this.playerHeadNode);
          this.playerHeadNode.parent.addChild(headNode);
          headNode.name = "Player_" + (i + 2);
          headNode.x = this.playerHeadNode.x + 200 * (i + 1);
        }
      },
      ShowsPlayerTitle: function ShowsPlayerTitle() {
        void 0 != this.playerNum && (this.playerNum = GameData.room.opts.joinermax);
        cc.log("this.playerNum2" + this.playerNum);
        this.initPlayerHeadNode();
        for (var i = 0; i < this.playerNum; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (joiner) {
            var playerhead = joiner.headimgurl;
            this.ShowPlayerNameOnItme(index, joiner.name);
            this.ShowsPlayerImageOnItme(index, playerhead);
            this.ShowPlayerOwner(index, joiner);
          }
        }
      },
      ShowPlayerNameOnItme: function ShowPlayerNameOnItme(index, nameStr) {
        var nameNode = cc.find("Player_" + index + "/nick_name", this.playerHeadNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      ShowsPlayerImageOnItme: function ShowsPlayerImageOnItme(index, playIma) {
        if (void 0 == playIma || "" == playIma || playIma.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: playIma,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var nameNode = cc.find("Player_" + index + "/head", self.playerHeadNode.parent);
            nameNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      ShowPlayerOwner: function ShowPlayerOwner(index, player) {
        if (GameData.room.creator == player.uid) {
          var owner = cc.find("Player_" + index + "/owner", this.playerHeadNode.parent);
          owner.active = true;
        }
      },
      ShowPlayerScoreItem: function ShowPlayerScoreItem() {
        var len;
        len = GameData.game.roundNum;
        for (var i = 0; i < len; i++) {
          var index = i + 1;
          var scoreNode = this.playerScoreItem.parent.getChildByName("" + i);
          if (null == scoreNode) {
            scoreNode = cc.instantiate(this.playerScoreItem);
            this.playerScoreItem.parent.addChild(scoreNode);
            this.ScoreList.push(scoreNode);
            scoreNode.active = true;
            scoreNode.name = "" + i;
            scoreNode.y = this.playerScoreItem.y - i * this.playerScoreItem.height;
          }
          this.scoreScollView.content.height < this.ScoreList.length * this.playerScoreItem.height && (this.scoreScollView.content.height = this.scoreScollView.content.height + this.playerScoreItem.height);
          var jushuNode = cc.find(i + "/roundNum", this.playerScoreItem.parent);
          jushuNode.getComponent(cc.Label).string = "第" + index + "局：";
          for (var m = 0; m < 4; m++) {
            var index = m + 1;
            var scoreNum = cc.find("scoreNum_" + index, scoreNode);
            m >= this.playerNum && (scoreNum.active = false);
          }
          for (var j = 0; j < this.playerNum; j++) {
            var indem = j + 1;
            var playerUid = GameData.joiners[j].uid;
            var scoreNum = cc.find("scoreNum_" + indem, scoreNode);
            if (GameData.JushuScore[i][playerUid] > 0) {
              scoreNum.getComponent("cc.Label").string = "+" + GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(254, 48, 0);
            } else if (0 == GameData.JushuScore[i][playerUid]) {
              scoreNum.getComponent("cc.Label").string = "0 分";
              scoreNum.color = new cc.Color(0, 164, 54);
            } else {
              scoreNum.getComponent("cc.Label").string = GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(24, 51, 55);
            }
            if (playerUid == GameData.JushuScore[i].zhuangUid) {
              var zhuangIndex = j + 1;
              var zhuangSaw = cc.find("zhuang_" + zhuangIndex, scoreNode);
              zhuangSaw.active = true;
            }
          }
        }
        if (void 0 != this.playerNum) {
          this.playerNum = GameData.room.opts.joinermax;
          this.AddSumScore();
        }
      },
      AddSumScore: function AddSumScore() {
        var children = this.playerSumScore.children;
        for (var i = 0; i < children.length; i++) {
          console.log("this.playerNum = " + this.playerNum + ",i = " + i);
          i >= this.playerNum && (children[i].active = false);
        }
        for (var i = 0; i < this.playerNum; i++) {
          var index = i + 1;
          var Allscore = cc.find("scoreNum_" + index, this.playerSumScore);
          var playUid = GameData.joiners[i].uid;
          if (GameData.allScores[playUid] > 0) {
            0 != GameData.room.opts.scoreBase ? Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分" : Allscore.getComponent("cc.Label").string = "+" + GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(254, 48, 0);
          } else if (0 == GameData.allScores[playUid]) {
            Allscore.getComponent("cc.Label").string = "0 分";
            Allscore.color = new cc.Color(0, 164, 54);
          } else {
            Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(24, 51, 55);
          }
        }
      },
      close: function close() {
        this.scoreLayer.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  roomScore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7328dbldeRCTLDt0AvpXpeT", "roomScore");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreScollView: cc.ScrollView,
        scoreLayer: cc.Node,
        playerHeadNode: cc.Node,
        playerScoreItem: cc.Node,
        playerSumScore: cc.Node,
        ScoreList: []
      },
      onLoad: function onLoad() {
        GameData.room && (this.playerMax = GameData.room.joinermax);
        registEvent("onRoomMsg", this, this.ShowsPlayerTitle);
      },
      onEnable: function onEnable() {
        GameData.joiners && this.ShowsPlayerTitle();
        this.ScoreList = [];
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomMsg", this, this.ShowsPlayerTitle);
      },
      initPlayerHeadNode: function initPlayerHeadNode() {
        for (var i = 0; i < this.playerMax - 1; i++) {
          var index = i + 1;
          var headNode = this.playerHeadNode.parent.getChildByName("Player_" + (i + 2));
          if (headNode) continue;
          headNode = cc.instantiate(this.playerHeadNode);
          this.playerHeadNode.parent.addChild(headNode);
          headNode.name = "Player_" + (i + 2);
          headNode.x = this.playerHeadNode.x + 200 * (i + 1);
        }
      },
      ShowsPlayerTitle: function ShowsPlayerTitle() {
        this.initPlayerHeadNode();
        for (var i = 0; i < this.playerMax; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (joiner) {
            var playerhead = joiner.headimgurl;
            this.ShowPlayerNameOnItme(index, joiner.name);
            this.ShowsPlayerImageOnItme(index, playerhead);
            this.ShowPlayerOwner(index, joiner);
          }
        }
      },
      ShowPlayerNameOnItme: function ShowPlayerNameOnItme(index, nameStr) {
        cc.log("roomscroe");
        var nameNode = cc.find("Player_" + index + "/nick_name", this.playerHeadNode.parent);
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      ShowPlayerOwner: function ShowPlayerOwner(index, player) {
        if (GameData.room.creator == player.uid) {
          var owner = cc.find("Player_" + index + "/owner", this.playerHeadNode.parent);
          owner.active = true;
        }
      },
      ShowsPlayerImageOnItme: function ShowsPlayerImageOnItme(index, playIma) {
        if (void 0 == playIma || "" == playIma) return;
        var self = this;
        cc.loader.load({
          url: playIma,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var nameNode = cc.find("Player_" + index + "/head", self.playerHeadNode.parent);
            nameNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      ShowPlayerScoreItem: function ShowPlayerScoreItem() {
        var len;
        len = GameData.game.roundCount;
        for (var i = 0; i < len; i++) {
          var index = i + 1;
          var scoreNode = this.playerScoreItem.parent.getChildByName("" + i);
          if (null == scoreNode) {
            scoreNode = cc.instantiate(this.playerScoreItem);
            this.playerScoreItem.parent.addChild(scoreNode);
            this.ScoreList.push(scoreNode);
            scoreNode.active = true;
            scoreNode.name = "" + i;
            scoreNode.y = this.playerScoreItem.y - i * this.playerScoreItem.height;
          }
          this.scoreScollView.content.height < this.ScoreList.length * this.playerScoreItem.height && (this.scoreScollView.content.height = this.scoreScollView.content.height + this.playerScoreItem.height);
          var jushuNode = cc.find(i + "/roundNum", this.playerScoreItem.parent);
          jushuNode.getComponent(cc.Label).string = "第" + index + "局：";
          for (var m = 0; m < 4; m++) {
            var index = m + 1;
            var scoreNum = cc.find("scoreNum_" + index, scoreNode);
            m >= this.playerMax && (scoreNum.active = false);
          }
          for (var j = 0; j < this.playerMax; j++) {
            var indem = j + 1;
            var playerUid = GameData.joiners[j].uid;
            var scoreNum = cc.find("scoreNum_" + indem, scoreNode);
            if (GameData.JushuScore[i][playerUid] > 0) {
              scoreNum.getComponent("cc.Label").string = "+" + GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(254, 48, 0);
            } else if (0 == GameData.JushuScore[i][playerUid]) {
              scoreNum.getComponent("cc.Label").string = "0 分";
              scoreNum.color = new cc.Color(0, 164, 54);
            } else {
              scoreNum.getComponent("cc.Label").string = GameData.JushuScore[i][playerUid] + "分";
              scoreNum.color = new cc.Color(0, 0, 0);
            }
            if (playerUid == GameData.JushuScore[i].zhuangUid) {
              var zhuangIndex = j + 1;
              var zhuangSaw = cc.find("zhuang_" + zhuangIndex, scoreNode);
              zhuangSaw.active = true;
            }
          }
        }
        this.AddSumScore();
      },
      AddSumScore: function AddSumScore() {
        var children = this.playerSumScore.children;
        for (var i = 0; i < children.length; i++) {
          console.log("this.playerMax = " + this.playerMax + ",i = " + i);
          i >= this.playerMax && (children[i].active = false);
        }
        for (var i = 0; i < this.playerMax; i++) {
          var index = i + 1;
          var Allscore = cc.find("scoreNum_" + index, this.playerSumScore);
          var playUid = GameData.joiners[i].uid;
          if (GameData.allScores[playUid] > 0) {
            Allscore.getComponent("cc.Label").string = "+" + GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(254, 48, 0);
          } else if (0 == GameData.allScores[playUid]) {
            Allscore.getComponent("cc.Label").string = "0 分";
            Allscore.color = new cc.Color(0, 164, 54);
          } else {
            Allscore.getComponent("cc.Label").string = GameData.allScores[playUid] + "分";
            Allscore.color = new cc.Color(0, 0, 0);
          }
        }
      },
      close: function close() {
        soundMngr.instance.playAudioOther("button");
        this.scoreLayer.active = false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  "roomSummary-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "71fd7vr38RD05Dr/I7IKe1E", "roomSummary-shishi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
        registEvent("recordInfo", this.recordInfoShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
        unregistEvent("recordInfo", this.recordInfoShow);
      },
      onShow: function onShow() {
        this.showTime();
        cc.find("player_1", this.panel).y = 0;
        cc.find("player_2", this.panel).y = 0;
        cc.find("player_3", this.panel).y = 0;
        cc.find("player_4", this.panel).y = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          this.showPlayer(GameData.joiners[i], i + 1);
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
          3 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 3 == i && (playerNode.y = 25);
        }
        for (var i = GameData.joiners.length; i < 4; i++) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
      },
      recordInfoShow: function recordInfoShow(uid, idx) {
        var num_zimo = 0;
        var num_sudao = 0;
        var num_youjin = 0;
        var num_dizhen = 0;
        var num_dianpao = 0;
        var zimoNum = cc.find("player_" + idx + "/zimo/zimolabel", this.panel);
        var sudaoNum = cc.find("player_" + idx + "/sudao/sudaolabel", this.panel);
        var youjinNum = cc.find("player_" + idx + "/youjin/youjinlabel", this.panel);
        var dizhenNum = cc.find("player_" + idx + "/dizhen/dizhenlabel", this.panel);
        var dianpaoNum = cc.find("player_" + idx + "/dianpao/dianpaolabel", this.panel);
        for (var i = 0; i < GameData.recordInfo.length; i++) GameData.recordInfo[i].winner == uid ? 1 == GameData.recordInfo[i].type ? num_sudao++ : 2 == GameData.recordInfo[i].type ? num_zimo++ : 3 == GameData.recordInfo[i].type ? num_dizhen++ : 4 != GameData.recordInfo[i].type && 5 != GameData.recordInfo[i].type && 6 != GameData.recordInfo[i].type && 7 != GameData.recordInfo[i].type || num_youjin++ : GameData.recordInfo[i].dianpao == uid && 1 == GameData.recordInfo[i].type && num_dianpao++;
        zimoNum.getComponent("cc.Label").string = num_zimo;
        sudaoNum.getComponent("cc.Label").string = num_sudao;
        youjinNum.getComponent("cc.Label").string = num_youjin;
        dizhenNum.getComponent("cc.Label").string = num_dizhen;
        dianpaoNum.getComponent("cc.Label").string = num_dianpao;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        if (!player) return;
        this.recordInfoShow(player.uid, idx);
        var joinermax = GameData.room.opts.joinermax;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        if (joinermax < 4) {
          var distance = (panelSize - playerNodeSize * joinermax) / 2 - 50 * (joinermax - 1);
          pNode.x = distance + 50 * (idx - 1);
        }
        nameNode.getComponent("cc.Label").string = cutstr(player.name, 10);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        var score = GameData.allScores[player.uid] - GameData.room.opts.scoreBase;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").string = score;
          cc.log("..score:" + score);
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
        null != player.headimgurl && "" != player.headimgurl && player.headimgurl.length > 0 && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
        if (GameData.player.uid == player.uid) {
          var biankuang = cc.find("player_" + idx + "/biankuang", this.panel);
          var selfbiankuang = cc.find("player_" + idx + "/selfbiankuang", this.panel);
          biankuang.active = false;
          selfbiankuang.active = true;
        }
        if (GameData.room.creator == player.uid) {
          var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
          ownerNode.active = true;
        }
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && GameData.allScores[GameData.joiners[i].uid] > GameData.allScores[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        if (GameData.allScores[GetScoreMaxUid()] == GameData.allScores[player.uid]) {
          var winNode = cc.find("player_" + idx + "/win", this.panel);
          winNode.active = GameData.allScores[GetScoreMaxUid()] - GameData.room.opts.scoreBase > 0;
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {} ],
  roomSummary_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aca0b6LCtxI8oJxZonniauf", "roomSummary_changchun");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        this.showTime();
        cc.find("player_1", this.panel).y = 0;
        cc.find("player_2", this.panel).y = 0;
        cc.find("player_3", this.panel).y = 0;
        cc.find("player_4", this.panel).y = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          this.showPlayer(GameData.joiners[i], i + 1);
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
          3 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 3 == i && (playerNode.y = 25);
        }
        for (var i = GameData.joiners.length; i < 4; i++) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
      },
      recordInfoShow: function recordInfoShow(uid, idx) {
        var num_hu = 0;
        var num_mobao = 0;
        var num_lianzhuang = 0;
        var num_dianpao = 0;
        var huNum = cc.find("player_" + idx + "/zimo/zimolabel", this.panel);
        var mobaoNum = cc.find("player_" + idx + "/sudao/sudaolabel", this.panel);
        var lianzhuangNum = cc.find("player_" + idx + "/youjin/youjinlabel", this.panel);
        var dianpaoNum = cc.find("player_" + idx + "/dianpao/dianpaolabel", this.panel);
        var SummaryTypeData = profileChangChun.summaryDataByUid(uid);
        if (!SummaryTypeData) return;
        num_hu = SummaryTypeData.huCount;
        num_mobao = SummaryTypeData.moBaoNum;
        num_lianzhuang = SummaryTypeData.serialZhuangNum;
        num_dianpao = SummaryTypeData.dianPaoCount;
        huNum.getComponent("cc.Label").string = num_hu;
        mobaoNum.getComponent("cc.Label").string = num_mobao;
        lianzhuangNum.getComponent("cc.Label").string = num_lianzhuang;
        dianpaoNum.getComponent("cc.Label").string = num_dianpao;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        if (!player) return;
        this.recordInfoShow(player.uid, idx);
        var joinermax = GameData.room.opts.joinermax;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        if (joinermax < 4) {
          var distance = (panelSize - playerNodeSize * joinermax) / 2 - 50 * (joinermax - 1);
          pNode.x = distance + 50 * (idx - 1);
        }
        nameNode.getComponent("cc.Label").string = cutstr(player.name, 10);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        var score;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[player.uid] && (score = coinData.coins[player.uid]);
        } else {
          var summaryData = profileHuaDian.summaryDataByUid(player.uid);
          if (!summaryData) return;
          score = summaryData.roomScore;
        }
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").string = score;
          cc.log("..score:" + score);
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
        null != player.headimgurl && "" != player.headimgurl && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
        if (GameData.player.uid == player.uid) {
          var biankuang = cc.find("player_" + idx + "/biankuang", this.panel);
          var selfbiankuang = cc.find("player_" + idx + "/selfbiankuang", this.panel);
          biankuang.active = false;
          selfbiankuang.active = true;
        }
        if (GameData.room.creator == player.uid) {
          var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
          ownerNode.active = true;
        }
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && RoomHandler.scores[GameData.joiners[i].uid] > RoomHandler.scores[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        if (RoomHandler.scores[GetScoreMaxUid()] == RoomHandler.scores[player.uid] && RoomHandler.scores[GetScoreMaxUid()] > 0) {
          var winNode = cc.find("player_" + idx + "/win", this.panel);
          winNode.active = true;
          winNode.scale = 2;
          var act1 = cc.rotateBy(.4, 720);
          var act2 = cc.scaleTo(.4, 1);
          var action = cc.spawn(act1, act2);
          winNode.runAction(action);
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomSummary_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b954qgs91Kgr0YSTG4UurB", "roomSummary_heb");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        this.showTime();
        cc.find("player_1", this.panel).y = 0;
        cc.find("player_2", this.panel).y = 0;
        cc.find("player_3", this.panel).y = 0;
        cc.find("player_4", this.panel).y = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          this.showPlayer(GameData.joiners[i], i + 1);
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
          3 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 3 == i && (playerNode.y = 25);
        }
        for (var i = GameData.joiners.length; i < 4; i++) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
      },
      recordInfoShow: function recordInfoShow(uid, idx) {
        var num_hu = 0;
        var num_mobao = 0;
        var num_lianzhuang = 0;
        var num_dianpao = 0;
        var huNum = cc.find("player_" + idx + "/zimo/zimolabel", this.panel);
        var mobaoNum = cc.find("player_" + idx + "/sudao/sudaolabel", this.panel);
        var lianzhuangNum = cc.find("player_" + idx + "/youjin/youjinlabel", this.panel);
        var dianpaoNum = cc.find("player_" + idx + "/dianpao/dianpaolabel", this.panel);
        var SummaryTypeData = profileChangChun.summaryDataByUid(uid);
        if (!SummaryTypeData) return;
        num_hu = SummaryTypeData.huCount;
        num_mobao = SummaryTypeData.moBaoNum;
        num_lianzhuang = SummaryTypeData.serialZhuangNum;
        num_dianpao = SummaryTypeData.dianPaoCount;
        huNum.getComponent("cc.Label").string = num_hu;
        mobaoNum.getComponent("cc.Label").string = num_mobao;
        lianzhuangNum.getComponent("cc.Label").string = num_lianzhuang;
        dianpaoNum.getComponent("cc.Label").string = num_dianpao;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        if (!player) return;
        this.recordInfoShow(player.uid, idx);
        var joinermax = GameData.room.opts.joinermax;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        if (joinermax < 4) {
          var distance = (panelSize - playerNodeSize * joinermax) / 2 - 50 * (joinermax - 1);
          pNode.x = distance + 50 * (idx - 1);
        }
        nameNode.getComponent("cc.Label").string = cutstr(player.name, 10);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        var score;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[player.uid] && (score = coinData.coins[player.uid]);
        } else {
          var summaryData = profileHuaDian.summaryDataByUid(player.uid);
          if (!summaryData) return;
          score = summaryData.roomScore;
        }
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").string = score;
          cc.log("..score:" + score);
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
        null != player.headimgurl && "" != player.headimgurl && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
        if (GameData.player.uid == player.uid) {
          var biankuang = cc.find("player_" + idx + "/biankuang", this.panel);
          var selfbiankuang = cc.find("player_" + idx + "/selfbiankuang", this.panel);
          biankuang.active = false;
          selfbiankuang.active = true;
        }
        if (GameData.room.creator == player.uid) {
          var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
          ownerNode.active = true;
        }
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && RoomHandler.scores[GameData.joiners[i].uid] > RoomHandler.scores[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        if (RoomHandler.scores[GetScoreMaxUid()] == RoomHandler.scores[player.uid] && RoomHandler.scores[GetScoreMaxUid()] > 0) {
          var winNode = cc.find("player_" + idx + "/win", this.panel);
          winNode.active = true;
          winNode.scale = 2;
          var act1 = cc.rotateBy(.4, 720);
          var act2 = cc.scaleTo(.4, 1);
          var action = cc.spawn(act1, act2);
          winNode.runAction(action);
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomSummary_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d03185lT9HxZ/qo7kmJ/+1", "roomSummary_huadian");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        fonts: {
          default: [],
          type: cc.Font
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        this.showTime();
        cc.find("player_1", this.panel).y = 0;
        cc.find("player_2", this.panel).y = 0;
        cc.find("player_3", this.panel).y = 0;
        cc.find("player_4", this.panel).y = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          this.showPlayer(GameData.joiners[i], i + 1);
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
          3 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 1 == i ? playerNode.y = 25 : 4 == GameData.joiners.length && 3 == i && (playerNode.y = 25);
        }
        for (var i = GameData.joiners.length; i < 4; i++) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
      },
      recordInfoShow: function recordInfoShow(uid, idx) {
        var num_hu = 0;
        var num_mobao = 0;
        var num_lianzhuang = 0;
        var num_dianpao = 0;
        var huNum = cc.find("player_" + idx + "/zimo/zimolabel", this.panel);
        var mobaoNum = cc.find("player_" + idx + "/sudao/sudaolabel", this.panel);
        var lianzhuangNum = cc.find("player_" + idx + "/youjin/youjinlabel", this.panel);
        var dianpaoNum = cc.find("player_" + idx + "/dianpao/dianpaolabel", this.panel);
        var SummaryTypeData = profileHuaDian.summaryDataByUid(uid);
        if (!SummaryTypeData) return;
        num_hu = SummaryTypeData.huCount;
        num_mobao = SummaryTypeData.moBaoNum;
        num_lianzhuang = SummaryTypeData.serialZhuangNum;
        num_dianpao = SummaryTypeData.dianPaoCount;
        huNum.getComponent("cc.Label").string = num_hu;
        mobaoNum.getComponent("cc.Label").string = num_mobao;
        lianzhuangNum.getComponent("cc.Label").string = num_lianzhuang;
        dianpaoNum.getComponent("cc.Label").string = num_dianpao;
      },
      showTime: function showTime() {
        var roomID = cc.find("roomID", this.panel);
        var dateNode = cc.find("date", this.panel);
        var timeNode = cc.find("time", this.panel);
        var date = new Date(GameData.room.createtime);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        hours < 10 ? hours = "0" + hours + ":" : hours += ":";
        var minute = date.getMinutes();
        minute < 10 ? minute = "0" + minute + ":" : minute += ":";
        var second = date.getSeconds();
        second = second < 10 ? "0" + second : second;
        roomID.getComponent("cc.Label").string = "房号 : " + GameData.room.id;
        dateNode.getComponent("cc.Label").string = year + "-" + month + "-" + day;
        timeNode.getComponent("cc.Label").string = hours + minute + second;
      },
      showPlayer: function showPlayer(player, idx) {
        if (!player) return;
        this.recordInfoShow(player.uid, idx);
        var joinermax = GameData.room.opts.joinermax;
        var nameNode = cc.find("player_" + idx + "/name", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head", this.panel);
        var playerID = cc.find("player_" + idx + "/playerID", this.panel);
        var pNode = cc.find("player_" + idx, this.panel);
        var panelSize = cc.find("bg", this.panel).getContentSize().width;
        var playerNodeSize = cc.find("player_" + idx + "/biankuang", this.panel).getContentSize().width;
        if (joinermax < 4) {
          var distance = (panelSize - playerNodeSize * joinermax) / 2 - 50 * (joinermax - 1);
          pNode.x = distance + 50 * (idx - 1);
        }
        nameNode.getComponent("cc.Label").string = cutstr(player.name, 10);
        playerID.getComponent("cc.Label").string = "ID:" + player.uid;
        var score;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[player.uid] && (score = coinData.coins[player.uid]);
        } else {
          var summaryData = profileHuaDian.summaryDataByUid(player.uid);
          if (!summaryData) return;
          score = summaryData.roomScore;
        }
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").string = "+" + score;
          scoreNode.getComponent("cc.Label").font = this.fonts[1];
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").string = score;
          cc.log("..score:" + score);
          scoreNode.getComponent("cc.Label").font = this.fonts[0];
        } else {
          scoreNode.getComponent("cc.Label").string = score;
          scoreNode.getComponent("cc.Label").font = this.fonts[2];
        }
        null != player.headimgurl && "" != player.headimgurl && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
        if (GameData.player.uid == player.uid) {
          var biankuang = cc.find("player_" + idx + "/biankuang", this.panel);
          var selfbiankuang = cc.find("player_" + idx + "/selfbiankuang", this.panel);
          biankuang.active = false;
          selfbiankuang.active = true;
        }
        if (GameData.room.creator == player.uid) {
          var ownerNode = cc.find("player_" + idx + "/owner", this.panel);
          ownerNode.active = true;
        }
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && RoomHandler.scores[GameData.joiners[i].uid] > RoomHandler.scores[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        if (RoomHandler.scores[GetScoreMaxUid()] == RoomHandler.scores[player.uid] && RoomHandler.scores[GetScoreMaxUid()] > 0) {
          var winNode = cc.find("player_" + idx + "/win", this.panel);
          winNode.active = true;
        }
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomSummary: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "65272mq3KFIfoWddRkFZrLp", "roomSummary");
    "use strict";
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        font: {
          default: [],
          type: [ cc.Font ]
        }
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
        registEvent("recordInfo", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
        unregistEvent("recordInfo", this, this.onShow);
      },
      onShow: function onShow() {
        cc.log("..showSummaryLayer");
        var idx = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          this.showPlayer(GameData.joiners[i], ++idx);
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
        }
        for (var i = GameData.joiners.length; i < 4; i++) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
        for (var i = 0; i < GameData.joiners.length; i++) if (2 == GameData.joiners.length) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.x = 310 * i - 155;
        } else if (3 == GameData.joiners.length) {
          var playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.x = 310 * i - 310;
        }
        var roomId = cc.find("strNode/roomid", this.panel);
        var createtime = cc.find("strNode/time", this.panel);
        roomId.getComponent("cc.Label").string = "房间号:" + GameData.player.roomid;
        var time = getTimeStr(GameData.room.createtime);
        createtime.getComponent("cc.Label").string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
      },
      showPlayer: function showPlayer(player, idx) {
        cc.log("player idx:" + idx + " name:" + player.name + " score:" + GameData.allScores[player.uid]);
        var nameNode = cc.find("player_" + idx + "/head_bg/name", this.panel);
        var uid = cc.find("player_" + idx + "/head_bg/id", this.panel);
        var scoreTxtNode = cc.find("player_" + idx + "/fieldBg", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head_bg/head", this.panel);
        uid.getComponent("cc.Label").string = "ID:" + player.uid;
        isChinese(player.name) ? nameNode.getComponent("cc.Label").string = getShortStr(player.name, 5) : nameNode.getComponent("cc.Label").string = getShortStr(player.name, 9);
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && GameData.allScores[GameData.joiners[i].uid] > GameData.allScores[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        var winNode = cc.find("player_" + idx + "/win", this.panel);
        var score = 0;
        if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) {
          scoreTxtNode.active = false;
          var coinData = RoomHandler.getCoinData();
          coinData && coinData.coins && coinData.coins[player.uid] && (score = coinData.coins[player.uid]);
          winNode.active = score > 0;
        } else {
          score = GameData.allScores[player.uid] - GameData.room.initScore;
          GetScoreMaxUid() == player.uid ? winNode.active = GameData.allScores[GetScoreMaxUid()] - GameData.room.initScore > 0 : winNode.active = false;
        }
        void 0 == score ? score = 0 : null;
        if (score > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + score;
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = score;
        } else {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = score;
        }
        (null != player.headimgurl && "" != player.headimgurl || player.headimgurl.length > 0) && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture));
        });
        var owner = cc.find("player_" + idx + "/head_bg/Owner", this.panel);
        owner.active = GameData.room.creator == player.uid;
        var selfBg = cc.find("player_" + idx + "/selfBg", this.panel);
        var playerBg = cc.find("player_" + idx + "/playerBg", this.panel);
        if (player.uid == GameData.player.uid) {
          selfBg.active = true;
          playerBg.active = false;
        } else {
          selfBg.active = false;
          playerBg.active = true;
        }
        this.recordInfoShow(player.uid, idx);
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        soundMngr.instance.playAudioOther("button");
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      recordInfoShow: function recordInfoShow(uid, index) {
        var hu_num = 0;
        var chan_num = 0;
        var ming_num = 0;
        var an_num = 0;
        var huNum = cc.find("player_" + index + "/tongji/hu", this.panel);
        var chanNum = cc.find("player_" + index + "/tongji/chan", this.panel);
        var minggang = cc.find("player_" + index + "/tongji/ming", this.panel);
        var angang = cc.find("player_" + index + "/tongji/an", this.panel);
        for (var i = 0; i < GameData.recordInfo.length; i++) {
          GameData.recordInfo[i].winner == uid && hu_num++;
          var gang = GameData.recordInfo[i].gangs;
          if (gang[uid]) for (var m = 0; m < gang[uid].length; m++) {
            var gangNum = gang[uid][m];
            4 == gangNum.length ? ming_num++ : 5 == gangNum.length && an_num++;
          }
          if (GameData.recordInfo[i].zhuang == uid) {
            var type = GameData.recordInfo[i].type;
            for (var j = 0; j < type.length; j++) 12 == type[j] && chan_num++;
          }
        }
        huNum.getComponent("cc.Label").string = "胡牌次数:  " + hu_num;
        chanNum.getComponent("cc.Label").string = "被铲次数:  " + chan_num;
        minggang.getComponent("cc.Label").string = "明杠次数:  " + ming_num;
        angang.getComponent("cc.Label").string = "暗杠次数:  " + an_num;
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        soundMngr.instance.playAudioOther("button");
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomTable_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bba75iXSlKAKtFVlpGKK8o", "roomTable_changchun");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        direction_pos: cc.Sprite,
        direction_turn: cc.Node,
        baoCardNode: cc.Node,
        huiercard1: cc.Sprite,
        leftCardNumLabel: cc.Label,
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        cardsNode: cc.Node,
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node,
        cardTemplate: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardBugangPre: cc.Prefab,
        selectedCard: -1,
        HuType: null,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        disCardArrow: cc.Prefab,
        _cardArrow: cc.Node,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab,
        lastRoundLabel: cc.RichText,
        scoreLayer: cc.Node,
        baoAnimationNode: cc.Node,
        tingStateNode: cc.Node,
        passBtn: cc.Button,
        PiaoLayer: cc.Node
      },
      onLoad: function onLoad() {
        cc.log("11111111111111111111111");
        registEvent("onGameStart", this, this.handleGameStart);
        registEvent("onGameReady", this, this.handleGameReady);
        registEvent("onGameTurn", this, this.handleTurn);
        registEvent("playerConnect", this, this.showUI);
        registEvent("onMahjongStartRun", this, this.onShow);
        registEvent("onRegularCircle", this, this.onShow);
        registEvent("onHuaDianMahjongReconnecet", this, this.onShow);
        registEvent("onMahjongRunEnd", this, this.onGameScore);
        registEvent("onCardHu", this, this.handleHuCard);
        registEvent("onCardChi", this, this.handleChiCard);
        registEvent("onCardDis", this, this.handleDisCard);
        registEvent("onCardPeng", this, this.handlePengCard);
        registEvent("onCardGang", this, this.handleGangCard);
        registEvent("onCardTing", this, this.handleTingCard);
        registEvent("onCardBao", this, this.handleBao);
        registEvent("dianPao", this, this.handleDianPao);
        registEvent("onPushErrorMsg", this, this.showErrorMsg);
        registEvent("onCardBtnStart", this, this.onCardBtnStart);
        registEvent("onCardBtnMove", this, this.onCardBtnMove);
        registEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        registEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        this.actions = new Array();
        this._handCardArry = new Array();
        this._disCardArry = new Array();
        this.gangOperations = [];
        this.cardsNode.active = false;
        this.tingData = [];
        this.tingTip = this.node.getComponent("TingTip");
        this.playerSex = 1;
        this.isZiMoHuOnly = 0;
        this.isPass = true;
        this.isTing = true;
        if (GameData.room) {
          4 == GameData.room.opts.joinermax && (this.discardMax = 24);
          3 == GameData.room.opts.joinermax && (this.discardMax = 36);
          2 == GameData.room.opts.joinermax && (this.discardMax = 60);
        }
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this.cardsNode.addChild(this._cardArrow);
        this._cardArrow.active = false;
        this.myHandsInitPosition = [];
        this.saveMyHandsInitPosition();
        if (GameData.game.gameStart && GameData.game.zhuangUid > 0) {
          this.handleGameStart();
          this.onShow();
          this.handleTurn();
        }
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.handleGameStart);
        unregistEvent("onGameTurn", this, this.handleTurn);
        unregistEvent("playerConnect", this, this.showUI);
        unregistEvent("onMahjongStartRun", this, this.onShow);
        unregistEvent("onRegularCircle", this, this.onShow);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.onShow);
        unregistEvent("onMahjongRunEnd", this, this.showResultLayer);
        unregistEvent("onCardHu", this, this.handleHuCard);
        unregistEvent("onCardChi", this, this.handleChiCard);
        unregistEvent("onCardDis", this, this.handleDisCard);
        unregistEvent("onCardPeng", this, this.handlePengCard);
        unregistEvent("onCardGang", this, this.handleGangCard);
        unregistEvent("onCardBao", this, this.handleBao);
        unregistEvent("dianPao", this, this.handleDianPao);
        unregistEvent("onPushErrorMsg", this, this.showErrorMsg);
        unregistEvent("onCardBtnStart", this, this.onCardBtnStart);
        unregistEvent("onCardBtnMove", this, this.onCardBtnMove);
        unregistEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        unregistEvent("onCardBtnCancel", this, this.onCardBtnCancel);
      },
      showUI: function showUI() {
        GameData.room.status == gameDefine.RoomState.READY && this.handleGameStart();
      },
      handleGameStart: function handleGameStart() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        this.showBaoCardNode(false);
      },
      handleGameReady: function handleGameReady() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        for (var key in this.tingStateNode.children) this.tingStateNode.children[key].active = false;
        GameData.game.cardHuier1 = 0;
        this.showBaoCardNode(false);
        this.huiercard1.spriteFrame = null;
        this.huiercard1.node.active = false;
      },
      onShow: function onShow() {
        this.cardsNode.active = true;
        this.saveMyHandCard();
        this.showCards();
        this.showOperations();
        GameData.room.status >= gameDefine.RoomState.GAMEING && this.showTingState();
        GameData.game.dataInfo.bao && (profileHuaDian.checkIsTingPlayer() ? this.showBaoCardNode(true) : this.showBaoCardNode(false));
        GameData.player[GameData.player.uid].hasCheckedBao && this.showBaoCardImg();
        cc.log("~~~~~~~~~~~~~~~this.cardsNode.active~~~~~~~~~~~~~~~" + this.cardsNode.active);
        var showRoundNum = GameData.room.roundNum > GameData.room.opts.roundMax ? GameData.room.opts.roundMax : GameData.room.roundNum;
        this.lastRoundLabel.string = showRoundNum + "/" + GameData.room.opts.roundMax;
      },
      handleTurn: function handleTurn(data) {
        this.showTurn();
        this.startCoundDown(data);
      },
      handleDisCard: function handleDisCard(data) {
        console.log("this.playerSex =  GameData.player.sex", data.detail.player, GameData.player.sex);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        if (void 0 == data.detail.card) return;
        soundMngr.instance.playAudioCC("dis", data.detail.card, this.playerSex);
        soundMngr.instance.playAudioOther("out");
      },
      handlePengCard: function handlePengCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("cha", null, this.playerSex);
        if (data.detail.userId == GameData.player.uid) {
          var baoAnimNode = cc.find("down", this.baoAnimationNode);
          this.playBaoAnimation(baoAnimNode, "cha");
        } else this.playActionAnimation(data.detail.userId, "cha");
      },
      handleChiCard: function handleChiCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("chi", null, this.playerSex);
        data.detail.userId == GameData.player.uid ? this.showEffect("chi") : this.playActionAnimation(data.detail.userId, "chi");
      },
      handleGangCard: function handleGangCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        data.detail.operation == HuaDian.OPERATION.OPERATION_ANGANG ? soundMngr.instance.playAudioCC("andan", null, this.playerSex) : data.detail.operation == HuaDian.OPERATION.OPERATION_MINGGANG || data.detail.operation == HuaDian.OPERATION.OPERATION_GONGGANG ? soundMngr.instance.playAudioCC("mingdan", null, this.playerSex) : soundMngr.instance.playAudioCC("dan", null, this.playerSex);
        if (data.detail.userId == GameData.player.uid) {
          var baoAnimNode = cc.find("down", this.baoAnimationNode);
          this.playBaoAnimation(baoAnimNode, "dan");
        } else this.playActionAnimation(data.detail.userId, "dan");
      },
      handleTingCard: function handleTingCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("ting", null, this.playerSex);
      },
      handleHuCard: function handleHuCard(data) {
        cc.log("=...........................", data.detail);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("hu", data.detail, this.playerSex);
        data.detail.userId == GameData.player.uid ? this.showEffect("hu") : this.playActionAnimation(data.detail.userId, "hu");
        this.actionLayer.active = false;
      },
      handleBao: function handleBao(data) {
        var pos = GameData.tablePos[data.detail.uid];
        var animationNode = cc.find("up", this.baoAnimationNode);
        var type = data.detail.type;
        1 == type ? this.playBaoAnimation(animationNode, "huanbao") : 2 == type && this.playBaoAnimation(animationNode, "dabao");
        this.showBaoCardNode(true);
      },
      handleDianPao: function handleDianPao(data) {
        data.detail == GameData.player.uid && this.playActionAnimation(data.detail, "dianpao");
      },
      showErrorMsg: function showErrorMsg(data) {
        301 == data.detail.errorCode && createMoveMessage("定宝牌库没牌了!");
      },
      playActionAnimation: function playActionAnimation(uid, action) {
        if (null != GameData.joiners) {
          var pos = GameData.tablePos[uid];
          var animationNode = cc.find("layer_ui/layer_ui_table/actionAnimations/" + pos, this.node);
          cc.log("---\x3e animationNode : " + animationNode);
          if (null != animationNode) {
            cc.log("---\x3e playActionAnimation : " + action);
            animationNode.getComponent(cc.Animation).play(action);
          }
        }
      },
      handlePass: function handlePass(data) {
        if (GameData.game.dataInfo.onGoingUserId) {
          var uid = GameData.game.dataInfo.onGoingUserId;
          var card = GameData.game.dataInfo.showCard[0];
          var show = this.showPassActions(uid, card);
          show || MjHandler_CC.getInstance().requestPass_CC(function(res) {});
          GameData.game.dataInfo = {};
        }
      },
      hideOperationBtn: function hideOperationBtn() {
        var actionNode;
        for (var i = 0; i < 4; i++) {
          actionNode = cc.find("btnAct" + (i + 1), this.actionLayer);
          actionNode.active = false;
        }
      },
      createActionBtn: function createActionBtn(index, icon) {
        cc.log("show btn:" + icon);
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var texture = cc.textureCache.addImage(cc.url.raw("resources/huadian/UI/btn/" + icon));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        cc.log("onBtnActionClicked, index : " + index);
        for (var i = 0; i < this.actions.length; i++) cc.log(this.actions[i].act + "," + this.actions[i].card);
        var self = this;
        var data = this.actions[index];
        cc.log("ActionData:" + JSON.stringify(data));
        if ("hu" == data.act) {
          cc.log("------------------\x3e click hu, should open hu ui,");
          MjHandler_CC.getInstance().requestOperation_CC(data.type, null, null, function(res) {});
        } else if ("cha" == data.act) {
          cc.log("------------------\x3e click cha, should open cha ui,");
          MjHandler_CC.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_PENG, data.card, null, function(res) {
            res.code == errorCode.Success;
          });
        } else if ("ting" == data.act) {
          cc.log("------------------\x3e click ting, should open ting ui,");
          this.actionLayer.actvie = false;
          this.isPass = true;
          this.isZiMoHuOnly = 0;
        } else if ("lou" == data.act) {
          cc.log("------------------\x3e click lou, should open lou ui,");
          this.actionLayer.actvie = false;
          this.isPass = true;
          this.isZiMoHuOnly = 1;
          for (var i = 0; i < this.actions.length; i++) if ("lou" == this.actions[i].act) {
            this.actions.splice(i, 1);
            var actionNode = cc.find("btnAct" + i, this.actionLayer);
            actionNode.active = false;
          }
        } else if ("chi" == data.act) {
          cc.log("------------------\x3e click chi, should open chi ui,");
          if (data.card.length <= 1) {
            var cardArry = [];
            for (var i = 0; i < data.card[0].length; i++) cardArry.push(data.card[0][i]);
            MjHandler_CC.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_CHI, cardArry, null, function(res) {
              res.code == errorCode.Success;
            });
          } else this.refreshChiActionType(data);
        } else if ("dan" == data.act) {
          var type = data.type;
          type instanceof Array && (type = data.type[0]);
          data.card.length <= 1 ? data.card[0][0] instanceof Array && data.card[0].length > 1 ? this.refreshGangActionBar(data) : data.card[0][0] instanceof Array && 1 == data.card[0].length ? MjHandler_CC.getInstance().requestOperation_CC(type, data.card[0][0], null, function(res) {}) : MjHandler_CC.getInstance().requestOperation_CC(type, data.card[0], null, function(res) {}) : this.refreshGangActionBar(data);
        }
        this.moveBackMyCards();
        self.actionLayer.active = false;
      },
      refreshChiActionType: function refreshChiActionType(data) {
        this.chiActionList = [];
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          this.chiActionList.push(action);
          var carddis = GameData.game.lastdisCard;
          var card = cc.instantiate(cardTemp);
          contains(action, carddis) || action.push(carddis);
          action = action.sort();
          card.name = i + "";
          for (var j = 0; j < action.length; j++) {
            var cardNode = cc.find("card_" + j, card);
            cardNode.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[j] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            if (action[j] == carddis) {
              var biaoji = cardNode.getChildByName(cardNode.name + "_biao");
              if (null == biaoji) {
                biaoji = cc.instantiate(this.cardTingPrefab);
                biaoji.y = biaoji.y - 10;
                cardNode.addChild(biaoji);
                biaoji.name = cardNode.name + "_biao";
              }
            }
            cardNode.active = true;
          }
          card.getComponent(cc.Sprite).spriteFrame = null;
          card.on(cc.Node.EventType.TOUCH_START, this.onClickChiActionBtn, this);
          cardLayout.addChild(card);
          card.width = 252;
        }
        cardTemp.active = false;
      },
      onClickChiActionBtn: function onClickChiActionBtn(e) {
        var index = e.target.name;
        var data = this.chiActionList[index];
        var carddis = GameData.game.lastdisCard;
        for (var i = 0; i < data.length; i++) data[i] == carddis && data.splice(i, 1);
        var self = this;
        null != data && MjHandler_CC.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_CHI, data, null, function(res) {
          res.code == errorCode.Success;
        });
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      refreshGangActionBar: function refreshGangActionBar(data) {
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        var buCardTemp = cc.find("bucard", this.actionSecondaryLayer);
        buCardTemp.active = true;
        cardTemp.active = true;
        this.gangActionList = new Array();
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          var GangData = {
            card: data.card[i],
            type: data.type[i]
          };
          this.gangActionList.push(GangData);
          var card = cc.instantiate(cardTemp);
          card.name = i + "_";
          card.getComponent(cc.Sprite).spriteFrame = null;
          if (data.type[i] == HuaDian.OPERATION.OPERATION_GONGGANG || data.type[i] == HuaDian.OPERATION.OPERATION_ANGANG || data.type[i] == HuaDian.OPERATION.OPERATION_MINGGANG) {
            var gangcard = cc.find("card_2", card);
            if (gangcard && action[0]) {
              gangcard.active = true;
              var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[0] + ".png";
              var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
              gangcard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            }
            card.width = 252;
            card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
            cardLayout.addChild(card);
          } else if (3 != action.length || action[0] instanceof Array) for (var ii = 0; ii < action.length; ii++) {
            var bucard = cc.instantiate(buCardTemp);
            bucard.name = i + "_" + action[ii][0];
            bucard.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[ii][0] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            bucard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            bucard.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
            cardLayout.addChild(bucard);
          } else {
            for (var j = 0; j < card.childrenCount; j++) {
              var gangcard = cc.find("card_" + j, card);
              if (gangcard && action[j]) {
                gangcard.active = true;
                var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[j] + ".png";
                var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
                gangcard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
              }
            }
            card.width = 252;
            card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
            cardLayout.addChild(card);
          }
        }
        cardTemp.active = false;
        buCardTemp.active = false;
      },
      showTingMask: function showTingMask(cards, type) {
        this.removeCardMask();
        var myHandCardNode = cc.find("cardHand", this.play_layer_down);
        for (var key in myHandCardNode.children) {
          var cardId = myHandCardNode.children[key].getComponent("Card").id;
          var num = 0;
          for (var i = 0; i < cards.length; i++) cardId != cards[i] && num++;
          num == cards.length && this.setHandCardDisable(myHandCardNode.children[key], true);
        }
      },
      removeCardMask: function removeCardMask() {
        var myHandCardNode = cc.find("cardHand", this.play_layer_down);
        for (var key in myHandCardNode.children) myHandCardNode.children[key].getChildByName("mask") && myHandCardNode.children[key].getChildByName("mask").removeFromParent(true);
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      onClickActionSecondaryBtn: function onClickActionSecondaryBtn(e) {
        var str = e.target.name;
        var operArray = [];
        var cards = [];
        operArray = str.split("_");
        var index = operArray[0];
        var data = this.gangActionList[index];
        data.type == HuaDian.OPERATION.OPERATION_BU_JIU_GANG || data.type == HuaDian.OPERATION.OPERATION_BU_XI_GANG || data.type == HuaDian.OPERATION.OPERATION_BU_XUAN_FENG_GANG || data.type == HuaDian.OPERATION.OPERATION_BU_YAO_GANG ? cards.push(parseInt(operArray[1])) : cards = data.card;
        null != data && MjHandler_CC.getInstance().requestOperation_CC(data.type, cards, null, function(res) {});
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        MjHandler_CC.getInstance().requestPass_CC(HuaDian.OPERATION.OPERATION_PASS, [], function(res) {});
        this.isPass = false;
        var cardHand = GameData.getMyHandCards();
        for (var i = 0; i < cardHand.length; i++) {
          var node = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          node.active = true;
          this.setMyHandButton(node, cardHand[i], i);
        }
        this.removeCardMask();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      showCards: function showCards() {
        cc.log("~~~~~~~~~~~~~~~function_showcards~~~~~~~~~~~~~~~~~~~~~~");
        var player = GameData.getPlayerByPos("down");
        if (player && GameData.cards[player.uid]) {
          this.showMyHandCards(player, this.play_layer_down);
          this.showDisCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
          this.showPengCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        if (player && GameData.cards[player.uid]) {
          this.showHandCards(player, this.play_layer_right);
          this.showDisCards(player, this.play_layer_right, "mj_face_you_chu", "right");
          this.showPengCards(player, this.play_layer_right, "mj_face_you_chu", "right");
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("up");
        if (player && GameData.cards[player.uid]) {
          this.showHandCards(player, this.play_layer_up);
          this.showDisCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
          this.showPengCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
        } else this.play_layer_up.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameData.cards[player.uid]) {
          this.showHandCards(player, this.play_layer_left);
          this.showDisCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
          this.showPengCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
        } else this.play_layer_left.active = false;
        this.showCardNum();
      },
      showHandCards: function showHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardNum = GameData.getHandCardNum(uid) + 3 * (GameData.getChiCards(uid).length + GameData.getPengCards(uid).length + GameData.getGangCards(uid).length);
          var showIdx = cardNum > GameData.client.handsize ? 0 : 1;
          var handIdx = 1, nodeIdx = 0;
          for (;nodeIdx <= GameData.client.handsize; nodeIdx++) {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            if (nodeIdx == showIdx && handIdx <= GameData.getHandCardNum(uid)) {
              node.active = true;
              showIdx++;
              handIdx++;
            } else node.active = false;
          }
        }
      },
      moveUpMyCards: function moveUpMyCards(id, popCount) {
        var count = 0;
        for (var i = 1; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          if (cardId == id) {
            cardNode.y = 43;
            count++;
            if (count >= popCount) return;
          }
        }
      },
      moveBackMyCards: function moveBackMyCards() {
        this.selectedCard = -1;
        for (var i = 0; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          cardNode.position = this.myHandsInitPosition[i];
        }
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        var node;
        var cardHand = this._handCardArry;
        cardHand.reverse();
        this.moveBackMyCards();
        var cardHandNode = cc.find("cardHand", parent);
        for (var key in cardHandNode.children) {
          cardHandNode.children[key].getComponent(cc.Sprite).spriteFrame = null;
          cardHandNode.children[key].active = false;
        }
        var pengAndGangNum = 3 * GameData.getPengCards(GameData.player.uid).length + 3 * GameData.getGangCards(GameData.player.uid).length + 3 * GameData.getChiCards(GameData.player.uid).length;
        if (14 == cardHand.length) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.game.turn == GameData.player.uid && GameData.player[GameData.player.uid].cardLastAssigned) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.game.turn == GameData.player.uid && !GameData.player[GameData.player.uid].cardLastAssigned && cardHand.length > GameData.client.handsize - pengAndGangNum) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.player[GameData.player.uid].fenZhangCard && cardHand.length > GameData.client.handsize - pengAndGangNum) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else for (var i = 1; i < cardHand.length + 1; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i - 1], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i - 1]);
        }
        var tingState = profileChangChun.getTingStateByUid(GameData.player.uid);
        this.removeCardMask();
        if (tingState) {
          var tingCards = GameData.getTingData(GameData.player.uid).outCards;
          this.showTingMask(tingCards, 1);
          var canGang = profileChangChun.canGang();
          var canHu = profileChangChun.canHu();
          canHu || GameData.game.turn != GameData.player.uid || canGang || this.autoDisCard(GameData.game.obtain);
        } else this.removeCardMask();
      },
      showDisCards: function showDisCards(player, parent, cardHeader, direction) {
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        var disNode = cc.find("cardDis_" + GameData.room.opts.joinermax, parent);
        disNode.active = true;
        var cards = GameData.getDisCards(player.uid);
        player.uid == GameData.player.uid && (cards = this._disCardArry);
        for (var i = 1; i <= this.discardMax; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (i <= cards.length) {
            var iconUrl = "";
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, cardHeader, card);
            if (player.uid == GameData.game.lastdisUid && card == GameData.game.lastdisCard && null != node) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == direction;
              cc.find("down", this._cardArrow).active = "down" == direction;
              cc.find("right", this._cardArrow).active = "right" == direction;
              cc.find("up", this._cardArrow).active = "up" == direction;
            }
          } else node.active = false;
        }
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var chi = GameData.getChiCards(player.uid);
          for (var i = 0; i < chi.length; i++) {
            var chiCard = chi[i].otherPlayerCard;
            var index = chi[i].cards.indexOf(chiCard);
            if (1 != index) {
              var _ref = [ chi[i].cards[index], chi[i].cards[1] ];
              chi[i].cards[1] = _ref[0];
              chi[i].cards[index] = _ref[1];
            }
          }
          var gang = GameData.getGangCards(player.uid);
          for (var j = 0; j < gang.length; j++) gang[j].cardType = -1;
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng, chi);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var face7 = cc.find("card_face7", node);
            face7.active = false;
            if (i < cards.length) {
              for (var n = 0; n < 7; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                var bugangIconNode = face.node.getChildByName(face.node.name + "_bugangIcon");
                bugangIconNode && (bugangIconNode.active = false);
                var isPeng = false;
                cards[i].cards.length < 4 && profileChangChun.isAllEqual(cards[i].cards) && !cards[i].cardType && (isPeng = true);
                var isMingGang = false;
                4 == cards[i].cards.length && profileChangChun.isAllEqual(cards[i].cards) && (isMingGang = true);
                var isAnGang = false;
                5 == cards[i].cards.length && profileChangChun.isAllEqual(cards[i].cards) && (isAnGang = true);
                if (n < cards[i].cards.length) {
                  face.node.active = true;
                  var cardId = cards[i].cards[n];
                  if (isPeng) this.showCardContent(face.node, cardHeader, cardId); else if (isMingGang) {
                    if (n < 4) if (3 == n) {
                      this.showCardContent(face7, cardHeader, cardId);
                      face.node.active = false;
                    } else this.showCardContent(face.node, cardHeader, cardId); else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 1);
                  } else if (isAnGang) {
                    if (n < 4) if (3 == n) {
                      if (player.uid == GameData.player.uid) this.showCardContent(face7, cardHeader, cardId); else {
                        var mj_back = this.getCardBackImgName(player.uid);
                        this.showCardContent(face7, mj_back.img1, mj_back.img2);
                      }
                      face.node.active = false;
                    } else {
                      var mj_back = this.getCardBackImgName(player.uid);
                      this.showCardContent(face.node, mj_back.img1, mj_back.img2);
                    } else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 2);
                  } else if (cards[i].cardType && cards.type != HuaDian.OPERATION.OPERATION_ANGANG && cards.type != HuaDian.OPERATION.OPERATION_MINGGANG && cards.type != HuaDian.OPERATION.OPERATION_GONGGANG) {
                    var array1 = [].concat(cards[i].cards);
                    array1.splice(3, array1.length);
                    var gangCardArray = [].concat(cards[i].cards);
                    var array2 = profileChangChun.guolv(array1, gangCardArray);
                    var array3 = [].concat(array1, array2);
                    var isVisiable = array3.length > n;
                    var num = 1;
                    var index = 3;
                    n >= 3 && (index = cards[i].cards.indexOf(array3[n]) + 1);
                    for (index; index < cards[i].cards.length; index++) if (array3[n] == cards[i].cards[index]) {
                      if (cards[i].cards.indexOf(array3[n]) == index) continue;
                      if (1 == n && (cards[i].cards[0] == cards[i].cards[1] || cards[i].cards[1] == cards[i].cards[2])) continue;
                      num++;
                    }
                    if (isVisiable) {
                      num >= 2 && this.addBuGangIcon(face.node, direction, num);
                      this.showCardContent(face.node, cardHeader, array3[n]);
                      face.node.active = true;
                    } else face.node.active = false;
                  } else this.showCardContent(face.node, cardHeader, cardId);
                } else 6 != n && (face.node.active = false);
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      autoDisCard: function autoDisCard(cards) {
        var self = this;
        var cardArry = [];
        cardArry.push(cards);
        this.scheduleOnce(function() {
          MjHandler_CC.getInstance().requestDisCard_CC(cardArry, function(ret) {
            if (ret.result == errorCode.Success) {
              self.selectedCard = -1;
              self.moveBackMyCards();
            }
          });
        }, .5);
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var GangIconNode = new cc.Node();
          parent.addChild(GangIconNode);
          var huierIconTx = cc.textureCache.addImage(cc.url.raw("resources/huadian/UI/icon/huier_icon.png"));
          var huierIconSprite = GangIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            GangIconNode.x = -32.6;
            GangIconNode.y = 7.1;
            GangIconNode.rotation = -101.2;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .4;
            GangIconNode.skewX = 11;
          } else if ("down" == direction) {
            GangIconNode.x = 0;
            GangIconNode.y = 60;
            GangIconNode.skewX = 10;
          } else if ("left" == direction) {
            GangIconNode.x = 31;
            GangIconNode.y = 8.6;
            GangIconNode.rotation = 101.2;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .4;
            GangIconNode.skewX = -11;
          } else if ("up" == direction) {
            GangIconNode.x = 3;
            GangIconNode.y = -6.8;
            GangIconNode.rotation = 180;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .3;
          }
        }
      },
      addGangIcon: function addGangIcon(node, direction, type) {
        var gangIcon = cc.find("gangType", node);
        var Url;
        var gangType = "";
        var gangDirection = "";
        if ("right" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "1";
        } else if ("down" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "0";
        } else if ("left" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "3";
        } else if ("up" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "2";
        }
        Url = cc.url.raw("resources/huadian/UI/icon/" + gangType + gangDirection + "_icon.png");
        var GangIconTx = cc.textureCache.addImage(Url);
        gangIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
      },
      addBuGangIcon: function addBuGangIcon(node, direction, num) {
        var bugangIconNodes = node.getChildByName(node.name + "_bugangIcon");
        if (null == bugangIconNodes) {
          bugangIconNodes = cc.instantiate(this.cardBugangPre);
          bugangIconNodes.name = node.name + "_bugangIcon";
          node.addChild(bugangIconNodes);
        }
        bugangIconNodes.active = true;
        var Url;
        var gangDirection = "";
        "right" == direction ? gangDirection = "1" : "down" == direction ? gangDirection = "0" : "left" == direction ? gangDirection = "3" : "up" == direction && (gangDirection = "2");
        for (var i = 0; i < bugangIconNodes.childrenCount; i++) if (direction == bugangIconNodes.children[i].name) {
          bugangIconNodes.children[i].active = true;
          Url = cc.url.raw("resources/changchun/UI/icon/bugang_" + gangDirection + "_" + num + ".png");
          var GangIconTx = cc.textureCache.addImage(Url);
          bugangIconNodes.children[i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
        } else bugangIconNodes.children[i].active = false;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cardNode.active = true;
        this.setMaskVisible(cardNode, false);
      },
      showOperations: function showOperations() {
        this.operationsArry = [];
        this.gangOperations = [];
        this.actions = [];
        this.isPass1 = true;
        var isExist = true;
        this.operationsArry = profileChangChun.getPlayerOperationsByUid(GameData.player.uid);
        this.hideOperationBtn();
        if (this.operationsArry.length > 0) {
          this.actionLayer.active = true;
          var k = 0;
          for (var i = 0; i < this.operationsArry.length; i++) {
            var operActionBtnIcon = this.getOperAction(this.operationsArry[i]);
            this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_ANGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_MINGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG_TING && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_ANGANG_TING && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_MINGGANG_TING && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_XUAN_FENG_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_XI_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_YAO_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_JIU_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_XUAN_FENG_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_XI_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_YAO_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_JIU_GANG || this.gangOperations.push(this.operationsArry[i]);
            isExist = true;
            for (var j = 0; j < this.actions.length; j++) if (this.actions[j].act == operActionBtnIcon.substring(0, operActionBtnIcon.length - 4)) {
              isExist = false;
              k--;
              break;
            }
            if (isExist) {
              this.actions[k] = {
                act: operActionBtnIcon.substring(0, operActionBtnIcon.length - 4),
                card: this.getOperCard(operActionBtnIcon, this.operationsArry[i]),
                type: this.operationsArry[i]
              };
              this.createActionBtn(k + 1, operActionBtnIcon);
            }
            k++;
          }
          if (GameData.player[GameData.player.uid].gangTing) {
            for (var i = 0; i < this.actions.length; i++) if ("dan" == this.actions[i].act) {
              this.actions[i].type = [];
              for (var j = 0; j < GameData.player[GameData.player.uid].gangTing.gangCards.length; j++) this.actions[i].type.push(GameData.player[GameData.player.uid].gangTing.gangCards[j].operation);
            }
          } else for (var j = 0; j < this.actions.length; j++) if ("dan" == this.actions[j].act) {
            if (this.gangOperations.length > 1) {
              this.actions[j].card = [];
              this.actions[j].type = [];
              for (var i = 0; i < this.gangOperations.length; i++) {
                this.actions[j].card.push(this.getOperCard("dan.png", this.gangOperations[i]));
                this.actions[j].type.push(this.gangOperations[i]);
              }
            } else {
              this.actions[j].card = [];
              this.actions[j].type = [];
              this.actions[j].card.push(this.getOperCard("dan.png", this.gangOperations[0]));
              this.actions[j].type.push(this.gangOperations[0]);
            }
            break;
          }
          for (var i = 0; i < this.actions.length; i++) {
            if (!GameData.player[GameData.player.uid].isCanPass) {
              this.passBtn.interactable = false;
              break;
            }
            this.passBtn.interactable = true;
          }
          this.removeCardMask();
          for (var k = 0; k < this.actions.length; k++) if ("ting" == this.actions[k].act) {
            if (GameData.getTingData(GameData.player.uid)) {
              var tingCards = GameData.getTingData(GameData.player.uid).outCards;
              this.showTingMask(tingCards, 1);
            }
            break;
          }
        } else this.actionLayer.active = false;
      },
      getOperCard: function getOperCard(operAction, type) {
        var cardsArry = [];
        var operType = operAction.substring(0, operAction.length - 4);
        if ("dan" == operType) {
          if (GameData.game.dataInfo.isQiangBuGang) return cardsArry;
          if (GameData.player[GameData.player.uid].gangTing) {
            var gangCard = GameData.player[GameData.player.uid].gangTing.gangCards;
            for (var i = 0; i < gangCard.length; i++) cardsArry.push(gangCard[i].gangCards);
            return cardsArry;
          }
          if (GameData.player[GameData.player.uid].buGangInfo) for (var i = 0; i < this.gangOperations.length; i++) {
            for (var key in GameData.player[GameData.player.uid].buGangInfo) key == parseInt(this.gangOperations[i]) && cardsArry.push(GameData.player[GameData.player.uid].buGangInfo[key].outCards);
            break;
          } else {
            var gangData = profileChangChun.getGangCardByUid(GameData.player.uid, type);
            if (gangData) if (0 == gangData.type) {
              var cards = [];
              for (var i = 0; i < 3; i++) cards.push(gangData.card);
              cardsArry = cards;
            } else if (1 == gangData.type) {
              var cards = [];
              for (var i = 0; i < 4; i++) cards.push(gangData.card);
              cardsArry = cards;
            } else cardsArry = gangData.card;
          }
          return cardsArry;
        }
        if (!GameData.game.lastdisCard) return;
        var card = GameData.game.lastdisCard;
        if ("cha" == operType) {
          if (GameData.game.dataInfo.isQiangBuGang) return cardsArry;
          for (var i = 0; i < 2; i++) cardsArry.push(card);
          return cardsArry;
        }
        if ("chi" == operType) {
          if (GameData.game.dataInfo.isQiangBuGang) return cardsArry;
          cardsArry = RuleHandler.instance.canChi(GameData.player.uid, card);
          return cardsArry;
        }
      },
      getOperAction: function getOperAction(operation) {
        if (operation == HuaDian.OPERATION.OPERATION_PASS) return "pass.png";
        if (operation == HuaDian.OPERATION.OPERATION_PENG || operation == HuaDian.OPERATION.OPERATION_PENG_TING) return "cha.png";
        if (operation == HuaDian.OPERATION.OPERATION_GONGGANG || operation == HuaDian.OPERATION.OPERATION_ANGANG || operation == HuaDian.OPERATION.OPERATION_MINGGANG || operation == HuaDian.OPERATION.OPERATION_GONGGANG_TING || operation == HuaDian.OPERATION.OPERATION_ANGANG_TING || operation == HuaDian.OPERATION.OPERATION_MINGGANG_TING || operation == HuaDian.OPERATION.OPERATION_XUAN_FENG_GANG || operation == HuaDian.OPERATION.OPERATION_XI_GANG || operation == HuaDian.OPERATION.OPERATION_YAO_GANG || operation == HuaDian.OPERATION.OPERATION_JIU_GANG || operation == HuaDian.OPERATION.OPERATION_BU_XUAN_FENG_GANG || operation == HuaDian.OPERATION.OPERATION_BU_XI_GANG || operation == HuaDian.OPERATION.OPERATION_BU_YAO_GANG || operation == HuaDian.OPERATION.OPERATION_BU_JIU_GANG) return "dan.png";
        if (operation == HuaDian.OPERATION.OPERATION_CHI || operation == HuaDian.OPERATION.OPERATION_CHI_TING) return "chi.png";
        if (operation == HuaDian.OPERATION.OPERATION_DIANPAO_HU || operation == HuaDian.OPERATION.OPERATION_HU || operation == HuaDian.OPERATION.OPERATION_QIANGGANG_HU) return "hu.png";
        if (operation == HuaDian.OPERATION.OPERATION_TING) return "ting.png";
        return null;
      },
      setMyHandButton: function setMyHandButton(cardNode, cardId, index) {
        if (!cardNode) return;
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardNode.addChild(cardBtn);
          cardBtn.name = cardNode.name + "_button";
        }
        var cardButton = cardBtn.getComponent("CardButton");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyTingVisible: function setMyTingVisible(cardNode, cardId) {
        var tingDiscard = false;
        for (var i = 0; i < this.tingData.length; i++) {
          var data = this.tingData[i];
          if (data.discard == cardId) {
            tingDiscard = true;
            break;
          }
        }
        var tingNode = cardNode.getChildByName(cardNode.name + "_ting");
        if (null == tingNode) {
          if (true == tingDiscard) {
            tingNode = cc.instantiate(this.cardTingPrefab);
            tingNode.y = tingNode.y - 10;
            cardNode.addChild(tingNode);
            tingNode.name = cardNode.name + "_ting";
          }
        } else tingNode.active = tingDiscard;
        GameData.game.turn != GameData.player.uid && null != tingNode && (tingNode.active = false);
      },
      setHandCardDisable: function setHandCardDisable(node, show) {
        var cardButton = node.getChildByName(node.name + "_button");
        cardButton && cardButton.removeFromParent(true);
        var maskNode = node.getChildByName("mask");
        if (null == maskNode) {
          maskNode = new cc.Node("mask");
          var sp = maskNode.addComponent(cc.Sprite);
          var iconUrl = "resources/table/majiangmengbai.png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          sp.spriteFrame = new cc.SpriteFrame(texture);
          node.addChild(maskNode);
        }
        maskNode.active = show;
      },
      showPosition: function showPosition() {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        var rotation = 0;
        0 == index ? rotation = 90 : 3 == index ? rotation = 0 : 2 == index ? rotation = 270 : 1 == index && (rotation = 180);
        this.direction_pos.node.rotation = rotation;
      },
      showTurn: function showTurn() {
        var turnPlayerUid = profileChangChun.getTurnByUid();
        var index = GameData.getPlayerIndex(turnPlayerUid);
        var direction;
        direction = 0 == index ? "dong" : 3 == index ? "nan" : 2 == index ? "xi" : 1 == index ? "bei" : "dong";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + direction + ".png"));
        this.direction_pos.spriteFrame = new cc.SpriteFrame(texture);
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        var directionNode = cc.find(GameData.tablePos[turnPlayerUid], this.direction_turn);
        directionNode && (directionNode.active = true);
      },
      showCardNum: function showCardNum() {
        if (GameData.game.cardleft < 0) return;
        this.leftCardNumLabel.string = GameData.game.cardleft;
      },
      showBaoCardImg: function showBaoCardImg() {
        var huier1 = GameData.game.cardHuier1;
        var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + huier1 + ".png"));
        this.huiercard1.spriteFrame = new cc.SpriteFrame(texture);
        if (GameData.room.opts) {
          var isTing = 1 == GameData.cards[GameData.player.uid]["tingState"] || 2 == GameData.cards[GameData.player.uid]["tingState"];
          isTing && 0 == GameData.room.opts.anBao ? this.huiercard1.node.active = true : 1 == GameData.room.opts.anBao && (this.huiercard1.node.active = false);
        }
      },
      showBaoCardNode: function showBaoCardNode(show) {
        this.baoCardNode.active = show;
        var anbaoNode = cc.find("anbao", this.baoCardNode);
        var mingbaoNode = cc.find("mingbao", this.baoCardNode);
        if (GameData.room.opts) {
          anbaoNode.active = 1 == GameData.room.opts.anBao;
          mingbaoNode.active = 0 == GameData.room.opts.anBao;
        }
      },
      showEffect: function showEffect(type) {
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case "peng":
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case "gang":
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case "hu":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
          break;

         case "chi":
          spineUrl = "spine/table/chi";
          spineAnim = "a";
          break;

         case "dianpao":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        var spine = spineNode.getComponent("sp.Skeleton");
        spine.skeletonData = null;
        spine.animation = null;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      },
      playBaoAnimation: function playBaoAnimation(node, animate) {
        var url = "spine/table/" + animate;
        cc.loader.loadResDir(url, function(err, assets) {
          if (err) {
            cc.log(err);
            return;
          }
          if (assets.length <= 0) {
            cc.log("assets length: ", assets.length);
            return;
          }
          var armatureDisplay;
          if (node.getComponent(dragonBones.ArmatureDisplay)) {
            cc.log("dragonBones get");
            armatureDisplay = node.getComponent(dragonBones.ArmatureDisplay);
          } else {
            cc.log("dragonBones add");
            armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
          }
          for (var elem in assets) {
            assets[elem] instanceof dragonBones.DragonBonesAsset && armatureDisplay.dragonAsset != assets[elem] && (armatureDisplay.dragonAsset = assets[elem]);
            assets[elem] instanceof dragonBones.DragonBonesAtlasAsset && armatureDisplay.dragonAtlasAsset != assets[elem] && (armatureDisplay.dragonAtlasAsset = assets[elem]);
          }
          armatureDisplay.armatureName = "armature";
          armatureDisplay.playAnimation("newAnimation", 1);
        });
      },
      onHandCardClicked: function onHandCardClicked(data) {
        var card = data.detail.card;
        var index = data.detail.index;
        var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
        var cardArry = [];
        cardArry.push(card);
        if (this.selectedCard == index) {
          var self = this;
          var canTing = false;
          if (GameData.getTingData(GameData.player.uid)) {
            canTing = GameData.getTingData(GameData.player.uid).canTing;
            0 == GameData.getTingData(GameData.player.uid).outCards.length ? this.isTing = false : this.isTing = true;
          }
          -1 == profileChangChun.getPlayerOperationsByUid(GameData.player.uid).indexOf(10) ? this.isTing = false : this.isTing = true;
          if (canTing && this.isPass && this.isTing) {
            this.isPass = true;
            this.isTing = false;
            GameData.getTingData(GameData.player.uid).canTing = false;
            MjHandler_CC.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_TING, cardArry, this.isZiMoHuOnly, function(res) {});
          } else GameData.game.turn == GameData.player.uid && MjHandler_CC.getInstance().requestDisCard_CC(cardArry, function(ret) {
            if (ret.result == errorCode.Success) {
              node.stopAllActions();
              self.selectedCard = -1;
              this.moveBackMyCards();
            }
          });
          var index = this._handCardArry.indexOf(card);
          this._handCardArry.splice(index, 1);
          this._handCardArry.sort(function(a, b) {
            return a - b;
          });
          this._disCardArry.push(card);
          GameData.game.turn = 0;
          this.showCards();
          this.tingTip.hide();
        } else {
          if (this.selectedCard >= 0) {
            var last = cc.find("cardHand/cardHand" + this.selectedCard, this.play_layer_down);
            last.runAction(cc.moveTo(.01, this.myHandsInitPosition[this.selectedCard]));
          }
          node.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[index].x, 30)));
          this.selectedCard = index;
          if (GameData.game.turn == GameData.player.uid) {
            this.tingTip.show(card, this.tingData);
            this.showMask(card);
          }
        }
      },
      showTingState: function showTingState() {
        for (var key in this.tingStateNode.children) this.tingStateNode.children[key].active = false;
        var StateNode;
        var Url;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var direction = GameData.tablePos[GameData.joiners[i].uid];
          StateNode = cc.find(direction, this.tingStateNode);
          var stateImg = cc.find("text", StateNode);
          var TingStateType = GameData.cards[GameData.joiners[i].uid]["tingState"];
          if (1 == TingStateType) {
            Url = cc.url.raw("resources/huadian/UI/artword/loupaizhong.png");
            var tingIconTx = cc.textureCache.addImage(Url);
            stateImg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tingIconTx);
            StateNode.active = true;
          } else if (2 == TingStateType) {
            Url = cc.url.raw("resources/huadian/UI/artword/tingpaizhong.png");
            var tingIconTx = cc.textureCache.addImage(Url);
            stateImg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tingIconTx);
            StateNode.active = true;
          } else StateNode.active = false;
        }
      },
      showMask: function showMask(selectCard) {
        var player = GameData.getPlayerByPos("down");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_down, "down");
          this.showDisCardMask(selectCard, this.play_layer_down, "down");
        }
        player = GameData.getPlayerByPos("up");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_up, "up");
          this.showDisCardMask(selectCard, this.play_layer_up, "up");
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_left, "left");
          this.showDisCardMask(selectCard, this.play_layer_left, "left");
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_right, "right");
          this.showDisCardMask(selectCard, this.play_layer_right, "right");
        }
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        for (var i = 1; i < 5; i++) {
          var node = cc.find("cardPeng/cardPeng" + i, parent);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        for (var i = 1; i <= this.discardMax; i++) {
          var cardNode = cc.find("cardDis_" + GameData.room.opts.joinermax + "/card_face" + i, parent);
          cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, parent, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("tipMask/up", maskNode).active = false;
            cc.find("tipMask/down", maskNode).active = false;
            cc.find("tipMask/right", maskNode).active = false;
            cc.find("tipMask/left", maskNode).active = false;
            cc.find("tipMask/" + direction, maskNode).active = true;
          }
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
            cc.find("tipMask", maskNode).active = true;
            cc.find("chipaiMask", maskNode).active = false;
          }
        } else cc.find("tipMask", maskNode).active = show;
        return maskNode;
      },
      onGameScore: function onGameScore() {
        this.tingTip.hide();
        this.unschedule(this.runCountDown);
      },
      startCoundDown: function startCoundDown(data) {
        this.PLayerUID = GameData.game.turn;
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "");
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          3 == this._countdown_index && this.PLayerUID == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        var url1;
        var url2;
        if (0 == ary.length) return;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      showScoreLayer: function showScoreLayer() {
        this.getComponent("roomScore").ShowPlayerScoreItem();
        this.scoreLayer.active = true;
      },
      onCardBtnStart: function onCardBtnStart(data) {},
      onCardBtnMove: function onCardBtnMove(data) {
        var card = data.detail.card;
        if (GameData.game.turn == GameData.player.uid) {
          this.tingTip.show(card, this.tingData);
          this.showMask(card);
        }
      },
      onCardBtnEnd: function onCardBtnEnd(data) {
        var index = data.detail.index;
        var type = data.detail.type;
        switch (type) {
         case -1:
          index == this.selectedCard && (this.selectedCard = -1);
          this.onHandCardClicked(data);
          this.tingTip.hide();
          break;

         case 0:
          this.onHandCardClicked(data);
          break;

         case 1:
          this.selectedCard = index;
          this.onHandCardClicked(data);
        }
      },
      onCardBtnCancel: function onCardBtnCancel(data) {
        this.tingTip.hide();
      },
      saveMyHandsInitPosition: function saveMyHandsInitPosition() {
        for (var index = 0; index <= GameData.client.handsize; index++) {
          var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
          this.myHandsInitPosition.push(node.getPosition());
        }
      },
      showPiaoLayer: function showPiaoLayer() {
        this.PiaoLayer.active = true;
      },
      getCardBackImgName: function getCardBackImgName(uid) {
        var pos = GameData.getPlayerPosByUid(uid);
        var imgName1 = "";
        var imgName2 = "";
        switch (pos) {
         case "down":
          imgName1 = "mj_back0";
          imgName2 = "chu";
          break;

         case "up":
          imgName1 = "mj_back2";
          imgName2 = "chu";
          break;

         case "right":
          imgName1 = "mj_back1";
          imgName2 = "chu";
          break;

         case "left":
          imgName1 = "mj_back3";
          imgName2 = "chu";
        }
        var imgData = {
          img1: imgName1,
          img2: imgName2
        };
        return imgData;
      },
      saveMyHandCard: function saveMyHandCard() {
        this._handCardArry = [];
        this._disCardArry = [];
        if (0 == Object.keys(GameData.cards).length) return;
        this._handCardArry = GameData.getHandCards(GameData.player.uid);
        this._disCardArry = GameData.getDisCards(GameData.player.uid);
        if (GameData.game.turn == GameData.player.uid && GameData.player[GameData.player.uid].cardLastAssigned) {
          var hand1 = this._handCardArry[this._handCardArry.length - 1];
          this._handCardArry.pop();
          this._handCardArry.sort(function(a, b) {
            return a - b;
          });
          this._handCardArry.push(hand1);
        } else this._handCardArry.sort(function(a, b) {
          return a - b;
        });
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomTable_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b56391qmQVN2KNpYsJUk/5A", "roomTable_heb");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        direction_pos: cc.Sprite,
        direction_turn: cc.Node,
        baoCardNode: cc.Node,
        huiercard1: cc.Sprite,
        leftCardNumLabel: cc.Label,
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        cardsNode: cc.Node,
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node,
        cardTemplate: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardBugangPre: cc.Prefab,
        selectedCard: -1,
        HuType: null,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        disCardArrow: cc.Prefab,
        _cardArrow: cc.Node,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab,
        lastRoundLabel: cc.RichText,
        scoreLayer: cc.Node,
        baoAnimationNode: cc.Node,
        tingStateNode: cc.Node,
        passBtn: cc.Button,
        PiaoLayer: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.handleGameStart);
        registEvent("onGameReady", this, this.handleGameReady);
        registEvent("onGameTurn", this, this.handleTurn);
        registEvent("onMahjongStartRun", this, this.onShow);
        registEvent("onRegularCircle", this, this.onShow);
        registEvent("onHuaDianMahjongReconnecet", this, this.onShow);
        registEvent("onMahjongRunEnd", this, this.onGameScore);
        registEvent("onCardHu", this, this.handleHuCard);
        registEvent("onCardChi", this, this.handleChiCard);
        registEvent("onCardDis", this, this.handleDisCard);
        registEvent("onCardPeng", this, this.handlePengCard);
        registEvent("onCardGang", this, this.handleGangCard);
        registEvent("onCardTing", this, this.handleTingCard);
        registEvent("onCardBao", this, this.handleBao);
        registEvent("dianPao", this, this.handleDianPao);
        registEvent("onPushErrorMsg", this, this.showErrorMsg);
        registEvent("onCardBtnStart", this, this.onCardBtnStart);
        registEvent("onCardBtnMove", this, this.onCardBtnMove);
        registEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        registEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        this.actions = new Array();
        this._handCardArry = new Array();
        this._disCardArry = new Array();
        this.gangOperations = [];
        this.cardsNode.active = false;
        this.tingData = [];
        this.tingTip = this.node.getComponent("TingTip");
        this.playerSex = 1;
        this.isZiMoHuOnly = 0;
        this.isPass = true;
        this.isTing = true;
        if (GameData.room) {
          4 == GameData.room.opts.joinermax && (this.discardMax = 24);
          3 == GameData.room.opts.joinermax && (this.discardMax = 36);
          2 == GameData.room.opts.joinermax && (this.discardMax = 60);
        }
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this.cardsNode.addChild(this._cardArrow);
        this._cardArrow.active = false;
        this.myHandsInitPosition = [];
        this.saveMyHandsInitPosition();
        if (GameData.game.gameStart && GameData.game.zhuangUid > 0) {
          this.handleGameStart();
          this.onShow();
          this.handleTurn();
        }
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.handleGameStart);
        unregistEvent("onGameTurn", this, this.handleTurn);
        unregistEvent("onMahjongStartRun", this, this.onShow);
        unregistEvent("onRegularCircle", this, this.onShow);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.onShow);
        unregistEvent("onMahjongRunEnd", this, this.showResultLayer);
        unregistEvent("onCardHu", this, this.handleHuCard);
        unregistEvent("onCardChi", this, this.handleChiCard);
        unregistEvent("onCardDis", this, this.handleDisCard);
        unregistEvent("onCardPeng", this, this.handlePengCard);
        unregistEvent("onCardGang", this, this.handleGangCard);
        unregistEvent("onCardBao", this, this.handleBao);
        unregistEvent("dianPao", this, this.handleDianPao);
        unregistEvent("onPushErrorMsg", this, this.showErrorMsg);
        unregistEvent("onCardBtnStart", this, this.onCardBtnStart);
        unregistEvent("onCardBtnMove", this, this.onCardBtnMove);
        unregistEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        unregistEvent("onCardBtnCancel", this, this.onCardBtnCancel);
      },
      handleGameStart: function handleGameStart() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        this.showBaoCardNode(false);
      },
      handleGameReady: function handleGameReady() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        for (var key in this.tingStateNode.children) this.tingStateNode.children[key].active = false;
        GameData.game.cardHuier1 = 0;
        this.showBaoCardNode(false);
        this.huiercard1.spriteFrame = null;
        this.huiercard1.node.active = false;
      },
      onShow: function onShow() {
        this.cardsNode.active = true;
        this.saveMyHandCard();
        this.showCards();
        this.showOperations();
        GameData.room.status >= gameDefine.RoomState.GAMEING && this.showTingState();
        GameData.game.dataInfo.bao && (profileHuaDian.checkIsTingPlayer() ? this.showBaoCardNode(true) : this.showBaoCardNode(false));
        cc.log("~~~~~~~~~~~~~~~this.cardsNode.active~~~~~~~~~~~~~~~" + this.cardsNode.active);
        var showRoundNum = GameData.room.roundNum > GameData.room.opts.roundMax ? GameData.room.opts.roundMax : GameData.room.roundNum;
        this.lastRoundLabel.string = showRoundNum + "/" + GameData.room.opts.roundMax;
      },
      handleTurn: function handleTurn(data) {
        this.showTurn();
        this.startCoundDown(data);
      },
      handleDisCard: function handleDisCard(data) {
        console.log("this.playerSex =  GameData.player.sex", data.detail.player, GameData.player.sex);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        if (void 0 == data.detail.card) return;
        soundMngr.instance.playAudioCC("dis", data.detail.card, this.playerSex);
        soundMngr.instance.playAudioOther("out");
      },
      handlePengCard: function handlePengCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("cha", null, this.playerSex);
        if (data.detail.userId == GameData.player.uid) {
          var baoAnimNode = cc.find("down", this.baoAnimationNode);
          this.playBaoAnimation(baoAnimNode, "cha");
        } else this.playActionAnimation(data.detail.userId, "cha");
      },
      handleChiCard: function handleChiCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("chi", null, this.playerSex);
        data.detail.userId == GameData.player.uid ? this.showEffect("chi") : this.playActionAnimation(data.detail.userId, "chi");
      },
      handleGangCard: function handleGangCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        data.detail.operation == HuaDian.OPERATION.OPERATION_ANGANG ? soundMngr.instance.playAudioCC("andan", null, this.playerSex) : data.detail.operation == HuaDian.OPERATION.OPERATION_MINGGANG || data.detail.operation == HuaDian.OPERATION.OPERATION_GONGGANG ? soundMngr.instance.playAudioCC("mingdan", null, this.playerSex) : soundMngr.instance.playAudioCC("dan", null, this.playerSex);
        if (data.detail.userId == GameData.player.uid) {
          var baoAnimNode = cc.find("down", this.baoAnimationNode);
          this.playBaoAnimation(baoAnimNode, "dan");
        } else this.playActionAnimation(data.detail.userId, "dan");
      },
      handleTingCard: function handleTingCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("ting", null, this.playerSex);
      },
      handleHuCard: function handleHuCard(data) {
        cc.log("=...........................", data.detail);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioCC("hu", data.detail, this.playerSex);
        data.detail.userId == GameData.player.uid ? this.showEffect("hu") : this.playActionAnimation(data.detail.userId, "hu");
        this.actionLayer.active = false;
      },
      handleBao: function handleBao(data) {
        var pos = GameData.tablePos[data.detail.uid];
        var animationNode = cc.find("up", this.baoAnimationNode);
        var type = data.detail.type;
        1 == type ? this.playBaoAnimation(animationNode, "huanbao") : 2 == type && this.playBaoAnimation(animationNode, "dabao");
        this.showBaoCardNode(true);
      },
      handleDianPao: function handleDianPao(data) {
        data.detail == GameData.player.uid && this.playActionAnimation(data.detail, "dianpao");
      },
      showErrorMsg: function showErrorMsg(data) {
        301 == data.detail.errorCode && createMoveMessage("定宝牌库没牌了!");
      },
      playActionAnimation: function playActionAnimation(uid, action) {
        if (null != GameData.joiners) {
          var pos = GameData.tablePos[uid];
          var animationNode = cc.find("layer_ui/layer_ui_table/actionAnimations/" + pos, this.node);
          cc.log("---\x3e animationNode : " + animationNode);
          if (null != animationNode) {
            cc.log("---\x3e playActionAnimation : " + action);
            animationNode.getComponent(cc.Animation).play(action);
          }
        }
      },
      handlePass: function handlePass(data) {
        if (GameData.game.dataInfo.onGoingUserId) {
          var uid = GameData.game.dataInfo.onGoingUserId;
          var card = GameData.game.dataInfo.showCard[0];
          var show = this.showPassActions(uid, card);
          show || MjHandler_Heb.getInstance().requestPass_CC(function(res) {});
          GameData.game.dataInfo = {};
        }
      },
      hideOperationBtn: function hideOperationBtn() {
        var actionNode;
        for (var i = 0; i < 4; i++) {
          actionNode = cc.find("btnAct" + (i + 1), this.actionLayer);
          actionNode.active = false;
        }
      },
      createActionBtn: function createActionBtn(index, icon) {
        cc.log("show btn:" + icon);
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var texture = cc.textureCache.addImage(cc.url.raw("resources/huadian/UI/btn/" + icon));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        cc.log("onBtnActionClicked, index : " + index);
        for (var i = 0; i < this.actions.length; i++) cc.log(this.actions[i].act + "," + this.actions[i].card);
        var self = this;
        var data = this.actions[index];
        cc.log("ActionData:" + JSON.stringify(data));
        if ("hu" == data.act) {
          cc.log("------------------\x3e click hu, should open hu ui,");
          MjHandler_Heb.getInstance().requestOperation_CC(data.type, null, null, function(res) {});
        } else if ("cha" == data.act) {
          cc.log("------------------\x3e click cha, should open cha ui,");
          MjHandler_Heb.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_PENG, data.card, null, function(res) {
            res.code == errorCode.Success;
          });
        } else if ("ting" == data.act) {
          cc.log("------------------\x3e click ting, should open ting ui,");
          this.actionLayer.actvie = false;
          this.isPass = true;
          this.isZiMoHuOnly = 0;
        } else if ("lou" == data.act) {
          cc.log("------------------\x3e click lou, should open lou ui,");
          this.actionLayer.actvie = false;
          this.isPass = true;
          this.isZiMoHuOnly = 1;
          for (var i = 0; i < this.actions.length; i++) if ("lou" == this.actions[i].act) {
            this.actions.splice(i, 1);
            var actionNode = cc.find("btnAct" + i, this.actionLayer);
            actionNode.active = false;
          }
        } else if ("chi" == data.act) {
          cc.log("------------------\x3e click chi, should open chi ui,");
          if (data.card.length <= 1) {
            var cardArry = [];
            for (var i = 0; i < data.card[0].length; i++) cardArry.push(data.card[0][i]);
            MjHandler_Heb.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_CHI, cardArry, null, function(res) {
              res.code == errorCode.Success;
            });
          } else this.refreshChiActionType(data);
        } else if ("dan" == data.act) {
          var type = data.type;
          type instanceof Array && (type = data.type[0]);
          data.card.length <= 1 ? data.card[0][0] instanceof Array && data.card[0].length > 1 ? this.refreshGangActionBar(data) : data.card[0][0] instanceof Array && 1 == data.card[0].length ? MjHandler_Heb.getInstance().requestOperation_CC(type, data.card[0][0], null, function(res) {}) : MjHandler_Heb.getInstance().requestOperation_CC(type, data.card[0], null, function(res) {}) : this.refreshGangActionBar(data);
        }
        this.moveBackMyCards();
        self.actionLayer.active = false;
      },
      refreshChiActionType: function refreshChiActionType(data) {
        this.chiActionList = [];
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          this.chiActionList.push(action);
          var carddis = GameData.game.lastdisCard;
          var card = cc.instantiate(cardTemp);
          contains(action, carddis) || action.push(carddis);
          action = action.sort();
          card.name = i + "";
          for (var j = 0; j < action.length; j++) {
            var cardNode = cc.find("card_" + j, card);
            cardNode.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[j] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            if (action[j] == carddis) {
              var biaoji = cardNode.getChildByName(cardNode.name + "_biao");
              if (null == biaoji) {
                biaoji = cc.instantiate(this.cardTingPrefab);
                biaoji.y = biaoji.y - 10;
                cardNode.addChild(biaoji);
                biaoji.name = cardNode.name + "_biao";
              }
            }
            cardNode.active = true;
          }
          card.getComponent(cc.Sprite).spriteFrame = null;
          card.on(cc.Node.EventType.TOUCH_START, this.onClickChiActionBtn, this);
          cardLayout.addChild(card);
          card.width = 252;
        }
        cardTemp.active = false;
      },
      onClickChiActionBtn: function onClickChiActionBtn(e) {
        var index = e.target.name;
        var data = this.chiActionList[index];
        var carddis = GameData.game.lastdisCard;
        for (var i = 0; i < data.length; i++) data[i] == carddis && data.splice(i, 1);
        var self = this;
        null != data && MjHandler_Heb.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_CHI, data, null, function(res) {
          res.code == errorCode.Success;
        });
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      refreshGangActionBar: function refreshGangActionBar(data) {
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        var buCardTemp = cc.find("bucard", this.actionSecondaryLayer);
        buCardTemp.active = true;
        cardTemp.active = true;
        this.gangActionList = new Array();
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          var GangData = {
            card: data.card[i],
            type: data.type[i]
          };
          this.gangActionList.push(GangData);
          var card = cc.instantiate(cardTemp);
          card.name = i + "_";
          card.getComponent(cc.Sprite).spriteFrame = null;
          if (data.type[i] == HuaDian.OPERATION.OPERATION_GONGGANG || data.type[i] == HuaDian.OPERATION.OPERATION_ANGANG || data.type[i] == HuaDian.OPERATION.OPERATION_MINGGANG) {
            var gangcard = cc.find("card_2", card);
            if (gangcard && action[0]) {
              gangcard.active = true;
              var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[0] + ".png";
              var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
              gangcard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            }
            card.width = 252;
            card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
            cardLayout.addChild(card);
          } else if (3 != action.length || action[0] instanceof Array) for (var ii = 0; ii < action.length; ii++) {
            var bucard = cc.instantiate(buCardTemp);
            bucard.name = i + "_" + action[ii][0];
            bucard.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[ii][0] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            bucard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            bucard.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
            cardLayout.addChild(bucard);
          } else {
            for (var j = 0; j < card.childrenCount; j++) {
              var gangcard = cc.find("card_" + j, card);
              if (gangcard && action[j]) {
                gangcard.active = true;
                var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[j] + ".png";
                var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
                gangcard.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
              }
            }
            card.width = 252;
            card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
            cardLayout.addChild(card);
          }
        }
        cardTemp.active = false;
        buCardTemp.active = false;
      },
      showTingMask: function showTingMask(cards, type) {
        this.removeCardMask();
        var myHandCardNode = cc.find("cardHand", this.play_layer_down);
        for (var key in myHandCardNode.children) {
          var cardId = myHandCardNode.children[key].getComponent("Card").id;
          var num = 0;
          for (var i = 0; i < cards.length; i++) cardId != cards[i] && num++;
          num == cards.length && this.setHandCardDisable(myHandCardNode.children[key], true);
        }
      },
      removeCardMask: function removeCardMask() {
        var myHandCardNode = cc.find("cardHand", this.play_layer_down);
        for (var key in myHandCardNode.children) myHandCardNode.children[key].getChildByName("mask") && myHandCardNode.children[key].getChildByName("mask").removeFromParent(true);
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      onClickActionSecondaryBtn: function onClickActionSecondaryBtn(e) {
        var str = e.target.name;
        var operArray = [];
        var cards = [];
        operArray = str.split("_");
        var index = operArray[0];
        var data = this.gangActionList[index];
        data.type == HuaDian.OPERATION.OPERATION_BU_JIU_GANG || data.type == HuaDian.OPERATION.OPERATION_BU_XI_GANG || data.type == HuaDian.OPERATION.OPERATION_BU_XUAN_FENG_GANG || data.type == HuaDian.OPERATION.OPERATION_BU_YAO_GANG ? cards.push(parseInt(operArray[1])) : cards = data.card;
        null != data && MjHandler_Heb.getInstance().requestOperation_CC(data.type, cards, null, function(res) {});
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        MjHandler_Heb.getInstance().requestPass_CC(HuaDian.OPERATION.OPERATION_PASS, [], function(res) {});
        this.isPass = false;
        var cardHand = GameData.getMyHandCards();
        for (var i = 0; i < cardHand.length; i++) {
          var node = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          node.active = true;
          this.setMyHandButton(node, cardHand[i], i);
        }
        this.removeCardMask();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      showCards: function showCards() {
        cc.log("~~~~~~~~~~~~~~~function_showcards~~~~~~~~~~~~~~~~~~~~~~");
        var player = GameData.getPlayerByPos("down");
        if (player && GameData.cards[player.uid]) {
          this.showMyHandCards(player, this.play_layer_down);
          this.showDisCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
          this.showPengCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        if (player && GameData.cards[player.uid]) {
          this.showHandCards(player, this.play_layer_right);
          this.showDisCards(player, this.play_layer_right, "mj_face_you_chu", "right");
          this.showPengCards(player, this.play_layer_right, "mj_face_you_chu", "right");
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("up");
        if (player && GameData.cards[player.uid]) {
          this.showHandCards(player, this.play_layer_up);
          this.showDisCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
          this.showPengCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
        } else this.play_layer_up.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameData.cards[player.uid]) {
          this.showHandCards(player, this.play_layer_left);
          this.showDisCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
          this.showPengCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
        } else this.play_layer_left.active = false;
        this.showCardNum();
        1e3 != GameData.game.cardHuier1 && -1 != GameData.game.cardHuier1 && 0 != GameData.game.cardHuier1 && this.showBaoCardImg();
      },
      showHandCards: function showHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardNum = GameData.getHandCardNum(uid) + 3 * (GameData.getChiCards(uid).length + GameData.getPengCards(uid).length + GameData.getGangCards(uid).length);
          var showIdx = cardNum > GameData.client.handsize ? 0 : 1;
          var handIdx = 1, nodeIdx = 0;
          for (;nodeIdx <= GameData.client.handsize; nodeIdx++) {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            if (nodeIdx == showIdx && handIdx <= GameData.getHandCardNum(uid)) {
              node.active = true;
              showIdx++;
              handIdx++;
            } else node.active = false;
          }
        }
      },
      moveUpMyCards: function moveUpMyCards(id, popCount) {
        var count = 0;
        for (var i = 1; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          if (cardId == id) {
            cardNode.y = 43;
            count++;
            if (count >= popCount) return;
          }
        }
      },
      moveBackMyCards: function moveBackMyCards() {
        this.selectedCard = -1;
        for (var i = 0; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          cardNode.position = this.myHandsInitPosition[i];
        }
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        var node;
        var cardHand = this._handCardArry;
        cardHand.reverse();
        this.moveBackMyCards();
        var cardHandNode = cc.find("cardHand", parent);
        for (var key in cardHandNode.children) {
          cardHandNode.children[key].getComponent(cc.Sprite).spriteFrame = null;
          cardHandNode.children[key].active = false;
        }
        var pengAndGangNum = 3 * GameData.getPengCards(GameData.player.uid).length + 3 * GameData.getGangCards(GameData.player.uid).length + 3 * GameData.getChiCards(GameData.player.uid).length;
        if (14 == cardHand.length) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.game.turn == GameData.player.uid && GameData.player[GameData.player.uid].cardLastAssigned) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.game.turn == GameData.player.uid && !GameData.player[GameData.player.uid].cardLastAssigned && cardHand.length > GameData.client.handsize - pengAndGangNum) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.player[GameData.player.uid].fenZhangCard && cardHand.length > GameData.client.handsize - pengAndGangNum) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            node.active = !(GameData.player[GameData.player.uid].isWin == HuaDian.WINTYPE.DIANPAOWIN);
            var huierNode = node.getChildByName(node.name + "_huier");
            huierNode && huierNode.removeFromParent(true);
            var isTing = 1 == GameData.cards[player.uid]["tingState"] || 2 == GameData.cards[player.uid]["tingState"];
            isTing && this.setMyHuierVisible(node, cardHand[i]);
          }
        } else for (var i = 1; i < cardHand.length + 1; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i - 1], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i - 1]);
        }
        var tingState = profileHeb.getTingStateByUid(GameData.player.uid);
        this.removeCardMask();
        if (tingState) {
          var tingCards = GameData.getTingData(GameData.player.uid).outCards;
          this.showTingMask(tingCards, 1);
          var canGang = profileHeb.canGang();
          var canHu = profileHeb.canHu();
          canHu || GameData.game.turn != GameData.player.uid || canGang || this.autoDisCard(GameData.game.obtain);
        } else this.removeCardMask();
      },
      showDisCards: function showDisCards(player, parent, cardHeader, direction) {
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        var disNode = cc.find("cardDis_" + GameData.room.opts.joinermax, parent);
        disNode.active = true;
        var cards = GameData.getDisCards(player.uid);
        player.uid == GameData.player.uid && (cards = this._disCardArry);
        for (var i = 1; i <= this.discardMax; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (i <= cards.length) {
            var iconUrl = "";
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, cardHeader, card);
            if (player.uid == GameData.game.lastdisUid && card == GameData.game.lastdisCard && null != node) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == direction;
              cc.find("down", this._cardArrow).active = "down" == direction;
              cc.find("right", this._cardArrow).active = "right" == direction;
              cc.find("up", this._cardArrow).active = "up" == direction;
            }
          } else node.active = false;
        }
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var chi = GameData.getChiCards(player.uid);
          for (var i = 0; i < chi.length; i++) {
            var chiCard = chi[i].otherPlayerCard;
            var index = chi[i].cards.indexOf(chiCard);
            if (1 != index) {
              var _ref = [ chi[i].cards[index], chi[i].cards[1] ];
              chi[i].cards[1] = _ref[0];
              chi[i].cards[index] = _ref[1];
            }
          }
          var gang = GameData.getGangCards(player.uid);
          for (var j = 0; j < gang.length; j++) gang[j].cardType = -1;
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng, chi);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var face7 = cc.find("card_face7", node);
            face7.active = false;
            if (i < cards.length) {
              for (var n = 0; n < 7; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                var bugangIconNode = face.node.getChildByName(face.node.name + "_bugangIcon");
                bugangIconNode && (bugangIconNode.active = false);
                var isPeng = false;
                cards[i].cards.length < 4 && profileHeb.isAllEqual(cards[i].cards) && !cards[i].cardType && (isPeng = true);
                var isMingGang = false;
                4 == cards[i].cards.length && profileHeb.isAllEqual(cards[i].cards) && (isMingGang = true);
                var isAnGang = false;
                5 == cards[i].cards.length && profileHeb.isAllEqual(cards[i].cards) && (isAnGang = true);
                if (n < cards[i].cards.length) {
                  face.node.active = true;
                  var cardId = cards[i].cards[n];
                  if (isPeng) this.showCardContent(face.node, cardHeader, cardId); else if (isMingGang) {
                    if (n < 4) if (3 == n) {
                      this.showCardContent(face7, cardHeader, cardId);
                      face.node.active = false;
                    } else this.showCardContent(face.node, cardHeader, cardId); else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 1);
                  } else if (isAnGang) {
                    if (n < 4) if (3 == n) {
                      if (player.uid == GameData.player.uid) this.showCardContent(face7, cardHeader, cardId); else {
                        var mj_back = this.getCardBackImgName(player.uid);
                        this.showCardContent(face7, mj_back.img1, mj_back.img2);
                      }
                      face.node.active = false;
                    } else {
                      var mj_back = this.getCardBackImgName(player.uid);
                      this.showCardContent(face.node, mj_back.img1, mj_back.img2);
                    } else face.node.active = false;
                    face7.active = true;
                    this.addGangIcon(face7, direction, 2);
                  } else if (cards[i].cardType && cards.type != HuaDian.OPERATION.OPERATION_ANGANG && cards.type != HuaDian.OPERATION.OPERATION_MINGGANG && cards.type != HuaDian.OPERATION.OPERATION_GONGGANG) {
                    var array1 = [].concat(cards[i].cards);
                    array1.splice(3, array1.length);
                    var gangCardArray = [].concat(cards[i].cards);
                    var array2 = profileHeb.guolv(array1, gangCardArray);
                    var array3 = [].concat(array1, array2);
                    var isVisiable = array3.length > n;
                    var num = 1;
                    var index = 3;
                    n >= 3 && (index = cards[i].cards.indexOf(array3[n]) + 1);
                    for (index; index < cards[i].cards.length; index++) if (array3[n] == cards[i].cards[index]) {
                      if (0 != n && cards[i].cards.indexOf(array3[n]) == index) continue;
                      num++;
                    }
                    if (isVisiable) {
                      num >= 2 && this.addBuGangIcon(face.node, direction, num);
                      this.showCardContent(face.node, cardHeader, array3[n]);
                      face.node.active = true;
                    } else face.node.active = false;
                  } else this.showCardContent(face.node, cardHeader, cardId);
                } else 6 != n && (face.node.active = false);
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      autoDisCard: function autoDisCard(cards) {
        var self = this;
        var cardArry = [];
        cardArry.push(cards);
        this.scheduleOnce(function() {
          MjHandler_Heb.getInstance().requestDisCard_CC(cardArry, function(ret) {
            if (ret.result == errorCode.Success) {
              self.selectedCard = -1;
              self.moveBackMyCards();
            }
          });
        }, .5);
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var GangIconNode = new cc.Node();
          parent.addChild(GangIconNode);
          var huierIconTx = cc.textureCache.addImage(cc.url.raw("resources/huadian/UI/icon/huier_icon.png"));
          var huierIconSprite = GangIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            GangIconNode.x = -32.6;
            GangIconNode.y = 7.1;
            GangIconNode.rotation = -101.2;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .4;
            GangIconNode.skewX = 11;
          } else if ("down" == direction) {
            GangIconNode.x = 0;
            GangIconNode.y = 60;
            GangIconNode.skewX = 10;
          } else if ("left" == direction) {
            GangIconNode.x = 31;
            GangIconNode.y = 8.6;
            GangIconNode.rotation = 101.2;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .4;
            GangIconNode.skewX = -11;
          } else if ("up" == direction) {
            GangIconNode.x = 3;
            GangIconNode.y = -6.8;
            GangIconNode.rotation = 180;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .3;
          }
        }
      },
      addGangIcon: function addGangIcon(node, direction, type) {
        var gangIcon = cc.find("gangType", node);
        var Url;
        var gangType = "";
        var gangDirection = "";
        if ("right" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "1";
        } else if ("down" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "0";
        } else if ("left" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "3";
        } else if ("up" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "2";
        }
        Url = cc.url.raw("resources/huadian/UI/icon/" + gangType + gangDirection + "_icon.png");
        var GangIconTx = cc.textureCache.addImage(Url);
        gangIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
      },
      addBuGangIcon: function addBuGangIcon(node, direction, num) {
        var bugangIconNodes = node.getChildByName(node.name + "_bugangIcon");
        if (null == bugangIconNodes) {
          bugangIconNodes = cc.instantiate(this.cardBugangPre);
          bugangIconNodes.name = node.name + "_bugangIcon";
          node.addChild(bugangIconNodes);
        }
        bugangIconNodes.active = true;
        var Url;
        var gangDirection = "";
        "right" == direction ? gangDirection = "1" : "down" == direction ? gangDirection = "0" : "left" == direction ? gangDirection = "3" : "up" == direction && (gangDirection = "2");
        for (var i = 0; i < bugangIconNodes.childrenCount; i++) if (direction == bugangIconNodes.children[i].name) {
          bugangIconNodes.children[i].active = true;
          Url = cc.url.raw("resources/changchun/UI/icon/bugang_" + gangDirection + "_" + num + ".png");
          var GangIconTx = cc.textureCache.addImage(Url);
          bugangIconNodes.children[i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
        } else bugangIconNodes.children[i].active = false;
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        if (void 0 == cardNode) return;
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cardNode.active = true;
        this.setMaskVisible(cardNode, false);
      },
      showOperations: function showOperations() {
        this.operationsArry = [];
        this.gangOperations = [];
        this.actions = [];
        this.isPass1 = true;
        var isExist = true;
        this.operationsArry = profileHeb.getPlayerOperationsByUid(GameData.player.uid);
        this.hideOperationBtn();
        if (this.operationsArry.length > 0) {
          this.actionLayer.active = true;
          var k = 0;
          for (var i = 0; i < this.operationsArry.length; i++) {
            var operActionBtnIcon = this.getOperAction(this.operationsArry[i]);
            this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_ANGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_MINGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG_TING && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_ANGANG_TING && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_MINGGANG_TING && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_XUAN_FENG_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_XI_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_YAO_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_JIU_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_XUAN_FENG_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_XI_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_YAO_GANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_BU_JIU_GANG || this.gangOperations.push(this.operationsArry[i]);
            isExist = true;
            for (var j = 0; j < this.actions.length; j++) if (this.actions[j].act == operActionBtnIcon.substring(0, operActionBtnIcon.length - 4)) {
              isExist = false;
              k--;
              break;
            }
            if (isExist) {
              this.actions[k] = {
                act: operActionBtnIcon.substring(0, operActionBtnIcon.length - 4),
                card: this.getOperCard(operActionBtnIcon, this.operationsArry[i]),
                type: this.operationsArry[i]
              };
              this.createActionBtn(k + 1, operActionBtnIcon);
            }
            k++;
          }
          if (GameData.player[GameData.player.uid].gangTing) {
            for (var i = 0; i < this.actions.length; i++) if ("dan" == this.actions[i].act) {
              this.actions[i].type = [];
              for (var j = 0; j < GameData.player[GameData.player.uid].gangTing.gangCards.length; j++) this.actions[i].type.push(GameData.player[GameData.player.uid].gangTing.gangCards[j].operation);
            }
          } else for (var j = 0; j < this.actions.length; j++) if ("dan" == this.actions[j].act) {
            if (this.gangOperations.length > 1) {
              this.actions[j].card = [];
              this.actions[j].type = [];
              for (var i = 0; i < this.gangOperations.length; i++) {
                this.actions[j].card.push(this.getOperCard("dan.png", this.gangOperations[i]));
                this.actions[j].type.push(this.gangOperations[i]);
              }
            } else {
              this.actions[j].card = [];
              this.actions[j].type = [];
              this.actions[j].card.push(this.getOperCard("dan.png", this.gangOperations[0]));
              this.actions[j].type.push(this.gangOperations[0]);
            }
            break;
          }
          for (var i = 0; i < this.actions.length; i++) {
            if (!GameData.player[GameData.player.uid].isCanPass) {
              this.passBtn.interactable = false;
              break;
            }
            this.passBtn.interactable = true;
          }
          this.removeCardMask();
          for (var k = 0; k < this.actions.length; k++) if ("ting" == this.actions[k].act) {
            if (GameData.getTingData(GameData.player.uid)) {
              var tingCards = GameData.getTingData(GameData.player.uid).outCards;
              this.showTingMask(tingCards, 1);
            }
            break;
          }
        } else this.actionLayer.active = false;
      },
      getOperCard: function getOperCard(operAction, type) {
        var cardsArry = [];
        var operType = operAction.substring(0, operAction.length - 4);
        if ("dan" == operType) {
          if (GameData.game.dataInfo.isQiangBuGang) return cardsArry;
          if (GameData.player[GameData.player.uid].gangTing) {
            var gangCard = GameData.player[GameData.player.uid].gangTing.gangCards;
            for (var i = 0; i < gangCard.length; i++) cardsArry.push(gangCard[i].gangCards);
            return cardsArry;
          }
          if (GameData.player[GameData.player.uid].buGangInfo) for (var i = 0; i < this.gangOperations.length; i++) {
            for (var key in GameData.player[GameData.player.uid].buGangInfo) key == parseInt(this.gangOperations[i]) && cardsArry.push(GameData.player[GameData.player.uid].buGangInfo[key].outCards);
            break;
          } else {
            var gangData = profileHeb.getGangCardByUid(GameData.player.uid, type);
            if (gangData) if (0 == gangData.type) {
              var cards = [];
              for (var i = 0; i < 3; i++) cards.push(gangData.card);
              cardsArry = cards;
            } else if (1 == gangData.type) {
              var cards = [];
              for (var i = 0; i < 4; i++) cards.push(gangData.card);
              cardsArry = cards;
            } else cardsArry = gangData.card;
          }
          return cardsArry;
        }
        if (!GameData.game.dataInfo.showCard) return;
        var card = GameData.game.lastdisCard;
        if ("cha" == operType) {
          if (GameData.game.dataInfo.isQiangBuGang) return cardsArry;
          for (var i = 0; i < 2; i++) cardsArry.push(card);
          return cardsArry;
        }
        if ("chi" == operType) {
          cardsArry = RuleHandler.instance.canChi(GameData.player.uid, card);
          return cardsArry;
        }
      },
      getOperAction: function getOperAction(operation) {
        if (operation == HuaDian.OPERATION.OPERATION_PASS) return "pass.png";
        if (operation == HuaDian.OPERATION.OPERATION_PENG || operation == HuaDian.OPERATION.OPERATION_PENG_TING) return "cha.png";
        if (operation == HuaDian.OPERATION.OPERATION_GONGGANG || operation == HuaDian.OPERATION.OPERATION_ANGANG || operation == HuaDian.OPERATION.OPERATION_MINGGANG || operation == HuaDian.OPERATION.OPERATION_GONGGANG_TING || operation == HuaDian.OPERATION.OPERATION_ANGANG_TING || operation == HuaDian.OPERATION.OPERATION_MINGGANG_TING || operation == HuaDian.OPERATION.OPERATION_XUAN_FENG_GANG || operation == HuaDian.OPERATION.OPERATION_XI_GANG || operation == HuaDian.OPERATION.OPERATION_YAO_GANG || operation == HuaDian.OPERATION.OPERATION_JIU_GANG || operation == HuaDian.OPERATION.OPERATION_BU_XUAN_FENG_GANG || operation == HuaDian.OPERATION.OPERATION_BU_XI_GANG || operation == HuaDian.OPERATION.OPERATION_BU_YAO_GANG || operation == HuaDian.OPERATION.OPERATION_BU_JIU_GANG) return "dan.png";
        if (operation == HuaDian.OPERATION.OPERATION_CHI || operation == HuaDian.OPERATION.OPERATION_CHI_TING) return "chi.png";
        if (operation == HuaDian.OPERATION.OPERATION_DIANPAO_HU || operation == HuaDian.OPERATION.OPERATION_HU || operation == HuaDian.OPERATION.OPERATION_QIANGGANG_HU) return "hu.png";
        if (operation == HuaDian.OPERATION.OPERATION_TING) return "ting.png";
        return null;
      },
      setMyHandButton: function setMyHandButton(cardNode, cardId, index) {
        if (!cardNode) return;
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardNode.addChild(cardBtn);
          cardBtn.name = cardNode.name + "_button";
        }
        var cardButton = cardBtn.getComponent("CardButton");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyTingVisible: function setMyTingVisible(cardNode, cardId) {
        var tingDiscard = false;
        for (var i = 0; i < this.tingData.length; i++) {
          var data = this.tingData[i];
          if (data.discard == cardId) {
            tingDiscard = true;
            break;
          }
        }
        var tingNode = cardNode.getChildByName(cardNode.name + "_ting");
        if (null == tingNode) {
          if (true == tingDiscard) {
            tingNode = cc.instantiate(this.cardTingPrefab);
            tingNode.y = tingNode.y - 10;
            cardNode.addChild(tingNode);
            tingNode.name = cardNode.name + "_ting";
          }
        } else tingNode.active = tingDiscard;
        GameData.game.turn != GameData.player.uid && null != tingNode && (tingNode.active = false);
      },
      setHandCardDisable: function setHandCardDisable(node, show) {
        var cardButton = node.getChildByName(node.name + "_button");
        cardButton && cardButton.removeFromParent(true);
        var maskNode = node.getChildByName("mask");
        if (null == maskNode) {
          maskNode = new cc.Node("mask");
          var sp = maskNode.addComponent(cc.Sprite);
          var iconUrl = "resources/table/majiangmengbai.png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          sp.spriteFrame = new cc.SpriteFrame(texture);
          node.addChild(maskNode);
        }
        maskNode.active = show;
      },
      showPosition: function showPosition() {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        var rotation = 0;
        0 == index ? rotation = 90 : 3 == index ? rotation = 0 : 2 == index ? rotation = 270 : 1 == index && (rotation = 180);
        this.direction_pos.node.rotation = rotation;
      },
      showTurn: function showTurn() {
        var turnPlayerUid = profileHeb.getTurnByUid();
        var index = GameData.getPlayerIndex(turnPlayerUid);
        var direction;
        direction = 0 == index ? "dong" : 3 == index ? "nan" : 2 == index ? "xi" : 1 == index ? "bei" : "dong";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + direction + ".png"));
        this.direction_pos.spriteFrame = new cc.SpriteFrame(texture);
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        var directionNode = cc.find(GameData.tablePos[turnPlayerUid], this.direction_turn);
        directionNode && (directionNode.active = true);
      },
      showCardNum: function showCardNum() {
        if (GameData.game.cardleft < 0) return;
        this.leftCardNumLabel.string = GameData.game.cardleft;
      },
      showBaoCardImg: function showBaoCardImg() {
        var huier1 = GameData.game.cardHuier1;
        var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + huier1 + ".png"));
        this.huiercard1.spriteFrame = new cc.SpriteFrame(texture);
        if (GameData.room.opts) {
          var isTing = 1 == GameData.cards[GameData.player.uid]["tingState"] || 2 == GameData.cards[GameData.player.uid]["tingState"];
          isTing && 0 == GameData.room.opts.anBao ? this.huiercard1.node.active = true : 1 == GameData.room.opts.anBao && (this.huiercard1.node.active = false);
        }
      },
      showBaoCardNode: function showBaoCardNode(show) {
        this.baoCardNode.active = show;
        var anbaoNode = cc.find("anbao", this.baoCardNode);
        var mingbaoNode = cc.find("mingbao", this.baoCardNode);
        if (GameData.room.opts) {
          anbaoNode.active = 1 == GameData.room.opts.anBao;
          mingbaoNode.active = 0 == GameData.room.opts.anBao;
        }
      },
      showEffect: function showEffect(type) {
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case "peng":
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case "gang":
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case "hu":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
          break;

         case "chi":
          spineUrl = "spine/table/chi";
          spineAnim = "a";
          break;

         case "dianpao":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        var spine = spineNode.getComponent("sp.Skeleton");
        spine.skeletonData = null;
        spine.animation = null;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      },
      playBaoAnimation: function playBaoAnimation(node, animate) {
        var url = "spine/table/" + animate;
        cc.loader.loadResDir(url, function(err, assets) {
          if (err) {
            cc.log(err);
            return;
          }
          if (assets.length <= 0) {
            cc.log("assets length: ", assets.length);
            return;
          }
          var armatureDisplay;
          if (node.getComponent(dragonBones.ArmatureDisplay)) {
            cc.log("dragonBones get");
            armatureDisplay = node.getComponent(dragonBones.ArmatureDisplay);
          } else {
            cc.log("dragonBones add");
            armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
          }
          for (var elem in assets) {
            assets[elem] instanceof dragonBones.DragonBonesAsset && armatureDisplay.dragonAsset != assets[elem] && (armatureDisplay.dragonAsset = assets[elem]);
            assets[elem] instanceof dragonBones.DragonBonesAtlasAsset && armatureDisplay.dragonAtlasAsset != assets[elem] && (armatureDisplay.dragonAtlasAsset = assets[elem]);
          }
          armatureDisplay.armatureName = "armature";
          armatureDisplay.playAnimation("newAnimation", 1);
        });
      },
      onHandCardClicked: function onHandCardClicked(data) {
        var card = data.detail.card;
        var index = data.detail.index;
        var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
        var cardArry = [];
        cardArry.push(card);
        if (this.selectedCard == index) {
          var self = this;
          var canTing = false;
          if (GameData.getTingData(GameData.player.uid)) {
            canTing = GameData.getTingData(GameData.player.uid).canTing;
            0 == GameData.getTingData(GameData.player.uid).outCards.length ? this.isTing = false : this.isTing = true;
          }
          if (canTing && this.isPass && this.isTing) {
            this.isPass = true;
            this.isTing = false;
            GameData.getTingData(GameData.player.uid).canTing = false;
            MjHandler_Heb.getInstance().requestOperation_CC(HuaDian.OPERATION.OPERATION_TING, cardArry, this.isZiMoHuOnly, function(res) {});
          } else GameData.game.turn == GameData.player.uid && MjHandler_Heb.getInstance().requestDisCard_CC(cardArry, function(ret) {
            if (ret.result == errorCode.Success) {
              node.stopAllActions();
              self.selectedCard = -1;
              this.moveBackMyCards();
            }
          });
          var index = this._handCardArry.indexOf(card);
          this._handCardArry.splice(index, 1);
          this._handCardArry.sort(function(a, b) {
            return a - b;
          });
          this._disCardArry.push(card);
          GameData.game.turn = 0;
          this.showCards();
          this.tingTip.hide();
        } else {
          if (this.selectedCard >= 0) {
            var last = cc.find("cardHand/cardHand" + this.selectedCard, this.play_layer_down);
            last.runAction(cc.moveTo(.01, this.myHandsInitPosition[this.selectedCard]));
          }
          node.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[index].x, 30)));
          this.selectedCard = index;
          if (GameData.game.turn == GameData.player.uid) {
            this.tingTip.show(card, this.tingData);
            this.showMask(card);
          }
        }
      },
      showTingState: function showTingState() {
        for (var key in this.tingStateNode.children) this.tingStateNode.children[key].active = false;
        var StateNode;
        var Url;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var direction = GameData.tablePos[GameData.joiners[i].uid];
          StateNode = cc.find(direction, this.tingStateNode);
          var stateImg = cc.find("text", StateNode);
          var TingStateType = GameData.cards[GameData.joiners[i].uid]["tingState"];
          if (1 == TingStateType) {
            Url = cc.url.raw("resources/huadian/UI/artword/loupaizhong.png");
            var tingIconTx = cc.textureCache.addImage(Url);
            stateImg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tingIconTx);
            StateNode.active = true;
          } else if (2 == TingStateType) {
            Url = cc.url.raw("resources/huadian/UI/artword/tingpaizhong.png");
            var tingIconTx = cc.textureCache.addImage(Url);
            stateImg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tingIconTx);
            StateNode.active = true;
          } else StateNode.active = false;
        }
      },
      showMask: function showMask(selectCard) {
        var player = GameData.getPlayerByPos("down");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_down, "down");
          this.showDisCardMask(selectCard, this.play_layer_down, "down");
        }
        player = GameData.getPlayerByPos("up");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_up, "up");
          this.showDisCardMask(selectCard, this.play_layer_up, "up");
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_left, "left");
          this.showDisCardMask(selectCard, this.play_layer_left, "left");
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_right, "right");
          this.showDisCardMask(selectCard, this.play_layer_right, "right");
        }
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        for (var i = 1; i < 5; i++) {
          var node = cc.find("cardPeng/cardPeng" + i, parent);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        for (var i = 1; i <= this.discardMax; i++) {
          var cardNode = cc.find("cardDis_" + GameData.room.opts.joinermax + "/card_face" + i, parent);
          cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, parent, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("tipMask/up", maskNode).active = false;
            cc.find("tipMask/down", maskNode).active = false;
            cc.find("tipMask/right", maskNode).active = false;
            cc.find("tipMask/left", maskNode).active = false;
            cc.find("tipMask/" + direction, maskNode).active = true;
          }
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
            cc.find("tipMask", maskNode).active = true;
            cc.find("chipaiMask", maskNode).active = false;
          }
        } else cc.find("tipMask", maskNode).active = show;
        return maskNode;
      },
      onGameScore: function onGameScore() {
        this.tingTip.hide();
        this.unschedule(this.runCountDown);
      },
      startCoundDown: function startCoundDown(data) {
        this.PLayerUID = GameData.game.turn;
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "");
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          3 == this._countdown_index && this.PLayerUID == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        var url1;
        var url2;
        if (0 == ary.length) return;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      showScoreLayer: function showScoreLayer() {
        this.getComponent("roomScore").ShowPlayerScoreItem();
        this.scoreLayer.active = true;
      },
      onCardBtnStart: function onCardBtnStart(data) {},
      onCardBtnMove: function onCardBtnMove(data) {
        var card = data.detail.card;
        if (GameData.game.turn == GameData.player.uid) {
          this.tingTip.show(card, this.tingData);
          this.showMask(card);
        }
      },
      onCardBtnEnd: function onCardBtnEnd(data) {
        var index = data.detail.index;
        var type = data.detail.type;
        switch (type) {
         case -1:
          index == this.selectedCard && (this.selectedCard = -1);
          this.onHandCardClicked(data);
          this.tingTip.hide();
          break;

         case 0:
          this.onHandCardClicked(data);
          break;

         case 1:
          this.selectedCard = index;
          this.onHandCardClicked(data);
        }
      },
      onCardBtnCancel: function onCardBtnCancel(data) {
        this.tingTip.hide();
      },
      saveMyHandsInitPosition: function saveMyHandsInitPosition() {
        for (var index = 0; index <= GameData.client.handsize; index++) {
          var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
          this.myHandsInitPosition.push(node.getPosition());
        }
      },
      showPiaoLayer: function showPiaoLayer() {
        this.PiaoLayer.active = true;
      },
      getCardBackImgName: function getCardBackImgName(uid) {
        var pos = GameData.getPlayerPosByUid(uid);
        var imgName1 = "";
        var imgName2 = "";
        switch (pos) {
         case "down":
          imgName1 = "mj_back0";
          imgName2 = "chu";
          break;

         case "up":
          imgName1 = "mj_back2";
          imgName2 = "chu";
          break;

         case "right":
          imgName1 = "mj_back1";
          imgName2 = "chu";
          break;

         case "left":
          imgName1 = "mj_back3";
          imgName2 = "chu";
        }
        var imgData = {
          img1: imgName1,
          img2: imgName2
        };
        return imgData;
      },
      saveMyHandCard: function saveMyHandCard() {
        this._handCardArry = [];
        this._disCardArry = [];
        if (0 == Object.keys(GameData.cards).length) return;
        this._handCardArry = GameData.getHandCards(GameData.player.uid);
        this._disCardArry = GameData.getDisCards(GameData.player.uid);
        if (GameData.game.turn == GameData.player.uid && GameData.player[GameData.player.uid].cardLastAssigned) {
          var hand1 = this._handCardArry[this._handCardArry.length - 1];
          this._handCardArry.pop();
          this._handCardArry.sort(function(a, b) {
            return a - b;
          });
          this._handCardArry.push(hand1);
        } else this._handCardArry.sort(function(a, b) {
          return a - b;
        });
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomTable_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "243b9lFj6pG4YkhRGD/VVp+", "roomTable_huadian");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var RuleHandler = require("ruleHandler");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        direction_pos: cc.Sprite,
        direction_turn: cc.Node,
        baoCardNode: cc.Node,
        huiercard1: cc.Sprite,
        leftCardNumLabel: cc.Label,
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        cardsNode: cc.Node,
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node,
        cardTemplate: cc.Prefab,
        playerTemplate: cc.Prefab,
        selectedCard: -1,
        HuType: null,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        disCardArrow: cc.Prefab,
        _cardArrow: cc.Node,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab,
        lastRoundLabel: cc.RichText,
        scoreLayer: cc.Node,
        baoAnimationNode: cc.Node,
        tingStateNode: cc.Node,
        passBtn: cc.Button,
        PiaoLayer: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.handleGameStart);
        registEvent("onGameReady", this, this.handleGameReady);
        registEvent("onGameTurn", this, this.handleTurn);
        registEvent("onStarPiao", this, this.showPiaoLayer);
        registEvent("onMahjongStartRun", this, this.onShow);
        registEvent("onRegularCircle", this, this.onShow);
        registEvent("onMahjongRunEnd", this, this.onGameScore);
        registEvent("onHuaDianMahjongReconnecet", this, this.onShow);
        registEvent("onCardHu", this, this.handleHuCard);
        registEvent("onCardChi", this, this.handleChiCard);
        registEvent("onCardDis", this, this.handleDisCard);
        registEvent("onCardPeng", this, this.handlePengCard);
        registEvent("onCardGang", this, this.handleGangCard);
        registEvent("onCardTing", this, this.handleTingCard);
        registEvent("onCardBao", this, this.handleBao);
        registEvent("dianPao", this, this.handleDianPao);
        registEvent("onPushErrorMsg", this, this.showErrorMsg);
        registEvent("onCardBtnStart", this, this.onCardBtnStart);
        registEvent("onCardBtnMove", this, this.onCardBtnMove);
        registEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        registEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        this.actions = new Array();
        this._handCardArry = new Array();
        this._disCardArry = new Array();
        this.gangOperations = [];
        this.cardsNode.active = false;
        this.PiaoLayer.active = false;
        this.tingData = [];
        this.tingTip = this.node.getComponent("TingTip");
        this.playerSex = 1;
        this.isZiMoHuOnly = 0;
        this.isPass = true;
        if (GameData.room) {
          4 == GameData.room.opts.joinermax && (this.discardMax = 24);
          3 == GameData.room.opts.joinermax && (this.discardMax = 36);
          2 == GameData.room.opts.joinermax && (this.discardMax = 60);
        }
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this.cardsNode.addChild(this._cardArrow);
        this._cardArrow.active = false;
        this.myHandsInitPosition = [];
        this.saveMyHandsInitPosition();
        if (GameData.game.gameStart) {
          this.handleGameStart();
          this.onShow();
          this.handleTurn();
        }
        Object.keys(profileHuaDian.PiaoInfo).length > 0 && profileHuaDian.PiaoInfo.runState == HuaDian.RunStateEmnum.PIAO && this.showPiaoLayer();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.handleGameStart);
        unregistEvent("onGameReady", this, this.handleGameReady);
        unregistEvent("onGameTurn", this, this.handleTurn);
        unregistEvent("onStarPiao", this, this.showPiaoLayer);
        unregistEvent("onMahjongStartRun", this, this.onShow);
        unregistEvent("onRegularCircle", this, this.onShow);
        unregistEvent("onMahjongRunEnd", this, this.showResultLayer);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.onShow);
        unregistEvent("onCardHu", this, this.handleHuCard);
        unregistEvent("onCardDis", this, this.handleDisCard);
        unregistEvent("onCardPeng", this, this.handlePengCard);
        unregistEvent("onCardGang", this, this.handleGangCard);
        unregistEvent("onCardBao", this, this.handleBao);
        unregistEvent("dianPao", this, this.handleDianPao);
        unregistEvent("onPushErrorMsg", this, this.showErrorMsg);
        unregistEvent("onCardBtnStart", this, this.onCardBtnStart);
        unregistEvent("onCardBtnMove", this, this.onCardBtnMove);
        unregistEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        unregistEvent("onCardBtnCancel", this, this.onCardBtnCancel);
      },
      handleGameStart: function handleGameStart() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        this.showBaoCardNode(false);
      },
      handleGameReady: function handleGameReady() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        for (var key in this.tingStateNode.children) this.tingStateNode.children[key].active = false;
        GameData.game.cardHuier1 = 0;
        this.showBaoCardNode(false);
        this.huiercard1.spriteFrame = null;
        this.huiercard1.node.active = false;
      },
      onShow: function onShow() {
        this.cardsNode.active = true;
        this.saveMyHandCard();
        this.showCards();
        this.showOperations();
        GameData.room.status == gameDefine.RoomState.GAMEING && this.showTingState();
        profileHuaDian.checkIsTingPlayer() ? this.showBaoCardNode(true) : this.showBaoCardNode(false);
        var showRoundNum = GameData.room.roundNum > GameData.room.opts.roundMax ? GameData.room.roundmax : GameData.room.roundNum;
        this.lastRoundLabel.string = showRoundNum + "/" + GameData.room.opts.roundMax;
      },
      handleTurn: function handleTurn(data) {
        this.showTurn();
        this.startCoundDown(data);
      },
      handleDisCard: function handleDisCard(data) {
        console.log("this.playerSex =  GameData.player.sex", data.detail.player, GameData.player.sex);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        if (void 0 == data.detail.card) return;
        soundMngr.instance.playAudioHD("dis", data.detail.card, this.playerSex);
        soundMngr.instance.playAudioOther("out");
      },
      handlePengCard: function handlePengCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioHD("cha", null, this.playerSex);
        this.playActionAnimation(data.detail.userId, "cha");
      },
      handleChiCard: function handleChiCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioHD("chi", null, this.playerSex);
        this.playActionAnimation(data.detail.userId, "chi");
      },
      handleGangCard: function handleGangCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        3 == data.detail.operation ? soundMngr.instance.playAudioHD("andan", null, this.playerSex) : soundMngr.instance.playAudioHD("mingdan", null, this.playerSex);
        if (data.detail.userId == GameData.player.uid) {
          var baoAnimNode = cc.find("down", this.baoAnimationNode);
          this.playBaoAnimation(baoAnimNode, "dan");
        } else this.playActionAnimation(data.detail.userId, "dan");
      },
      handleTingCard: function handleTingCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioHD("ting", null, this.playerSex);
      },
      handleHuCard: function handleHuCard(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.userId);
        soundMngr.instance.playAudioHD("hu", data.detail, this.playerSex);
        data.detail.userId == GameData.player.uid ? this.showEffect("hu") : this.playActionAnimation(data.detail.userId, "hu");
        this.actionLayer.active = false;
      },
      handleBao: function handleBao(data) {
        var animationNode = cc.find("up", this.baoAnimationNode);
        var type = data.detail.type;
        1 == type ? this.playBaoAnimation(animationNode, "huanbao") : 2 == type && this.playBaoAnimation(animationNode, "dabao");
        this.showBaoCardNode(true);
      },
      handleDianPao: function handleDianPao(data) {
        data.detail == GameData.player.uid && this.playActionAnimation(data.detail, "dianpao");
      },
      showErrorMsg: function showErrorMsg(data) {
        301 == data.detail.errorCode && createMoveMessage("定宝牌库没牌了!");
      },
      playActionAnimation: function playActionAnimation(uid, action) {
        if (null != GameData.joiners) {
          var pos = GameData.tablePos[uid];
          var animationNode = cc.find("layer_ui/layer_ui_table/actionAnimations/" + pos, this.node);
          null != animationNode && animationNode.getComponent(cc.Animation).play(action);
        }
      },
      handlePass: function handlePass(data) {
        if (GameData.game.checkPass.onGoingUserId) {
          var uid = GameData.game.checkPass.onGoingUserId;
          var card = GameData.game.checkPass.showCard[0];
          var show = this.showPassActions(uid, card);
          show || MjHandler.getInstance().requestPass_HD(function(res) {});
          GameData.game.checkPass = {};
        }
      },
      showGangAction: function showGangAction(btnIdx, gangActions) {},
      checkGangAction: function checkGangAction(uid, card) {},
      hideOperationBtn: function hideOperationBtn() {
        var actionNode;
        for (var i = 0; i < 4; i++) {
          actionNode = cc.find("btnAct" + (i + 1), this.actionLayer);
          actionNode.active = false;
        }
      },
      createActionBtn: function createActionBtn(index, icon) {
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var texture = cc.textureCache.addImage(cc.url.raw("resources/huadian/UI/btn/" + icon));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        for (var i = 0; i < this.actions.length; i++) cc.log(this.actions[i].act + "," + this.actions[i].card);
        var self = this;
        var data = this.actions[index];
        if ("hu" == data.act) {
          MjHandler.getInstance().requestOperation(data.type, null, null, function(res) {});
          this.showEffect("hu");
        } else if ("cha" == data.act) {
          cc.log("------------------\x3e click cha, should open cha ui,");
          MjHandler.getInstance().requestOperation(HuaDian.OPERATION.OPERATION_PENG, data.card, null, function(res) {});
          var baoAnimNode = cc.find("down", this.baoAnimationNode);
          this.playBaoAnimation(baoAnimNode, "cha");
        } else if ("ting" == data.act) {
          cc.log("------------------\x3e click ting, should open ting ui,");
          this.actionLayer.actvie = false;
          this.isPass = true;
          this.isZiMoHuOnly = 0;
        } else if ("lou" == data.act) {
          cc.log("------------------\x3e click lou, should open lou ui,");
          this.actionLayer.actvie = false;
          this.isPass = true;
          this.isZiMoHuOnly = 1;
          for (var i = 0; i < this.actions.length; i++) if ("lou" == this.actions[i].act) {
            this.actions.splice(i, 1);
            var actionNode = cc.find("btnAct" + i, this.actionLayer);
            actionNode.active = false;
          }
        } else if ("chi" == data.act) {
          cc.log("------------------\x3e click chi, should open chi ui,");
          if (data.card.length <= 1) {
            var cardArry = [];
            for (var i = 0; i < data.card[0].length; i++) cardArry.push(data.card[0][i]);
            MjHandler.getInstance().requestOperation(HuaDian.OPERATION.OPERATION_CHI, cardArry, null, function(res) {});
            this.showEffect("chi");
          } else this.refreshChiActionType(data);
        } else if ("dan" == data.act) if (data.card.length <= 1) {
          var type = data.type;
          type instanceof Array && (type = data.type[0]);
          MjHandler.getInstance().requestOperation(type, data.card[0], null, function(res) {});
        } else this.refreshGangActionBar(data);
        this.moveBackMyCards();
        self.actionLayer.active = false;
      },
      refreshChiActionType: function refreshChiActionType(data) {
        this.chiActionList = [];
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          this.chiActionList.push(action);
          var carddis = GameData.game.lastdisCard;
          var card = cc.instantiate(cardTemp);
          contains(action, carddis) || action.push(carddis);
          action = action.sort();
          card.name = i + "";
          for (var j = 0; j < action.length; j++) {
            var cardNode = cc.find("card_" + j, card);
            cardNode.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[j] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            if (action[j] == carddis) {
              var biaoji = cardNode.getChildByName(cardNode.name + "_biao");
              if (null == biaoji) {
                biaoji = cc.instantiate(this.cardTingPrefab);
                biaoji.y = biaoji.y - 10;
                cardNode.addChild(biaoji);
                biaoji.name = cardNode.name + "_biao";
              }
            }
            cardNode.active = true;
          }
          card.getComponent(cc.Sprite).spriteFrame = null;
          card.on(cc.Node.EventType.TOUCH_START, this.onClickChiActionBtn, this);
          cardLayout.addChild(card);
          card.width = 252;
        }
        cardTemp.active = false;
      },
      onClickChiActionBtn: function onClickChiActionBtn(e) {
        var index = e.target.name;
        var data = this.chiActionList[index];
        var carddis = GameData.game.lastdisCard;
        for (var i = 0; i < data.length; i++) data[i] == carddis && data.splice(i, 1);
        var self = this;
        if (null != data) {
          MjHandler.getInstance().requestOperation(HuaDian.OPERATION.OPERATION_CHI, data, null, function(res) {});
          this.showEffect("chi");
        }
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      refreshGangActionBar: function refreshGangActionBar(data) {
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        this.gangActionList = new Array();
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          var GangData = {
            card: data.card[i],
            type: data.type[i]
          };
          this.gangActionList.push(GangData);
          var card = cc.instantiate(cardTemp);
          card.name = i + "";
          card.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[0] + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          card.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
          cardLayout.addChild(card);
        }
        cardTemp.active = false;
      },
      showTingMask: function showTingMask(cards, type) {
        this.removeCardMask();
        var myHandCardNode = cc.find("cardHand", this.play_layer_down);
        for (var key in myHandCardNode.children) {
          var cardId = myHandCardNode.children[key].getComponent("Card").id;
          var num = 0;
          for (var i = 0; i < cards.length; i++) cardId != cards[i] && num++;
          num == cards.length && this.setHandCardDisable(myHandCardNode.children[key], true);
        }
      },
      removeCardMask: function removeCardMask() {
        var myHandCardNode = cc.find("cardHand", this.play_layer_down);
        for (var key in myHandCardNode.children) myHandCardNode.children[key].getChildByName("mask") && myHandCardNode.children[key].getChildByName("mask").removeFromParent(true);
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      onClickActionSecondaryBtn: function onClickActionSecondaryBtn(e) {
        cc.log(e.target.name);
        var index = e.target.name;
        var data = this.gangActionList[index];
        var self = this;
        null != data && MjHandler.getInstance().requestOperation(data.type, data.card, null, function(res) {});
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        if (GameData.game.turn == GameData.player.uid) {
          MjHandler.getInstance().requestPass_HD(HuaDian.OPERATION.OPERATION_PASS, [], function(res) {});
          this.isPass = false;
        }
        var cardHand = GameData.getMyHandCards();
        for (var i = 0; i < cardHand.length; i++) {
          var node = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          node.active = true;
          this.setMyHandButton(node, cardHand[i], i);
        }
        this.removeCardMask();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      showCards: function showCards() {
        cc.log("~~~~~~~~~~~~~~~function_showcards~~~~~~~~~~~~~~~~~~~~~~");
        var player = GameData.getPlayerByPos("down");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.showMyHandCards(player, this.play_layer_down);
          this.showDisCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
          this.showPengCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_right.active = true;
          this.showHandCards(player, this.play_layer_right);
          this.showDisCards(player, this.play_layer_right, "mj_face_you_chu", "right");
          this.showPengCards(player, this.play_layer_right, "mj_face_you_chu", "right");
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("up");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_up.active = true;
          this.showHandCards(player, this.play_layer_up);
          this.showDisCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
          this.showPengCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
        } else this.play_layer_up.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_left.active = true;
          this.showHandCards(player, this.play_layer_left);
          this.showDisCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
          this.showPengCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
        } else this.play_layer_left.active = false;
        this.showCardNum();
        if (1e3 != GameData.game.cardHuier1 && -1 != GameData.game.cardHuier1 && 0 != GameData.game.cardHuier1) this.showBaoCardImg(); else {
          this.huiercard1.spriteFrame = null;
          this.huiercard1.node.active = false;
        }
      },
      showHandCards: function showHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardNum = GameData.getHandCardNum(uid) + 3 * (GameData.getChiCards(uid).length + GameData.getPengCards(uid).length + GameData.getGangCards(uid).length);
          var showIdx = cardNum > GameData.client.handsize ? 0 : 1;
          var handIdx = 1, nodeIdx = 0;
          for (;nodeIdx <= GameData.client.handsize; nodeIdx++) {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            if (nodeIdx == showIdx && handIdx <= GameData.getHandCardNum(uid)) {
              node.active = true;
              showIdx++;
              handIdx++;
            } else node.active = false;
          }
        }
      },
      moveUpMyCards: function moveUpMyCards(id, popCount) {
        var count = 0;
        for (var i = 1; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          if (cardId == id) {
            cardNode.y = 43;
            count++;
            if (count >= popCount) return;
          }
        }
      },
      moveBackMyCards: function moveBackMyCards() {
        this.selectedCard = -1;
        for (var i = 0; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          cardNode.position = this.myHandsInitPosition[i];
        }
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        var node;
        var cardHand = this._handCardArry;
        cardHand.reverse();
        this.moveBackMyCards();
        var cardHandNode = cc.find("cardHand", parent);
        for (var key in cardHandNode.children) {
          cardHandNode.children[key].getComponent(cc.Sprite).spriteFrame = null;
          cardHandNode.children[key].active = false;
        }
        var pengAndGangNum = 3 * GameData.getPengCards(GameData.player.uid).length + 3 * GameData.getGangCards(GameData.player.uid).length + 3 * GameData.getChiCards(GameData.player.uid).length;
        if (14 == cardHand.length) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            this.removeBaoIcon(node);
            this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.game.turn == GameData.player.uid && GameData.player[GameData.player.uid].cardLastAssigned) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            this.removeBaoIcon(node);
            this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.game.turn == GameData.player.uid && !GameData.player[GameData.player.uid].cardLastAssigned && cardHand.length > GameData.client.handsize - pengAndGangNum) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            this.removeBaoIcon(node);
            this.setMyHuierVisible(node, cardHand[i]);
          }
        } else if (cardHand.length < GameData.client.handsize && GameData.player[GameData.player.uid].fenZhangCard && cardHand.length > GameData.client.handsize - pengAndGangNum) for (var i = 0; i < cardHand.length; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i]);
          if (0 == i) {
            this.removeBaoIcon(node);
            this.setMyHuierVisible(node, cardHand[i]);
          }
        } else for (var i = 1; i < cardHand.length + 1; i++) {
          node = cc.find("cardHand/cardHand" + i, parent);
          this.setMyHandButton(node, cardHand[i - 1], i);
          this.showCardContent(node, "mj_face_xia_shou", cardHand[i - 1]);
        }
        var tingState = profileHuaDian.getTingStateByUid(GameData.player.uid);
        this.removeCardMask();
        if (tingState) {
          var tingCards = GameData.getTingData(GameData.player.uid).outCards;
          this.showTingMask(tingCards, 1);
          var canGang = profileHuaDian.canGang();
          var canHu = profileHuaDian.canHu();
          canHu || GameData.game.turn != GameData.player.uid || canGang || this.autoDisCard(GameData.game.obtain);
        } else this.removeCardMask();
      },
      removeBaoIcon: function removeBaoIcon(node) {
        node.active = GameData.player[GameData.player.uid].isWin != HuaDian.WINTYPE.DIANPAOWIN;
        var huierNode = node.getChildByName(node.name + "_huier");
        huierNode && huierNode.removeFromParent(true);
      },
      showDisCards: function showDisCards(player, parent, cardHeader, direction) {
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        console.log("22222" + GameData.room.opts.joinermax);
        var disNode = cc.find("cardDis_" + GameData.room.opts.joinermax, parent);
        disNode.active = true;
        var cards = GameData.getDisCards(player.uid);
        player.uid == GameData.player.uid && (cards = this._disCardArry);
        for (var i = 1; i <= this.discardMax; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (i <= cards.length) {
            var iconUrl = "";
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, cardHeader, card);
            if (player.uid == GameData.game.lastdisUid && card == GameData.game.lastdisCard && null != node) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == direction;
              cc.find("down", this._cardArrow).active = "down" == direction;
              cc.find("right", this._cardArrow).active = "right" == direction;
              cc.find("up", this._cardArrow).active = "up" == direction;
            }
          } else node.active = false;
        }
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var chi = GameData.getChiCards(player.uid);
          var allChiData = GameData.getSelfChiCards(player.uid);
          for (var i = 0; i < chi.length; i++) {
            var chiCard = chi[i].otherPlayerCard;
            var index = chi[i].cards.indexOf(chiCard);
            if (1 != index) {
              var _ref = [ chi[i].cards[index], chi[i].cards[1] ];
              chi[i].cards[1] = _ref[0];
              chi[i].cards[index] = _ref[1];
            }
          }
          var gang = GameData.getGangCards(player.uid);
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng, chi);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var face4 = cc.find("card_face4", node);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                var isPeng = false;
                cards[i].cards.length < 4 && cards[i].cards[0] == cards[i].cards[1] && (isPeng = true);
                var isMingGang = false;
                4 == cards[i].cards.length && (isMingGang = true);
                if (n < cards[i].cards.length) {
                  face.node.active = true;
                  var cardId = cards[i].cards[n];
                  4 == cards[i].cards.length && this.addGangIcon(face4, direction, 1);
                  5 == cards[i].cards.length && this.addGangIcon(face4, direction, 2);
                  if (isPeng) {
                    var uid = cards[i].pengFromUserId;
                    var index = profileHuaDian.getCardIndexByUid(player.uid, uid);
                    if (n + 1 == index) {
                      var mj_back = this.getCardBackImgName(player.uid);
                      this.showCardContent(face.node, mj_back.img1, mj_back.img2);
                    } else this.showCardContent(face.node, cardHeader, cardId);
                  } else if (isMingGang) {
                    var uid = cards[i].gangFromUserId;
                    var index = profileHuaDian.getCardIndexByUid(player.uid, uid);
                    if (n + 1 == index) {
                      var mj_back = this.getCardBackImgName(player.uid);
                      this.showCardContent(face.node, mj_back.img1, mj_back.img2);
                    } else this.showCardContent(face.node, cardHeader, cardId);
                  } else this.showCardContent(face.node, cardHeader, cardId);
                } else face.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      autoDisCard: function autoDisCard(cards) {
        cc.log("自动出牌！");
        var self = this;
        var cardArry = [];
        cardArry.push(cards);
        this.scheduleOnce(function() {
          MjHandler.getInstance().requestDisCard_HD(cardArry, function(ret) {
            if (ret.result == errorCode.Success) {
              self.selectedCard = -1;
              self.moveBackMyCards();
            }
          });
        }, .5);
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var GangIconNode = new cc.Node();
          parent.addChild(GangIconNode);
          var huierIconTx = cc.textureCache.addImage(cc.url.raw("resources/huadian/UI/icon/huier_icon.png"));
          var huierIconSprite = GangIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            GangIconNode.x = -32.6;
            GangIconNode.y = 7.1;
            GangIconNode.rotation = -101.2;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .4;
            GangIconNode.skewX = 11;
          } else if ("down" == direction) {
            GangIconNode.x = 0;
            GangIconNode.y = 60;
            GangIconNode.skewX = 10;
          } else if ("left" == direction) {
            GangIconNode.x = 31;
            GangIconNode.y = 8.6;
            GangIconNode.rotation = 101.2;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .4;
            GangIconNode.skewX = -11;
          } else if ("up" == direction) {
            GangIconNode.x = 3;
            GangIconNode.y = -6.8;
            GangIconNode.rotation = 180;
            GangIconNode.scaleX = .4;
            GangIconNode.scaleY = .3;
          }
        }
      },
      addGangIcon: function addGangIcon(node, direction, type) {
        var gangIcon = cc.find("gangType", node);
        var Url;
        var gangType = "";
        var gangDirection = "";
        if ("right" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "1";
        } else if ("down" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "0";
        } else if ("left" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "3";
        } else if ("up" == direction) {
          gangType = 1 == type ? "ming" : "an";
          gangDirection = "2";
        }
        Url = cc.url.raw("resources/huadian/UI/icon/" + gangType + gangDirection + "_icon.png");
        var GangIconTx = cc.textureCache.addImage(Url);
        gangIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(GangIconTx);
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cardNode.active = true;
        this.setMaskVisible(cardNode, false);
      },
      showOperations: function showOperations() {
        this.operationsArry = [];
        this.gangOperations = [];
        this.actions = [];
        this.isPass1 = true;
        var flag = true;
        this.operationsArry = profileHuaDian.getPlayerOperationsByUid(GameData.player.uid);
        if (!this.operationsArry) return;
        WriteLog("this.operationsArry:" + this.operationsArry);
        this.hideOperationBtn();
        if (this.operationsArry.length > 0 && GameData.game.turn == GameData.player.uid) {
          this.actionLayer.active = true;
          var k = 0;
          for (var i = 0; i < this.operationsArry.length; i++) {
            var operActionBtnIcon = this.getOperAction(this.operationsArry[i]);
            this.operationsArry[i] != HuaDian.OPERATION.OPERATION_GONGGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_ANGANG && this.operationsArry[i] != HuaDian.OPERATION.OPERATION_MINGGANG || this.gangOperations.push(this.operationsArry[i]);
            WriteLog("operActionBtnIcon:" + operActionBtnIcon);
            flag = true;
            for (var j = 0; j < this.actions.length; j++) if (this.actions[j].act == operActionBtnIcon.substring(0, operActionBtnIcon.length - 4)) {
              flag = false;
              k--;
              break;
            }
            if (flag) {
              this.actions[k] = {
                act: operActionBtnIcon.substring(0, operActionBtnIcon.length - 4),
                card: this.getOperCard(operActionBtnIcon, this.operationsArry[i]),
                type: this.operationsArry[i]
              };
              this.createActionBtn(k + 1, operActionBtnIcon);
            }
            k++;
          }
          for (var k = 0; k < this.actions.length; k++) if ("ting" == this.actions[k].act) {
            var data = {
              act: "lou",
              card: null
            };
            this.actions[k + 1] = data;
            this.createActionBtn(k + 2, "lou.png");
            break;
          }
          if (GameData.player[GameData.player.uid].gangTing) for (var i = 0; i < this.actions.length; i++) if ("dan" == this.actions[i].act) {
            this.actions[i].type = [];
            for (var j = 0; j < GameData.player[GameData.player.uid].gangTing.gangCards.length; j++) this.actions[i].type.push(GameData.player[GameData.player.uid].gangTing.gangCards[j].operation);
          }
          for (var i = 0; i < this.actions.length; i++) {
            if (!GameData.player[GameData.player.uid].isCanPass) {
              this.passBtn.interactable = false;
              break;
            }
            this.passBtn.interactable = true;
          }
          this.removeCardMask();
          for (var k = 0; k < this.actions.length; k++) if ("ting" == this.actions[k].act) {
            if (GameData.getTingData(GameData.player.uid)) {
              var tingCards = GameData.getTingData(GameData.player.uid).outCards;
              WriteLog("tingCards:" + tingCards);
              this.showTingMask(tingCards, 1);
            }
            break;
          }
        } else this.actionLayer.active = false;
        WriteLog("this.actions:" + JSON.stringify(this.actions));
        WriteLog("this.operationsArry:" + profileHuaDian.getPlayerOperationsByUid(GameData.player.uid));
      },
      getOperCard: function getOperCard(operAction, type) {
        var cardsArry = [];
        if (!GameData.game.checkPass.onGoingUserId) return;
        var uid = GameData.game.checkPass.onGoingUserId;
        if ("dan.png" == operAction) {
          if (GameData.player[GameData.player.uid].gangTing) {
            var gangCard = GameData.player[GameData.player.uid].gangTing.gangCards;
            for (var i = 0; i < gangCard.length; i++) cardsArry.push(gangCard[i].gangCards);
            return cardsArry;
          }
          for (var i = 0; i < this.gangOperations.length; i++) {
            var gangData = profileHuaDian.getGangCardByUid(GameData.player.uid, this.gangOperations[i]);
            if (0 == gangData.type) {
              var cards = [];
              for (var i = 0; i < 3; i++) cards.push(gangData.card);
              cardsArry.push(cards);
            } else {
              var cards = [];
              for (var i = 0; i < 4; i++) cards.push(gangData.card);
              cardsArry.push(cards);
            }
          }
          return cardsArry;
        }
        if (!GameData.game.checkPass.showCard) return;
        var card = GameData.game.lastdisCard;
        if ("cha.png" == operAction) {
          for (var i = 0; i < 2; i++) cardsArry.push(card);
          return cardsArry;
        }
        if ("chi.png" == operAction) {
          var chiCard = GameData.player[GameData.player.uid].chiTing.chiCases;
          for (var i = 0; i < chiCard.length; i++) cardsArry.push(chiCard[i].chiCards);
          return cardsArry;
        }
        "ting.png" == operAction;
      },
      getOperAction: function getOperAction(operation) {
        if (operation == HuaDian.OPERATION.OPERATION_PASS) return "pass.png";
        if (operation == HuaDian.OPERATION.OPERATION_PENG || operation == HuaDian.OPERATION.OPERATION_PENG_TING) return "cha.png";
        if (operation == HuaDian.OPERATION.OPERATION_GONGGANG || operation == HuaDian.OPERATION.OPERATION_ANGANG || operation == HuaDian.OPERATION.OPERATION_MINGGANG || operation == HuaDian.OPERATION.OPERATION_GONGGANG_TING || operation == HuaDian.OPERATION.OPERATION_ANGANG_TING || operation == HuaDian.OPERATION.OPERATION_MINGGANG_TING) return "dan.png";
        if (operation == HuaDian.OPERATION.OPERATION_CHI || operation == HuaDian.OPERATION.OPERATION_CHI_TING) return "chi.png";
        if (operation == HuaDian.OPERATION.OPERATION_DIANPAO_HU || operation == HuaDian.OPERATION.OPERATION_HU || operation == HuaDian.OPERATION.OPERATION_QIANGGANG_HU) return "hu.png";
        if (operation == HuaDian.OPERATION.OPERATION_TING) return "ting.png";
        return null;
      },
      setMyHandButton: function setMyHandButton(cardNode, cardId, index) {
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardNode.addChild(cardBtn);
          cardBtn.name = cardNode.name + "_button";
        }
        var cardButton = cardBtn.getComponent("CardButton");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyTingVisible: function setMyTingVisible(cardNode, cardId) {
        var tingDiscard = false;
        for (var i = 0; i < this.tingData.length; i++) {
          var data = this.tingData[i];
          if (data.discard == cardId) {
            tingDiscard = true;
            break;
          }
        }
        var tingNode = cardNode.getChildByName(cardNode.name + "_ting");
        if (null == tingNode) {
          if (true == tingDiscard) {
            tingNode = cc.instantiate(this.cardTingPrefab);
            tingNode.y = tingNode.y - 10;
            cardNode.addChild(tingNode);
            tingNode.name = cardNode.name + "_ting";
          }
        } else tingNode.active = tingDiscard;
        GameData.game.turn != GameData.player.uid && null != tingNode && (tingNode.active = false);
      },
      setHandCardDisable: function setHandCardDisable(node, show) {
        var cardButton = node.getChildByName(node.name + "_button");
        cardButton && cardButton.removeFromParent(true);
        var maskNode = node.getChildByName("mask");
        if (null == maskNode) {
          maskNode = new cc.Node("mask");
          var sp = maskNode.addComponent(cc.Sprite);
          var iconUrl = "resources/table/majiangmengbai.png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          sp.spriteFrame = new cc.SpriteFrame(texture);
          node.addChild(maskNode);
        }
        maskNode.active = show;
      },
      showPosition: function showPosition() {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        var rotation = 0;
        0 == index ? rotation = 90 : 3 == index ? rotation = 0 : 2 == index ? rotation = 270 : 1 == index && (rotation = 180);
        this.direction_pos.node.rotation = rotation;
      },
      showTurn: function showTurn() {
        var turnPlayerUid = profileHuaDian.getTurnByUid();
        if (turnPlayerUid <= 0) return;
        var index = GameData.getPlayerIndex(turnPlayerUid);
        WriteLog("turnPlayerUid:" + turnPlayerUid);
        var direction;
        direction = 0 == index ? "dong" : 3 == index ? "nan" : 2 == index ? "xi" : 1 == index ? "bei" : "dong";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + direction + ".png"));
        this.direction_pos.spriteFrame = new cc.SpriteFrame(texture);
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        cc.find(GameData.tablePos[turnPlayerUid], this.direction_turn).active = true;
      },
      showCardNum: function showCardNum() {
        if (GameData.game.cardleft < 0) return;
        this.leftCardNumLabel.string = GameData.game.cardleft;
      },
      showBaoCardImg: function showBaoCardImg() {
        var huier1 = GameData.game.cardHuier1;
        var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + huier1 + ".png"));
        this.huiercard1.node.active = true;
        this.huiercard1.spriteFrame = new cc.SpriteFrame(texture);
      },
      showBaoCardNode: function showBaoCardNode(show) {
        this.baoCardNode.active = show;
      },
      showEffect: function showEffect(type) {
        WriteLog("show effect: " + type);
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case "peng":
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case "gang":
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case "hu":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
          break;

         case "chi":
          spineUrl = "spine/table/chi";
          spineAnim = "a";
          break;

         case "dianpao":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        var spine = spineNode.getComponent("sp.Skeleton");
        spine.skeletonData = null;
        spine.animation = null;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      },
      playBaoAnimation: function playBaoAnimation(node, animate) {
        var url = "spine/table/" + animate;
        cc.loader.loadResDir(url, function(err, assets) {
          WriteLog("loadResArray ", url);
          if (err) {
            WriteLog(err);
            return;
          }
          if (assets.length <= 0) {
            WriteLog("assets length: ", assets.length);
            return;
          }
          var armatureDisplay;
          if (node.getComponent(dragonBones.ArmatureDisplay)) {
            WriteLog("dragonBones get");
            armatureDisplay = node.getComponent(dragonBones.ArmatureDisplay);
          } else {
            WriteLog("dragonBones add");
            armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
          }
          for (var elem in assets) {
            assets[elem] instanceof dragonBones.DragonBonesAsset && armatureDisplay.dragonAsset != assets[elem] && (armatureDisplay.dragonAsset = assets[elem]);
            assets[elem] instanceof dragonBones.DragonBonesAtlasAsset && armatureDisplay.dragonAtlasAsset != assets[elem] && (armatureDisplay.dragonAtlasAsset = assets[elem]);
          }
          armatureDisplay.armatureName = "armature";
          armatureDisplay.playAnimation("newAnimation", 1);
        });
      },
      onHandCardClicked: function onHandCardClicked(data) {
        var card = data.detail.card;
        var index = data.detail.index;
        var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
        var cardArry = [];
        cardArry.push(card);
        if (this.selectedCard == index) {
          var self = this;
          var canTing = false;
          GameData.getTingData(GameData.player.uid) && (canTing = GameData.getTingData(GameData.player.uid).canTing);
          if (canTing && this.isPass && this.isPass1) {
            this.isPass = true;
            this.isPass1 = false;
            GameData.getTingData(GameData.player.uid).canTing = false;
            MjHandler.getInstance().requestOperation(HuaDian.OPERATION.OPERATION_TING, cardArry, this.isZiMoHuOnly, function(res) {});
          } else GameData.game.turn == GameData.player.uid && MjHandler.getInstance().requestDisCard_HD(cardArry, function(ret) {
            if (ret.result == errorCode.Success) {
              node.stopAllActions();
              self.selectedCard = -1;
              self.moveBackMyCards();
            }
          });
          var index = this._handCardArry.indexOf(card);
          this._handCardArry.splice(index, 1);
          this._handCardArry.sort(function(a, b) {
            return a - b;
          });
          this._disCardArry.push(card);
          GameData.game.turn = 0;
          this.showCards();
          this.tingTip.hide();
        } else {
          this.selectedCard >= 0 && this.moveBackMyCards();
          node.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[index].x, 30)));
          this.selectedCard = index;
          if (GameData.game.turn == GameData.player.uid) {
            this.tingTip.show(card, this.tingData);
            this.showMask(card);
          }
        }
      },
      showTingState: function showTingState() {
        for (var key in this.tingStateNode.children) this.tingStateNode.children[key].active = false;
        var StateNode;
        var Url;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var direction = GameData.tablePos[GameData.joiners[i].uid];
          StateNode = cc.find(direction, this.tingStateNode);
          var stateImg = cc.find("text", StateNode);
          if (0 == Object.keys(GameData.cards).length) return;
          var TingStateType = GameData.cards[GameData.joiners[i].uid]["tingState"];
          if (null === TingStateType || void 0 === TingStateType) return;
          if (1 == TingStateType) {
            Url = cc.url.raw("resources/huadian/UI/artword/loupaizhong.png");
            var tingIconTx = cc.textureCache.addImage(Url);
            stateImg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tingIconTx);
            StateNode.active = true;
          } else if (2 == TingStateType) {
            Url = cc.url.raw("resources/huadian/UI/artword/tingpaizhong.png");
            var tingIconTx = cc.textureCache.addImage(Url);
            stateImg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(tingIconTx);
            StateNode.active = true;
          } else StateNode.active = false;
        }
      },
      showMask: function showMask(selectCard) {
        var player = GameData.getPlayerByPos("down");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_down, "down");
          this.showDisCardMask(selectCard, this.play_layer_down, "down");
        }
        player = GameData.getPlayerByPos("up");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_up, "up");
          this.showDisCardMask(selectCard, this.play_layer_up, "up");
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_left, "left");
          this.showDisCardMask(selectCard, this.play_layer_left, "left");
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_right, "right");
          this.showDisCardMask(selectCard, this.play_layer_right, "right");
        }
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        for (var i = 1; i < 5; i++) {
          var node = cc.find("cardPeng/cardPeng" + i, parent);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        for (var i = 1; i <= this.discardMax; i++) {
          var cardNode = cc.find("cardDis_" + GameData.room.opts.joinermax + "/card_face" + i, parent);
          cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, parent, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("tipMask/up", maskNode).active = false;
            cc.find("tipMask/down", maskNode).active = false;
            cc.find("tipMask/right", maskNode).active = false;
            cc.find("tipMask/left", maskNode).active = false;
            cc.find("tipMask/" + direction, maskNode).active = true;
          }
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
            cc.find("tipMask", maskNode).active = true;
            cc.find("chipaiMask", maskNode).active = false;
          }
        } else cc.find("tipMask", maskNode).active = show;
        return maskNode;
      },
      onGameScore: function onGameScore() {
        this.tingTip.hide();
        this.unschedule(this.runCountDown);
      },
      startCoundDown: function startCoundDown(data) {
        this.PLayerUID = GameData.game.turn;
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "");
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          3 == this._countdown_index && this.PLayerUID == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        var url1;
        var url2;
        if (0 == ary.length) return;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      showScoreLayer: function showScoreLayer() {
        this.getComponent("roomScore").ShowPlayerScoreItem();
        this.scoreLayer.active = true;
      },
      onCardBtnStart: function onCardBtnStart(data) {},
      onCardBtnMove: function onCardBtnMove(data) {
        var card = data.detail.card;
        if (GameData.game.turn == GameData.player.uid) {
          this.tingTip.show(card, this.tingData);
          this.showMask(card);
        }
      },
      onCardBtnEnd: function onCardBtnEnd(data) {
        var index = data.detail.index;
        var type = data.detail.type;
        switch (type) {
         case -1:
          index == this.selectedCard && (this.selectedCard = -1);
          this.onHandCardClicked(data);
          this.tingTip.hide();
          break;

         case 0:
          this.onHandCardClicked(data);
          break;

         case 1:
          this.selectedCard = index;
          this.onHandCardClicked(data);
        }
      },
      onCardBtnCancel: function onCardBtnCancel(data) {
        this.tingTip.hide();
      },
      saveMyHandsInitPosition: function saveMyHandsInitPosition() {
        for (var index = 0; index <= GameData.client.handsize; index++) {
          var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
          this.myHandsInitPosition.push(node.getPosition());
        }
      },
      showPiaoLayer: function showPiaoLayer() {
        this.PiaoLayer.active = true;
      },
      getCardBackImgName: function getCardBackImgName(uid) {
        var pos = GameData.getPlayerPosByUid(uid);
        var imgName1 = "";
        var imgName2 = "";
        switch (pos) {
         case "down":
          imgName1 = "mj_back0";
          imgName2 = "chu";
          break;

         case "up":
          imgName1 = "mj_back2";
          imgName2 = "chu";
          break;

         case "right":
          imgName1 = "mj_back1";
          imgName2 = "chu";
          break;

         case "left":
          imgName1 = "mj_back3";
          imgName2 = "chu";
        }
        var imgData = {
          img1: imgName1,
          img2: imgName2
        };
        return imgData;
      },
      saveMyHandCard: function saveMyHandCard() {
        this._handCardArry = [];
        this._disCardArry = [];
        if (0 == Object.keys(GameData.cards).length) return;
        this._handCardArry = GameData.getHandCards(GameData.player.uid);
        this._disCardArry = GameData.getDisCards(GameData.player.uid);
        if (GameData.game.turn == GameData.player.uid && GameData.player[GameData.player.uid].cardLastAssigned) {
          var hand1 = this._handCardArry[this._handCardArry.length - 1];
          this._handCardArry.pop();
          this._handCardArry.sort(function(a, b) {
            return a - b;
          });
          this._handCardArry.push(hand1);
        } else this._handCardArry.sort(function(a, b) {
          return a - b;
        });
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    ruleHandler: "ruleHandler"
  } ],
  roomTable_shishi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "317cfsppoVJi4h6xJw2LQHy", "roomTable_shishi");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RuleHandler = require("ruleHandler");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        direction_turn: cc.Node,
        huiercard1: cc.Sprite,
        huiercard2: cc.Sprite,
        leftCardNumLabel: cc.Label,
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        cardsNode: cc.Node,
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node,
        chashuiLayer: cc.Node,
        cardTemplate: cc.Prefab,
        playerTemplate: cc.Prefab,
        selectedCard: -1,
        HuType: null,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        disCardArrow: cc.Prefab,
        _cardArrow: cc.Node,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab,
        lastRoundLabel: cc.RichText,
        scoreLayer: cc.Node,
        chaShuiLayer: cc.Node,
        chiActionList: [],
        mapNode: cc.Node,
        mapLayer: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.handleGameStart);
        registEvent("onGameTurn", this, this.handleTurn);
        registEvent("onGamePass", this, this.handlePass);
        registEvent("initCards", this, this.onShow);
        registEvent("initCardHua", this, this.showHuaAction);
        registEvent("onCardObtain", this, this.handleObtain);
        registEvent("onCardDis", this, this.handleDisCard);
        registEvent("onCardHu", this, this.handleHuCard);
        registEvent("onCardChi", this, this.handleChiCard);
        registEvent("onCardPeng", this, this.handlePengCard);
        registEvent("onCardGang", this, this.handleGangCard);
        registEvent("onYoujin", this, this.showCards);
        registEvent("onCardBtnStart", this, this.onCardBtnStart);
        registEvent("onCardBtnMove", this, this.onCardBtnMove);
        registEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        registEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        registEvent("onGameScore", this, this.onGameScore);
        registEvent("allYoujinInfo", this, this.allYouJinShow);
        registEvent("startWater", this, this.showChaShuiLayer());
        RuleHandler.instance.setGameType(GameData.client.gameType);
        this.actions = new Array();
        this.cardsNode.active = false;
        this.tingData = [];
        this.tingTip = this.node.getComponent("TingTip-shishi");
        this.playerSex = 1;
        this.huBtnIsShow = true;
        4 == GameData.room.joinermax && (this.discardMax = 24);
        3 == GameData.room.joinermax && (this.discardMax = 36);
        2 == GameData.room.joinermax && (this.discardMax = 60);
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this.cardsNode.addChild(this._cardArrow);
        this._cardArrow.active = false;
        cc.log("roomTable onLoad, gameStart=" + GameData.game.gameStart + " initcards=" + GameData.game.initcards + " checkPass=" + GameData.game.checkPass.uid + " obtain=" + GameData.game.obtain);
        this.myHandsInitPosition = [];
        this.saveMyHandsInitPosition();
        GameData.game.gameStart && this.handleGameStart();
        GameData.game.initcards && this.onShow();
        GameData.game.checkPass.uid && this.handlePass();
        GameData.game.obtain > 0 && this.handleObtain();
        cc.log("GameData.cards " + JSON.stringify(GameData.cards));
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.handleGameStart);
        unregistEvent("onGameTurn", this, this.handleTurn);
        unregistEvent("onGamePass", this, this.handlePass);
        unregistEvent("initCards", this, this.onShow);
        unregistEvent("initCardHua", this, this.showHuaAction);
        unregistEvent("onCardObtain", this, this.handleObtain);
        unregistEvent("onCardDis", this, this.handleDisCard);
        unregistEvent("onCardHu", this, this.handleHuCard);
        unregistEvent("onCardChi", this, this.handleChiCard);
        unregistEvent("onCardPeng", this, this.handlePengCard);
        unregistEvent("onCardGang", this, this.handleGangCard);
        unregistEvent("onYoujin", this, this.showCards);
        unregistEvent("onCardBtnStart", this, this.onCardBtnStart);
        unregistEvent("onCardBtnMove", this, this.onCardBtnMove);
        unregistEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        unregistEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        unregistEvent("onGameScore", this, this.onGameScore);
        unregistEvent("allYoujinInfo", this, this.allYouJinShow);
        unregistEvent("startWater", this, this.showChaShuiLayer);
      },
      handleGameStart: function handleGameStart() {
        this.tingData = [];
        this.cardsNode.active = false;
        this.spineNode.active = false;
        this.tingTip.hide();
        this.onGameStartHandler();
      },
      saveMyHandsInitPosition: function saveMyHandsInitPosition() {
        for (var index = 0; index <= GameData.client.handsize; index++) {
          var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
          this.myHandsInitPosition.push(node.getPosition());
        }
      },
      onShow: function onShow(data) {
        this.moveBackMyCards();
        this.showCards();
        this.allYouJinShow();
        this.cardsNode.active = true;
        console.log("GameData.game.roundNum + '/' + GameData.game.roundmax", GameData.game.roundNum, GameData.game.roundmax, GameData.room.opts.scoreBase);
        var showRoundNum = GameData.game.roundNum > GameData.game.roundmax ? GameData.game.roundmax : GameData.game.roundNum;
        if (GameData.room.opts.scoreBase > 0) this.lastRoundLabel.string = GameData.game.roundNum + 1 + ""; else {
          this.lastRoundLabel.string = showRoundNum + 1 + "/" + GameData.game.roundmax;
          GameData.game.roundNum == GameData.game.roundmax && (this.lastRoundLabel.string = GameData.game.roundmax + "/" + GameData.game.roundmax);
        }
      },
      showHuaAction: function showHuaAction(data) {
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        var hua = data.detail.hua;
        if (0 == hua.length) return;
        if (!data.detail.effect) return;
        data.detail.uid == GameData.player.uid ? this.showEffect("bu") : this.playActionAnimation(data.detail.uid, "buhua");
        soundMngr.instance.playAudioShiShi("buhua", null, this.playerSex);
      },
      handleTurn: function handleTurn(data) {
        this.showTurn();
        this.startCoundDown(data);
        GameData.game.turn == GameData.player.uid && this.showObtainActions(GameData.player.uid, GameData.game.obtain);
      },
      handleObtain: function handleObtain(data) {
        this.playerSex = GameData.getPlayerSexByUid(GameData.game.turn);
        if (GameData.game.turn == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
          soundMngr.instance.playAudioOther("click");
          this.showObtainActions(GameData.player.uid, GameData.game.obtain);
        }
        var hua = GameData.game.obtainHua;
        if (hua instanceof Array && hua.length > 0) {
          GameData.game.turn == GameData.player.uid ? this.showEffect("bu") : this.playActionAnimation(GameData.game.turn, "buhua");
          soundMngr.instance.playAudioShiShi("buhua", null, this.playerSex);
        }
        this.showCards();
      },
      handleDisCard: function handleDisCard(data) {
        console.log("this.playerSex =  GameData.player.sex", data.detail.player, GameData.player.sex);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudioShiShi("dis", data.detail.card, this.playerSex);
        soundMngr.instance.playAudioOther("out");
        this.showCards();
      },
      handleChiCard: function handleChiCard(data) {
        if (data.detail.player == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
        }
        this.showCards();
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudioShiShi("chi", null, this.playerSex);
        this.playActionAnimation(data.detail.player, "chi");
        this.moveBackMyCards();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.showYoujinActin();
      },
      handlePengCard: function handlePengCard(data) {
        if (data.detail.player == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
        }
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudioShiShi("peng", null, this.playerSex);
        this.showCards();
        this.playActionAnimation(data.detail.player, "peng");
        this.moveBackMyCards();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.showYoujinActin();
      },
      handleGangCard: function handleGangCard(data) {
        if (data.detail.player == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
        }
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudioShiShi("gang", null, this.playerSex);
        this.showCards();
        this.playActionAnimation(data.detail.player, "gang");
        this.moveBackMyCards();
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.showYoujinActin();
      },
      showYoujin: function showYoujin(player, parent) {
        var node, iconUrl = "";
        var pos = GameData.tablePos[player.uid];
        var youNum = GameData.cards[player.uid]["youNum"];
        if ("down" == pos) {
          node = cc.find("youjin", parent);
          youNum == YoujinType.Ming ? iconUrl = "resources/shishi/image/youjinzhong.png" : youNum == YoujinType.An1 ? iconUrl = "resources/shishi/image/youjinzhong.png" : youNum == YoujinType.An2 ? iconUrl = "resources/shishi/image/eryouzhong.png" : youNum == YoujinType.An3 && (iconUrl = "resources/shishi/image/sanyouzhong.png");
        } else if ("left" == pos) {
          node = cc.find("youjin", parent);
          youNum == YoujinType.Ming ? iconUrl = "resources/shishi/image/youjinzhong2.png" : youNum == YoujinType.An2 ? iconUrl = "resources/shishi/image/eryouzhong2.png" : youNum == YoujinType.An3 && (iconUrl = "resources/shishi/image/sanyouzhong2.png");
        } else if ("up" == pos) {
          node = cc.find("youjin", parent);
          youNum == YoujinType.Ming ? iconUrl = "resources/shishi/image/youjinzhong.png" : youNum == YoujinType.An2 ? iconUrl = "resources/shishi/image/eryouzhong.png" : youNum == YoujinType.An3 && (iconUrl = "resources/shishi/image/sanyouzhong.png");
        } else if ("right" == pos) {
          node = cc.find("youjin", parent);
          youNum == YoujinType.Ming ? iconUrl = "resources/shishi/image/youjinzhong2.png" : youNum == YoujinType.An2 ? iconUrl = "resources/shishi/image/eryouzhong2.png" : youNum == YoujinType.An3 && (iconUrl = "resources/shishi/image/sanyouzhong2.png");
        }
        if ("" != iconUrl) {
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          node.active = true;
        } else node.active = false;
      },
      handleHuCard: function handleHuCard(data) {
        cc.log("=...........................", data.detail);
        this.HuType = data.detail;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudioShiShi("hu", null, this.playerSex);
        this.playActionAnimation(data.detail.player, "hu");
        this.moveBackMyCards();
        this.huiercard1.node.active = false;
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
      },
      playActionAnimation: function playActionAnimation(uid, action) {
        if (null != GameData.joiners) {
          var pos = GameData.tablePos[uid];
          var animationNode = cc.find("layer_ui/layer_ui_table/actionAnimations/" + pos, this.node);
          cc.log("---\x3e animationNode : " + animationNode);
          if (null != animationNode) {
            cc.log("---\x3e playActionAnimation : " + action);
            animationNode.getComponent(cc.Animation).play(action);
          }
        }
      },
      handlePass: function handlePass(data) {
        if (GameData.game.checkPass.uid) {
          var uid = GameData.game.checkPass.uid;
          var card = GameData.game.checkPass.card;
          var show = this.showPassActions(uid, card);
          show || MjHandler.getInstance().requestPass(function(res) {});
          GameData.game.checkPass = {};
        }
      },
      showYoujinActin: function showYoujinActin() {
        var btnIdx = 0;
        this.actions = [];
        var handcards = GameData.getMyHandCards();
        var huData = RuleHandler.instance.canZimo(handcards, 0);
        if (huData.length > 0 && huData[0].length > 0 && huData[3]) {
          var youNum = GameData.cards[GameData.player.uid]["youNum"];
          cc.log("showYoujinActin youNum:" + youNum);
          if (10 != youNum) {
            this.actions[btnIdx] = {
              act: "youjin",
              deck: huData[4],
              zimo: true
            };
            this.createActionBtn(++btnIdx, "youjin.png");
          }
        }
        if (GameData.game.turn == GameData.player.uid) {
          var youUid = 0;
          for (var i in GameData.cards) {
            var you = GameData.cards[i]["youNum"];
            if (10 == you || 3 == you) {
              youUid = i;
              break;
            }
          }
          if (youUid <= 0) {
            var gangActions = this.checkGangAction(GameData.player.uid, GameData.game.obtain, true);
            gangActions.length > 0 && this.showGangAction(++btnIdx, gangActions);
          }
        }
        if (btnIdx > 0) {
          for (;++btnIdx <= 4; ) {
            var actionBtn = cc.find("btnAct" + btnIdx, this.actionLayer);
            actionBtn.active = false;
          }
          var passBtn = cc.find("btnPass", this.actionLayer);
          passBtn.active = true;
          this.actionLayer.active = !this.actionSecondaryLayer.active;
        } else this.actionLayer.active = false;
      },
      showPassActions: function showPassActions(uid, card) {
        var btnIdx = 0;
        var self = this;
        self.actions = [];
        var qiangGang = GameData.game.checkPass.qiang;
        var chiData = RuleHandler.instance.canChi(uid, card);
        qiangGang <= 0 && chiData.length > 0 && this.showChiAction(++btnIdx, card, chiData);
        var gangActions = this.checkGangAction(uid, card, false);
        qiangGang <= 0 && gangActions.length > 0 && this.showGangAction(++btnIdx, gangActions);
        if (qiangGang <= 0 && RuleHandler.instance.canPeng(uid, card)) {
          self.actions[btnIdx] = {
            act: "peng",
            card: card
          };
          self.createActionBtn(++btnIdx, "peng.png");
          if (btnIdx >= 2) ; else {
            self.moveBackMyCards();
            self.moveUpMyCards(card, 2);
          }
        }
        if (btnIdx >= 2) ; else if (1 == chiData.length) {
          this.moveBackMyCards();
          for (var i = 0; i < chiData.length; i++) {
            var cards = chiData[i];
            for (var n = 0; n < cards.length; n++) this.moveUpMyCards(cards[n], 1);
          }
        }
        var huData = RuleHandler.instance.canDianPao(uid, card);
        cc.log("client test canDianPao:" + JSON.stringify(huData));
        if (huData.length > 0 && huData[0].length > 0) {
          self.actions[btnIdx] = {
            act: "dianpao",
            type: huData[0],
            deck: huData[1],
            obtain: huData[2]
          };
          self.createActionBtn(++btnIdx, "hu.png");
        }
        var passBtn = cc.find("btnPass", self.actionLayer);
        passBtn.active = true;
        if (btnIdx > 0) {
          for (;++btnIdx <= 4; ) {
            var actionBtn = cc.find("btnAct" + btnIdx, self.actionLayer);
            actionBtn.active = false;
          }
          self.actionLayer.active = !this.actionSecondaryLayer.active;
        } else self.actionLayer.active = false;
        return btnIdx > 0;
      },
      showObtainActions: function showObtainActions(uid, card) {
        var btnIdx = 0;
        var self = this;
        self.actions = [];
        var youUid = 0;
        for (var i in GameData.cards) {
          var you = GameData.cards[i]["youNum"];
          if (10 == you || 3 == you) {
            youUid = i;
            break;
          }
        }
        var handcards = GameData.getMyHandCards();
        var youNum = GameData.cards[GameData.player.uid]["youNum"];
        var huData = RuleHandler.instance.canZimo(handcards, card, true);
        cc.log("canZimo huData:" + JSON.stringify(huData));
        if (huData.length > 0 && huData[0].length > 0) {
          if (true == this.huBtnIsShow) {
            self.actions[btnIdx] = {
              act: "hu",
              type: huData[0],
              deck: huData[1],
              obtain: huData[2]
            };
            self.createActionBtn(++btnIdx, "hu.png");
          }
          if (huData[3]) {
            var youRound = GameData.cards[GameData.player.uid]["youRound"];
            if (youRound != GameData.game.cardleft && 0 == youUid) {
              self.actions[btnIdx] = {
                act: "youjin",
                deck: huData[4],
                zimo: true
              };
              self.createActionBtn(++btnIdx, "youjin.png");
            }
          }
        }
        if (youUid <= 0) {
          var gangActions = this.checkGangAction(uid, card, true);
          gangActions.length > 0 && this.showGangAction(++btnIdx, gangActions);
          var passBtn = cc.find("btnPass", self.actionLayer);
          passBtn.active = true;
        } else {
          var passBtn = cc.find("btnPass", self.actionLayer);
          passBtn.active = false;
        }
        if (btnIdx <= 0) {
          if (youUid > 0 && youUid != GameData.player.uid) {
            MjHandler.getInstance().requestDisCard(0, function() {});
            return;
          }
          self.actionLayer.active = false;
        } else {
          for (;++btnIdx <= 4; ) {
            var actionBtn = cc.find("btnAct" + btnIdx, self.actionLayer);
            actionBtn.active = false;
          }
          self.actionLayer.active = !this.actionSecondaryLayer.active;
        }
        return btnIdx > 0;
      },
      showGangAction: function showGangAction(btnIdx, gangActions) {
        if (this.actionSecondaryLayer.active) {
          this.actions[btnIdx - 1] = {
            act: "manygang",
            card: gangActions
          };
          this.createActionBtn(btnIdx, "gang.png");
          this.refreshGangActionBar({
            act: "manygang",
            card: gangActions
          });
        } else if (1 == gangActions.length) {
          var actionCardId = gangActions[0].card;
          this.actions[btnIdx - 1] = {
            act: gangActions[0].act,
            card: actionCardId
          };
          this.createActionBtn(btnIdx, "gang.png");
          if (btnIdx >= 2) ; else {
            this.moveBackMyCards();
            this.moveUpMyCards(actionCardId, 4);
          }
        } else if (gangActions.length > 1) {
          this.actions[btnIdx - 1] = {
            act: "manygang",
            card: gangActions
          };
          this.createActionBtn(btnIdx, "gang.png");
        }
      },
      checkGangAction: function checkGangAction(uid, card, obtain) {
        var actions = new Array();
        if (obtain) {
          var minggangselfCard = RuleHandler.instance.canMingGangSelf();
          minggangselfCard > 0 && actions.push({
            act: "selfgang",
            card: minggangselfCard
          });
          if (0 != GameData.game.cardleft && uid == GameData.player.uid) {
            var cards = GameData.getMyHandCards();
            for (var key in cards) cards[key] >= 4 && actions.push({
              act: "angang",
              card: key
            });
          }
        } else {
          var minggangCard = RuleHandler.instance.canMingGang(uid, card);
          minggangCard > 0 && actions.push({
            act: "minggang",
            card: minggangCard
          });
        }
        return actions;
      },
      showChiAction: function showChiAction(btnIndx, card, chiAction) {
        if (1 == chiAction.length) {
          this.actions[btnIndx - 1] = {
            act: "chi",
            card: card,
            myCards: chiAction
          };
          this.createActionBtn(btnIndx, "chi.png");
        } else if (chiAction.length > 1) {
          this.actions[btnIndx - 1] = {
            act: "chi",
            card: card,
            myCards: chiAction
          };
          this.createActionBtn(btnIndx, "chi.png");
        }
      },
      refreshChiActionType: function refreshChiActionType(data) {
        this.chiActionList = [];
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        for (var i = 0; i < data.myCards.length; i++) {
          var action = data.myCards[i];
          this.chiActionList.push(action);
          var carddis = GameData.game.lastdisCard;
          var card = cc.instantiate(cardTemp);
          contains(action, carddis) || action.push(carddis);
          action = action.sort();
          card.name = i + "";
          for (var j = 0; j < action.length; j++) {
            var cardNode = cc.find("card_" + j, card);
            cardNode.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action[j] + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            if (action[j] == carddis) {
              var biaoji = cardNode.getChildByName(cardNode.name + "_biao");
              if (null == biaoji) {
                biaoji = cc.instantiate(this.cardTingPrefab);
                biaoji.y = biaoji.y - 10;
                cardNode.addChild(biaoji);
                biaoji.name = cardNode.name + "_biao";
              }
            }
            cardNode.active = true;
          }
          card.getComponent(cc.Sprite).spriteFrame = null;
          card.on(cc.Node.EventType.TOUCH_START, this.onClickChiActionBtn, this);
          cardLayout.addChild(card);
          card.width = 252;
        }
        cardTemp.active = false;
      },
      onClickChiActionBtn: function onClickChiActionBtn(e) {
        var index = e.target.name;
        var data = this.chiActionList[index];
        var carddis = GameData.game.lastdisCard;
        for (var i = 0; i < data.length; i++) data[i] == carddis && data.splice(i, 1);
        var self = this;
        null != data && MjHandler.getInstance().requestChiCard(carddis, data, function(res) {
          0 == res.result && self.showEffect("chi");
        });
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      createActionBtn: function createActionBtn(index, icon) {
        cc.log("show btn:" + icon);
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/action/" + icon));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        var self = this;
        var data = this.actions[index];
        "hu" == data.act && MjHandler.getInstance().requestHu(data.type, data.deck, data.obtain, function(res) {
          0 == res.result && self.showEffect("hu");
        });
        if ("dianpao" == data.act) MjHandler.getInstance().requestDianPao(data.type, data.deck, data.obtain, function(res) {
          0 == res.result && self.showEffect("hu");
        }); else if ("youjin" == data.act) GameData.game.cardleft <= 16 + GameData.joiners.length + GameData.getAllGangNumber() ? createMessageBox("如果继续游金，可能会荒庄", function() {
          MjHandler.getInstance().requestYoujin(data.deck, data.zimo, function(res) {
            if (0 == res.result) {
              self.showEffect("youjin");
              var youNum = GameData.cards[GameData.player.uid]["youNum"];
            }
          });
        }, function() {
          self.actionLayer.active = true;
          return;
        }) : MjHandler.getInstance().requestYoujin(data.deck, data.zimo, function(res) {
          if (0 == res.result) {
            self.showEffect("youjin");
            var youNum = GameData.cards[GameData.player.uid]["youNum"];
            2 != youNum && 3 != youNum || MjHandler.getInstance().requestDisCard(GameData.game.cardHuier1, function(res) {});
          }
        }); else if ("chi" == data.act) {
          this.huBtnIsShow = false;
          data.myCards.length <= 1 ? MjHandler.getInstance().requestChiCard(data.card, data.myCards[0], function(res) {
            0 == res.result && self.showEffect("chi");
          }) : this.refreshChiActionType(data);
        } else if ("peng" == data.act) {
          this.huBtnIsShow = false;
          MjHandler.getInstance().requestPengCard(data.card, function(res) {
            0 == res.result && self.showEffect("peng");
          });
        } else if ("manygang" == data.act) {
          cc.log("------------------\x3e click gang, should open gang ui, data.card " + data.card);
          this.refreshGangActionBar(data);
        } else if ("minggang" == data.act) {
          this.huBtnIsShow = true;
          MjHandler.getInstance().requestGangMingCard(data.card, function(res) {
            0 == res.result && self.showEffect("gang");
          });
        } else if ("selfgang" == data.act) {
          this.huBtnIsShow = true;
          MjHandler.getInstance().requestGangMingSelfCard(data.card, function(res) {
            0 == res.result && self.showEffect("gang");
          });
        } else if ("angang" == data.act) {
          this.huBtnIsShow = true;
          MjHandler.getInstance().requestGangAnCard(data.card, function(res) {
            0 == res.result && self.showEffect("gang");
          });
        }
        this.moveBackMyCards();
        self.actionLayer.active = false;
      },
      refreshGangActionBar: function refreshGangActionBar(data) {
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        this.gangActionList = new Array();
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          this.gangActionList.push(action);
          var card = cc.instantiate(cardTemp);
          card.name = i + "";
          card.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action.card + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          card.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
          cardLayout.addChild(card);
        }
        cardTemp.active = false;
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      onClickActionSecondaryBtn: function onClickActionSecondaryBtn(e) {
        cc.log(e.target.name);
        var index = e.target.name;
        var data = this.gangActionList[index];
        var self = this;
        null != data && ("minggang" == data.act ? MjHandler.getInstance().requestGangMingCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }) : "selfgang" == data.act ? MjHandler.getInstance().requestGangMingSelfCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }) : "angang" == data.act && MjHandler.getInstance().requestGangAnCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }));
        this.gangActionList.length <= 1 && (this.actionSecondaryLayer.active = false);
        this.moveBackMyCards();
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        cc.log("onBtnPassClicked");
        cc.log("GameData.cards " + JSON.stringify(GameData.cards));
        var self = this;
        var youUid = 0;
        for (var i in GameData.cards) {
          var you = GameData.cards[i]["youNum"];
          if (10 == you || 3 == you) {
            youUid = i;
            break;
          }
        }
        var data = this.actions;
        var isHuAndYoujin = false;
        cc.log("data " + JSON.stringify(data));
        for (var key in data) if ("hu" == data[key].act || "youjin" == data[key].act || "dianpao" == data[key].act) {
          isHuAndYoujin = true;
          break;
        }
        if (isHuAndYoujin) createMessageBox("确定要过牌吗？", function() {
          if (youUid > 0) if (youUid == GameData.player.uid) MjHandler.getInstance().requestCancelYoujin(function(res) {}); else {
            MjHandler.getInstance().requestDisCard(0, function() {});
            MjHandler.getInstance().requestPass(function(res) {});
          } else MjHandler.getInstance().requestPass(function(res) {});
          self.actionLayer.active = false;
          self.actionSecondaryLayer.active = false;
          self.moveBackMyCards();
          self.selectedCard = -1;
        }, function() {
          return;
        }); else {
          youUid > 0 && youUid == GameData.player.uid ? MjHandler.getInstance().requestCancelYoujin(function(res) {}) : MjHandler.getInstance().requestPass(function(res) {});
          self.actionLayer.active = false;
          self.actionSecondaryLayer.active = false;
          self.moveBackMyCards();
          self.selectedCard = -1;
        }
        cc.log("onBtnPassClicked turn:" + GameData.game.turn + " uid:" + GameData.player.uid);
      },
      allYouJinShow: function allYouJinShow() {
        if (GameData.allYouJinInfo) {
          console.log("-------allYoujin data---------  " + JSON.stringify(GameData.allYouJinInfo.length));
          if (0 == GameData.allYouJinInfo.length) {
            this.showYoujinActin();
            return;
          }
          for (var i = 0; i < GameData.allYouJinInfo.length; i++) if (GameData.allYouJinInfo[i].uid == GameData.player.uid) {
            var selfYoujinData = GameData.allYouJinInfo[i];
            if (0 == selfYoujinData.youNum) {
              this.showYoujinActin();
              selfYoujinData.isSelectYou1 ? this.actionLayer.active = false : this.showYoujinActin();
            } else 10 == selfYoujinData.youNum ? this.actionLayer.active = false : 1 == selfYoujinData.youNum ? selfYoujinData.isSelectYou2 ? this.actionLayer.active = false : this.showYoujinActin() : 2 == selfYoujinData.youNum && (selfYoujinData.isSelectYou3 ? this.actionLayer.active = false : this.showYoujinActin());
            GameData.allYouJinInfo = null;
            return;
          }
        }
      },
      showCards: function showCards() {
        var player = GameData.getPlayerByPos("down");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.showMyHandCards(player, this.play_layer_down);
          this.showDisCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
          this.showPengCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
          this.showHua(player, this.play_layer_down, "down");
          this.showYoujin(player, this.play_layer_down);
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_right.active = true;
          this.showHandCards(player, this.play_layer_right);
          this.showDisCards(player, this.play_layer_right, "mj_face_you_chu", "right");
          this.showPengCards(player, this.play_layer_right, "mj_face_you_chu", "right");
          this.showHua(player, this.play_layer_right, "right");
          this.showYoujin(player, this.play_layer_right);
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("up");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_up.active = true;
          this.showHandCards(player, this.play_layer_up);
          this.showDisCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
          this.showPengCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
          this.showHua(player, this.play_layer_up, "up");
          this.showYoujin(player, this.play_layer_up);
        } else this.play_layer_up.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_left.active = true;
          this.showHandCards(player, this.play_layer_left);
          this.showDisCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
          this.showPengCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
          this.showHua(player, this.play_layer_left, "left");
          this.showYoujin(player, this.play_layer_left);
        } else this.play_layer_left.active = false;
        this.showCardNum();
        this.showHuierCard();
      },
      showHua: function showHua(player, parent, direction) {
        if (player) {
          var uid = player.uid;
          var huacard = GameData.cards[uid]["hua"].sort();
          console.log("huacard = " + JSON.stringify(huacard));
          var huaNode = cc.find("cardhua", parent);
          var huaChild = huaNode.children;
          for (var i = 0; i < huaChild.length; i++) huaChild[i].active = false;
          for (var i = 0; i < huacard.length; i++) {
            var index = i + 1;
            var childNode = cc.find("cardhua/" + index, parent);
            childNode.getComponent(cc.Sprite).spriteFrame = null;
            var iconUrl = this.showHuaTexture(huacard[i], direction);
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            childNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            childNode.active = true;
          }
        }
      },
      showHuaTexture: function showHuaTexture(huaId, direction) {
        var textureUrl = "resources/shishi/image/";
        var tetureType = "";
        111 == huaId ? tetureType = "chun" : 112 == huaId ? tetureType = "xia" : 113 == huaId ? tetureType = "qiu" : 114 == huaId ? tetureType = "dong" : 121 == huaId ? tetureType = "mei" : 122 == huaId ? tetureType = "lan" : 123 == huaId ? tetureType = "zhu" : 124 == huaId && (tetureType = "ju");
        var texturedirec = "";
        "down" == direction ? texturedirec = "" : "right" == direction ? texturedirec = "4" : "up" == direction ? texturedirec = "3" : "left" == direction && (texturedirec = "2");
        textureUrl = textureUrl + tetureType + texturedirec + ".png";
        return textureUrl;
      },
      showHandCards: function showHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardNum = GameData.getHandCardNum(uid) + 3 * (GameData.getChiCards(uid).length + GameData.getPengCards(uid).length + GameData.getGangCards(uid).length);
          var showIdx = cardNum > GameData.client.handsize ? 0 : 1;
          var handIdx = 1, nodeIdx = 0;
          for (;nodeIdx <= GameData.client.handsize; nodeIdx++) {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            if (nodeIdx == showIdx && handIdx <= GameData.getHandCardNum(uid)) {
              node.active = true;
              showIdx++;
              handIdx++;
            } else node.active = false;
          }
        }
      },
      moveUpMyCards: function moveUpMyCards(id, popCount) {
        var count = 0;
        for (var i = 1; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          if (cardId == id) {
            cardNode.y = 30;
            count++;
            if (count >= popCount) return;
          }
        }
      },
      moveBackMyCards: function moveBackMyCards() {
        this.selectedCard = -1;
        for (var i = 0; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          cardNode.position = this.myHandsInitPosition[i];
        }
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        var cardNormal = [], getObtain = false;
        var cardHand = GameData.getMyHandCards();
        var handNum = GameData.getHandCardNum(player.uid);
        var cardNum = handNum + 3 * (GameData.getChiCards(player.uid).length + GameData.getPengCards(player.uid).length + GameData.getGangCards(player.uid).length);
        var nodeIdx = cardNum > GameData.client.handsize ? handNum - 1 : handNum;
        cc.log("handNum:" + handNum + ", cardNum:" + cardNum + ", nodeIdx:" + nodeIdx);
        for (var card in cardHand) for (var i = 0; i < cardHand[card]; i++) {
          if (!getObtain && card == GameData.game.obtain) {
            getObtain = true;
            continue;
          }
          if (!RuleHandler.instance.isHuier(card)) {
            cardNormal.push(card);
            continue;
          }
          cc.log("showMyHandCards " + nodeIdx + " " + card);
          var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
          var disable = this.setHandCardDisable(node, card);
          this.showCardContent(node, "mj_face_xia_shou", card);
          this.setMyHandButton(node, card, nodeIdx);
          this.setMyHuierVisible(node, card);
          disable || this.setMyTingVisible(node, card);
          node.active = true;
          nodeIdx--;
        }
        for (var i = 0; i < cardNormal.length; i++) {
          var card = cardNormal[i];
          var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
          var disable = this.setHandCardDisable(node, card);
          this.showCardContent(node, "mj_face_xia_shou", card);
          this.setMyHandButton(node, card, nodeIdx);
          this.setMyHuierVisible(node, card);
          disable || this.setMyTingVisible(node, card);
          node.active = true;
          nodeIdx--;
        }
        if (getObtain) {
          var cardid = GameData.game.obtain;
          var node = cc.find("cardHand/cardHand0", parent);
          var disable = this.setHandCardDisable(node, cardid);
          this.showCardContent(node, "mj_face_xia_shou", cardid);
          this.setMyHandButton(node, cardid, 0);
          this.setMyHuierVisible(node, cardid);
          disable || this.setMyTingVisible(node, cardid);
          node.active = true;
        } else {
          cc.log("showMyHandCards disable cardHand0");
          var node = cc.find("cardHand/cardHand0", parent);
          node.active = cardNum > GameData.client.handsize;
        }
        var disIdx = cardNum > GameData.client.handsize ? handNum : handNum + 1;
        for (var i = disIdx; i <= GameData.client.handsize; i++) {
          var node = cc.find("cardHand/cardHand" + i, parent);
          node.active = false;
          cc.log("showMyHandCards disable cardHand" + i);
        }
      },
      setHandCardDisable: function setHandCardDisable(node, card) {
        var show = false;
        if (GameData.game.turn == GameData.player.uid) {
          var youNum = GameData.cards[GameData.player.uid]["youNum"];
          10 == youNum || 1 == youNum || 2 == youNum ? show = !RuleHandler.instance.checkYoujin(card) : 3 == youNum && (show = !RuleHandler.instance.isHuier(card));
        }
        var maskNode = node.getChildByName("mask");
        if (null == maskNode) {
          maskNode = new cc.Node("mask");
          var sp = maskNode.addComponent(cc.Sprite);
          var iconUrl = "resources/table/majiangmengbai.png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          sp.spriteFrame = new cc.SpriteFrame(texture);
          node.addChild(maskNode);
        }
        maskNode.active = show;
        return show;
      },
      showDisCards: function showDisCards(player, parent, cardHeader, direction) {
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        var disNode = cc.find("cardDis_" + GameData.room.joinermax, parent);
        disNode.active = true;
        var cards = GameData.getDisCards(player.uid);
        for (var i = 1; i <= this.discardMax; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (i <= cards.length) {
            var iconUrl = "";
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, cardHeader, card);
            if (player.uid == GameData.game.lastdisUid && card == GameData.game.lastdisCard && null != node) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == direction;
              cc.find("down", this._cardArrow).active = "down" == direction;
              cc.find("right", this._cardArrow).active = "right" == direction;
              cc.find("up", this._cardArrow).active = "up" == direction;
            }
          } else node.active = false;
        }
      },
      checkIsChiArray: function checkIsChiArray(array) {
        if (void 0 == array || 3 != array.length) return false;
        if (parseInt(array[0]) == parseInt(array[1])) return false;
        return true;
      },
      checkIsChiDePai: function checkIsChiDePai(array, allData) {
        if (void 0 == array || void 0 == allData) return -1;
        for (var key in allData) {
          var data = allData[key][0];
          if (false == this.checkArrayIsSame(array, data)) continue;
          return allData[key][1];
        }
        return -1;
      },
      checkArrayIsSame: function checkArrayIsSame(array_1, array_2) {
        if (void 0 == array_1 || void 0 == array_2 || array_1.length != array_2.length) return false;
        array_1.sort(function(a, b) {
          return a - b;
        });
        array_2.sort(function(a, b) {
          return a - b;
        });
        var key = 0;
        for (var ii = 0; ii < array_1.length; ii++) array_1[ii] == array_2[ii] && key++;
        if (key != array_1.length) return false;
        return true;
      },
      removeUsedChiArray: function removeUsedChiArray(array, allData) {
        if (void 0 == array) return;
        for (var key in allData) {
          var data = allData[key][0];
          if (false == this.checkArrayIsSame(array, data)) continue;
          allData.splice(key, 1);
          return;
        }
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var chi = GameData.getChiCards(player.uid);
          var allChiData = GameData.getSelfChiCards(player.uid);
          for (var i = 0; i < chi.length; i++) chi[i].sort(function(a, b) {
            return a - b;
          });
          var gang = GameData.getGangCards(player.uid);
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng, chi);
          var size = parseInt(GameData.client.handsize / 3);
          var tempData = [];
          for (var key in allChiData) tempData.push(allChiData[key]);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            var flag = false;
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].length) {
                  console.log("n and cards[i].length" + n, cards[i].length);
                  face.node.active = true;
                  var cardId = cards[i][n];
                  this.showCardContent(face.node, cardHeader, cardId);
                  if (true == this.checkIsChiArray(cards[i]) && false == flag) {
                    var chiCard = this.checkIsChiDePai(cards[i], tempData);
                    if (chiCard == cardId) {
                      this.removeUsedChiArray(cards[i], tempData);
                      this.showChiPaiMask(face.node, cardId, direction);
                      flag = true;
                    }
                  }
                  3 == n && true == RuleHandler.instance.isHuier(cardId) && this.addHuierIcon(face.node, direction);
                } else face.node.active = false;
              }
              if (5 == cards[i].length) if (player.uid != GameData.player.uid) {
                var back1 = node.getChildByName("card_back1").getComponent("cc.Sprite");
                back1.node.active = true;
                var back2 = node.getChildByName("card_back2").getComponent("cc.Sprite");
                back2.node.active = true;
                var back3 = node.getChildByName("card_back3").getComponent("cc.Sprite");
                back3.node.active = true;
                var back4 = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back4.node.active = true;
                var face1 = node.getChildByName("card_face1").getComponent("cc.Sprite");
                face1.node.active = false;
                var face2 = node.getChildByName("card_face2").getComponent("cc.Sprite");
                face2.node.active = false;
                var face3 = node.getChildByName("card_face3").getComponent("cc.Sprite");
                face3.node.active = false;
                var face4 = node.getChildByName("card_face4").getComponent("cc.Sprite");
                face4.node.active = false;
              } else {
                var back1 = node.getChildByName("card_back1").getComponent("cc.Sprite");
                back1.node.active = false;
                var back2 = node.getChildByName("card_back2").getComponent("cc.Sprite");
                back2.node.active = false;
                var back3 = node.getChildByName("card_back3").getComponent("cc.Sprite");
                back3.node.active = false;
                var back4 = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back4.node.active = true;
                var face1 = node.getChildByName("card_face1").getComponent("cc.Sprite");
                face1.node.active = true;
                var face2 = node.getChildByName("card_face2").getComponent("cc.Sprite");
                face2.node.active = true;
                var face3 = node.getChildByName("card_face3").getComponent("cc.Sprite");
                face3.node.active = true;
                var face4 = node.getChildByName("card_face4").getComponent("cc.Sprite");
                face4.node.active = false;
              } else {
                var back1 = node.getChildByName("card_back1").getComponent("cc.Sprite");
                back1.node.active = false;
                var back2 = node.getChildByName("card_back2").getComponent("cc.Sprite");
                back2.node.active = false;
                var back3 = node.getChildByName("card_back3").getComponent("cc.Sprite");
                back3.node.active = false;
                var back4 = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back4.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var huierIconTx = cc.textureCache.addImage(cc.url.raw("resources/shishi/image/youjinbiao_big.png"));
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        cc.log("showCardContent:" + cardId + " " + cardHeader);
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
        this.setChiPaiMaskVisible(cardNode, false);
      },
      setMyHandButton: function setMyHandButton(cardNode, cardId, index) {
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardNode.addChild(cardBtn);
          cardBtn.name = cardNode.name + "_button";
        }
        var cardButton = cardBtn.getComponent("CardButton");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
            var texture = cc.textureCache.addImage(cc.url.raw("resources/shishi/image/youjinbiao_big.png"));
            var headerNodeIcon = cc.find("huier_icon", huierNode);
            headerNodeIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        } else huierNode.active = show;
      },
      setMyTingVisible: function setMyTingVisible(cardNode, cardId) {
        cc.log("setMyTingVisible card:" + cardId);
        var tingDiscard = false;
        for (var i = 0; i < this.tingData.length; i++) {
          var data = this.tingData[i];
          if (data.discard == cardId) {
            tingDiscard = true;
            break;
          }
        }
        var tingNode = cardNode.getChildByName(cardNode.name + "_ting");
        if (null == tingNode) {
          if (true == tingDiscard) {
            tingNode = cc.instantiate(this.cardTingPrefab);
            tingNode.y = tingNode.y - 10;
            cardNode.addChild(tingNode);
            tingNode.name = cardNode.name + "_ting";
          }
        } else tingNode.active = tingDiscard;
        GameData.game.turn != GameData.player.uid && null != tingNode && (tingNode.active = false);
      },
      showTurn: function showTurn() {
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        cc.find("downArrow", this.direction_turn).active = false;
        cc.find("rightArrow", this.direction_turn).active = false;
        cc.find("upArrow", this.direction_turn).active = false;
        cc.find("leftArrow", this.direction_turn).active = false;
        console.log("GameData.game.turn = " + GameData.game.turn);
        console.log("GameData.tablePos[GameData.game.turn] = " + GameData.tablePos[GameData.game.turn]);
        cc.find(GameData.tablePos[GameData.game.turn], this.direction_turn).active = true;
        cc.find(GameData.tablePos[GameData.game.turn] + "Arrow", this.direction_turn).active = true;
      },
      showCardNum: function showCardNum() {
        if (GameData.game.cardleft < 0) return;
        this.leftCardNumLabel.string = GameData.game.cardleft;
      },
      showHuierCard: function showHuierCard() {
        var huier1 = GameData.game.cardHuier1;
        if (huier1 > 0) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + huier1 + ".png"));
          this.huiercard1.node.active = true;
          this.huiercard1.spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      showEffect: function showEffect(type) {
        cc.log("show effect: " + type);
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case "peng":
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case "gang":
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case "hu":
         case "dianpao":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
          break;

         case "chi":
          spineUrl = "spine/table/chi";
          spineAnim = "a";
          break;

         case "bu":
          spineUrl = "shishi/animation/bu/bu";
          spineAnim = "animation";
          break;

         default:
          return;
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        var spine = spineNode.getComponent("sp.Skeleton");
        spine.skeletonData = null;
        spine.animation = null;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      },
      setAllHandCardsBack: function setAllHandCardsBack(node) {
        for (var key = 0; key < node.parent.childrenCount; key++) {
          var tempNode = cc.find("cardHand/cardHand" + key, this.play_layer_down);
          tempNode && tempNode.setPosition(this.myHandsInitPosition[key]);
        }
      },
      onCardBtnStart: function onCardBtnStart(data) {},
      onCardBtnMove: function onCardBtnMove(data) {
        var card = data.detail.card;
        if (GameData.game.turn == GameData.player.uid && (false == this.tingTip.getTingNodeActive() || this.tingTip.getTingSelectCard() != card)) {
          this.tingTip.show(card, this.tingData);
          this.showMask(card);
        }
      },
      onCardBtnEnd: function onCardBtnEnd(data) {
        var index = data.detail.index;
        var type = data.detail.type;
        switch (type) {
         case -1:
          index == this.selectedCard && (this.selectedCard = -1);
          this.onHandCardClicked(data);
          this.tingTip.hide();
          break;

         case 0:
          this.onHandCardClicked(data);
          break;

         case 1:
          this.selectedCard = index;
          this.onHandCardClicked(data);
        }
      },
      onCardBtnCancel: function onCardBtnCancel(data) {
        this.tingTip.hide();
      },
      onHandCardClicked: function onHandCardClicked(data) {
        var card = data.detail.card;
        var index = data.detail.index;
        var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
        var maskNode = node.getChildByName("mask");
        var mask = !!maskNode && maskNode.active;
        var self = this;
        if (this.selectedCard == index) {
          this.selectedCard = -1;
          this.tingTip.hide();
          mask ? this.moveBackMyCards() : MjHandler.getInstance().requestDisCard(card, function(ret) {
            node.stopAllActions();
            self.moveBackMyCards();
            self.huBtnIsShow = true;
          });
        } else {
          if (this.selectedCard >= 0) {
            var last = cc.find("cardHand/cardHand" + this.selectedCard, this.play_layer_down);
            last.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[this.selectedCard].x, 0)));
            this.tingTip.hide();
          }
          node.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[index].x, 30)));
          this.selectedCard = index;
          if (GameData.game.turn == GameData.player.uid && !mask && (false == this.tingTip.getTingNodeActive() || this.tingTip.getTingSelectCard() != card)) {
            this.tingTip.show(card, this.tingData);
            this.showMask(card);
          }
        }
      },
      showMask: function showMask(selectCard) {
        var player = GameData.getPlayerByPos("up");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_up, "up");
          this.showDisCardMask(selectCard, this.play_layer_up, "up");
        }
        player = GameData.getPlayerByPos("down");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_down, "down");
          this.showDisCardMask(selectCard, this.play_layer_down, "down");
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_left, "left");
          this.showDisCardMask(selectCard, this.play_layer_left, "left");
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_right, "right");
          this.showDisCardMask(selectCard, this.play_layer_right, "right");
        }
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        for (var i = 1; i < 5; i++) {
          var node = cc.find("cardPeng/cardPeng" + i, parent);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        for (var i = 1; i <= this.discardMax; i++) {
          var cardNode = cc.find("cardDis_" + GameData.room.joinermax + "/card_face" + i, parent);
          cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, parent, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("tipMask/up", maskNode).active = false;
            cc.find("tipMask/down", maskNode).active = false;
            cc.find("tipMask/right", maskNode).active = false;
            cc.find("tipMask/left", maskNode).active = false;
            cc.find("tipMask/" + direction, maskNode).active = true;
          }
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
            cc.find("tipMask", maskNode).active = true;
            cc.find("chipaiMask", maskNode).active = false;
          }
        } else cc.find("tipMask", maskNode).active = show;
        return maskNode;
      },
      setChiPaiMaskVisible: function setChiPaiMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
            cc.find("tipMask", maskNode).active = false;
            cc.find("chipaiMask", maskNode).active = true;
          }
        } else cc.find("chipaiMask", maskNode).active = show;
        return maskNode;
      },
      showChiPaiMask: function showChiPaiMask(cardNode, selectCard, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setChiPaiMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("chipaiMask/up", maskNode).active = false;
            cc.find("chipaiMask/down", maskNode).active = false;
            cc.find("chipaiMask/right", maskNode).active = false;
            cc.find("chipaiMask/left", maskNode).active = false;
            cc.find("chipaiMask/" + direction, maskNode).active = true;
          }
        }
      },
      onGameScore: function onGameScore() {
        this.tingTip.hide();
        this.unschedule(this.runCountDown);
        this.PLayerUID = null;
      },
      startCoundDown: function startCoundDown(data) {
        this.PLayerUID = data.detail;
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "");
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          3 == this._countdown_index && this.PLayerUID == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        var url1;
        var url2;
        if (0 == ary.length) return;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      onGameStartHandler: function onGameStartHandler() {
        this.mapNode.active = false;
      },
      showScoreLayer: function showScoreLayer() {
        this.getComponent("roomScore-shishi").ShowPlayerScoreItem();
        this.scoreLayer.active = true;
      },
      mapCondition: function mapCondition() {},
      showMap: function showMap(eve) {},
      showChaShuiLayer: function showChaShuiLayer() {
        this.chashuiLayer.active = true;
        cc.log("showChaShuiLayer");
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    ruleHandler: "ruleHandler"
  } ],
  roomTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd33aLVCSlAKp/kIHh/+3BJ", "roomTable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    var RuleHandler = require("ruleHandler");
    var errorCode = require("errorCode");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        direction_pos: cc.Sprite,
        direction_turn: cc.Node,
        huiercard1: cc.Sprite,
        huiercard2: cc.Sprite,
        leftCardNumLabel: cc.Label,
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        cardsNode: cc.Node,
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node,
        cardTemplate: cc.Prefab,
        playerTemplate: cc.Prefab,
        selectedCard: -1,
        HuType: null,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        disCardArrow: cc.Prefab,
        _cardArrow: cc.Node,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab,
        lastRoundLabel: cc.RichText,
        scoreLayer: cc.Node,
        roundNowNum: 0,
        mapNode: cc.Node,
        mapLayer: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onGameStart", this, this.handleGameStart);
        registEvent("onGameTurn", this, this.handleTurn);
        registEvent("onGamePass", this, this.handlePass);
        registEvent("initCards", this, this.onShow);
        registEvent("onCardObtain", this, this.handleObtain);
        registEvent("onCardDis", this, this.handleDisCard);
        registEvent("onCardHu", this, this.handleHuCard);
        registEvent("onCardPeng", this, this.handlePengCard);
        registEvent("onCardGang", this, this.handleGangCard);
        registEvent("onCardBtnStart", this, this.onCardBtnStart);
        registEvent("onCardBtnMove", this, this.onCardBtnMove);
        registEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        registEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        registEvent("onGameScore", this, this.onGameScore);
        this.actions = new Array();
        this.cardsNode.active = false;
        this.tingData = [];
        this.tingTip = this.node.getComponent("TingTip");
        this.playerSex = 1;
        4 == GameData.room.joinermax && (this.discardMax = 24);
        3 == GameData.room.joinermax && (this.discardMax = 36);
        2 == GameData.room.joinermax && (this.discardMax = 60);
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this.cardsNode.addChild(this._cardArrow);
        this._cardArrow.active = false;
        this.myHandsInitPosition = [];
        this.saveMyHandsInitPosition();
        GameData.game.gameStart && this.handleGameStart();
        GameData.game.initcards && this.onShow();
        GameData.game.checkPass.uid && this.handlePass();
        GameData.game.obtain > 0 && this.handleObtain();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onGameStart", this, this.handleGameStart);
        unregistEvent("onGameTurn", this, this.handleTurn);
        unregistEvent("onGamePass", this, this.handlePass);
        unregistEvent("initCards", this, this.onShow);
        unregistEvent("onCardObtain", this, this.handleObtain);
        unregistEvent("onCardDis", this, this.handleDisCard);
        unregistEvent("onCardHu", this, this.handleHuCard);
        unregistEvent("onCardPeng", this, this.handlePengCard);
        unregistEvent("onCardGang", this, this.handleGangCard);
        unregistEvent("onCardBtnStart", this, this.onCardBtnStart);
        unregistEvent("onCardBtnMove", this, this.onCardBtnMove);
        unregistEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        unregistEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        unregistEvent("onGameScore", this, this.onGameScore);
      },
      handleGameStart: function handleGameStart() {
        this.showPosition();
        this.cardsNode.active = false;
        this.spineNode.active = false;
        this.tingTip.hide();
        this.onGameStartHandler();
      },
      onShow: function onShow(data) {
        this.moveBackMyCards();
        this.showCards();
        this.cardsNode.active = true;
        console.log("GameData.game.roundNum + '/' + GameData.game.roundmax", GameData.game.roundNum, GameData.game.roundmax);
        var showRoundNum = GameData.game.roundNum > GameData.game.roundmax ? GameData.game.roundmax : GameData.game.roundNum;
        this.lastRoundLabel.string = showRoundNum + "/" + GameData.game.roundmax;
      },
      handleTurn: function handleTurn(data) {
        this.showTurn();
        this.startCoundDown(data);
      },
      handleObtain: function handleObtain(data) {
        if (GameData.game.turn == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
          soundMngr.instance.playAudioOther("click");
        }
        this.showCards();
        GameData.game.turn == GameData.player.uid && this.showObtainActions(GameData.player.uid, GameData.game.obtain);
      },
      handleDisCard: function handleDisCard(data) {
        console.log("this.playerSex =  GameData.player.sex", data.detail.player, GameData.player.sex);
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudio("dis", data.detail.card, this.playerSex);
        soundMngr.instance.playAudioOther("out");
        this.tingTip.hide();
        this.showCards();
      },
      handlePengCard: function handlePengCard(data) {
        if (data.detail.player == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
        }
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudio("peng", null, this.playerSex);
        this.showCards();
        this.playActionAnimation(data.detail.player, "peng");
      },
      handleGangCard: function handleGangCard(data) {
        if (data.detail.player == GameData.player.uid) {
          var handcards = GameData.getMyHandCards();
          this.tingData = RuleHandler.instance.discardTip(handcards);
        }
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudio("gang", null, this.playerSex);
        this.showCards();
        this.playActionAnimation(data.detail.player, "gang");
      },
      handleHuCard: function handleHuCard(data) {
        cc.log("=...........................", data.detail);
        if (null == data.detail.player) return;
        this.HuType = data.detail;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.player);
        soundMngr.instance.playAudio("hu", data.detail, this.playerSex);
        this.scheduleOnce(function() {
          soundMngr.instance.playAudioHu(this.HuType, this.playerSex);
        }, 1);
        this.playActionAnimation(data.detail.player, "hu");
        this.actionLayer.active = false;
        this.lastRoundLabel.string = this.roundNowNum + "/" + GameData.game.roundmax;
      },
      playActionAnimation: function playActionAnimation(uid, action) {
        if (null != GameData.joiners) {
          var pos = GameData.tablePos[uid];
          var animationNode = cc.find("layer_ui/layer_ui_table/actionAnimations/" + pos, this.node);
          cc.log("---\x3e animationNode : " + animationNode);
          if (null != animationNode) {
            cc.log("---\x3e playActionAnimation : " + action);
            animationNode.getComponent(cc.Animation).play(action);
          }
        }
      },
      handlePass: function handlePass(data) {
        if (GameData.game.checkPass.uid) {
          var uid = GameData.game.checkPass.uid;
          var card = GameData.game.checkPass.card;
          var show = this.showPassActions(uid, card);
          show || MjHandler.getInstance().requestPass(function(res) {});
          GameData.game.checkPass = {};
        }
      },
      showPassActions: function showPassActions(uid, card) {
        var btnIdx = 0;
        var self = this;
        self.actions = [];
        if (RuleHandler.instance.canPeng(uid, card)) {
          self.actions[btnIdx] = {
            act: "peng",
            card: card
          };
          self.createActionBtn(++btnIdx, "peng.png");
          self.moveBackMyCards();
          self.moveUpMyCards(card, 2);
        }
        var gangActions = this.checkGangAction(uid, card, false);
        gangActions.length > 0 && this.showGangAction(++btnIdx, gangActions);
        if (btnIdx > 0) {
          for (;++btnIdx <= 4; ) {
            var actionBtn = cc.find("btnAct" + btnIdx, self.actionLayer);
            actionBtn.active = false;
          }
          self.actionLayer.active = !this.actionSecondaryLayer.active;
        } else self.actionLayer.active = false;
        return btnIdx > 0;
      },
      showObtainActions: function showObtainActions(uid, card) {
        var btnIdx = 0;
        var self = this;
        self.actions = [];
        cc.log("GameData.myCardObj: " + JSON.stringify(GameData.getMyHandCards()));
        var handcards = GameData.getMyHandCards();
        var huData = RuleHandler.instance.canZimo(handcards, card, true);
        if (false != huData && huData[0] && huData[0].length > 0) {
          cc.log("client test canZimo");
          self.actions[btnIdx] = {
            act: "hu",
            type: huData[0],
            deck: huData[1],
            obtain: huData[2]
          };
          self.createActionBtn(++btnIdx, "hu.png");
        }
        var gangActions = this.checkGangAction(uid, card, true);
        gangActions.length > 0 && this.showGangAction(++btnIdx, gangActions);
        if (btnIdx > 0) {
          for (;++btnIdx <= 4; ) {
            var actionBtn = cc.find("btnAct" + btnIdx, self.actionLayer);
            actionBtn.active = false;
          }
          self.actionLayer.active = !this.actionSecondaryLayer.active;
        } else self.actionLayer.active = false;
        return btnIdx > 0;
      },
      showGangAction: function showGangAction(btnIdx, gangActions) {
        if (this.actionSecondaryLayer.active) {
          this.actions[btnIdx - 1] = {
            act: "manygang",
            card: gangActions
          };
          this.createActionBtn(btnIdx, "gang.png");
          this.refreshGangActionBar({
            act: "manygang",
            card: gangActions
          });
        } else if (1 == gangActions.length) {
          var actionCardId = gangActions[0].card;
          this.actions[btnIdx - 1] = {
            act: gangActions[0].act,
            card: actionCardId
          };
          this.createActionBtn(btnIdx, "gang.png");
          this.moveBackMyCards();
          this.moveUpMyCards(actionCardId, 4);
        } else if (gangActions.length > 1) {
          this.actions[btnIdx - 1] = {
            act: "manygang",
            card: gangActions
          };
          this.createActionBtn(btnIdx, "gang.png");
        }
      },
      checkGangAction: function checkGangAction(uid, card, obtain) {
        var actions = new Array();
        if (obtain) {
          var minggangselfCard = RuleHandler.instance.canMingGangSelf();
          for (var ii = 0; ii < minggangselfCard.length; ii++) minggangselfCard[ii] > 0 && actions.push({
            act: "selfgang",
            card: minggangselfCard[ii]
          });
          if (0 != GameData.game.cardleft && uid == GameData.player.uid) {
            var cards = GameData.getMyHandCards();
            for (var key in cards) cards[key] >= 4 && actions.push({
              act: "angang",
              card: key
            });
          }
        } else {
          var minggangCard = RuleHandler.instance.canMingGang(uid, card);
          minggangCard > 0 && actions.push({
            act: "minggang",
            card: minggangCard
          });
        }
        return actions;
      },
      createActionBtn: function createActionBtn(index, icon) {
        cc.log("show btn:" + icon);
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/action/" + icon));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        cc.log("onBtnActionClicked, index : " + index);
        for (var i = 0; i < this.actions.length; i++) cc.log(this.actions[i].act + "," + this.actions[i].card);
        var self = this;
        var data = this.actions[index];
        if ("hu" == data.act) MjHandler.getInstance().requestHu(data.type, data.deck, data.obtain, function(res) {
          0 == res.result && self.showEffect("hu");
        }); else if ("peng" == data.act) MjHandler.getInstance().requestPengCard(data.card, function(res) {
          0 == res.result && self.showEffect("peng");
        }); else if ("manygang" == data.act) {
          cc.log("------------------\x3e click gang, should open gang ui, data.card " + data.card);
          this.refreshGangActionBar(data);
        } else "minggang" == data.act ? MjHandler.getInstance().requestGangMingCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }) : "selfgang" == data.act ? MjHandler.getInstance().requestGangMingSelfCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }) : "angang" == data.act && MjHandler.getInstance().requestGangAnCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        });
        this.moveBackMyCards();
        self.actionLayer.active = false;
      },
      refreshGangActionBar: function refreshGangActionBar(data) {
        this.actionSecondaryLayer.active = true;
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        cardTemp.active = true;
        this.gangActionList = new Array();
        for (var i = 0; i < data.card.length; i++) {
          var action = data.card[i];
          this.gangActionList.push(action);
          var card = cc.instantiate(cardTemp);
          card.name = i + "";
          card.getComponent(cc.Sprite).spriteFrame = null;
          var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + action.card + ".png";
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          card.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          card.on(cc.Node.EventType.TOUCH_START, this.onClickActionSecondaryBtn, this);
          cardLayout.addChild(card);
        }
        cardTemp.active = false;
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      onClickActionSecondaryBtn: function onClickActionSecondaryBtn(e) {
        cc.log(e.target.name);
        var index = e.target.name;
        var data = this.gangActionList[index];
        var self = this;
        null != data && ("minggang" == data.act ? MjHandler.getInstance().requestGangMingCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }) : "selfgang" == data.act ? MjHandler.getInstance().requestGangMingSelfCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }) : "angang" == data.act && MjHandler.getInstance().requestGangAnCard(data.card, function(res) {
          0 == res.result && self.showEffect("gang");
        }));
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        GameData.game.turn != GameData.player.uid && MjHandler.getInstance().requestPass(function(res) {});
        for (var i = 0; i < this.actions.length; i++) {
          "peng" == this.actions[i].act && MjHandler.getInstance().requestPass(function(res) {});
          this.actionLayer.active = false;
          this.actionSecondaryLayer.active = false;
          this.moveBackMyCards();
        }
      },
      showCards: function showCards() {
        var player = GameData.getPlayerByPos("down");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_down.active = true;
          this.showMyHandCards(player, this.play_layer_down);
          this.showDisCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
          this.showPengCards(player, this.play_layer_down, "mj_face_xia_chu", "down");
        } else this.play_layer_down.active = false;
        player = GameData.getPlayerByPos("right");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_right.active = true;
          this.showHandCards(player, this.play_layer_right);
          this.showDisCards(player, this.play_layer_right, "mj_face_you_chu", "right");
          this.showPengCards(player, this.play_layer_right, "mj_face_you_chu", "right");
        } else this.play_layer_right.active = false;
        player = GameData.getPlayerByPos("up");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_up.active = true;
          this.showHandCards(player, this.play_layer_up);
          this.showDisCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
          this.showPengCards(player, this.play_layer_up, "mj_face_shang_shou", "up");
        } else this.play_layer_up.active = false;
        player = GameData.getPlayerByPos("left");
        if (player && GameData.cards[player.uid]) {
          this.play_layer_left.active = true;
          this.showHandCards(player, this.play_layer_left);
          this.showDisCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
          this.showPengCards(player, this.play_layer_left, "mj_face_zuo_chu", "left");
        } else this.play_layer_left.active = false;
        this.showCardNum();
        this.showHuierCard();
      },
      showHandCards: function showHandCards(player, parent) {
        if (player) {
          var uid = player.uid;
          var cardNum = GameData.getHandCardNum(uid) + 3 * (GameData.getChiCards(uid).length + GameData.getPengCards(uid).length + GameData.getGangCards(uid).length);
          var showIdx = cardNum > GameData.client.handsize ? 0 : 1;
          var handIdx = 1, nodeIdx = 0;
          for (;nodeIdx <= GameData.client.handsize; nodeIdx++) {
            var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
            if (nodeIdx == showIdx && handIdx <= GameData.getHandCardNum(uid)) {
              node.active = true;
              showIdx++;
              handIdx++;
            } else node.active = false;
          }
        }
      },
      moveUpMyCards: function moveUpMyCards(id, popCount) {
        var count = 0;
        for (var i = 1; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          if (cardId == id) {
            cardNode.y = 43;
            count++;
            if (count >= popCount) return;
          }
        }
      },
      saveMyHandsInitPosition: function saveMyHandsInitPosition() {
        for (var index = 0; index <= GameData.client.handsize; index++) {
          var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
          this.myHandsInitPosition.push(node.getPosition());
        }
      },
      moveBackMyCards: function moveBackMyCards() {
        this.selectedCard = -1;
        for (var i = 0; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          cardNode.position = this.myHandsInitPosition[i];
        }
      },
      showMyHandCards: function showMyHandCards(player, parent) {
        var cardNum = GameData.getHandCardNum(player.uid);
        var node = cc.find("cardHand/cardHand0", parent);
        var cardHand = GameData.getMyHandCards();
        var pengcard = [];
        if (GameData.game.turn == player.uid) {
          if (GameData.game.obtain > 0) {
            var cardid = GameData.game.obtain;
            this.showCardContent(node, "mj_face_xia_shou", cardid);
            this.setMyHandButton(node, cardid, 0);
            this.setMyHuierVisible(node, cardid, "down");
            this.setMyTingVisible(node, cardid);
            node.active = true;
          } else for (var card in cardHand) card == GameData.game.lastdisCard && cardHand[card] >= 2 && pengcard.push(card);
          if (pengcard.length > 0) {
            node.active = false;
            pengcard = [];
          } else cardNum--;
        } else node.active = false;
        var cardNormal = [];
        var cardHand = GameData.getMyHandCards();
        var nodeIdx = cardNum, getObtain = false;
        for (var card in cardHand) for (var i = 0; i < cardHand[card]; i++) {
          if (!getObtain && card == GameData.game.obtain) {
            getObtain = true;
            continue;
          }
          if (!RuleHandler.instance.isHuier(card)) {
            cardNormal.push(card);
            continue;
          }
          var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
          this.showCardContent(node, "mj_face_xia_shou", card);
          this.setMyHandButton(node, card, nodeIdx);
          this.setMyHuierVisible(node, card, "down");
          this.setMyTingVisible(node, card);
          node.active = true;
          nodeIdx--;
        }
        for (var i = 0; i < cardNormal.length; i++) {
          var card = cardNormal[i];
          var node = cc.find("cardHand/cardHand" + nodeIdx, parent);
          this.showCardContent(node, "mj_face_xia_shou", card);
          this.setMyHandButton(node, card, nodeIdx);
          this.setMyHuierVisible(node, card, "down");
          this.setMyTingVisible(node, card);
          node.active = true;
          nodeIdx--;
        }
        for (var i = cardNum + 1; i <= GameData.client.handsize; i++) {
          var node = cc.find("cardHand/cardHand" + i, parent);
          node.active = false;
        }
      },
      showDisCards: function showDisCards(player, parent, cardHeader, direction) {
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        console.log("22222" + GameData.room.joinermax);
        var disNode = cc.find("cardDis_" + GameData.room.joinermax, parent);
        disNode.active = true;
        var cards = GameData.getDisCards(player.uid);
        for (var i = 1; i <= this.discardMax; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (i <= cards.length) {
            var iconUrl = "";
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, cardHeader, card);
            if (player.uid == GameData.game.lastdisUid && card == GameData.game.lastdisCard && null != node) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == direction;
              cc.find("down", this._cardArrow).active = "down" == direction;
              cc.find("right", this._cardArrow).active = "right" == direction;
              cc.find("up", this._cardArrow).active = "up" == direction;
            }
          } else node.active = false;
        }
      },
      showPengCards: function showPengCards(player, parent, cardHeader, direction) {
        if (player) {
          var gang = GameData.getGangCards(player.uid);
          var peng = GameData.getPengCards(player.uid);
          var cards = gang.concat(peng);
          var size = parseInt(GameData.client.handsize / 3);
          for (var i = 0; i < size; i++) {
            var node = cc.find("cardPeng/cardPeng" + (i + 1), parent);
            if (i < cards.length) {
              for (var n = 0; n < 4; n++) {
                var face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
                if (n < cards[i].length) {
                  var index = 3 == n ? 3 * i + n - 1 : 3 * i + n + 1;
                  face.node.active = true;
                  var cardId = cards[i][n];
                  this.showCardContent(face.node, cardHeader, cardId);
                  var cardId = cards[i][n];
                  3 == n && true == RuleHandler.instance.isHuier(cardId) && this.addHuierIcon(face.node, direction);
                } else face.node.active = false;
              }
              if (5 == cards[i].length) {
                var face = node.getChildByName("card_face4").getComponent("cc.Sprite");
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                face.node.active = false;
                back.node.active = true;
              } else {
                var back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                back.node.active = false;
              }
              node.active = true;
            } else node.active = false;
          }
        }
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var huierIconTx = cc.textureCache.addImage(cc.url.raw("resources/table/huier_icon.png"));
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
      },
      setMyHandButton: function setMyHandButton(cardNode, cardId, index) {
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardNode.addChild(cardBtn);
          cardBtn.name = cardNode.name + "_button";
        }
        var cardButton = cardBtn.getComponent("CardButton");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId, direction) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(direction, huierNode).active = true;
            huierNode.y = huierNode.y - 18;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyTingVisible: function setMyTingVisible(cardNode, cardId) {
        var tingDiscard = false;
        for (var i = 0; i < this.tingData.length; i++) {
          var data = this.tingData[i];
          if (data.discard == cardId) {
            tingDiscard = true;
            break;
          }
        }
        var tingNode = cardNode.getChildByName(cardNode.name + "_ting");
        if (null == tingNode) {
          if (true == tingDiscard) {
            tingNode = cc.instantiate(this.cardTingPrefab);
            tingNode.y = tingNode.y - 10;
            cardNode.addChild(tingNode);
            tingNode.name = cardNode.name + "_ting";
          }
        } else tingNode.active = tingDiscard;
        GameData.game.turn != GameData.player.uid && null != tingNode && (tingNode.active = false);
      },
      showPosition: function showPosition() {
        var iconUrl = "";
        var index = GameData.getPlayerIndex(GameData.player.uid);
        var rotation = 0;
        0 == index ? rotation = 90 : 3 == index ? rotation = 0 : 2 == index ? rotation = 270 : 1 == index && (rotation = 180);
        this.direction_pos.node.rotation = rotation;
      },
      showTurn: function showTurn() {
        var index = GameData.getPlayerIndex(GameData.game.turn);
        var direction;
        direction = 0 == index ? "dong" : 3 == index ? "nan" : 2 == index ? "xi" : 1 == index ? "bei" : "dong";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + direction + ".png"));
        this.direction_pos.spriteFrame = new cc.SpriteFrame(texture);
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        cc.find(GameData.tablePos[GameData.game.turn], this.direction_turn).active = true;
      },
      showCardNum: function showCardNum() {
        if (GameData.game.cardleft < 0) return;
        this.leftCardNumLabel.string = GameData.game.cardleft;
      },
      showHuierCard: function showHuierCard() {
        var huier1 = GameData.game.cardHuier1;
        if (huier1 > 0) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + huier1 + ".png"));
          this.huiercard1.spriteFrame = new cc.SpriteFrame(texture);
        }
        var huier2 = GameData.game.cardHuier2;
        if (huier2 > 0) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + huier2 + ".png"));
          this.huiercard2.spriteFrame = new cc.SpriteFrame(texture);
        }
      },
      showEffect: function showEffect(type) {
        cc.log("show effect: " + type);
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case "peng":
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case "gang":
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case "hu":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        var spine = spineNode.getComponent("sp.Skeleton");
        spine.skeletonData = null;
        spine.animation = null;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      },
      onCardBtnStart: function onCardBtnStart(data) {},
      onCardBtnMove: function onCardBtnMove(data) {
        var card = data.detail.card;
        if (GameData.game.turn == GameData.player.uid) {
          this.tingTip.show(card, this.tingData);
          this.showMask(card);
        }
      },
      onCardBtnEnd: function onCardBtnEnd(data) {
        var index = data.detail.index;
        var type = data.detail.type;
        switch (type) {
         case -1:
          index == this.selectedCard && (this.selectedCard = -1);
          this.onHandCardClicked(data);
          this.tingTip.hide();
          break;

         case 0:
          this.onHandCardClicked(data);
          break;

         case 1:
          this.selectedCard = index;
          this.onHandCardClicked(data);
        }
      },
      onCardBtnCancel: function onCardBtnCancel(data) {
        this.tingTip.hide();
      },
      onHandCardClicked: function onHandCardClicked(data) {
        var card = data.detail.card;
        var index = data.detail.index;
        var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
        var self = this;
        if (this.selectedCard == index) {
          RuleHandler.instance.isHuier(card) ? createMessageBox("您是否确认将混儿牌打出，若打出将不能胡任何牌型，请谨慎选择。", function() {
            MjHandler.getInstance().requestDisCard(card, function(ret) {
              if (ret.result == errorCode.Success) {
                node.stopAllActions();
                self.selectedCard = -1;
                self.moveBackMyCards();
                sendEvent("onCardHand");
                RuleHandler.instance.isHuier(card) && (GameData.player.isXiangGong = true);
              }
            });
          }, function() {
            self.selectedCard = -1;
            self.moveBackMyCards();
          }) : MjHandler.getInstance().requestDisCard(card, function(ret) {
            if (ret.result == errorCode.Success) {
              node.stopAllActions();
              self.selectedCard = -1;
              self.moveBackMyCards();
              sendEvent("onCardHand");
              RuleHandler.instance.isHuier(card) && (GameData.player.isXiangGong = true);
            }
          });
          this.tingTip.hide();
        } else {
          if (this.selectedCard >= 0) {
            var last = cc.find("cardHand/cardHand" + this.selectedCard, this.play_layer_down);
            last.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[this.selectedCard].x, 0)));
          }
          node.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[index].x, 30)));
          this.selectedCard = index;
          if (GameData.game.turn == GameData.player.uid) {
            this.tingTip.show(card, this.tingData);
            this.showMask(card);
          }
        }
      },
      showMask: function showMask(selectCard) {
        var player = GameData.getPlayerByPos("up");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_up, "up");
          this.showDisCardMask(selectCard, this.play_layer_up, "up");
        }
        player = GameData.getPlayerByPos("down");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_down, "down");
          this.showDisCardMask(selectCard, this.play_layer_down, "down");
        }
        player = GameData.getPlayerByPos("left");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_left, "left");
          this.showDisCardMask(selectCard, this.play_layer_left, "left");
        }
        player = GameData.getPlayerByPos("right");
        if (player) {
          this.showPengCardMask(selectCard, this.play_layer_right, "right");
          this.showDisCardMask(selectCard, this.play_layer_right, "right");
        }
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        for (var i = 1; i < 5; i++) {
          var node = cc.find("cardPeng/cardPeng" + i, parent);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        for (var i = 1; i <= this.discardMax; i++) {
          var cardNode = cc.find("cardDis_" + GameData.room.joinermax + "/card_face" + i, parent);
          cardNode.active && this.gotoMask(cardNode, selectCard, parent, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, parent, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("up", maskNode).active = false;
            cc.find("down", maskNode).active = false;
            cc.find("right", maskNode).active = false;
            cc.find("left", maskNode).active = false;
            cc.find(direction, maskNode).active = true;
          }
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      onGameScore: function onGameScore() {
        this.tingTip.hide();
        this.unschedule(this.runCountDown);
      },
      startCoundDown: function startCoundDown(data) {
        this.PLayerUID = data.detail;
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
        this.roundNowNum = GameData.game.roundNum;
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "");
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          3 == this._countdown_index && this.PLayerUID == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        var url1;
        var url2;
        if (0 == ary.length) return;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      showScoreLayer: function showScoreLayer() {
        this.getComponent("roomScore").ShowPlayerScoreItem();
        this.scoreLayer.active = true;
      },
      mapCondition: function mapCondition() {
        if (roomHandler.room.opts.roomType == gameDefine.roomType.Room_Match) return;
        this.getComponent("AMapPanel").showPlayers();
        var iconUrl;
        iconUrl = GameData.danger ? "resources/table/map/weixian.png" : "resources/table/map/anquan.png";
        if ("" != iconUrl) {
          console.log("iconUrl = " + iconUrl);
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.mapNode.getComponent(cc.Sprite).spriteFrame = null;
          this.mapNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          this.mapNode.active = true;
        }
      },
      showMap: function showMap(eve) {
        this.getComponent("AMapPanel").showPlayers();
        this.mapLayer.active = true;
      },
      onGameStartHandler: function onGameStartHandler() {
        if (GameData.room.opts.roomType == gameDefine.roomType.Room_Match) return;
        this.mapCondition();
        2 == GameData.room.opts.joinermax ? this.mapNode.active = false : this.mapNode.active = true;
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  roomUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "948b5yrT+FJKZu3JBgBKuDC", "roomUtil");
    "use strict";
    var exp = module.exports;
    exp.getRoomString = function(roomId) {
      return GameData.room.id >= 1e5 ? roomId.toString() : GameData.room.id >= 1e4 ? "0" + GameData.room.id : GameData.room.id >= 1e3 ? "00" + GameData.room.id : GameData.room.id >= 100 ? "000" + GameData.room.id : GameData.room.id >= 10 ? "0000" + GameData.room.id : GameData.room.id >= 1 ? "00000" + GameData.room.id : "000000";
    };
    exp.getTimeString = function() {
      var t = new Date();
      var h = t.getHours();
      var m = t.getMinutes();
      h = h < 10 ? "0" + h : h;
      m = m < 10 ? "0" + m : m;
      var str = h + ":" + m;
      return str;
    };
    exp.getPower = function() {
      try {
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
      } catch (e) {
        WriteLog("Get energy error:" + JSON.stringify(e));
      }
    };
    cc._RF.pop();
  }, {} ],
  "roomWait-shishi": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80f5c7wP1VE3J1s+YWNRx/f", "roomWait-shishi");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        quanNode: cc.Node,
        juNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers(this);
        registEvent("onRoomMsg", this, this.showPlayers);
        registEvent("initCards", this, this.showPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("initZhuangInfo", this, this.showPlayers);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("onNotDiscard", this, this.onNotDiscardHandler);
        registEvent("onGameStart", this, this.onGameStartHandler);
        registEvent("onGameTurn", this, this.onGameTurnHandler);
        registEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        registEvent("onGameScore", this, this.onGameScoreHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("dynChat", this, this.dynChatHandler);
        MjHandler.getInstance().requestReady();
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameData.game.gameStart;
        GameData.game.onRoomReadyInfo.data && sendEvent("onRoomReadyInfo", GameData.game.onRoomReadyInfo.data);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomMsg", this, this.showPlayers);
        unregistEvent("initCards", this, this.showPlayers);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("initZhuangInfo", this, this.showPlayers);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("onNotDiscard", this, this.onNotDiscardHandler);
        unregistEvent("onGameStart", this, this.onGameStartHandler);
        unregistEvent("onGameTurn", this, this.onGameTurnHandler);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onGameScoreHandler: function onGameScoreHandler() {
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, 2);
      },
      onNotDiscardHandler: function onNotDiscardHandler(data) {
        GameData.player.uid == data.detail.uid && GameData.game.turn == GameData.player.uid && true == GameData.room.opts.fengtou && createMoveMessage("请注意风头跟打");
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("playerTemplate");
          var uid = playerTemplate.uid;
          var score = void 0 == GameData.allScores[uid] ? 0 : GameData.allScores[uid];
          playerTemplate.setCoin(score, 1);
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        if (!GameData.room.opts) return;
        var playStr = getRuleStrShiShi(GameData.room.opts);
        console.log("GameData.createRoomOpts:" + GameData.createRoomOpts);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + "contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      },
      showPlayer: function showPlayer(direction, parent) {
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          playerNode.getComponent("playerTemplate").setPlayer(player);
          playerNode.getComponent("playerTemplate").setName(player.name);
          playerNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
          var score = void 0 == GameData.allScores[player.uid] ? 0 : GameData.allScores[player.uid];
          console.log(" score: " + score);
          playerNode.getComponent("playerTemplate").setCoin(score, 1);
          var zhuang = GameData.game.zhuangUid == player.uid;
          cc.log("showPlayer uid:" + player.uid + " zhuang:" + GameData.game.zhuangUid);
          playerNode.getComponent("playerTemplate").showZhuang(zhuang);
          var num = GameData.game.zhuangNum[player.uid];
          playerNode.getComponent("playerTemplate").showZhuangNum(zhuang, num);
          playerNode.getComponent("playerTemplate").setChaShuiIconShow(direction);
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          playerNode.setTag(player.uid);
          this.showReadyIcon(direction, true, false);
          var disNode = cc.find("Disconnect", playerNode);
          disNode.active = 2 == player.status;
          if (2 == player.status) {
            this.showReadyIcon(direction, false, false);
            cc.find("lost_" + direction, this.lostNode).active = true;
          }
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("up", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.joinermax) {
          index >= 0 && index < GameData.room.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.joinermax) {
          index >= 0 && index < GameData.room.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameData.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (void 0 == connectInfo[isReadyUid] || 0 == connectInfo[isReadyUid]) {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          }
        }
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      onGameTurnHandler: function onGameTurnHandler(data) {
        this.scheduleOnce(this.showTurnEffect, .1);
      },
      showTurnEffect: function showTurnEffect() {
        this.gotoShowTurnEffect(GameData.game.turn);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var disNode = cc.find("liuguang", headerNode);
          disNode.active = headerNode.getComponent("playerTemplate").uid == uid;
        }
      },
      setRoomNum: function setRoomNum() {
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "石狮麻将 房间号:" + GameData.room.id;
        4 == GameData.room.opts.costType && (title = "石狮麻将 (代开)房间号:" + GameData.room.id);
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var inviteStr = getRuleStrShiShi(GameData.room.opts);
        GameData.room.opts.joinermax && (inviteStr += "," + GameData.joiners.length + "等" + (GameData.room.opts.joinermax - GameData.joiners.length));
        var str2 = ",请您快速加入对局.";
        var des = str1 + inviteStr + str2;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("石狮麻将", "我在石狮麻将等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("石狮麻将", "我在石狮麻将等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "石狮麻将,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        this.readyNode.active = !GameData.game.gameStart;
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    roomHandler: "roomHandler"
  } ],
  roomWait_changchun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb499wTyu9N47MDz8murX0y", "roomWait_changchun");
    "use strict";
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        quanNode: cc.Node,
        juNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers(this);
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("initCards", this, this.showPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("initZhuangInfo", this, this.showPlayers);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("onNotDiscard", this, this.onNotDiscardHandler);
        registEvent("onGameStart", this, this.onGameStartHandler);
        registEvent("onGameTurn", this, this.onGameTurnHandler);
        registEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        registEvent("onMahjongRunEnd", this, this.onGameScoreHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("onHuaDianMahjongReconnecet", this, this.onGameStartHandler);
        registEvent("dynChat", this, this.dynChatHandler);
        MjHandler.getInstance().requestReady();
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameData.game.zhuangUid > 0;
        GameData.game.turn > 0 && this.onGameTurnHandler();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("initCards", this, this.showPlayers);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("initZhuangInfo", this, this.showPlayers);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("onNotDiscard", this, this.onNotDiscardHandler);
        unregistEvent("onGameStart", this, this.onGameStartHandler);
        unregistEvent("onGameTurn", this, this.onGameTurnHandler);
        unregistEvent("onMahjongRunEnd", this, this.onGameScoreHandler);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.onGameStartHandler);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onGameScoreHandler: function onGameScoreHandler() {
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, 2);
      },
      onNotDiscardHandler: function onNotDiscardHandler(data) {
        GameData.player.uid == data.detail.uid && GameData.game.turn == GameData.player.uid && true == GameData.room.opts.fengtou && createMoveMessage("请注意风头跟打");
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("playerTemplate");
          var uid = playerTemplate.uid;
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[uid] && playerTemplate.setGold(GameData.players[uid].coin); else {
            var score = void 0 == GameData.allScores[uid] ? 0 : GameData.allScores[uid];
            playerTemplate.setCoin(score, 1);
          }
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        cc.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!showPlayers");
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.active = !isCreator;
        if (GameData.room) {
          var isQuan = 2 == GameData.room.opts.roundType;
          this.quanNode.active = isQuan;
          this.juNode.active = !isQuan;
        }
        GameData.game.turn > 0 && this.onGameTurnHandler();
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        if (!GameData.room.opts) return;
        var playStr = getRuleStrCC(GameData.room.opts);
        console.log("GameData.createRoomOpts:" + GameData.createRoomOpts);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + "contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      },
      showPlayer: function showPlayer(direction, parent) {
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          playerNode.getComponent("playerTemplate").setPlayer(player);
          playerNode.getComponent("playerTemplate").setName(player.name);
          playerNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players.uid && playerNode.getComponent("playerTemplate").setGold(player.coin); else {
            var score = void 0 == RoomHandler.scores[player.uid] ? 0 : RoomHandler.scores[player.uid];
            playerNode.getComponent("playerTemplate").setCoin(score, 1);
            console.log(" score: " + score);
          }
          var zhuang = GameData.game.zhuangUid == player.uid;
          cc.log("showPlayer uid:" + player.uid + " zhuang:" + GameData.game.zhuangUid);
          playerNode.getComponent("playerTemplate").showZhuang(zhuang);
          var creator = GameData.room.creator == player.uid;
          playerNode.getComponent("playerTemplate").showCreator(creator);
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          var readyState = true;
          playerNode.setTag(player.uid);
          for (var key in RoomHandler.readyData) key == player.uid && (readyState = RoomHandler.readyData[key]);
          cc.log("readyState:" + JSON.stringify(readyState));
          readyState ? this.showReadyIcon(direction, true, false) : this.showReadyIcon(direction, false, true);
          var disNode = cc.find("Disconnect", playerNode);
          var online = RoomHandler.isPlayerOnline(player.uid);
          disNode.active = !online;
          cc.find("lost_" + direction, this.lostNode).active = !online;
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("up", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, true);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        data.detail.uid == GameData.player.uid && MjHandler.getInstance().requestReady();
        GameData.room.status == gameDefine.RoomState.READY ? this.readyNode.active = true : this.readyNode.active = false;
        sendEvent("playerConnect");
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameData.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (void 0 == connectInfo[isReadyUid] || 0 == connectInfo[isReadyUid]) {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          }
        }
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      onGameTurnHandler: function onGameTurnHandler(data) {
        this.scheduleOnce(this.showTurnEffect, .1);
      },
      showTurnEffect: function showTurnEffect() {
        var turnPlayer = profileHuaDian.getTurnByUid();
        this.gotoShowTurnEffect(turnPlayer);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var disNode = cc.find("liuguang", headerNode);
          disNode.active = headerNode.getComponent("playerTemplate").uid == uid;
        }
      },
      setRoomNum: function setRoomNum() {
        cc.log("~~~~~~~~~~~设置房间号~~~~~~~~~~~~~");
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        if (inCD(2e3)) return;
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "长春麻将 房间号:" + GameData.room.id;
        4 == GameData.room.opts.costType && (title = "长春麻将 (代开)房间号:" + GameData.room.id);
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var inviteStr = getRuleStrCC(GameData.room.opts);
        GameData.room.opts.joinermax && (inviteStr += "," + GameData.joiners.length + "等" + (GameData.room.opts.joinermax - GameData.joiners.length));
        var str2 = ",请您快速加入对局.";
        var des = str1 + inviteStr + str2;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("长春麻将", "我在长春麻将等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("长春麻将", "我在长春麻将等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        if (inCD(2e3)) return;
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "长春麻将,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        GameData.room.status == gameDefine.RoomState.READY ? this.readyNode.active = true : this.readyNode.active = false;
        this.showPlayers();
      },
      onGamePiaoHandler: function onGamePiaoHandler() {
        this.readyNode.active = false;
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomWait_heb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1905dPciw1PVZRTQKkiW8M0", "roomWait_heb");
    "use strict";
    var RoomHandler = require("roomHandler");
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        quanNode: cc.Node,
        juNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers(this);
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("initCards", this, this.showPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("initZhuangInfo", this, this.showPlayers);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("onNotDiscard", this, this.onNotDiscardHandler);
        registEvent("onGameStart", this, this.onGameStartHandler);
        registEvent("onGameTurn", this, this.onGameTurnHandler);
        registEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        registEvent("onMahjongRunEnd", this, this.onGameScoreHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("onHuaDianMahjongReconnecet", this, this.onGameStartHandler);
        registEvent("dynChat", this, this.dynChatHandler);
        MjHandler.getInstance().requestReady();
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameData.game.zhuangUid > 0;
        GameData.game.turn > 0 && this.onGameTurnHandler();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("initCards", this, this.showPlayers);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("initZhuangInfo", this, this.showPlayers);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("onNotDiscard", this, this.onNotDiscardHandler);
        unregistEvent("onGameStart", this, this.onGameStartHandler);
        unregistEvent("onGameTurn", this, this.onGameTurnHandler);
        unregistEvent("onMahjongRunEnd", this, this.onGameScoreHandler);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.onGameStartHandler);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onGameScoreHandler: function onGameScoreHandler() {
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, 2);
      },
      onNotDiscardHandler: function onNotDiscardHandler(data) {
        GameData.player.uid == data.detail.uid && GameData.game.turn == GameData.player.uid && true == GameData.room.opts.fengtou && createMoveMessage("请注意风头跟打");
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("playerTemplate");
          var uid = playerTemplate.uid;
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[uid] && playerTemplate.setGold(GameData.players[uid].coin); else {
            var score = void 0 == GameData.allScores[uid] ? 0 : GameData.allScores[uid];
            playerTemplate.setCoin(score, 1);
          }
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        cc.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!showPlayers");
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.active = !isCreator;
        if (GameData.room) {
          var isQuan = 2 == GameData.room.opts.roundType;
          this.quanNode.active = isQuan;
          this.juNode.active = !isQuan;
        }
        GameData.game.turn > 0 && this.onGameTurnHandler();
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        if (!GameData.room.opts) return;
        var playStr = getRuleStrCC(GameData.room.opts);
        console.log("GameData.createRoomOpts:" + GameData.createRoomOpts);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + "contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      },
      showPlayer: function showPlayer(direction, parent) {
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          playerNode.getComponent("playerTemplate").setPlayer(player);
          playerNode.getComponent("playerTemplate").setName(player.name);
          playerNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) player.coin && playerNode.getComponent("playerTemplate").setGold(player.coin); else {
            var score = void 0 == RoomHandler.scores[player.uid] ? 0 : RoomHandler.scores[player.uid];
            playerNode.getComponent("playerTemplate").setCoin(score, 1);
            console.log(" score: " + score);
          }
          var zhuang = GameData.game.zhuangUid == player.uid;
          cc.log("showPlayer uid:" + player.uid + " zhuang:" + GameData.game.zhuangUid);
          playerNode.getComponent("playerTemplate").showZhuang(zhuang);
          var creator = GameData.room.creator == player.uid;
          playerNode.getComponent("playerTemplate").showCreator(creator);
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          var readyState = true;
          playerNode.setTag(player.uid);
          for (var key in RoomHandler.readyData) key == player.uid && (readyState = RoomHandler.readyData[key]);
          cc.log("readyState:" + JSON.stringify(readyState));
          readyState ? this.showReadyIcon(direction, true, false) : this.showReadyIcon(direction, false, true);
          var disNode = cc.find("Disconnect", playerNode);
          var online = RoomHandler.isPlayerOnline(player.uid);
          disNode.active = !online;
          cc.find("lost_" + direction, this.lostNode).active = !online;
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("up", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, true);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameData.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (void 0 == connectInfo[isReadyUid] || 0 == connectInfo[isReadyUid]) {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          }
        }
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      onGameTurnHandler: function onGameTurnHandler(data) {
        this.scheduleOnce(this.showTurnEffect, .1);
      },
      showTurnEffect: function showTurnEffect() {
        var turnPlayer = profileHuaDian.getTurnByUid();
        this.gotoShowTurnEffect(turnPlayer);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var disNode = cc.find("liuguang", headerNode);
          disNode.active = headerNode.getComponent("playerTemplate").uid == uid;
        }
      },
      setRoomNum: function setRoomNum() {
        cc.log("~~~~~~~~~~~设置房间号~~~~~~~~~~~~~");
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        if (inCD(2e3)) return;
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "哈尔滨麻将 房间号:" + GameData.room.id;
        4 == GameData.room.opts.costType && (title = "哈尔滨麻将 (代开)房间号:" + GameData.room.id);
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var inviteStr = getRuleStrCC(GameData.room.opts);
        GameData.room.opts.joinermax && (inviteStr += "," + GameData.joiners.length + "等" + (GameData.room.opts.joinermax - GameData.joiners.length));
        var str2 = ",请您快速加入对局.";
        var des = str1 + inviteStr + str2;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("哈尔滨麻将", "我在哈尔滨麻将等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("哈尔滨麻将", "我在哈尔滨麻将等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        if (inCD(2e3)) return;
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "哈尔滨麻将,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        GameData.room.status == gameDefine.RoomState.READY ? this.readyNode.active = true : this.readyNode.active = false;
        this.showPlayers();
      },
      onGamePiaoHandler: function onGamePiaoHandler() {
        this.readyNode.active = false;
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomWait_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82ef9BvfEBFzpwpOyVXPYuJ", "roomWait_huadian");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        quanNode: cc.Node,
        juNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.RuleBtnBool = false;
        this.isReconnect = false;
        this.showPlayers(this);
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("initCards", this, this.showPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("initZhuangInfo", this, this.showPlayers);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("onNotDiscard", this, this.onNotDiscardHandler);
        registEvent("onGameStart", this, this.onGameStartHandler);
        registEvent("onStarPiao", this, this.onGamePiaoHandler);
        registEvent("onGameTurn", this, this.onGameTurnHandler);
        registEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        registEvent("onMahjongRunEnd", this, this.onGameScoreHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("onHuaDianMahjongReconnecet", this, this.onGameStartHandler);
        registEvent("dynChat", this, this.dynChatHandler);
        MjHandler.getInstance().requestReady();
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.addDynAnimation();
      },
      onEnable: function onEnable() {
        cc.log("roomWait enable");
        GameData.room.status >= gameDefine.RoomState.GAMEING ? this.readyNode.active = false : this.readyNode.active = true;
        Object.keys(profileHuaDian.PiaoInfo).length > 0 && this.onGamePiaoHandler();
        GameData.game.turn > 0 && this.onGameTurnHandler();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("initCards", this, this.showPlayers);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("initZhuangInfo", this, this.showPlayers);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("onNotDiscard", this, this.onNotDiscardHandler);
        unregistEvent("onGameStart", this, this.onGameStartHandler);
        unregistEvent("onStarPiao", this, this.onGamePiaoHandler);
        unregistEvent("onGameTurn", this, this.onGameTurnHandler);
        unregistEvent("onMahjongRunEnd", this, this.onGameScoreHandler);
        unregistEvent("onHuaDianMahjongReconnecet", this, this.onGameStartHandler);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onGameScoreHandler: function onGameScoreHandler() {
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = true;
        }, 2);
      },
      onNotDiscardHandler: function onNotDiscardHandler(data) {
        GameData.player.uid == data.detail.uid && GameData.game.turn == GameData.player.uid && true == GameData.room.opts.fengtou && createMoveMessage("请注意风头跟打");
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("playerTemplate");
          var uid = playerTemplate.uid;
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[uid] && playerTemplate.setGold(GameData.players[uid].coin); else {
            var score = void 0 == GameData.allScores[uid] ? 0 : GameData.allScores[uid];
            playerTemplate.setCoin(score, 1);
          }
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 10);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        cc.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!showPlayers");
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        this.quitRoomBtn.active = !isCreator;
        if (GameData.room) {
          var isQuan = 2 == GameData.room.opts.roundType;
          this.quanNode.active = isQuan;
          this.juNode.active = !isQuan;
        }
        GameData.game.turn > 0 && this.onGameTurnHandler();
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        if (!GameData.room.opts) return;
        var playStr = getRuleStrHd(GameData.room.opts);
        console.log("GameData.createRoomOpts:" + GameData.createRoomOpts);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + "contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      },
      showPlayer: function showPlayer(direction, parent) {
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          playerNode.getComponent("playerTemplate").setPlayer(player);
          playerNode.getComponent("playerTemplate").setName(player.name);
          playerNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players.uid && playerNode.getComponent("playerTemplate").setGold(player.coin); else {
            var score = void 0 == RoomHandler.scores[player.uid] ? 0 : RoomHandler.scores[player.uid];
            playerNode.getComponent("playerTemplate").setCoin(score, 1);
            console.log(" score: " + score);
          }
          var zhuang = GameData.game.zhuangUid == player.uid;
          cc.log("showPlayer uid:" + player.uid + " zhuang:" + GameData.game.zhuangUid);
          playerNode.getComponent("playerTemplate").showZhuang(zhuang);
          var creator = GameData.room.creator == player.uid;
          playerNode.getComponent("playerTemplate").showCreator(creator);
          playerNode.getComponent("playerTemplate").setPiaoIconShow(direction);
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          playerNode.setTag(player.uid);
          this.showReadyIcon(direction, true, false);
          var disNode = cc.find("Disconnect", playerNode);
          var online = RoomHandler.isPlayerOnline(player.uid);
          disNode.active = !online;
          cc.find("lost_" + direction, this.lostNode).active = !online;
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("up", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
        GameData.player.uid == data.detail.uid && (this.isReconnect = true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        cc.log("GameData.room.opts.joinermax :" + GameData.room.opts.joinermax + "index:" + index);
        if (2 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.opts.joinermax) {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.opts.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.opts.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameData.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (void 0 == connectInfo[isReadyUid] || 0 == connectInfo[isReadyUid]) {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          }
        }
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      onGameTurnHandler: function onGameTurnHandler(data) {
        this.scheduleOnce(this.showTurnEffect, .01);
      },
      showTurnEffect: function showTurnEffect() {
        var turnPlayer = profileHuaDian.getTurnByUid();
        this.gotoShowTurnEffect(turnPlayer);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var disNode = cc.find("liuguang", headerNode);
          disNode.active = headerNode.getComponent("playerTemplate").uid == uid;
        }
      },
      setRoomNum: function setRoomNum() {
        cc.log("~~~~~~~~~~~设置房间号~~~~~~~~~~~~~");
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        if (inCD(2e3)) return;
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var title = "桦甸麻将 房间号:" + GameData.room.id;
        4 == GameData.room.opts.costType && (title = "桦甸麻将 (代开)房间号:" + GameData.room.id);
        var des = this.getInviteStr();
        wxShareText(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var inviteStr = getRuleStrHd(GameData.room.opts);
        GameData.room.opts.joinermax && (inviteStr += "," + GameData.joiners.length + "等" + (GameData.room.opts.joinermax - GameData.joiners.length));
        var str2 = ",请您快速加入对局.";
        var des = str1 + inviteStr + str2;
        console.log("des = " + des);
        return des;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("桦甸麻将", "我在桦甸麻将等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("桦甸麻将", "我在桦甸麻将等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        if (inCD(2e3)) return;
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id);
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "桦甸麻将,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          wxShareCommond(title + des);
        }
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          WriteLog("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        cc.log("测试");
        GameData.room.status == gameDefine.RoomState.READY ? this.readyNode.active = true : this.readyNode.active = false;
      },
      onGamePiaoHandler: function onGamePiaoHandler() {
        this.readyNode.active = false;
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomWait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "076edPKvU9KtoQjaENzflbk", "roomWait");
    "use strict";
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        roomNum: cc.Label,
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        roomRule: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        wifiNode: cc.Node,
        playintrNode: cc.Node,
        dianchiNode: cc.Node,
        quanNode: cc.Node,
        juNode: cc.Node,
        btnRule: cc.Button,
        lostInfo: [],
        huiercard1: cc.Node,
        huiercard2: cc.Node,
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        this.playIntrSize = "small";
        this.playerSex = 1;
        this.headers = new Array();
        this.showPlayers(this);
        registEvent("onRoomMsg", this, this.showPlayers);
        registEvent("initCards", this, this.showPlayers);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
        registEvent("initZhuangInfo", this, this.showPlayers);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("nativePower", this, this.onNativePowerHandler);
        registEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        registEvent("onNotDiscard", this, this.onNotDiscardHandler);
        registEvent("onGameStart", this, this.onGameStartHandler);
        registEvent("onGameTurn", this, this.onGameTurnHandler);
        registEvent("onRoomReadyInfo", this, this.onRoomReadyInfoHandler);
        registEvent("onGameScore", this, this.onGameScoreHandler);
        registEvent("yunwaUploaded", this, this.onYunwaUploaded);
        registEvent("dynChat", this, this.dynChatHandler);
        MjHandler.getInstance().requestReady();
        this.handTimeLabel();
        this.updateTime();
        this.updataWifi();
        this.electricQuantity();
        this.initHuierUI();
        this.addDynAnimation();
      },
      onEnable: function onEnable() {
        this.readyNode.active = !GameData.game.gameStart;
        GameData.game.onRoomReadyInfo.data && sendEvent("onRoomReadyInfo", GameData.game.onRoomReadyInfo.data);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomMsg", this, this.showPlayers);
        unregistEvent("initCards", this, this.showPlayers);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
        unregistEvent("initZhuangInfo", this, this.showPlayers);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("nativePower", this, this.onNativePowerHandler);
        unregistEvent("onGameAllScore", this, this.onGameAllScoreHandler);
        unregistEvent("onNotDiscard", this, this.onNotDiscardHandler);
        unregistEvent("onGameStart", this, this.onGameStartHandler);
        unregistEvent("onGameTurn", this, this.onGameTurnHandler);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      onGameScoreHandler: function onGameScoreHandler() {
        var self = this;
        this.scheduleOnce(function() {
          self.readyNode.active = !GameData.game.gameStart;
        }, 2);
      },
      onNotDiscardHandler: function onNotDiscardHandler(data) {
        GameData.player.uid == data.detail.uid && GameData.game.turn == GameData.player.uid && true == GameData.room.opts.disfeng && createMoveMessage("请优先打单张风牌");
      },
      onGameAllScoreHandler: function onGameAllScoreHandler(data) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var playerTemplate = headerNode.getComponent("playerTemplate");
          var uid = playerTemplate.uid;
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[uid] && playerTemplate.setGold(GameData.players[uid].coin); else {
            var score = void 0 == GameData.allScores[uid] ? 0 : GameData.allScores[uid];
            playerTemplate.setCoin(score);
          }
        }
      },
      onYunwaUploaded: function onYunwaUploaded(data) {
        var soundurl = data.detail;
        WriteLog("soundurl ：" + soundurl);
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        this.playerSex = GameData.getPlayerSexByUid(data.detail.uid);
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              if ("word" == type) {
                var content = data.detail.msg.data;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = content;
                chatBg.width = 20 + 24 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                var content = data.detail.msg.data.content;
                var chatBg = cc.find("word/bg", chatNode);
                var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
                var contentStr = getShortStr(content, 20);
                chatBg.width = 30 * contentStr.length;
                wordNode.getComponent("HideComponent").show(3);
                chatLabel.string = contentStr;
                soundMngr.instance.playAudioChat(soundKey, this.playerSex);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        cc.find("ready_hand_" + direction, this.readyNode).active = showHand;
        cc.find("readying_" + direction, this.readyNode).active = showReading;
        cc.log("showReadyIcon:" + direction + " " + showHand + " " + showReading);
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
        this.roomRule.getComponent("cc.Label").string = getRoomRuleStr(GameData.room.opts);
        this.showPlayIntroduce(this.playIntrSize);
        this.setRoomNum();
        var isCreator = GameData.room.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
        if (GameData.room.opts) if (GameData.room.opts.roundRule >= 4) {
          this.quanNode.active = true;
          this.juNode.active = false;
        } else {
          this.quanNode.active = false;
          this.juNode.active = true;
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      ruleClick: function ruleClick() {
        if (true == this.playintrNode.active) return;
        soundMngr.instance.playAudioOther("button");
        this.playintrNode.active = true;
        this.playintrNode.runAction(cc.sequence(cc.moveTo(.5, cc.p(30, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(30, 434)), cc.callFunc(this.isRuleBtn, this)));
      },
      isRuleBtn: function isRuleBtn() {
        this.playintrNode.active = false;
      },
      onShowPlayIntrClick: function onShowPlayIntrClick() {
        soundMngr.instance.playAudioOther("button");
        this.playIntrSize = "small" == this.playIntrSize ? "big" : "small";
        this.showPlayIntroduce(this.playIntrSize);
        cc.find("openBtn", this.playintrNode).rotation = "small" == this.playIntrSize ? 0 : 180;
      },
      showPlayIntroduce: function showPlayIntroduce(size) {
        if (!GameData.room.opts) return;
        var playStr = getRoomRuleStr(GameData.room.opts);
        var contentNode = cc.find(size + "/content", this.playintrNode);
        cc.log("size : " + size + "contentNode : " + contentNode);
        var label = contentNode.getComponent(cc.Label);
        label.string = playStr;
      },
      showPlayer: function showPlayer(direction, parent) {
        parent.removeAllChildren();
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = cc.instantiate(this.playerTemplate);
          playerNode.getComponent("playerTemplate").setPlayer(player);
          playerNode.getComponent("playerTemplate").setName(player.name);
          playerNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
          if (gameDefine.currencyType.Currency_Coin == GameData.room.opts.currencyType) GameData.players[player.uid] && playerNode.getComponent("playerTemplate").setGold(GameData.players[player.uid].coin); else {
            var score = void 0 == GameData.allScores[player.uid] ? 0 : GameData.allScores[player.uid];
            playerNode.getComponent("playerTemplate").setCoin(score);
          }
          var zhuang = GameData.game.zhuangUid == player.uid;
          cc.log("showPlayer uid:" + player.uid + " zhuang:" + GameData.game.zhuangUid);
          playerNode.getComponent("playerTemplate").showZhuang(zhuang);
          var num = GameData.game.zhuangNum[player.uid];
          playerNode.getComponent("playerTemplate").showZhuangNum(zhuang, num);
          parent.addChild(playerNode);
          parent.active = true;
          this.headers.push(playerNode);
          this.showReadyIcon(direction, true, false);
          var disNode = cc.find("Disconnect", playerNode);
          disNode.active = 2 == player.status;
          if (2 == player.status) {
            this.showReadyIcon(direction, false, false);
            cc.find("lost_" + direction, this.lostNode).active = true;
          }
        } else {
          parent.active = false;
          this.showReadyIcon(direction, false, false);
        }
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler(data) {
        this.gotoShowReady("down", data.detail);
        this.gotoShowReady("up", data.detail);
        this.gotoShowReady("left", data.detail);
        this.gotoShowReady("right", data.detail);
      },
      gotoShowReady: function gotoShowReady(direction, readyInfo) {
        var player = GameData.getPlayerByPos(direction);
        if (null == player) return;
        var uid = player.uid;
        var ready = true;
        void 0 != readyInfo[uid] && 0 != readyInfo[uid] || (ready = false);
        this.showReadyIcon(direction, ready, !ready);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) if (uid == this.lostInfo[i]) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
        if (2 == player.status) {
          this.showReadyIcon(direction, false, false);
          cc.find("lost_" + direction, this.lostNode).active = true;
        }
      },
      showJoinerLost: function showJoinerLost(data) {
        this.lostInfo.push(data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
        this.showDisconnectInfo(data.detail, true);
        var nameStr = GameData.getPlayerByUid(data.detail.uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了");
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        if (null == this.lostInfo || void 0 == this.lostInfo) return;
        for (var i = 0; i < this.lostInfo.length; i++) data.detail.uid == this.lostInfo[i] && this.lostInfo.splice(i, 1);
        this.showDisconnectInfo(data.detail, false);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var disNode = cc.find("Disconnect", headerNode);
            disNode.active = show;
            return;
          }
        }
      },
      showDisconnectInfo: function showDisconnectInfo(connectInfo, isDisconnect) {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        if (2 == GameData.room.joinermax) {
          index >= 0 && index < GameData.room.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
        } else if (3 == GameData.room.joinermax) {
          index >= 0 && index < GameData.room.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        } else {
          index >= 0 && index < GameData.room.joinermax && this.showDisconnectUI("down", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("right", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("up", index, connectInfo, isDisconnect);
          (++index < GameData.room.joinermax || (index = 0) >= 0) && this.showDisconnectUI("left", index, connectInfo, isDisconnect);
        }
      },
      showDisconnectUI: function showDisconnectUI(direction, index, connectInfo, isDisconnect) {
        if (!GameData.joiners[index]) return;
        if (GameData.joiners[index].uid != connectInfo.uid) return;
        if (isDisconnect) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else if (GameData.game.gameStart) {
          cc.find("ready_hand_" + direction, this.readyNode).active = false;
          cc.find("readying_" + direction, this.readyNode).active = false;
        } else {
          var isReadyUid = GameData.joiners[index].uid;
          if (void 0 == connectInfo[isReadyUid] || 0 == connectInfo[isReadyUid]) {
            cc.find("ready_hand_" + direction, this.readyNode).active = false;
            cc.find("readying_" + direction, this.readyNode).active = true;
          } else {
            cc.find("ready_hand_" + direction, this.readyNode).active = true;
            cc.find("readying_" + direction, this.readyNode).active = false;
          }
        }
        cc.find("lost_" + direction, this.lostNode).active = isDisconnect;
      },
      onGameTurnHandler: function onGameTurnHandler(data) {
        this.scheduleOnce(this.showTurnEffect, .1);
      },
      showTurnEffect: function showTurnEffect() {
        this.gotoShowTurnEffect(GameData.game.turn);
      },
      gotoShowTurnEffect: function gotoShowTurnEffect(uid) {
        if (null == this.headers) {
          cc.log("this.headers null");
          return;
        }
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          var disNode = cc.find("liuguang", headerNode);
          disNode.active = headerNode.getComponent("playerTemplate").uid == uid;
        }
      },
      setRoomNum: function setRoomNum() {
        var startStr = "";
        GameData.room.id >= 1e5 ? this.roomNum.string = startStr + GameData.room.id : GameData.room.id >= 1e4 ? this.roomNum.string = startStr + "0" + GameData.room.id : GameData.room.id >= 1e3 ? this.roomNum.string = startStr + "00" + GameData.room.id : GameData.room.id >= 100 ? this.roomNum.string = startStr + "000" + GameData.room.id : GameData.room.id >= 10 ? this.roomNum.string = startStr + "0000" + GameData.room.id : GameData.room.id >= 1 ? this.roomNum.string = startStr + "00000" + GameData.room.id : this.roomNum.string = startStr + "000000";
      },
      backBtnClicked: function backBtnClicked() {
        soundMngr.instance.playAudioOther("button");
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        soundMngr.instance.playAudioOther("button");
        var title = "天津攒局麻将 房间号:" + GameData.room.id;
        4 == GameData.room.opts.costType && (title = "天津攒局麻将 (代开)房间号:" + GameData.room.id);
        var des = this.getInviteStr();
        wxShareWeb(title, des);
      },
      getInviteStr: function getInviteStr() {
        var gameTypeStr = "";
        var limitStr = "";
        var str1 = "玩法:";
        if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          gameTypeStr = "金币场 ";
          var serverConfig = configMgr.getServerConfig();
          if (serverConfig && serverConfig.roomCoin) {
            var spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Mj_Tianjin];
            if (spendData) {
              var index = GameData.room.opts.roundRule - 1;
              if (spendData[index]) {
                var cost = spendData[index].enter;
                var final = cost[GameData.room.opts.joinermax];
                final && (limitStr = "进入条件：" + final[GameData.room.opts.scorelv]);
              }
            }
          }
        }
        var playStr = getRoomRuleStr(GameData.room.opts);
        var str2 = ",请您快速加入对局.";
        var des = gameTypeStr + limitStr + str1 + playStr + str2;
        return des;
      },
      onShareResult: function onShareResult() {
        soundMngr.instance.playAudioOther("button");
        wxShareTimeline("天津攒局麻将", "还等嘛!我在天津攒局麻将等你!");
      },
      onShareFriend: function onShareFriend() {
        soundMngr.instance.playAudioOther("button");
        wxShareWeb("天津攒局麻将", "还等嘛!我在天津攒局麻将等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        soundMngr.instance.playAudioOther("button");
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          RoomHandler.deleteRoom(GameData.room.id, "close");
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        soundMngr.instance.playAudioOther("button");
        GameData.room.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(GameData.room.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        GameData.player.roomid = void 0;
        GameData.room.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        soundMngr.instance.playAudioOther("button");
        var roomId = GameData.room.id;
        if (roomId > 0) {
          var title = "天津攒局麻将,房间号:" + GameData.room.id + ",";
          var des = this.getInviteStr();
          WriteLog("复制内容：" + title + des);
          wxShareCommond(title + des);
        }
      },
      electricQuantity: function electricQuantity() {
        try {
          cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "electricQuantity", "()V") : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "electricQuantity");
          this.schedule(this.electricQuantity, 60);
        } catch (e) {
          jsclient.native.HelloOC("electricQuantity throw: " + JSON.stringify(e));
        }
      },
      onNativePowerHandler: function onNativePowerHandler(percent) {
        var node = this.dianchiNode.getChildByName("dianchi2");
        node.scaleX = percent.detail / 100;
      },
      initHuierUI: function initHuierUI() {
        var huierBg = cc.find("huier_bg", this.huiercard2.parent);
        if (1 == GameData.room.opts.huierModel) {
          huierBg.width = 37;
          this.huiercard2.active = false;
          cc.find("huier_icon2", this.huiercard2.parent).active = false;
        } else {
          huierBg.width = 74;
          this.huiercard2.active = true;
          cc.find("huier_icon2", this.huiercard2.parent).active = true;
        }
      },
      updataWifi: function updataWifi() {
        this.callBackForWifiUI();
        this.schedule(this.callBackForWifiUI, 5);
      },
      callBackForWifiUI: function callBackForWifiUI() {
        var ms = GameNet.getInstance().getPingPong() / 1e3;
        ms < .3 ? this.showWifi(3) : ms < .6 ? this.showWifi(2) : ms < 1 ? this.showWifi(1) : this.showWifi(0);
      },
      showWifi: function showWifi(index) {
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      },
      updateTime: function updateTime() {
        this.schedule(this.handTimeLabel, 1);
      },
      handTimeLabel: function handTimeLabel() {
        var da = new Date();
        var h = da.getHours() + "";
        var m = da.getMinutes() + "";
        h = 1 == h.length ? "0" + h : h;
        m = 1 == m.length ? "0" + m : m;
        this.timeLabel.string = h + ":" + m;
      },
      onGameStartHandler: function onGameStartHandler(data) {
        this.readyNode.active = !GameData.game.gameStart;
      },
      hasName: function hasName(name, nameArry) {
        for (var i = 0; i < nameArry.length; i++) {
          var toName = nameArry[i];
          if (toName == name) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  roomZhuang_huadian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50476K+sUlCy50AuvkfjEld", "roomZhuang_huadian");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_zhuang: cc.Node,
        title_zz: cc.Sprite,
        title_lz: cc.Sprite,
        button_zz: cc.Button,
        button_la: cc.Button,
        button_cancel: cc.Button,
        button_la_1: cc.Button,
        button_la_2: cc.Button,
        button_cancel_2: cc.Button,
        waiting_text: cc.Sprite,
        headerNode: cc.Node,
        infoLabel: cc.Label
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.showPlayers);
        registEvent("onZhuang", this, this.onZhuangHandler);
        registEvent("onSelectZhuang", this, this.showZuoZhuang);
        registEvent("onSelectLazhuang", this, this.showLaZhuang);
        registEvent("onSelectZhuangAgain", this, this.showZhuangAgain);
        registEvent("onSelectLazhuangAgain", this, this.showLaZhuangAgain);
        registEvent("initZhuangInfo", this, this.close);
        registEvent("onSelectZhuangInfo", this, this.onSelectZhuangInfo);
        registEvent("initCards", this, this.onCloseZhuang);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        this.initHeaderUI();
      },
      onEnable: function onEnable() {
        null != GameData.joiners && this.showPlayers();
        console.log("sendEventLater");
        GameData.game.onSelectZhuang.data && sendEvent("onSelectZhuang", GameData.game.onSelectZhuang.data);
        GameData.game.onSelectLazhuang.data && sendEvent("onSelectLazhuang", GameData.game.onSelectLazhuang.data);
        GameData.game.onSelectZhuangInfo.data && sendEvent("onSelectZhuangInfo", GameData.game.onSelectZhuangInfo.data);
        GameData.game.onZhuangInfo.data && sendEvent("onZhuang", GameData.game.onZhuangInfo.data);
        GameData.game.onSelectZhuangAgain.data && sendEvent("onSelectZhuangAgain", GameData.game.onSelectZhuangAgain.data);
        GameData.game.initcards && this.onCloseZhuang();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showPlayers);
        unregistEvent("onZhuang", this, this.onZhuangHandler);
        unregistEvent("onSelectZhuang", this, this.showZuoZhuang);
        unregistEvent("onSelectLazhuang", this, this.showLaZhuang);
        unregistEvent("onSelectZhuangAgain", this, this.showZhuangAgain);
        unregistEvent("initZhuangInfo", this, this.close);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.opts.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 230 * (i + 1);
          this.showHeaderZhuang(index, false);
          this.hideHeaderButtom(index);
        }
      },
      onCloseZhuang: function onCloseZhuang() {
        this.close();
      },
      close: function close() {
        this.layer_zhuang.active = false;
        this.waiting_text.node.active = false;
      },
      showPlayers: function showPlayers() {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            console.log("GameData.game.zhuangUid == joiner.uid", GameData.game.zhuangUid, joiner.uid);
            this.showHeaderZhuang(index, GameData.game.zhuangUid == joiner.uid);
          }
          this.hideHeaderButtom(index);
        }
      },
      _show: function _show(zhuang) {
        cc.log("GameData.room.opts.lazhuang == ", GameData.room.opts.lazhuang);
        if (1 == GameData.room.opts.lazhuang) {
          this.button_zz.node.active = true;
          this.button_la.node.active = true;
          this.button_cancel.node.active = true;
          this.button_la_1.node.active = false;
          this.button_la_2.node.active = false;
          this.button_cancel_2.node.active = false;
          this.button_zz.node.active = zhuang;
          this.button_la.node.active = !zhuang;
        } else {
          cc.log("GameData.room.opts.lazhuang ==2 ", GameData.room.opts.lazhuang);
          this.button_zz.node.active = false;
          this.button_la.node.active = false;
          this.button_cancel.node.active = false;
          this.button_la_1.node.active = true;
          this.button_la_2.node.active = true;
          this.button_cancel_2.node.active = true;
          this.button_la_1.node.active = !zhuang;
          this.button_la_2.node.active = !zhuang;
          this.button_cancel_2.node.active = !zhuang;
        }
        this.layer_zhuang.active = true;
        this.waiting_text.node.active = false;
      },
      onSelectZhuangInfo: function onSelectZhuangInfo(data) {
        cc.log("data.detail==============", data.detail);
        var zhuangid = data.detail.zhuangUid;
        var selectPlayerData = data.detail.data;
        cc.log(JSON.stringify(selectPlayerData));
        this.showPlayers();
        this._show(zhuangid == GameData.player.uid);
        var hasZuozhuang = false;
        var needTizhuang = true;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var num = 0;
            num = void 0 != selectPlayerData[uid] ? selectPlayerData[uid] : -1;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            this.showHeaderZhuang(index, zhuangid == joiner.uid);
            console.log("num=================", num);
            if (num > 0) if (zhuangid == uid && 1 == GameData.room.opts.lazhuang) {
              hasZuozhuang = true;
              this.showHeaderButtom(index, "zuo" + num);
            } else 1 == num ? this.showHeaderButtom(index, "la") : 2 == num && this.showHeaderButtom(index, "la2"); else if (0 == num) this.showHeaderButtom(index, "bula"); else {
              needTizhuang = false;
              this.hideHeaderButtom(index);
            }
          }
        }
        if (true == needTizhuang) {
          if (GameData.player.uid == zhuangid) {
            this.enableButton(true);
            this.showInfo("您是否选择踢庄？");
          } else {
            this.enableButton(false);
            this.showInfo("请等待庄家踢庄...");
          }
          return;
        }
        if (false == hasZuozhuang) {
          if (1 == GameData.room.opts.lazhuang) if (GameData.player.uid == zhuangid) {
            this.enableButton(true);
            this.showInfo("您是否选择坐庄？");
          } else {
            this.enableButton(false);
            this.showInfo("请等待庄家坐庄...");
          } else if (2 == GameData.room.opts.lazhuang) {
            this.enableButton(true);
            this.showInfo("请等待玩家拉庄...");
          }
        } else if (void 0 == selectPlayerData[GameData.player.uid]) {
          console.log("GameData.player.uid ,,,zhuangid", GameData.player.uid, zhuangid);
          this.enableButton(true);
          GameData.player.uid != zhuangid && this.showInfo("您是否选择拉庄？");
        } else {
          this.enableButton(false);
          GameData.player.uid == zhuangid ? this.showInfo("请等待闲家拉庄...") : hasZuozhuang ? this.showInfo("请等待闲家拉庄...") : this.showInfo("请等待庄家坐庄...");
        }
        if (2 == GameData.room.opts.lazhuang) {
          var hasSelect = false;
          for (var uid in selectPlayerData) {
            uid == GameData.player.uid && (hasSelect = true);
            console.log("uid  ,GameData.player.uid , hasSelect ", uid, GameData.player.uid, hasSelect);
          }
          this.enableButton(!hasSelect);
        }
      },
      onZhuangHandler: function onZhuangHandler(data) {
        var uid = data.detail.uid;
        var num = data.detail.num;
        console.log("=========================", data.detail);
        var index = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            index = i + 1;
            break;
          }
        }
        if (num > 0) if (GameData.game.zhuangUid == uid) {
          this.showHeaderButtom(index, "zuo" + num);
          uid == GameData.player.uid && this.showInfo("请等待玩家拉庄...");
        } else 1 == num ? this.showHeaderButtom(index, "la") : 2 == num && this.showHeaderButtom(index, "la2"); else this.showHeaderButtom(index, "bula");
      },
      showZuoZhuang: function showZuoZhuang(data) {
        this.showPlayers();
        if (1 == GameData.room.opts.lazhuang) if (GameData.game.zhuangUid == GameData.player.uid) {
          this.enableButton(true);
          this._show(true);
          this.showInfo("您是否选择坐庄？");
        } else {
          this._show(false);
          this.enableButton(false);
          this.showInfo("请等待庄家坐庄...");
        } else if (2 == GameData.room.opts.lazhuang) if (GameData.game.zhuangUid == GameData.player.uid) {
          this.enableButton(true);
          this._show(true);
          this.showInfo("您是否选择拉庄？");
        } else {
          this._show(true);
          this.enableButton(false);
          this.showInfo("请等待玩家拉庄...");
        }
      },
      showLaZhuang: function showLaZhuang(data) {
        cc.log("GameData.room.opts.lazhuang--------------", GameData.room.opts.lazhuang);
        if (1 == GameData.room.opts.lazhuang) if (GameData.game.zhuangUid != GameData.player.uid) {
          this.enableButton(true);
          this._show(false);
          this.showInfo("您是否选择拉庄？");
        } else {
          this._show(true);
          this.enableButton(false);
          this.showInfo("请等待玩家拉庄...");
        } else if (2 == GameData.room.opts.lazhuang) {
          if (void 0 == data.detail.uid) return;
          if (GameData.game.zhuangUid != GameData.player.uid) {
            this.enableButton(true);
            this._show(false);
            this.showInfo("您是否选择拉庄？");
          } else {
            this._show(true);
            this.enableButton(false);
            this.showInfo("请等待玩家拉庄...");
          }
        }
        this.showPlayers();
      },
      showLaZhuangAgain: function showLaZhuangAgain(data) {
        cc.log("showLaZhuangAgain  data.detail.uid:" + data.detail.uid + "  data.uid:" + data.uid + "  zhuangUid:" + GameData.game.zhuangUid);
        if (void 0 == data.detail.uid) return;
        if (GameData.game.zhuangUid == GameData.player.uid) return;
        this.enableButton(true);
        this._show(false);
        this.showInfo("您是否选择再次拉庄？");
      },
      showZhuangAgain: function showZhuangAgain(data) {
        if (GameData.game.zhuangUid == GameData.player.uid) {
          this.enableButton(true);
          this._show(true);
          this.showInfo("您是否选择踢庄？");
        } else this.showInfo("请等待庄家踢庄...");
      },
      showWaitText: function showWaitText(status) {
        if (!this.layer_zhuang.active) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/table/zhuang/waitzhuang" + status + ".png"));
          this.waiting_text.spriteFrame = new cc.SpriteFrame(texture);
          this.waiting_text.node.active = true;
        }
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl || headimgurl.length <= 0) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/default_headpic", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        cc.log("nameStr:", nameStr);
        if (!nameNode) return;
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showHeaderZhuang: function showHeaderZhuang(index, show) {
        var zhuangNode = cc.find("header_" + index + "/zhuangbiaoshi", this.headerNode.parent);
        if (!zhuangNode) return;
        zhuangNode.active = show;
      },
      hideHeaderButtom: function hideHeaderButtom(index) {
        var zuoNode = cc.find("header_" + index + "/zuo1", this.headerNode.parent);
        if (!zuoNode) return;
        zuoNode.active = false;
      },
      showHeaderButtom: function showHeaderButtom(index, pngName) {
        cc.log("pngName==========", pngName);
        var zuoNode = cc.find("header_" + index + "/zuo1", this.headerNode.parent);
        if (!zuoNode) return;
        if (void 0 == pngName || "" == pngName || null == pngName) {
          zuoNode.active = false;
          return;
        }
        zuoNode.active = true;
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + pngName + ".png"));
        zuoNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showInfo: function showInfo(content) {
        this.infoLabel.string = content;
      },
      selectZ: function selectZ(eve, data) {
        cc.log("data= =====", data);
        MjHandler.getInstance().requestZhuang(data, function(res) {});
        this.enableButton(false);
      },
      cancel: function cancel() {
        MjHandler.getInstance().requestZhuang(0, function(res) {});
        this.enableButton(false);
      },
      enableButton: function enableButton(v) {
        this.button_la.interactable = v;
        this.button_zz.interactable = v;
        this.button_cancel.interactable = v;
        this.button_la_1.interactable = v;
        this.button_la_2.interactable = v;
        this.button_cancel_2.interactable = v;
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          console.log("headerNode.uid and show", headerNode.uid, show);
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/tipLabel", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  roomZhuang: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40e0f7bhBdDT6WFvPaUVwoc", "roomZhuang");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        layer_zhuang: cc.Node,
        title_zz: cc.Sprite,
        button_zz: cc.Button,
        button_la: cc.Button,
        button_cancel: cc.Button,
        button_la_1: cc.Button,
        button_la_2: cc.Button,
        button_cancel_2: cc.Button,
        waiting_text: cc.Sprite,
        headerNode: cc.Node,
        infoLabel: cc.Label
      },
      onLoad: function onLoad() {
        registEvent("onRoomMsg", this, this.showPlayers);
        registEvent("onZhuang", this, this.onZhuangHandler);
        registEvent("onSelectZhuang", this, this.showZuoZhuang);
        registEvent("onSelectLazhuang", this, this.showLaZhuang);
        registEvent("onSelectZhuangAgain", this, this.showZhuangAgain);
        registEvent("onSelectLazhuangAgain", this, this.showLaZhuangAgain);
        registEvent("initZhuangInfo", this, this.close);
        registEvent("onSelectZhuangInfo", this, this.onSelectZhuangInfo);
        registEvent("initCards", this, this.onCloseZhuang);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        this.initHeaderUI();
      },
      onEnable: function onEnable() {
        null != GameData.joiners && this.showPlayers();
        console.log("sendEventLater");
        GameData.game.onSelectZhuang.data && sendEvent("onSelectZhuang", GameData.game.onSelectZhuang.data);
        GameData.game.onSelectLazhuang.data && sendEvent("onSelectLazhuang", GameData.game.onSelectLazhuang.data);
        GameData.game.onSelectZhuangInfo.data && sendEvent("onSelectZhuangInfo", GameData.game.onSelectZhuangInfo.data);
        GameData.game.onZhuangInfo.data && sendEvent("onZhuang", GameData.game.onZhuangInfo.data);
        GameData.game.onSelectZhuangAgain.data && sendEvent("onSelectZhuangAgain", GameData.game.onSelectZhuangAgain.data);
        GameData.game.initcards && this.onCloseZhuang();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomMsg", this, this.showPlayers);
        unregistEvent("onZhuang", this, this.onZhuangHandler);
        unregistEvent("onSelectZhuang", this, this.showZuoZhuang);
        unregistEvent("onSelectLazhuang", this, this.showLaZhuang);
        unregistEvent("onSelectZhuangAgain", this, this.showZhuangAgain);
        unregistEvent("initZhuangInfo", this, this.close);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
      },
      initHeaderUI: function initHeaderUI() {
        for (var i = 0; i < GameData.room.joinermax - 1; i++) {
          var index = i + 1;
          var hNode = cc.instantiate(this.headerNode);
          hNode.parent = this.headerNode.parent;
          hNode.name = "header_" + (i + 2);
          hNode.x = this.headerNode.x + 230 * (i + 1);
          this.showHeaderZhuang(index, false);
          this.hideHeaderButtom(index);
        }
      },
      onCloseZhuang: function onCloseZhuang() {
        this.close();
      },
      close: function close() {
        this.layer_zhuang.active = false;
        this.waiting_text.node.active = false;
      },
      showPlayers: function showPlayers() {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            console.log("GameData.game.zhuangUid == joiner.uid", GameData.game.zhuangUid, joiner.uid);
            this.showHeaderZhuang(index, GameData.game.zhuangUid == joiner.uid);
          }
          this.connectId || this.hideHeaderButtom(index);
        }
        this.connectId && (this.connectId = void 0);
      },
      _show: function _show(zhuang) {
        cc.log("GameData.room.lazhuang == ", GameData.room.opts.lazhuang);
        if (1 == GameData.room.opts.lazhuang) {
          this.button_zz.node.active = true;
          this.button_la.node.active = true;
          this.button_cancel.node.active = true;
          this.button_la_1.node.active = false;
          this.button_cancel_2.node.active = false;
          this.button_zz.node.active = zhuang;
          this.button_la.node.active = !zhuang;
        } else {
          cc.log("GameData.room.lazhuang ==2 ", GameData.room.opts.lazhuang);
          this.button_zz.node.active = false;
          this.button_la.node.active = false;
          this.button_cancel.node.active = false;
          this.button_la_1.node.active = true;
          this.button_cancel_2.node.active = true;
          this.button_la_1.node.active = !zhuang;
          this.button_cancel_2.node.active = !zhuang;
        }
        this.layer_zhuang.active = true;
        this.waiting_text.node.active = false;
      },
      onSelectZhuangInfo: function onSelectZhuangInfo(data) {
        cc.log("data.detail==============", data.detail);
        var zhuangid = data.detail.zhuangUid;
        var selectPlayerData = data.detail.data;
        cc.log(JSON.stringify(selectPlayerData));
        this.showPlayers();
        this._show(zhuangid == GameData.player.uid);
        var hasZuozhuang = false;
        var needTizhuang = true;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var index = i + 1;
          var joiner = GameData.joiners[i];
          if (null != joiner) {
            var uid = joiner.uid;
            var num = 0;
            num = void 0 != selectPlayerData[uid] ? selectPlayerData[uid] : -1;
            var headimgurl = joiner.headimgurl;
            this.showHeaderIcon(index, headimgurl);
            this.showHeaderName(index, joiner.name);
            this.showHeaderZhuang(index, zhuangid == joiner.uid);
            console.log("num=================", num);
            if (num > 0) if (zhuangid == uid && 1 == GameData.room.opts.lazhuang) {
              hasZuozhuang = true;
              this.showHeaderButtom(index, "zuo" + num);
            } else 1 == num ? this.showHeaderButtom(index, "la1") : 2 == num && this.showHeaderButtom(index, "la2"); else if (0 == num) {
              var zuoNode = cc.find("header_" + index + "/zuo1", this.headerNode.parent);
              false == zuoNode.active && this.showHeaderButtom(index, "bulazhuang");
            } else {
              needTizhuang = false;
              this.hideHeaderButtom(index);
            }
          }
        }
        if (true == needTizhuang) {
          if (GameData.player.uid == zhuangid) {
            this.enableButton(true);
            this.showInfo("您是否选择踢庄？");
          } else {
            this.enableButton(false);
            this.showInfo("请等待庄家踢庄...");
          }
          return;
        }
        if (false == hasZuozhuang) {
          if (1 == GameData.room.opts.lazhuang) if (GameData.player.uid == zhuangid) {
            this.enableButton(true);
            this.showInfo("您是否选择坐庄？");
          } else {
            this.enableButton(false);
            this.showInfo("请等待庄家坐庄...");
          } else if (2 == GameData.room.opts.lazhuang) {
            this.enableButton(true);
            this.showInfo("请等待玩家拉庄...");
          }
        } else if (void 0 == selectPlayerData[GameData.player.uid]) {
          console.log("GameData.player.uid ,,,zhuangid", GameData.player.uid, zhuangid);
          this.enableButton(true);
          GameData.player.uid != zhuangid && this.showInfo("您是否选择拉庄？");
        } else {
          this.enableButton(false);
          GameData.player.uid == zhuangid ? this.showInfo("请等待闲家拉庄...") : hasZuozhuang ? this.showInfo("请等待闲家拉庄...") : this.showInfo("请等待庄家坐庄...");
        }
        if (2 == GameData.room.opts.lazhuang) {
          var hasSelect = false;
          for (var uid in selectPlayerData) {
            uid == GameData.player.uid && (hasSelect = true);
            console.log("uid  ,GameData.player.uid , hasSelect ", uid, GameData.player.uid, hasSelect);
          }
          this.enableButton(!hasSelect);
        }
      },
      onZhuangHandler: function onZhuangHandler(data) {
        var uid = data.detail.uid;
        var num = data.detail.num;
        console.log("=========================", data.detail);
        var index = 0;
        for (var i = 0; i < GameData.joiners.length; i++) {
          var joiner = GameData.joiners[i];
          if (joiner && joiner.uid == uid) {
            index = i + 1;
            break;
          }
        }
        if (num > 0) if (GameData.game.zhuangUid == uid) {
          this.showHeaderButtom(index, "zuo" + num);
          uid == GameData.player.uid && this.showInfo("请等待玩家拉庄...");
        } else 1 == num ? this.showHeaderButtom(index, "la1") : 2 == num && this.showHeaderButtom(index, "la2"); else {
          var zuoNode = cc.find("header_" + index + "/zuo1", this.headerNode.parent);
          false == zuoNode.active && this.showHeaderButtom(index, "bulazhuang");
        }
      },
      showZuoZhuang: function showZuoZhuang(data) {
        this.showPlayers();
        if (1 == GameData.room.opts.lazhuang) if (GameData.game.zhuangUid == GameData.player.uid) {
          this.enableButton(true);
          this._show(true);
          this.showInfo("您是否选择坐庄？");
        } else {
          this._show(false);
          this.enableButton(false);
          this.showInfo("请等待庄家坐庄...");
        } else if (2 == GameData.room.opts.lazhuang) if (GameData.game.zhuangUid == GameData.player.uid) {
          this.enableButton(true);
          this._show(true);
          this.showInfo("您是否选择拉庄？");
        } else {
          this._show(true);
          this.enableButton(false);
          this.showInfo("请等待玩家拉庄...");
        }
      },
      showLaZhuang: function showLaZhuang(data) {
        cc.log("GameData.room.lazhuang--------------", GameData.room.opts.lazhuang);
        if (1 == GameData.room.opts.lazhuang) if (GameData.game.zhuangUid != GameData.player.uid) {
          this.enableButton(true);
          this._show(false);
          this.showInfo("您是否选择拉庄？");
        } else {
          this._show(true);
          this.enableButton(false);
          this.showInfo("请等待玩家拉庄...");
        } else if (2 == GameData.room.opts.lazhuang) {
          if (void 0 == data.detail.uid) return;
          if (GameData.game.zhuangUid != GameData.player.uid) {
            this.enableButton(true);
            this._show(false);
            this.showInfo("您是否选择拉庄？");
          } else {
            this._show(true);
            this.enableButton(false);
            this.showInfo("请等待玩家拉庄...");
          }
        }
        this.showPlayers();
      },
      showLaZhuangAgain: function showLaZhuangAgain(data) {
        cc.log("showLaZhuangAgain  data.detail.uid:" + data.detail.uid + "  data.uid:" + data.uid + "  zhuangUid:" + GameData.game.zhuangUid);
        if (void 0 == data.detail.uid) return;
        if (GameData.game.zhuangUid == GameData.player.uid) return;
        this.enableButton(true);
        this._show(false);
        this.showInfo("您是否选择再次拉庄？");
      },
      showZhuangAgain: function showZhuangAgain(data) {
        if (GameData.game.zhuangUid == GameData.player.uid) {
          this.enableButton(true);
          this._show(true);
          this.showInfo("您是否选择踢庄？");
        } else this.showInfo("请等待庄家踢庄...");
      },
      showWaitText: function showWaitText(status) {
        if (!this.layer_zhuang.active) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/table/zhuang/waitzhuang" + status + ".png"));
          this.waiting_text.spriteFrame = new cc.SpriteFrame(texture);
          this.waiting_text.node.active = true;
        }
      },
      showHeaderIcon: function showHeaderIcon(index, headimgurl) {
        if (void 0 == headimgurl || "" == headimgurl) return;
        var self = this;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          if (!error && texture) {
            var iconNode = cc.find("header_" + index + "/default_headpic", self.headerNode.parent);
            iconNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
        });
      },
      showHeaderName: function showHeaderName(index, nameStr) {
        var nameNode = cc.find("header_" + index + "/nameLabel", this.headerNode.parent);
        cc.log("nameStr:", nameStr);
        if (!nameNode) return;
        nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
      },
      showHeaderZhuang: function showHeaderZhuang(index, show) {
        var zhuangNode = cc.find("header_" + index + "/zhuangbiaoshi", this.headerNode.parent);
        zhuangNode.active = show;
      },
      hideHeaderButtom: function hideHeaderButtom(index) {
        var zuoNode = cc.find("header_" + index + "/zuo1", this.headerNode.parent);
        zuoNode.active = false;
      },
      showHeaderButtom: function showHeaderButtom(index, pngName) {
        cc.log("pngName==========", pngName);
        var zuoNode = cc.find("header_" + index + "/zuo1", this.headerNode.parent);
        if (void 0 == pngName || "" == pngName || null == pngName) {
          zuoNode.active = false;
          return;
        }
        zuoNode.active = true;
        var texture = cc.textureCache.addImage(cc.url.raw("resources/newui/" + pngName + ".png"));
        zuoNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      },
      showInfo: function showInfo(content) {
        this.infoLabel.string = content;
      },
      selectZ: function selectZ(eve, data) {
        soundMngr.instance.playAudioOther("button");
        cc.log("data= =====", data);
        MjHandler.getInstance().requestZhuang(data, function(res) {});
        this.enableButton(false);
      },
      cancel: function cancel() {
        soundMngr.instance.playAudioOther("button");
        MjHandler.getInstance().requestZhuang(0, function(res) {});
        this.enableButton(false);
      },
      enableButton: function enableButton(v) {
        this.button_la.interactable = v;
        this.button_zz.interactable = v;
        this.button_cancel.interactable = v;
        this.button_la_1.interactable = v;
        this.button_cancel_2.interactable = v;
      },
      showJoinerLost: function showJoinerLost(data) {
        cc.log("disconnect uid : " + data.detail.uid);
        this.showHeaderDisconnect(data.detail.uid, true);
      },
      showJoinerConnect: function showJoinerConnect(data) {
        cc.log("connect uid : " + data.detail.uid);
        this.connectId = data.detail.uid;
        this.showHeaderDisconnect(data.detail.uid, false);
      },
      showHeaderDisconnect: function showHeaderDisconnect(uid, show) {
        for (var i = 0; i < GameData.joiners.length; i++) {
          var headerNode = GameData.joiners[i];
          var index = i + 1;
          console.log("headerNode.uid and show", headerNode.uid, show);
          if (headerNode && headerNode.uid == uid) {
            var disNode = cc.find("header_" + index + "/tipLabel", this.headerNode.parent);
            disNode.active = show;
            return;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  roundDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e2ed6hl5NZN6oRDnIWffFia", "roundDetail");
    "use strict";
    var roundDetail = cc.Class({
      extends: cc.Component,
      properties: {
        roundDetailPanel: {
          default: null,
          type: cc.Node
        },
        roundNum: {
          default: null,
          type: cc.Label
        },
        scoreNode: {
          default: null,
          type: cc.Node
        },
        allScore: {
          default: null,
          type: cc.Node
        },
        fonts: {
          default: [],
          type: cc.Font
        },
        id: 0
      },
      onLoad: function onLoad() {},
      setRoundNumString: function setRoundNumString(number) {
        this.roundNum.getComponent("cc.Label").string = number;
      },
      setScoreNodeString: function setScoreNodeString(number) {
        if (number > 0) {
          this.scoreNode.getComponent("cc.Label").font = this.fonts[0];
          this.scoreNode.getComponent("cc.Label").string = "+" + number;
        } else if (number < 0) {
          this.scoreNode.getComponent("cc.Label").font = this.fonts[1];
          this.scoreNode.getComponent("cc.Label").string = number;
        } else {
          this.scoreNode.getComponent("cc.Label").font = this.fonts[2];
          this.scoreNode.getComponent("cc.Label").string = number;
        }
      },
      setAllScoreNodeString: function setAllScoreNodeString(number) {
        if (number > 0) {
          this.allScore.getComponent("cc.Label").font = this.fonts[0];
          this.allScore.getComponent("cc.Label").string = "+" + number;
        } else if (number < 0) {
          this.allScore.getComponent("cc.Label").font = this.fonts[1];
          this.allScore.getComponent("cc.Label").string = number;
        } else {
          this.allScore.getComponent("cc.Label").font = this.fonts[2];
          this.allScore.getComponent("cc.Label").string = number;
        }
      }
    });
    module.exports = roundDetail;
    cc._RF.pop();
  }, {} ],
  ruleHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db053tfOx9EgIT17OUMGdq7", "ruleHandler");
    "use strict";
    var TianjinMj = require("mahjong_tianjin");
    var ShishiMj = require("mahjong_shishi");
    var HuadianMj = require("mahjong_huadian");
    var ChangChunMj = require("mahjong_changchun");
    var HongZhongMj = require("mahjong_hz");
    var gameDefine = require("gameDefine");
    var RuleHandler = cc.Class({
      extends: cc.Component,
      statics: {
        instance: null
      },
      properties: {
        rule: null
      },
      onLoad: function onLoad() {
        cc.game.addPersistRootNode(this.node);
        RuleHandler.instance = this;
      },
      setGameType: function setGameType(type) {
        switch (type) {
         case gameDefine.GameType.Game_Mj_Tianjin:
          this.rule = new TianjinMj();
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          this.rule = new ShishiMj();
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          this.rule = new HuadianMj();
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          this.rule = new HongZhongMj();
          break;

         case gameDefine.GameType.Game_Mj_CC:
         case gameDefine.GameType.Game_Mj_Heb:
          this.rule = new ChangChunMj();
        }
      },
      isHuier: function isHuier(card) {
        return this.rule.isHuier(card);
      },
      canChi: function canChi(uid, card) {
        return this.rule.canChi(uid, card);
      },
      canPeng: function canPeng(uid, card) {
        return this.rule.canPeng(uid, card);
      },
      canAnGang: function canAnGang(uid) {
        return this.rule.canAnGang(uid);
      },
      canBuGang: function canBuGang(uid) {
        return this.rule.canBuGang(uid);
      },
      canMingGang: function canMingGang(uid, card) {
        return this.rule.canMingGang(uid, card);
      },
      canMingGangSelf: function canMingGangSelf() {
        return this.rule.canMingGangSelf();
      },
      canDianPao: function canDianPao(uid, card) {
        return this.rule.canDianPao(uid, card);
      },
      canZimo: function canZimo(handcards, obCard, checkFlag) {
        return this.rule.canZimo(handcards, obCard, checkFlag);
      },
      canTing: function canTing(handcards) {
        return this.rule.canTing(handcards);
      },
      discardTip: function discardTip(handcards) {
        return this.rule.discardTip(handcards);
      },
      getHuType: function getHuType(huCards, handcards, obCard, checkFlag) {
        return this.rule.getHuType(huCards, handcards, obCard, checkFlag);
      },
      calcHuScore: function calcHuScore(type) {
        return this.rule.calcHuScore(type);
      },
      getHuTypeString: function getHuTypeString() {
        return this.rule.getHuTypeString();
      },
      isJinGang: function isJinGang(handcards, deck) {
        return this.rule.isJinGang(handcards, deck);
      },
      getHuTypeArry: function getHuTypeArry(huType) {
        return this.rule.getHuTypeArry(huType);
      },
      checkYoujin: function checkYoujin(discard) {
        return this.rule.checkYoujin(discard);
      },
      calcHuaScore: function calcHuaScore(uid) {
        return this.rule.calcHuaScore(uid);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    mahjong_changchun: "mahjong_changchun",
    mahjong_huadian: "mahjong_huadian",
    mahjong_hz: "mahjong_hz",
    mahjong_shishi: "mahjong_shishi",
    mahjong_tianjin: "mahjong_tianjin"
  } ],
  ruleTipsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15eabQFM3lAlK5PodoOlnR5", "ruleTipsView");
    "use strict";
    var game = require("gameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onEnable: function onEnable() {
        this.showRuleTips();
      },
      showRuleTips: function showRuleTips() {
        var contentNode = cc.find("small/content", this.node);
        if (contentNode) {
          contentNode.getComponent(cc.Label).string = game.getRuleStr();
          var self = this;
          this.node.active = true;
          this.node.stopAllActions();
          this.node.runAction(cc.sequence(cc.moveTo(.5, cc.p(0, 334)), cc.delayTime(10), cc.moveTo(.5, cc.p(0, 434)), cc.callFunc(function() {
            self.node.active = false;
          })));
        }
      }
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig"
  } ],
  ruleView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b1151vGK0xLYLm5K8IbA+kY", "ruleView");
    "use strict";
    var game = require("gameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        roomRule: cc.Label
      },
      onEnable: function onEnable() {
        this.showRoomRule();
      },
      showRoomRule: function showRoomRule() {
        this.roomRule.string = game.getRuleStr();
      }
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig"
  } ],
  scene_mahjong: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6abf0PKGPJPs5yvfYIhkQU/", "scene_mahjong");
    "use strict";
    var game = require("gameConfig");
    var configMgr = require("configMgr");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    var stateMachine = require("stateMachine");
    cc.Class({
      extends: stateMachine,
      properties: {
        debugBtn: cc.Button,
        talkViewNode: cc.Node,
        timeViewNode: cc.Node,
        wifiViewNode: cc.Node,
        powerViewNode: cc.Node,
        roomNumViewNode: cc.Node,
        wildCard1ViewNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.showStateViews);
        registEvent("onRoomDissolve", this, this.onShowDissolve);
        registEvent("onShowView", this, this.onShowView);
        registEvent("onCloseView", this, this.onCloseView);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.showStateViews);
        unregistEvent("onRoomDissolve", this, this.onShowDissolve);
        unregistEvent("onShowView", this, this.onShowView);
        unregistEvent("onCloseView", this, this.onCloseView);
      },
      onEnable: function onEnable() {
        this.viewState = "";
        this.loadViews("base");
        this.showStateViews();
        this.debugBtn.active = configMgr.getSetCardsOpen();
      },
      loadViews: function loadViews(name) {
        if ("" == name) return;
        this.viewState = name;
        var self = this;
        var views = game.getViews(name);
        var parent = cc.director.getScene().getChildByName("Canvas");
        var layer = parent.getChildByTag(name);
        if (null != layer) layer.active = true; else {
          var prefabs = [];
          layer = new cc.Node();
          layer.setTag(name);
          parent.addChild(layer);
          for (var i = 0, len = views.length; i < len; ++i) {
            var prefab = game.getView(views[i]);
            prefab && prefabs.push(prefab);
          }
          cc.loader.loadResArray(prefabs, function(err, res) {
            for (var i = 0, len = res.length; i < len; ++i) {
              var prefab = res[i];
              if (null != prefab) {
                var node = cc.instantiate(prefab);
                var baseNode = self[views[i] + "Node"];
                null != baseNode && (node.position = baseNode.position);
                node.setTag(views[i]);
                layer.addChild(node);
                cc.log("loadView: " + views[i]);
              }
            }
          });
        }
      },
      closeViews: function closeViews(name) {
        if ("" == name) return;
        var parent = cc.director.getScene().getChildByName("Canvas");
        var layer = parent.getChildByTag(name);
        null != layer && (layer.active = false);
      },
      onShowView: function onShowView(data) {
        var tag = data.detail;
        var parent = cc.director.getScene().getChildByName("Canvas");
        var view = parent.getChildByTag(tag);
        if (null != view) view.active = true; else {
          var prefab = game.getView(tag);
          prefab && openPrefabView(prefab, parent, tag);
        }
      },
      onCloseView: function onCloseView(data) {
        var tag = data.detail;
        var parent = cc.director.getScene().getChildByName("Canvas");
        var view = parent.getChildByTag(tag);
        null != view && (view.active = false);
      },
      showStateViews: function showStateViews(data) {
        var state = roomHandler.room.status;
        switch (state) {
         case gameDefine.RoomState.WAIT:
          this.loadViews("wait");
          break;

         case gameDefine.RoomState.GAMEING:
          this.closeViews(this.viewState);
          this.loadViews("game");
          break;

         case gameDefine.RoomState.READY:
          if (data.detail.force || "game" != this.viewState) {
            this.closeViews(this.viewState);
            this.loadViews("ready");
          }
        }
      },
      onShowDissolve: function onShowDissolve(data) {
        sendEvent("onShowView", "dissolveView");
      },
      onSettingClicked: function onSettingClicked(evt) {
        sendEvent("onShowView", "settingView");
      },
      onRuleClicked: function onRuleClicked(evt) {
        sendEvent("onShowView", "ruleTipsView");
      },
      onChatClicked: function onChatClicked(evt) {
        sendEvent("onShowView", "chatView");
      },
      onDebugClicked: function onDebugClicked(evt) {
        sendEvent("onShowView", "debugView");
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameConfig: "gameConfig",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    stateMachine: "stateMachine"
  } ],
  selectGameItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "798bfyfgJZKZZCT5cqeSdC1", "selectGameItem");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var competitionHandler = require("competitionHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        gameName: cc.Label,
        peopleNum: cc.Label,
        rewardNum: cc.Label,
        rewardIcon: cc.Sprite,
        baoMingBtn: cc.Node,
        cancelBtn: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onActivityList", this, this.refreshUI);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onActivityList", this, this.refreshUI);
      },
      initUI: function initUI(gameType, templateId) {
        this.config = configMgr.getServerConfig();
        this.setGameType(templateId);
        this.setGameIcon(gameType);
        this.setGameName(templateId);
        this.setPoepleNum(templateId);
        this.setBaoMingBtn(templateId);
      },
      refreshUI: function refreshUI() {
        this.setPoepleNum(this.gameType);
        this.setBaoMingBtn(this.gameType);
      },
      setGameIcon: function setGameIcon(gameType) {
        var url = this.getGameImgIcon(gameType);
        this.addTextureImg(this.node, url);
      },
      setGameName: function setGameName(templateId) {
        this.gameName.string = this.config["fight"][templateId].name;
      },
      setGameType: function setGameType(templateId) {
        this.gameType = templateId;
      },
      setBaoMingBtn: function setBaoMingBtn(templateId) {
        var isHasFreeTime = GameData.player.freeActivityNum > 0;
        var isHasApply = competitionHandler.isApply(templateId, GameData.player.uid);
        var freeNode = cc.find("free", this.baoMingBtn);
        var costNode = cc.find("cost", this.baoMingBtn);
        freeNode.active = isHasFreeTime;
        costNode.active = !isHasFreeTime;
        this.baoMingBtn.active = !isHasApply;
        this.cancelBtn.active = isHasApply;
        if (isHasFreeTime) {
          var freeLb = cc.find("freeNum", freeNode).getComponent(cc.Label);
          freeLb.string = "免费" + GameData.player.freeActivityNum + "次";
        } else {
          var costIcon = cc.find("costIcon", costNode);
          var costData = this.config["fight"][templateId].signCosts;
          var url = "";
          var costStr = "";
          for (var key in costData) {
            key == gameDefine.currencyType.Currency_Card && (url = "resources/home/replace/fangka.png");
            costStr = costData[key];
          }
          cc.find("costNum", costNode).getComponent(cc.Label).string = "*" + costStr;
          this.addTextureImg(costIcon, url);
        }
      },
      setPoepleNum: function setPoepleNum() {
        var num = competitionHandler.getPeopleNum(this.gameType);
        this.peopleNum.string = num + "/100";
      },
      getGameImgIcon: function getGameImgIcon(gameType) {
        var url = "";
        switch (gameType) {
         case "addBtn":
          url = "resources/home/match/btn-home-add.png";
          break;

         case gameDefine.GameType.Game_Mj_Tianjin:
          url = "resources/home/match/btn-home-tjmj.png";
          break;

         case gameDefine.GameType.Game_Mj_Shishi:
          url = "resources/home/match/btn-home-ssmj.png";
          break;

         case gameDefine.GameType.Game_MJ_HuaDian:
          url = "resources/home/match/btn-home-hdmj.png";
          break;

         case gameDefine.GameType.Game_Mj_HZ:
          url = "resources/home/match/btn-home-hzmj.png";
          break;

         case gameDefine.GameType.Game_Mj_CC:
          url = "resources/home/match/btn-home-ccmj.png";
          break;

         case gameDefine.GameType.Game_Mj_Heb:
          url = "resources/home/match/btn-home-hebmj.png";
          break;

         case gameDefine.GameType.Game_Poker_TianjinDDZ:
         case gameDefine.GameType.Game_Poker_DDZ:
          url = "resources/home/match/doudizhu01.png";
          break;

         case gameDefine.GameType.Game_niu_niu:
          url = "resources/home/match/niuniu01.png";
          break;

         case gameDefine.GameType.Game_Niu_Hundred:
          url = "resources/home/match/home_btn_2.png";
          break;

         case gameDefine.GameType.Game_TDK:
          url = "resources/home/match/tiandaken01.png";
          break;

         case gameDefine.GameType.Game_Poker_13shui:
          url = "resources/home/match/shisanshui01.png";
          break;

         case gameDefine.GameType.Game_Poker_paodekuai:
          url = "resources/home/match/paodekuaianniu01.png";
          break;

         case gameDefine.GameType.Game_Poker_ZJH:
          url = "resources/home/match/btn-home-szp.png";
          break;

         case gameDefine.GameType.Game_Poker_HHDZ:
          url = "resources/home/match/btn-home-hhdz.png";
        }
        return url;
      },
      requestApply: function requestApply() {
        competitionHandler.apply(this.gameType + "");
      },
      requestCancel: function requestCancel() {
        competitionHandler.cancel(this.gameType + "");
      },
      addTextureImg: function addTextureImg(node, url) {
        var texture = cc.textureCache.addImage(cc.url.raw(url));
        node.getComponent(cc.Sprite).spriteFrame = null;
        node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    competitionHandler: "competitionHandler",
    configMgr: "configMgr",
    gameDefine: "gameDefine"
  } ],
  selectclubPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33fc7n5S7pNn7nn+FhO5pjV", "selectclubPanel");
    "use strict";
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        selectCloseBtn: cc.Button,
        joinCloseBtn: cc.Button,
        clubScorllItem: cc.Node
      },
      onLoad: function onLoad() {
        this.registerListener();
        this.initUI();
      },
      onEnable: function onEnable() {},
      registerListener: function registerListener() {
        registEvent("onClubData", this, this.refreshUI);
      },
      initUI: function initUI() {
        var i = 1;
        this.clubScorllItem.getParent().height = Object.keys(GameData.player.club).length * this.clubScorllItem.height;
        for (var key in GameData.player.club) {
          var clubItem = cc.instantiate(this.clubScorllItem);
          clubItem.parent = this.clubScorllItem.parent;
          clubItem.name = "clubItem_" + (i + 1);
          clubItem.setTag(i);
          clubItem.y = this.clubScorllItem.y - this.clubScorllItem.height * i;
          var clubItemName = cc.find("clubItem_" + i + "/clubName", this.clubScorllItem.parent);
          var clubItmeBtn = cc.find("clubItem_" + i + "/selectClubBtn", this.clubScorllItem.parent);
          var clubid = GameData.player.club[key].club_id;
          clubItmeBtn.setTag(clubid);
          clubItmeBtn.on(cc.Node.EventType.TOUCH_END, this.selectClubClick, this);
          clubItemName.getComponent("cc.Label").string = GameData.player.club[key].clubName;
          i++;
        }
        this.clubScorllItem.parent.removeChildByTag(i - 1, true);
      },
      refreshUI: function refreshUI() {
        var i = 1;
        for (var key in GameData.player.club) {
          var clubItem = cc.find("clubItem_" + (i + 1), this.clubScorllItem.parent);
          if (!clubItem) {
            clubItem = cc.instantiate(this.clubScorllItem);
            clubItem.parent = this.clubScorllItem.parent;
            clubItem.name = "clubItem_" + (i + 1);
            clubItem.setTag(i);
            clubItem.y = this.clubScorllItem.y - this.clubScorllItem.height * i;
          }
          var clubItemName = cc.find("clubItem_" + i + "/clubName", this.clubScorllItem.parent);
          var clubItmeBtn = cc.find("clubItem_" + i + "/selectClubBtn", this.clubScorllItem.parent);
          var clubid = GameData.player.club[key].club_id;
          clubItmeBtn.setTag(clubid);
          clubItmeBtn.on(cc.Node.EventType.TOUCH_END, this.selectClubClick, this);
          clubItemName.getComponent("cc.Label").string = GameData.player.club[key].clubName;
          i++;
        }
        this.clubScorllItem.parent.removeChildByTag(i - 1, true);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onClubData", this, this.refreshUI);
      },
      selectClubClick: function selectClubClick(event) {
        soundMngr.instance.playAudioOther("button");
        var clubid = event.target.tag;
        console.log("clubid  " + clubid);
        GameData.playerCurrClubId = clubid;
        GameData.savePlayerCurrClubData();
        sendEvent("refreshUIClubData");
        this.close();
      },
      close: function close() {
        soundMngr.instance.playAudioOther("button");
        closeView("selectclubPanel");
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr"
  } ],
  settingView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "115107nO5lCXpwPV69l5gLv", "settingView");
    "use strict";
    var game = require("gameConfig");
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    var loginHandler = require("loginHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        musicSlider: cc.Slider,
        soundSlider: cc.Slider,
        musicBtn: cc.Node,
        soundBtn: cc.Node,
        musicProgressbar: cc.ProgressBar,
        soundProgressbar: cc.ProgressBar,
        _musicOpen: true,
        _soundOpen: true,
        _LanguageTypeOpen: true,
        byeRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        toggle_tianjin: cc.Toggle,
        toggle_putong: cc.Toggle,
        musicKuang1: cc.Node,
        musicKuang2: cc.Node,
        soundKuang1: cc.Node,
        soundKuang2: cc.Node,
        areaLb: cc.Label
      },
      onEnable: function onEnable() {
        this._LanguageTypeOpen = cc.sys.localStorage.getItem("languageType" + GameData.player.uid) || GameData.language_tianjin;
        cc.log("language_type ==============", cc.sys.localStorage.getItem("languageType" + GameData.player.uid));
        this.musicBtn.getChildByName("guan").active = false;
        this.musicKuang1.active = false;
        this.soundBtn.getChildByName("guan").active = false;
        this.soundKuang1.active = false;
        this.soundSlider.node.on("slide", this.adjustSound, this);
        this.musicSlider.node.on("slide", this.adjustMusic, this);
        this.musicBtn.on(cc.Node.EventType.TOUCH_START, this.musicClick, this);
        this.soundBtn.on(cc.Node.EventType.TOUCH_START, this.soundClick, this);
        this.toggle_tianjin.node.on("toggle", this.selectLanguageTypeClick, this);
        this.toggle_putong.node.on("toggle", this.selectLanguageTypeClick, this);
        var sceneName = cc.director.getScene().name;
        if ("home" != sceneName) if (gameDefine.roomType.Room_Match != GameData.room.opts.roomType) {
          this.byeRoomBtn.active = true;
          this.quitRoomBtn.active = false;
        } else {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = false;
        } else {
          this.byeRoomBtn.active = false;
          this.quitRoomBtn.active = true;
        }
        this._soundOpen = GameData.SetLayerData.soundOpen;
        this._musicOpen = GameData.SetLayerData.musicOpen;
        this.areaLb.string = game.getLanguage().name;
        this.selectLanguageTypeOpen();
        this.refreshUI();
      },
      musicClick: function musicClick(event) {
        soundMngr.instance.playAudioOther("button");
        this._musicOpen = !this._musicOpen;
        this.setMusicOpen();
        GameData.SetLayerData.musicOpen = this._musicOpen;
        var v = true == this._musicOpen ? GameData.SetLayerData.musicVolume : 0;
        soundMngr.instance.bgmVolume(v);
        GameData.saveSetLayerData();
      },
      soundClick: function soundClick(event) {
        soundMngr.instance.playAudioOther("button");
        this._soundOpen = !this._soundOpen;
        this.setSoundOpen();
        GameData.SetLayerData.soundOpen = this._soundOpen;
        GameData.saveSetLayerData();
      },
      selectLanguageTypeClick: function selectLanguageTypeClick(event) {
        soundMngr.instance.playAudioOther("button");
        var languageType = GameData.language_tianjin;
        this.toggle_tianjin.isChecked && (languageType = GameData.language_tianjin);
        this.toggle_putong.isChecked && (languageType = GameData.language_putong);
        cc.sys.localStorage.setItem("languageType" + GameData.player.uid, languageType);
        cc.log(languageType);
        cc.log("languageType= ", cc.sys.localStorage.getItem("languageType" + GameData.player.uid));
      },
      selectLanguageTypeOpen: function selectLanguageTypeOpen() {
        cc.log("=============================>", this._LanguageTypeOpen);
        if (this._LanguageTypeOpen == GameData.language_tianjin) {
          this.toggle_tianjin.isChecked = true;
          this.toggle_putong.isChecked = false;
        } else {
          this.toggle_tianjin.isChecked = false;
          this.toggle_putong.isChecked = true;
        }
      },
      setMusicOpen: function setMusicOpen() {
        this.musicBtn.getChildByName("kai").active = this._musicOpen;
        this.musicKuang2.active = this._musicOpen;
        this.musicBtn.getChildByName("guan").active = !this._musicOpen;
        this.musicKuang1.active = !this._musicOpen;
      },
      setSoundOpen: function setSoundOpen() {
        this.soundBtn.getChildByName("kai").active = this._soundOpen;
        this.soundKuang2.active = this._soundOpen;
        this.soundBtn.getChildByName("guan").active = !this._soundOpen;
        this.soundKuang1.active = !this._soundOpen;
      },
      adjustSound: function adjustSound(event) {
        var slider = event.detail;
        GameData.SetLayerData.soundVolume = slider.progress;
        GameData.SetLayerData.soundOpen = true;
        this._soundOpen = true;
        this.soundProgressbar.progress = slider.progress;
        if (0 == slider.progress) {
          this._soundOpen = false;
          GameData.SetLayerData.soundOpen = false;
        }
        this.setSoundOpen();
        GameData.saveSetLayerData();
      },
      adjustMusic: function adjustMusic(event) {
        var slider = event.detail;
        GameData.SetLayerData.musicVolume = slider.progress;
        soundMngr.instance.bgmVolume(GameData.musicVolume);
        this.musicProgressbar.progress = slider.progress;
        GameData.SetLayerData.musicOpen = true;
        this._musicOpen = true;
        if (0 == slider.progress) {
          this._musicOpen = false;
          GameData.SetLayerData.musicOpen = false;
        }
        var v = slider.progress;
        soundMngr.instance.bgmVolume(v);
        this.setMusicOpen();
        GameData.saveSetLayerData();
      },
      onClose: function onClose() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      },
      requestDissolve: function requestDissolve() {
        if (!GameData.room.opts) return;
        GameData.player.uid != GameData.joiners[0].uid && GameData.joiners.length < GameData.room.opts.joinermax ? createMoveMessage("牌局开始后才允许解散房间") : RoomHandler.deleteRoom(GameData.room.id, "apply");
        closeView(this.node.name);
      },
      logout: function logout(evt) {
        soundMngr.instance.playAudioOther("button");
        loginHandler.logout();
      },
      refreshUI: function refreshUI() {
        this.musicSlider.progress = GameData.SetLayerData.musicVolume;
        this.soundSlider.progress = GameData.SetLayerData.soundVolume;
        this.soundBtn.getChildByName("kai").active = GameData.SetLayerData.soundOpen;
        this.soundBtn.getChildByName("guan").active = !GameData.SetLayerData.soundOpen;
        this.soundKuang1.active = !GameData.SetLayerData.soundOpen;
        this.soundKuang2.active = GameData.SetLayerData.soundOpen;
        this.musicBtn.getChildByName("kai").active = GameData.SetLayerData.musicOpen;
        this.musicBtn.getChildByName("guan").active = !GameData.SetLayerData.musicOpen;
        this.musicProgressbar.progress = GameData.SetLayerData.musicVolume;
        this.soundProgressbar.progress = GameData.SetLayerData.soundVolume;
        this.musicKuang2.active = GameData.SetLayerData.musicOpen;
        this.musicKuang1.active = !GameData.SetLayerData.musicOpen;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameConfig: "gameConfig",
    gameDefine: "gameDefine",
    loginHandler: "loginHandler",
    roomHandler: "roomHandler"
  } ],
  shishi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2616fCkLINGabqC6tTcQ7eg", "shishi");
    "use strict";
    var gameDefine = require("gameDefine");
    var ShiShiConfig = {
      areaType: gameDefine.AreaType.Area_HuaDian,
      serverIP: "192.168.1.1",
      gameName: "摸摸桦甸麻将",
      versionText: "",
      Poster: [ "resources/poster/huandian/poster_HD_1.png" ],
      GameVisible: [ gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_TDK ],
      ModeType: {
        Game_Mj_Tianjin: {
          CurrencyType: gameDefine.currencyType.Currency_Coin,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_Mj_Shishi: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_Mj_HZ: {
          CurrencyType: gameDefine.currencyType.Currency_Coin,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_Poker_TianjinDDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Coin,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Coin,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_Poker_13shui: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_niu_niu: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: [ gameDefine.settleType.Settle_Coin, gameDefine.settleType.Settle_Point ]
        }
      },
      SetCardsOpen: false,
      MatchGameType: [ gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_Poker_DDZ ],
      serverConfig: {
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ]
        },
        roomCard: {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 10
                },
                3: {
                  final: 15
                },
                4: {
                  final: 20
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          }
        }
      }
    };
    module.exports = ShiShiConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  shopConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "940dc8uSNxHlK/vDiGgMF8f", "shopConfig");
    "use strict";
    var shopConfig = {
      10001: {
        desc: "9000金币",
        costType: 1,
        costNum: 1,
        getType: 0,
        getNum: 9e3,
        icon: "jinbi2"
      },
      10002: {
        desc: "100000金币",
        costType: 1,
        costNum: 10,
        getType: 0,
        getNum: 1e5,
        icon: "jinbi3"
      },
      10003: {
        desc: "1050000金币",
        costType: 1,
        costNum: 100,
        getType: 0,
        getNum: 105e4,
        icon: "jinbi4"
      },
      10004: {
        desc: "10元话费",
        costType: 3,
        costNum: 12500,
        getType: 1,
        getNum: 1500001,
        icon: "shoptemp"
      },
      10005: {
        desc: "30元话费",
        costType: 3,
        costNum: 36e3,
        getType: 1,
        getNum: 1500002,
        icon: "shoptemp"
      },
      10006: {
        desc: "50元话费",
        costType: 3,
        costNum: 57500,
        getType: 1,
        getNum: 1500003,
        icon: "shoptemp"
      },
      10007: {
        desc: "100元话费",
        costType: 3,
        costNum: 11e4,
        getType: 1,
        getNum: 1500004,
        icon: "shoptemp"
      },
      10008: {
        desc: "500元话费",
        costType: 3,
        costNum: 525e3,
        getType: 1,
        getNum: 1500005,
        icon: "shoptemp"
      },
      10009: {
        desc: "1000元话费",
        costType: 3,
        costNum: 1e6,
        getType: 1,
        getNum: 1500006,
        icon: "shoptemp"
      },
      10010: {
        desc: "1房卡",
        costType: 0,
        costNum: .1,
        getType: 2,
        getNum: 1,
        icon: "shoptemp"
      }
    };
    module.exports = shopConfig;
    cc._RF.pop();
  }, {} ],
  shopHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54767wc+LtI87RCRpkNsPHY", "shopHandler");
    "use strict";
    var errorCode = require("errorCode");
    var shopConfig = require("shopConfig");
    var gameDefine = require("gameDefine");
    var shop = {};
    module.exports = shop;
    shop.exchange = function(exchangeId) {
      var goods = shopConfig[exchangeId];
      if (!goods) return;
      var playerValue = 0, text = null;
      switch (goods.costType) {
       case gameDefine.shopCostType.Shop_Cost_Card:
        playerValue = GameData.player.card;
        text = "房卡不足";
        break;

       case gameDefine.shopCostType.Shop_Cost_Coin:
        playerValue = GameData.player.coin;
        text = "金币不足";
        break;

       case gameDefine.shopCostType.Shop_Cost_Point:
        playerValue = GameData.player.point;
        text = "积分不足";
        break;

       case gameDefine.shopCostType.Shop_Cost_Cash:
        var url = "http://test-wx-cb.ry-play.com/WeChat/clientPay?token=clientPayment&uid=" + GameData.player.uid + "&goods=" + exchangeId + "&ip=" + GameData.player.remoteAddr;
        openWebView(url);
        return;
      }
      if (playerValue < goods.costNum && goods.costType != gameDefine.shopCostType.Shop_Cost_Cash) {
        createMoveMessage(text);
        return;
      }
      GameNet.getInstance().request("game.shopHandler.exchange", {
        exchangeId: exchangeId
      }, function(res) {
        switch (res.result) {
         case errorCode.notEnoughCard:
          text = "房卡不足";
          break;

         case errorCode.notEnoughCoin:
          text = "金币不足";
          break;

         case errorCode.notEnoughPoint:
          text = "积分不足";
          break;

         case errorCode.Fail:
          text = "兑换失败";
          break;

         case errorCode.notHaveWXOpenId:
          text = "请点击退出游戏按钮,重新登录游戏";
          break;

         case errorCode.Success:
          text = "兑换成功";
        }
        text && createMoveMessage(text);
      });
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    shopConfig: "shopConfig"
  } ],
  shoppingPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "714b0JqGExOuLepcriWYgA5", "shoppingPanel");
    "use strict";
    var shopConfig = require("shopConfig");
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    cc.Class({
      extends: cc.Component,
      properties: {
        clickBtns: {
          default: [],
          type: [ cc.Node ]
        },
        panelViews: {
          default: [],
          type: [ cc.Node ]
        },
        leftArray: [],
        jifenStr: cc.Label,
        coinStr: cc.Label,
        commodityPrefab: cc.Prefab,
        jifenScollView: cc.ScrollView,
        cardScollView: cc.ScrollView,
        cashScollView: cc.ScrollView,
        coinScollView: cc.ScrollView
      },
      onLoad: function onLoad() {
        this.initGoodsType();
        this.getLeftLenArray();
        registEvent("onPlayerUpdate", this, this.showNumber);
      },
      onEnable: function onEnable() {
        this.showPanel(1);
        this.showNumber();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onPlayerUpdate", this, this.showNumber);
      },
      getLeftLenArray: function getLeftLenArray() {
        for (var key in shopConfig) {
          var data = shopConfig[key].costType;
          var isHave = contains(this.leftArray, data);
          isHave || this.leftArray.push(data);
        }
      },
      clickShowView: function clickShowView(evt) {
        soundMngr.instance.playAudioOther("button");
        this.showPanel(evt.target.name.split("_")[1]);
      },
      showPanel: function showPanel(index) {
        for (var i = 0; i < this.clickBtns.length; i++) {
          var btnNode = this.clickBtns[i];
          if (i < this.leftArray.length) {
            var btn = btnNode.getComponent(cc.Button);
            var tname = "btn_" + index;
            btnNode.name == tname ? btn.interactable = false : btn.interactable = true;
            btnNode.active = true;
          } else btnNode.active = false;
        }
        this.showView(index);
      },
      showView: function showView(index) {
        for (var i = 0; i < this.panelViews.length; i++) {
          var viewNode = this.panelViews[i];
          var vname = "View_" + index;
          viewNode.name == vname ? viewNode.active = true : viewNode.active = false;
        }
      },
      initGoodsType: function initGoodsType() {
        for (var key in shopConfig) {
          var data = shopConfig[key];
          if (data.costType == gameDefine.shopCostType.Shop_Cost_Point) {
            var jifenPrefsb = cc.instantiate(this.commodityPrefab);
            this.jifenScollView.content.addChild(jifenPrefsb);
            jifenPrefsb.getComponent("goodsType").getButtonId(key);
            jifenPrefsb.getComponent("goodsType").initUI(data);
            var childLen = this.jifenScollView.content.childrenCount - 1;
            jifenPrefsb.x = childLen % 4 * 230 - 354;
            jifenPrefsb.y = -98 - 197 * parseInt(childLen / 4);
            this.jifenScollView.content.height = 197 * parseInt(this.jifenScollView.content.childrenCount / 4);
          } else if (data.costType == gameDefine.shopCostType.Shop_Cost_Card) {
            var cardPrefsb = cc.instantiate(this.commodityPrefab);
            this.cardScollView.content.addChild(cardPrefsb);
            cardPrefsb.getComponent("goodsType").getButtonId(key);
            cardPrefsb.getComponent("goodsType").initUI(data);
            var childLen = this.cardScollView.content.childrenCount - 1;
            cardPrefsb.x = childLen % 4 * 230 - 354;
            cardPrefsb.y = -98 - 197 * parseInt(childLen / 4);
            this.cardScollView.content.height = 197 * parseInt(this.cardScollView.content.childrenCount / 4);
          } else if (data.costType == gameDefine.shopCostType.Shop_Cost_Cash) {
            var cashPrefsb = cc.instantiate(this.commodityPrefab);
            this.cashScollView.content.addChild(cashPrefsb);
            cashPrefsb.getComponent("goodsType").getButtonId(key);
            cashPrefsb.getComponent("goodsType").initUI(data);
            var childLen = this.cashScollView.content.childrenCount - 1;
            cashPrefsb.x = childLen % 4 * 230 - 354;
            cashPrefsb.y = -98 - 197 * parseInt(childLen / 4);
            this.cashScollView.content.height = 197 * parseInt(this.cashScollView.content.childrenCount / 4);
          } else if (data.costType == gameDefine.shopCostType.Shop_Cost_Coin) {
            var coinPrefsb = cc.instantiate(this.commodityPrefab);
            this.coinScollView.content.addChild(coinPrefsb);
            coinPrefsb.getComponent("goodsType").getButtonId(key);
            coinPrefsb.getComponent("goodsType").initUI(data);
            var childLen = this.coinScollView.content.childrenCount - 1;
            coinPrefsb.x = childLen % 4 * 230 - 354;
            coinPrefsb.y = -98 - 197 * parseInt(childLen / 4);
            this.coinScollView.content.height = 197 * parseInt(this.coinScollView.content.childrenCount / 4);
          }
        }
      },
      showNumber: function showNumber() {
        var jifenNum = 0;
        var coinNum = 0;
        GameData.player.point && (jifenNum = GameData.player.point);
        GameData.player.coin && (coinNum = GameData.player.coin);
        this.jifenStr.getComponent(cc.Label).string = ConversionCoinValue(jifenNum, 0);
        this.coinStr.getComponent(cc.Label).string = ConversionCoinValue(coinNum, 0);
      },
      closeNode: function closeNode() {
        soundMngr.instance.playAudioOther("button");
        closeView(this.node.name);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    shopConfig: "shopConfig"
  } ],
  stateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "71023BGPKRLZrpcUQYVbSZD", "stateMachine");
    "use strict";
    var Promise = require("es6-promise");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.state = 0;
        this.stateList = {};
      },
      registState: function registState(state, parent, func_before, func_run, func_after) {
        this.stateList[state] = {
          parent: parent,
          before: func_before,
          run: func_run,
          after: func_after
        };
      },
      unregistState: function unregistState(state) {
        delete this.stateList[state];
      },
      setState: function setState(state) {
        if (this.state == state) return;
        var self = this;
        Promise.resolve().then(function() {
          var st = self.stateList[self.state];
          null == st || "function" != typeof st.after ? Promise.resolve() : st.after.call(st.parent, function() {
            Promise.resolve();
          });
        }).then(function() {
          var st = self.stateList[state];
          null == st || "function" != typeof st.before ? Promise.resolve() : st.before.call(st.parent, function() {
            Promise.resolve();
          });
        }).then(function() {
          self.state = state;
          Promise.resolve();
        }).then(function() {
          var st = self.stateList[self.state];
          null == st || "function" != typeof st.run ? Promise.resolve() : st.run.call(st.parent, function() {
            Promise.resolve();
          });
        }).catch(function() {
          console.log("Execute Promise error, state:" + state);
        });
      }
    });
    cc._RF.pop();
  }, {
    "es6-promise": "es6-promise"
  } ],
  summaryView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40612/1fgtN6JQcESrtSvHg", "summaryView");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        font: {
          default: [],
          type: [ cc.Font ]
        }
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var idx = 0;
        var playerNode;
        this.showPlayer(GameData.player, ++idx);
        for (var i = 0; i < GameData.joiners.length; i++) {
          if (GameData.joiners[i].uid == GameData.player.uid) continue;
          this.showPlayer(GameData.joiners[i], ++idx);
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
        }
        for (i = GameData.joiners.length; i < 4; i++) {
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
        for (i = 0; i < GameData.joiners.length; i++) if (2 == GameData.joiners.length) {
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.x = 310 * i - 155;
        } else if (3 == GameData.joiners.length) {
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.x = 310 * i - 310;
        }
        var roomId = cc.find("strNode/roomid", this.panel);
        var createtime = cc.find("strNode/time", this.panel);
        roomId.getComponent("cc.Label").string = "房间号:" + roomData.id;
        var time = getTimeStr(roomData.createtime);
        createtime.getComponent("cc.Label").string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
      },
      showPlayer: function showPlayer(player, idx) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var scoreData = RoomHandler.getScoreData();
        if (void 0 == scoreData) return;
        var nameNode = cc.find("player_" + idx + "/head_bg/name", this.panel);
        var uid = cc.find("player_" + idx + "/head_bg/id", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head_bg/head", this.panel);
        uid.getComponent("cc.Label").string = "ID:" + player.uid;
        isChinese(player.name) ? nameNode.getComponent("cc.Label").string = getShortStr(player.name, 8) : nameNode.getComponent("cc.Label").string = getShortStr(player.name, 10);
        var score = scoreData[player.uid];
        if (score > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + score;
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = score;
        } else {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = score;
        }
        var imgUrl = player.headimgurl;
        var headSprite = headNode.getComponent(cc.Sprite);
        this.setIcon(headSprite, imgUrl);
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && scoreData[GameData.joiners[i].uid] > scoreData[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        var winNode = cc.find("player_" + idx + "/win", this.panel);
        GetScoreMaxUid() == player.uid ? winNode.active = scoreData[GetScoreMaxUid()] - roomData.initScore > 0 : winNode.active = false;
        var owner = cc.find("player_" + idx + "/head_bg/Owner", this.panel);
        owner.active = roomData.creator == player.uid;
        var selfBg = cc.find("player_" + idx + "/selfBg", this.panel);
        var playerBg = cc.find("player_" + idx + "/playerBg", this.panel);
        if (player.uid == GameData.player.uid) {
          selfBg.active = true;
          playerBg.active = false;
        } else {
          selfBg.active = false;
          playerBg.active = true;
        }
        this.recordInfoShow(player.uid, idx);
      },
      setIcon: function setIcon(sprite, imgUrl) {
        if (void 0 == sprite || void 0 == imgUrl || imgUrl.length <= 0) return;
        cc.loader.load({
          url: imgUrl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      recordInfoShow: function recordInfoShow(uid, index) {
        var hu_num = 0, chan_num = 0, ming_num = 0, an_num = 0;
        var huNum = cc.find("player_" + index + "/tongji/hu", this.panel);
        var chanNum = cc.find("player_" + index + "/tongji/chan", this.panel);
        var minggang = cc.find("player_" + index + "/tongji/ming", this.panel);
        var angang = cc.find("player_" + index + "/tongji/an", this.panel);
        huNum.getComponent("cc.Label").string = "胡牌次数:  " + hu_num;
        chanNum.getComponent("cc.Label").string = "被铲次数:  " + chan_num;
        minggang.getComponent("cc.Label").string = "明杠次数:  " + ming_num;
        angang.getComponent("cc.Label").string = "暗杠次数:  " + an_num;
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  tableCardControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1f42oANWFO67F4cH+jhgw5", "tableCardControl");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        huierPanel: cc.Node,
        huierCardNode: cc.Node,
        play_layer_up: cc.Node,
        play_layer_down: cc.Node,
        play_layer_left: cc.Node,
        play_layer_right: cc.Node,
        spineNode: cc.Node,
        actionLayer: cc.Node,
        actionSecondaryLayer: cc.Node,
        cardTemplate: cc.Prefab,
        disCardArrow: cc.Prefab,
        cardButtonPrefab: cc.Prefab,
        cardHuierPrefab: cc.Prefab,
        cardTingPrefab: cc.Prefab,
        cardMaskPrefab: cc.Prefab,
        _curGameData: void 0
      },
      onLoad: function onLoad() {
        cc.log("...table card node onLoad.");
        registEvent("onCardBtnStart", this, this.onCardBtnStart);
        registEvent("onCardBtnMove", this, this.onCardBtnMove);
        registEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        registEvent("onCardBtnCancel", this, this.onCardBtnCancel);
        this.selectedCard = -1;
        this.turnUid = 0;
        this.tingData = [];
        this.actions = [];
        this.wildCards = [];
        this.playersUid = {
          up: 0,
          down: 0,
          right: 0,
          left: 0
        };
        this.lastDisObject = {
          lastDisCard: -1,
          lastDisUid: -1
        };
        this.myHandObject = {
          handCards: [],
          obtainCard: 0
        };
        this.handCardsObject = {
          up: 0,
          right: 0,
          left: 0
        };
        this.disCardsObject = {
          up: [],
          down: [],
          right: [],
          left: []
        };
        this.usedCardsObject = {
          up: {
            chi: [],
            peng: [],
            gang: []
          },
          down: {
            chi: [],
            peng: [],
            gang: []
          },
          right: {
            chi: [],
            peng: [],
            gang: []
          },
          left: {
            chi: [],
            peng: [],
            gang: []
          }
        };
        this.actionsObject = {
          data: {},
          type: false
        };
        this._cardArrow = cc.instantiate(this.disCardArrow);
        this.node.addChild(this._cardArrow);
        this._cardArrow.active = false;
        this.spineNode.active = false;
        this.huierPanel.active = false;
        this.myHandsInitPosition = [];
        this.saveMyHandsInitPosition();
        this.setDisCardMax();
        this.showPassActions();
        this.updateWildCards();
        this.updateMyHandCards();
        this.updatePlayerDisCards();
        this.updatePlayerUsedCards();
        this.updatePlayerHandCards();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onCardBtnStart", this, this.onCardBtnStart);
        unregistEvent("onCardBtnMove", this, this.onCardBtnMove);
        unregistEvent("onCardBtnEnd", this, this.onCardBtnEnd);
        unregistEvent("onCardBtnCancel", this, this.onCardBtnCancel);
      },
      setDisCardMax: function setDisCardMax() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        4 == roomData.opts.joinermax && (this.discardMax = 24);
        3 == roomData.opts.joinermax && (this.discardMax = 36);
        2 == roomData.opts.joinermax && (this.discardMax = 60);
      },
      setPlayersUid: function setPlayersUid(up, down, right, left) {
        void 0 === this.playersUid ? this.playersUid = {} : null;
        this.playersUid.up = up;
        this.playersUid.down = down;
        this.playersUid.right = right;
        this.playersUid.left = left;
      },
      setTurnUid: function setTurnUid(uid) {
        this.turnUid = uid;
        this.updateMyHandCards();
      },
      setWildCards: function setWildCards(data) {
        this.wildCards = data;
        this.updateWildCards();
      },
      setActionsObject: function setActionsObject(data, type) {
        void 0 === this.actionsObject ? this.actionsObject = {} : null;
        this.actionsObject.data = data;
        this.actionsObject.type = type;
        this.showPassActions();
      },
      setLastDisObject: function setLastDisObject(uid, card) {
        void 0 === this.lastDisObject ? this.lastDisObject = {} : null;
        this.lastDisObject.lastDisUid = uid;
        this.lastDisObject.lastDisCard = card;
        this.updatePlayerDisCards();
      },
      setMyHandObject: function setMyHandObject(cards, obtain) {
        void 0 === this.myHandObject ? this.myHandObject = {} : null;
        this.myHandObject.handCards = cards;
        this.myHandObject.obtainCard = obtain;
        this.updateMyHandCards();
      },
      setHandCardsObject: function setHandCardsObject(up, right, left) {
        void 0 === this.handCardsObject ? this.handCardsObject = {} : null;
        this.handCardsObject.up = up;
        this.handCardsObject.right = right;
        this.handCardsObject.left = left;
        this.updatePlayerHandCards();
      },
      setDisCardsObject: function setDisCardsObject(up, down, right, left) {
        void 0 === this.disCardsObject ? this.disCardsObject = {} : null;
        this.disCardsObject.up = up;
        this.disCardsObject.down = down;
        this.disCardsObject.right = right;
        this.disCardsObject.left = left;
        this.updatePlayerDisCards();
      },
      setUsedCardsObject: function setUsedCardsObject(up, down, right, left) {
        void 0 === this.usedCardsObject ? this.usedCardsObject = {} : null;
        this.usedCardsObject.up = up;
        this.usedCardsObject.down = down;
        this.usedCardsObject.right = right;
        this.usedCardsObject.left = left;
        this.updatePlayerUsedCards();
      },
      showActionEffect: function showActionEffect(sex, direction, action) {
        cc.log("...1sex:" + sex);
        cc.log("...1pos:" + direction);
        cc.log("...1action:" + action);
        this.playActionAnimation(direction, action);
        this.playAudioEffect(action, null, sex);
      },
      showDisAudioEffect: function showDisAudioEffect(action, card, sex) {
        this.playAudioEffect(action, card, sex);
      },
      updateMyHandCards: function updateMyHandCards() {
        var cardHandNode = cc.find("cardHand", this.play_layer_down);
        for (var jj = 0; jj < cardHandNode.getChildrenCount(); jj++) {
          var child = cardHandNode.getChildren()[jj];
          child && (child.active = false);
        }
        if (void 0 == this.myHandObject) return;
        var cardHand = this.myHandObject.handCards;
        if (void 0 == cardHand) return;
        var cardNum = cardHand.length;
        var obtainCard = this.myHandObject.obtainCard;
        var isSetObtain = false;
        var index = 1;
        var nodeIdx;
        var cardId;
        if (this.turnUid == GameData.player.uid) {
          cardNum = cardHand.length - 1;
          if (this.checkHandNumber(cardHand.length) && obtainCard <= 0) for (var i = cardHand.length - 1; i >= 0; i--) {
            cardId = cardHand[i];
            if (RuleHandler.instance.isHuier(cardId)) continue;
            obtainCard = cardHand[i];
            break;
          }
        }
        for (var ii = cardHand.length - 1; ii >= 0; ii--) {
          cardId = cardHand[ii];
          if (this.turnUid == GameData.player.uid && obtainCard == cardId && false == isSetObtain) {
            nodeIdx = 0;
            isSetObtain = true;
          } else if (RuleHandler.instance.isHuier(cardId)) {
            nodeIdx = cardNum;
            cardNum--;
          } else {
            nodeIdx = index;
            index++;
          }
          var node = cc.find("cardHand/cardHand" + nodeIdx, this.play_layer_down);
          if (node) {
            node.active = true;
            this.showCardContent(node, "mj_face_xia_shou", cardId);
            this.setMyHandButton(node, cardId, nodeIdx);
            this.setMyHuierVisible(node, cardId, "down");
            this.setMyTingVisible(node, cardId);
          }
        }
      },
      updatePlayerHandCards: function updatePlayerHandCards() {
        this.showHandCards("up", this.play_layer_up);
        this.showHandCards("right", this.play_layer_right);
        this.showHandCards("left", this.play_layer_left);
      },
      updatePlayerDisCards: function updatePlayerDisCards() {
        this.showDisCards(this.play_layer_up, "mj_face_shang_shou", "up");
        this.showDisCards(this.play_layer_down, "mj_face_xia_chu", "down");
        this.showDisCards(this.play_layer_right, "mj_face_you_chu", "right");
        this.showDisCards(this.play_layer_left, "mj_face_zuo_chu", "left");
      },
      updatePlayerUsedCards: function updatePlayerUsedCards() {
        this.showUsedCards(this.play_layer_up, "mj_face_shang_shou", "up");
        this.showUsedCards(this.play_layer_down, "mj_face_xia_chu", "down");
        this.showUsedCards(this.play_layer_right, "mj_face_you_chu", "right");
        this.showUsedCards(this.play_layer_left, "mj_face_zuo_chu", "left");
      },
      showHandCards: function showHandCards(direction, parent) {
        var HandNode = cc.find("cardHand", parent);
        if (void 0 == HandNode) return;
        if (void 0 == this.handCardsObject) return;
        if (void 0 == this.usedCardsObject) return;
        if (this.handCardsObject[direction] <= 0) {
          HandNode.active = false;
          return;
        }
        HandNode.active = true;
        var pengCardsData = void 0;
        var gangCardsData = void 0;
        var pengCardsLength = 0;
        var gangCardsLength = 0;
        if (this.usedCardsObject[direction]) {
          pengCardsData = this.usedCardsObject[direction].peng;
          gangCardsData = this.usedCardsObject[direction].gang;
        }
        pengCardsData ? pengCardsLength = pengCardsData.length : null;
        gangCardsData ? gangCardsLength = gangCardsData.length : null;
        var cardNum = this.handCardsObject[direction] + 3 * (pengCardsLength + gangCardsLength);
        var showIdx = this.checkHandNumber(cardNum) ? 0 : 1;
        var handIdx = 1, nodeIdx = 0;
        for (;nodeIdx <= GameData.client.handsize; nodeIdx++) {
          var node = cc.find("cardHand" + nodeIdx, HandNode);
          if (nodeIdx == showIdx && handIdx <= this.handCardsObject[direction]) {
            node.active = true;
            showIdx++;
            handIdx++;
          } else node.active = false;
        }
      },
      showDisCards: function showDisCards(parent, cardHeader, direction) {
        var RoomData = RoomHandler.getRoomData();
        if (void 0 == RoomData) return;
        var node4 = cc.find("cardDis_4", parent);
        node4 && (node4.active = false);
        var node3 = cc.find("cardDis_3", parent);
        node3 && (node3.active = false);
        var node2 = cc.find("cardDis_2", parent);
        node2 && (node2.active = false);
        if (void 0 == this.disCardsObject) return;
        var cards = this.disCardsObject[direction];
        if (void 0 == cards || cards.length <= 0) return;
        var disNode = cc.find("cardDis_" + RoomData.opts.joinermax, parent);
        disNode.active = true;
        for (var i = 1; i <= this.discardMax; i++) {
          var node = cc.find("card_face" + i, disNode);
          if (node && i <= cards.length) {
            var card = cards[i - 1];
            node.active = true;
            this.showCardContent(node, cardHeader, card);
            if (this.playersUid[direction] == this.lastDisObject.lastDisUid && card == this.lastDisObject.lastDisCard) {
              this._cardArrow.active = true;
              this._cardArrow.parent = node;
              this._cardArrow.position.x = 0;
              this._cardArrow.position.y = 0;
              cc.find("left", this._cardArrow).active = "left" == direction;
              cc.find("down", this._cardArrow).active = "down" == direction;
              cc.find("right", this._cardArrow).active = "right" == direction;
              cc.find("up", this._cardArrow).active = "up" == direction;
            }
          } else node.active = false;
        }
      },
      showUsedCards: function showUsedCards(parent, cardHeader, direction) {
        var pengNode = cc.find("cardPeng", parent);
        for (var ii = 0; ii < pengNode.getChildrenCount(); ii++) {
          var child = pengNode.getChildren()[ii];
          child && (child.active = false);
        }
        if (void 0 == this.usedCardsObject) return;
        if (void 0 == this.usedCardsObject[direction]) return;
        var chi = this.usedCardsObject[direction].chi;
        var peng = this.usedCardsObject[direction].peng;
        var gang = this.usedCardsObject[direction].gang;
        if (void 0 == chi || void 0 == gang || void 0 == peng) return;
        var cards = peng.concat(chi);
        var size = parseInt(GameData.client.handsize / 3);
        var index, node, n, face, back, cardsObject, cardsArray, cardId;
        for (index = 0; index < cards.length; index++) {
          if (index >= size) break;
          node = cc.find("cardPeng" + (index + 1), pengNode);
          if (node) {
            for (n = 0; n < 4; n++) {
              face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
              cardsObject = cards[index];
              if (void 0 == cardsObject) break;
              cardsArray = cardsObject.cards;
              if (void 0 == cardsArray || cardsArray.length <= 0) break;
              cardsArray.length >= 1 && cardsArray.sort(function(a, b) {
                return a - b;
              });
              if (n < cardsArray.length) {
                face.node.active = true;
                if (3 == n) {
                  back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                  back.node.active = false;
                }
                cardId = cardsArray[n];
                this.showCardContent(face.node, cardHeader, cardId);
              } else face.node.active = false;
            }
            node.active = true;
          }
        }
        for (;index < gang.length; index++) {
          if (index >= size) break;
          node = cc.find("cardPeng" + (index + 1), pengNode);
          if (node) {
            for (n = 0; n < 4; n++) {
              face = node.getChildByName("card_face" + (n + 1)).getComponent("cc.Sprite");
              cardsObject = gang[index];
              if (void 0 == cardsObject) break;
              cardsArray = cardsObject.cards;
              if (void 0 == cardsArray || cardsArray.length <= 0) break;
              if (n < cardsArray.length) {
                face.node.active = true;
                if (3 == n) {
                  back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                  if (cardsObject.type == GangType.Gang_An) {
                    face.node.active = false;
                    back.node.active = true;
                  } else back.node.active = false;
                }
                cardId = cardsArray[n];
                this.showCardContent(face.node, cardHeader, cardId);
              } else face.node.active = false;
            }
            node.active = true;
          }
        }
      },
      addHuierIcon: function addHuierIcon(parent, direction) {
        if (parent.childrenCount <= 0) {
          var huierIconNode = new cc.Node();
          parent.addChild(huierIconNode);
          var huierIconTx = cc.textureCache.addImage(cc.url.raw("resources/table/huier_icon.png"));
          var huierIconSprite = huierIconNode.addComponent(cc.Sprite);
          huierIconSprite.spriteFrame = new cc.SpriteFrame(huierIconTx);
          if ("right" == direction) {
            huierIconNode.x = -32.6;
            huierIconNode.y = 7.1;
            huierIconNode.rotation = -101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = 11;
          } else if ("down" == direction) {
            huierIconNode.x = 0;
            huierIconNode.y = 60;
            huierIconNode.skewX = 10;
          } else if ("left" == direction) {
            huierIconNode.x = 31;
            huierIconNode.y = 8.6;
            huierIconNode.rotation = 101.2;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .4;
            huierIconNode.skewX = -11;
          } else if ("up" == direction) {
            huierIconNode.x = 3;
            huierIconNode.y = -6.8;
            huierIconNode.rotation = 180;
            huierIconNode.scaleX = .4;
            huierIconNode.scaleY = .3;
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
      },
      setMyHandButton: function setMyHandButton(cardNode, cardId, index) {
        var cardBtn = cardNode.getChildByName(cardNode.name + "_button");
        if (null == cardBtn) {
          cardBtn = cc.instantiate(this.cardButtonPrefab);
          cardNode.addChild(cardBtn);
          cardBtn.name = cardNode.name + "_button";
        }
        var cardButton = cardBtn.getComponent("CardButton");
        cardButton.setCardId(cardId);
        cardButton.setIndex(index);
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId, direction) {
        var show = false;
        RuleHandler.instance.isHuier(cardId) && (show = true);
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuierPrefab);
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(direction, huierNode).active = true;
            huierNode.y = huierNode.y - 18;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
          }
        } else huierNode.active = show;
      },
      setMyTingVisible: function setMyTingVisible(cardNode, cardId) {
        if (void 0 == this.tingData) return;
        var tingDiscard = false;
        for (var i = 0; i < this.tingData.length; i++) {
          var data = this.tingData[i];
          if (data.discard == cardId) {
            tingDiscard = true;
            break;
          }
        }
        var tingNode = cardNode.getChildByName(cardNode.name + "_ting");
        if (null == tingNode) {
          if (true == tingDiscard) {
            tingNode = cc.instantiate(this.cardTingPrefab);
            tingNode.y = tingNode.y - 10;
            cardNode.addChild(tingNode);
            tingNode.name = cardNode.name + "_ting";
          }
        } else tingNode.active = tingDiscard;
        this.turnUid != GameData.player.uid && null != tingNode && (tingNode.active = false);
      },
      updateWildCards: function updateWildCards() {
        if (void 0 == this.wildCards || this.wildCards.length <= 0) return;
        this.huierPanel.active = true;
        var bg = cc.find("huier_bg", this.huierPanel);
        var name = "";
        var index = 1;
        var url = "";
        var texture = null;
        var interval = 5;
        for (var ii = 0; ii < this.wildCards.length; ii++) {
          var cardId = this.wildCards[ii];
          if (void 0 == cardId) continue;
          name = "huier_card" + index;
          var huierNode = this.huierPanel.getChildByName(name);
          if (void 0 == huierNode) {
            huierNode = cc.instantiate(this.huierCardNode);
            huierNode.parent = this.huierPanel;
            huierNode.name = name;
          }
          huierNode.y = this.huierCardNode.y;
          huierNode.x = parseInt(this.huierCardNode.x + (this.huierCardNode.width * this.huierCardNode.scaleX + interval) * (index - 1));
          url = "resources/mjcard2d/mj_face_xia_shou_" + cardId + ".png";
          texture = cc.textureCache.addImage(cc.url.raw(url));
          texture && (huierNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
          index++;
        }
        bg.width = parseInt(this.huierCardNode.width * this.huierCardNode.scaleX * (index - 1));
      },
      showMask: function showMask(selectCard) {
        this.showPengCardMask(selectCard, this.play_layer_up, "up");
        this.showPengCardMask(selectCard, this.play_layer_down, "down");
        this.showPengCardMask(selectCard, this.play_layer_left, "left");
        this.showPengCardMask(selectCard, this.play_layer_right, "right");
        this.showDisCardMask(selectCard, this.play_layer_up, "up");
        this.showDisCardMask(selectCard, this.play_layer_down, "down");
        this.showDisCardMask(selectCard, this.play_layer_left, "left");
        this.showDisCardMask(selectCard, this.play_layer_right, "right");
      },
      showPengCardMask: function showPengCardMask(selectCard, parent, direction) {
        var cardObject = this.usedCardsObject[direction];
        if (void 0 == cardObject) return;
        for (var i = 1; i < 5; i++) {
          var node = cc.find("cardPeng/cardPeng" + i, parent);
          if (null != node && node.active) for (var k = 1; k < 5; k++) {
            var cardNode = cc.find("card_face" + k, node);
            cardNode.active && this.gotoMask(cardNode, selectCard, direction);
          }
        }
      },
      showDisCardMask: function showDisCardMask(selectCard, parent, direction) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var cardObject = this.disCardsObject[direction];
        if (void 0 == cardObject || cardObject.length <= 0) return;
        for (var i = 1; i <= this.discardMax; i++) {
          var cardNode = cc.find("cardDis_" + roomData.opts.joinermax + "/card_face" + i, parent);
          cardNode.active && this.gotoMask(cardNode, selectCard, direction);
        }
      },
      gotoMask: function gotoMask(cardNode, selectCard, direction) {
        var card = cardNode.getComponent("Card");
        if (null != card) {
          var cardId = card.id;
          var show = selectCard == cardId;
          var maskNode = this.setMaskVisible(cardNode, show);
          if (null != maskNode) {
            cc.find("up", maskNode).active = false;
            cc.find("down", maskNode).active = false;
            cc.find("right", maskNode).active = false;
            cc.find("left", maskNode).active = false;
            cc.find(direction, maskNode).active = true;
          }
        }
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      onGameScore: function onGameScore() {},
      onCardBtnStart: function onCardBtnStart(data) {},
      onCardBtnMove: function onCardBtnMove(data) {
        var card = data.detail.card;
        this.turnUid == GameData.player.uid && this.showMask(card);
      },
      onCardBtnEnd: function onCardBtnEnd(data) {
        var index = data.detail.index;
        var type = data.detail.type;
        switch (type) {
         case -1:
          index == this.selectedCard && (this.selectedCard = -1);
          this.onHandCardClicked(data);
          break;

         case 0:
          this.onHandCardClicked(data);
          break;

         case 1:
          this.selectedCard = index;
          this.onHandCardClicked(data);
        }
      },
      onCardBtnCancel: function onCardBtnCancel(data) {},
      onHandCardClicked: function onHandCardClicked(data) {
        var card = data.detail.card;
        var index = data.detail.index;
        var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
        if (this.selectedCard == index) {
          var self = this;
          this.turnUid == GameData.player.uid && this._curGameData.requestDisCard(card, function(ret) {
            if (ret.result == errorCode.Success) {
              node.stopAllActions();
              self.selectedCard = -1;
              self.moveBackMyCards();
            }
          });
        } else {
          if (this.selectedCard >= 0) {
            var last = cc.find("cardHand/cardHand" + this.selectedCard, this.play_layer_down);
            last.runAction(cc.moveTo(.01, this.myHandsInitPosition[this.selectedCard]));
          }
          node.runAction(cc.moveTo(.01, cc.p(this.myHandsInitPosition[index].x, 30)));
          this.selectedCard = index;
          this.turnUid == GameData.player.uid && this.showMask(card);
        }
      },
      moveUpMyCards: function moveUpMyCards(id, popCount) {
        var count = 0;
        for (var i = 1; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          if (cardId == id) {
            cardNode.y = 30;
            count++;
            if (count >= popCount) return;
          }
        }
      },
      saveMyHandsInitPosition: function saveMyHandsInitPosition() {
        for (var index = 0; index <= GameData.client.handsize; index++) {
          var node = cc.find("cardHand/cardHand" + index, this.play_layer_down);
          this.myHandsInitPosition.push(node.getPosition());
        }
      },
      moveBackMyCards: function moveBackMyCards() {
        this.selectedCard = -1;
        for (var i = 0; i <= GameData.client.handsize; i++) {
          var cardNode = cc.find("cardHand/cardHand" + i, this.play_layer_down);
          var cardId = cardNode.getComponent("Card").id;
          cardNode.position = this.myHandsInitPosition[i];
        }
      },
      checkAnGangAndBuGang: function checkAnGangAndBuGang() {
        var btnIdx = 0;
        this.actionGang = [];
        var anGang = RuleHandler.instance.canAnGang(GameData.player.uid);
        if (void 0 != anGang || anGang.length > 0) for (var ii = 0; ii < anGang.length; ii++) {
          this.actionGang[btnIdx] = {
            act: "angang",
            card: anGang[ii]
          };
          btnIdx++;
        }
        var buGang = RuleHandler.instance.canBuGang(GameData.player.uid);
        if (void 0 != buGang || buGang.length > 0) for (var jj = 0; jj < buGang.length; jj++) {
          this.actionGang[btnIdx] = {
            act: "bugang",
            card: buGang[jj]
          };
          btnIdx++;
        }
      },
      showPassActions: function showPassActions() {
        this.actionLayer.active = false;
        if (void 0 == this.actionsObject) return;
        var actionsData = this.actionsObject.data;
        if (void 0 == actionsData) return;
        var actionType = this.actionsObject.type;
        if (false == actionType && actionsData.fromCard <= 0) return;
        if (void 0 == actionsData.action || actionsData.action.length <= 0) return;
        if (void 0 == this.myHandObject) return;
        var HandCards = this.myHandObject.handCards;
        if (void 0 == HandCards) return;
        this.actionLayer.active = true;
        for (var ii = 1; ii <= 4; ii++) {
          var actionBtn = cc.find("btnAct" + ii, this.actionLayer);
          actionBtn.active = false;
        }
        var btnIdx = 0;
        var number = 0;
        var IsShowGang = false;
        this.actions = [];
        for (var index = 0; index < actionsData.action.length; index++) {
          var act = actionsData.action[index];
          if (void 0 == act || act.length <= 0) continue;
          var checkCardsData = [];
          switch (act) {
           case "chi":
            checkCardsData = RuleHandler.instance.canChi(GameData.player.uid, actionsData.fromCard);
            if (void 0 == checkCardsData || checkCardsData.length <= 0) continue;
            break;

           case "peng":
           case "minggang":
            break;

           case "angang":
           case "bugang":
            if (true == IsShowGang) continue;
            IsShowGang = true;
            break;

           case "dianpao":
            break;

           case "zimo":
            actionsData.fromCard = this.myHandObject.obtainCard;
          }
          this.actions[btnIdx] = {
            act: act,
            card: actionsData.fromCard,
            checkCards: checkCardsData
          };
          this.createActionBtn(++btnIdx, act);
        }
        this.moveBackMyCards();
      },
      createActionBtn: function createActionBtn(index, act) {
        var icon = null;
        switch (act) {
         case "chi":
          icon = "chi";
          break;

         case "peng":
          icon = "peng";
          break;

         case "minggang":
         case "angang":
         case "bugang":
          icon = "gang";
          break;

         case "dianpao":
         case "zimo":
          icon = "hu";
        }
        cc.log("..act:" + act + "..show btn:" + icon);
        var actionNode = cc.find("btnAct" + index, this.actionLayer);
        var url = "resources/table/action/" + icon + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(url));
        actionNode.getComponent("cc.Sprite").spriteFrame = new cc.SpriteFrame(texture);
        actionNode.active = true;
      },
      onBtnPassClicked: function onBtnPassClicked(evt) {
        cc.log("..onBtnPassClicked.");
        cc.log("..actions:" + JSON.stringify(this.actions));
        if (Object.keys(this.actions).length <= 0) {
          cc.log("..actions is null.No Pass");
          return;
        }
        this._curGameData.requestPass(function(res) {});
        this.actionLayer.active = false;
        this.actionSecondaryLayer.active = false;
        this.moveBackMyCards();
      },
      onBtnActionClicked: function onBtnActionClicked(evt, index) {
        cc.log("..actionClicked, index : " + index);
        cc.log("..actions:" + JSON.stringify(this.actions));
        var self = this;
        var data = this.actions[index];
        if (void 0 == data || void 0 == data.act || data.act.length <= 0) {
          cc.log("..action string is undefined.");
          return;
        }
        switch (data.act) {
         case "chi":
          if (1 == data.checkCards.length) {
            cc.log("....requestChiCard:" + JSON.stringify(data.checkCards[0]));
            this._curGameData.requestChiCard(data.checkCards[0], function(res) {
              0 == res.result && self.showEffect("chi");
            });
          } else this.refreshActionType(data);
          break;

         case "peng":
          this._curGameData.requestPengCard(data.card, function(res) {
            0 == res.result && self.showEffect("peng");
          });
          break;

         case "minggang":
          this._curGameData.requestMingGangCard(data.card, function(res) {
            0 == res.result && self.showEffect("gang");
          });
          break;

         case "bugang":
         case "angang":
          this.checkAnGangAndBuGang();
          if (void 0 == this.actionGang || Object.keys(this.actionGang).length <= 0) {
            cc.log("..no An Gang. no Bu Gang.");
            return;
          }
          1 == Object.keys(this.actionGang).length ? this.onBtnGangActionClicked(0) : this.refreshGangActionType();
          break;

         case "dianpao":
          this._curGameData.requestDianPao(data.card, function(res) {
            0 == res.result && self.showEffect("hu");
          });
          break;

         case "zimo":
          this._curGameData.requestHu(data.card, function(res) {
            0 == res.result && self.showEffect("hu");
          });
        }
        this.moveBackMyCards();
        this.actionLayer.active = false;
      },
      refreshActionType: function refreshActionType(data) {
        cc.log("....data:" + JSON.stringify(data));
        if (void 0 == data) return;
        this.actionSecondaryLayer.active = true;
        this.actionTypeData = data;
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        for (var i = 0; i < data.checkCards.length; i++) {
          var cardsArray = data.checkCards[i];
          if (void 0 == cardsArray) continue;
          switch (data.act) {
           case "chi":
            cardsArray.push(data.card);
          }
          cardsArray.sort(function(a, b) {
            return a - b;
          });
          var card = cc.instantiate(cardTemp);
          for (var j = 0; j < cardsArray.length; j++) {
            var cardId = cardsArray[j];
            var cardNode = cc.find("card_" + j, card);
            if (cardId <= 0 || void 0 == cardNode) continue;
            var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + cardId + ".png";
            var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
            if (texture) {
              cardNode.getComponent(cc.Sprite).spriteFrame = null;
              cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            }
            if (cardId == data.card) {
              var biaoji = cardNode.getChildByName(cardNode.name + "_biao");
              if (null == biaoji) {
                biaoji = cc.instantiate(this.cardTingPrefab);
                cardNode.addChild(biaoji);
                biaoji.y -= 10;
                biaoji.name = cardNode.name + "_biao";
              }
            }
            cardNode.active = true;
          }
          cardLayout.addChild(card);
          card.active = true;
          card.tag = i;
          card.width = 252;
          card.getComponent(cc.Sprite).spriteFrame = null;
          card.on(cc.Node.EventType.TOUCH_START, this.onBtnChiActionClicked, this);
        }
      },
      refreshGangActionType: function refreshGangActionType() {
        var _this = this;
        cc.log("....data:" + JSON.stringify(this.actionGang));
        if (void 0 == this.actionGang) return;
        this.actionSecondaryLayer.active = true;
        var self = this;
        var cardTemp = cc.find("card", this.actionSecondaryLayer);
        var cardLayout = cc.find("cardLayout", this.actionSecondaryLayer);
        cardLayout.removeAllChildren();
        var _loop = function _loop(i) {
          gangObject = _this.actionGang[i];
          if (void 0 == gangObject) return "continue";
          card = cc.instantiate(cardTemp);
          cardId = gangObject.card;
          cardNode = cc.find("card_2", card);
          if (cardId <= 0 || void 0 == cardNode) return "continue";
          iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + cardId + ".png";
          texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          if (texture) {
            cardNode.getComponent(cc.Sprite).spriteFrame = null;
            cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          }
          biaoji = cardNode.getChildByName(cardNode.name + "_biao");
          if (null == biaoji) {
            biaoji = cc.instantiate(_this.cardTingPrefab);
            cardNode.addChild(biaoji);
            biaoji.y -= 10;
            biaoji.name = cardNode.name + "_biao";
          }
          cardNode.active = true;
          cardLayout.addChild(card);
          card.active = true;
          card.width = 252;
          card.getComponent(cc.Sprite).spriteFrame = null;
          card.on(cc.Node.EventType.TOUCH_START, function() {
            self.onBtnGangActionClicked(i);
          }, _this);
        };
        for (var i = 0; i < this.actionGang.length; i++) {
          var gangObject;
          var card;
          var cardId;
          var cardNode;
          var iconUrl;
          var texture;
          var biaoji;
          var _ret = _loop(i);
          if ("continue" === _ret) continue;
        }
      },
      onBtnChiActionClicked: function onBtnChiActionClicked(e) {
        var index = e.target.tag;
        var card = this.actionTypeData.card;
        var data = this.actionTypeData.checkCards[index];
        if (null != data) {
          var self = this;
          data = spliceArrayElementOne(data, card);
          cc.log("....requestChiCard:" + JSON.stringify(data));
          this._curGameData.requestChiCard(data, function(res) {
            0 == res.result && self.showEffect("chi");
          });
        }
        this.actionSecondaryLayer.active = false;
      },
      onBtnGangActionClicked: function onBtnGangActionClicked(index) {
        cc.log("..gangClicked, index : " + index);
        cc.log("..actionGang:" + JSON.stringify(this.actionGang));
        var self = this;
        var data = this.actionGang[index];
        if (void 0 == data || void 0 == data.act || data.act.length <= 0) {
          cc.log("..actionGang string is undefined.");
          return;
        }
        switch (data.act) {
         case "angang":
          this._curGameData.requestAnGangCard(data.card, function(res) {
            0 == res.result && self.showEffect("gang");
          });
          break;

         case "bugang":
          this._curGameData.requestBuGangCard(data.card, function(res) {
            0 == res.result && self.showEffect("gang");
          });
        }
        this.actionSecondaryLayer.active = false;
      },
      onBackToActionLayer: function onBackToActionLayer() {
        this.actionLayer.active = true;
        this.actionSecondaryLayer.active = false;
      },
      showEffect: function showEffect(type) {
        cc.log("show effect: " + type);
        var spineUrl = "", spineAnim = "";
        switch (type) {
         case "chi":
          spineUrl = "spine/table/chi";
          spineAnim = "a";
          break;

         case "peng":
          spineUrl = "spine/table/peng";
          spineAnim = "animation";
          break;

         case "gang":
          spineUrl = "spine/table/gang";
          spineAnim = "a";
          break;

         case "hu":
          spineUrl = "spine/table/hu";
          spineAnim = "a";
        }
        var spineNode = this.spineNode;
        this.spineNode.active = true;
        var spine = spineNode.getComponent("sp.Skeleton");
        spine.skeletonData = null;
        spine.animation = null;
        cc.loader.loadRes(spineUrl, sp.SkeletonData, function(err, res) {
          var spine = spineNode.getComponent("sp.Skeleton");
          spine.skeletonData = res;
          spine.animation = spineAnim;
        });
      },
      playActionAnimation: function playActionAnimation(pos, action) {
        cc.log("...3pos: " + pos);
        cc.log("...3action: " + action);
        var animationNode = cc.find("actionAnimations/" + pos, this.node);
        cc.log("---\x3e animationNode : " + animationNode);
        if (null != animationNode) {
          cc.log("---\x3e playActionAnimation : " + action);
          animationNode.getComponent(cc.Animation).play(action);
        }
      },
      playAudioEffect: function playAudioEffect(action, card, sex) {
        cc.log("---\x3e action : " + action);
        cc.log("---\x3e card : " + card);
        cc.log("---\x3e sex : " + sex);
        soundMngr.instance.playAudio(action, card, sex);
      },
      checkHandNumber: function checkHandNumber(length) {
        var size = GameData.client.handsize;
        var usedMax = parseInt(size / 3);
        for (var ii = 0; ii <= usedMax; ii++) {
          var handSize = size + 1 - 3 * ii;
          if (length == handSize) return true;
        }
        return false;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    errorCode: "errorCode",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  tableDirectionControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aad93N8v31C7YeSh74EKc0a", "tableDirectionControl");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        direction_pos: cc.Sprite,
        direction_turn: cc.Node,
        countdown_num1: cc.Sprite,
        countdown_num2: cc.Sprite,
        _countdown_index: 0,
        leftCardNumLabel: cc.Label,
        lastRoundLabel: cc.RichText,
        quanNode: cc.Node,
        juNode: cc.Node
      },
      onLoad: function onLoad() {
        this.turnUid = 0;
        this.roomState = -1;
        this.roundCur = 0;
        this.roundMax = 0;
        this.roundRule = 0;
        this.leftNumber = 0;
        this.showTurn();
        this.updateRoundString();
        this.updateLeftCardNumber();
      },
      onEnable: function onEnable() {},
      onDestroy: function onDestroy() {},
      setRoomRoundCur: function setRoomRoundCur(cur, max) {
        this.roundCur = cur;
        this.roundMax = max;
        this.updateRoundString();
      },
      setRoundRule: function setRoundRule(type) {
        this.roundRule = type;
        this.updateRoundRule();
      },
      setLeftCardNumber: function setLeftCardNumber(number) {
        this.leftNumber = number;
        this.updateLeftCardNumber();
      },
      setTurnUid: function setTurnUid(uid) {
        this.turnUid = uid;
        this.showTurn();
      },
      setRoomState: function setRoomState(state) {
        this.roomState = state;
        this.roomState < gameDefine.RoomState.GAMEING && this.stopCoundDown();
      },
      startCoundDown: function startCoundDown() {
        this._countdown_index = 10;
        this.schedule(this.runCountDown, 1);
      },
      stopCoundDown: function stopCoundDown() {
        this.unschedule(this.runCountDown);
      },
      setPosition: function setPosition() {
        var index = GameData.getPlayerIndex(GameData.player.uid);
        var rotation = 0;
        0 == index ? rotation = 90 : 3 == index ? rotation = 0 : 2 == index ? rotation = 270 : 1 == index && (rotation = 180);
        this.direction_pos.node.rotation = rotation;
      },
      showTurn: function showTurn() {
        var index = GameData.getPlayerIndex(this.turnUid);
        if (index < 0) return;
        var direction;
        direction = 0 == index ? "dong" : 3 == index ? "nan" : 2 == index ? "xi" : 1 == index ? "bei" : "dong";
        var texture = cc.textureCache.addImage(cc.url.raw("resources/table/" + direction + ".png"));
        this.direction_pos.spriteFrame = new cc.SpriteFrame(texture);
        cc.find("down", this.direction_turn).active = false;
        cc.find("right", this.direction_turn).active = false;
        cc.find("up", this.direction_turn).active = false;
        cc.find("left", this.direction_turn).active = false;
        direction = GameData.getPlayerPosByUid(this.turnUid);
        if (null == direction) return;
        cc.find(direction, this.direction_turn).active = true;
      },
      runCountDown: function runCountDown() {
        this.showCountDown(this._countdown_index + "");
        if (this._countdown_index <= 0) this._countdown_index = 10; else {
          3 == this._countdown_index && this.turnUid == GameData.player.uid && soundMngr.instance.playAudioOther("countdown");
          this._countdown_index--;
        }
      },
      showCountDown: function showCountDown(num) {
        var ary = num.split("");
        if (0 == ary.length) return;
        var url1;
        var url2;
        if (1 == ary.length) {
          url1 = cc.url.raw("resources/number/jinzi0.png");
          url2 = cc.url.raw("resources/number/jinzi" + num + ".png");
        } else {
          if (2 != ary.length) return;
          url1 = cc.url.raw("resources/number/jinzi" + ary[0] + ".png");
          url2 = cc.url.raw("resources/number/jinzi" + ary[1] + ".png");
        }
        var texture1 = cc.textureCache.addImage(url1);
        var texture2 = cc.textureCache.addImage(url2);
        this.countdown_num1.spriteFrame = new cc.SpriteFrame(texture1);
        this.countdown_num2.spriteFrame = new cc.SpriteFrame(texture2);
      },
      updateRoundString: function updateRoundString() {
        var showRoundNum = this.roundCur > this.roundMax ? this.roundMax : this.roundCur;
        this.lastRoundLabel.string = showRoundNum + "/" + this.roundMax;
      },
      updateLeftCardNumber: function updateLeftCardNumber() {
        this.leftNumber < 0 ? this.leftNumber = 0 : null;
        this.leftCardNumLabel.string = this.leftNumber;
      },
      updateRoundRule: function updateRoundRule() {
        if (this.roundRule >= 4) {
          this.quanNode.active = true;
          this.juNode.active = false;
        } else {
          this.quanNode.active = false;
          this.juNode.active = true;
        }
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine"
  } ],
  tableDynAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4104PotCJBEoxRKR3raFbF", "tableDynAnimation");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var pokerAnimBase = require("pokerAnimationBase");
    cc.Class({
      extends: cc.Component,
      properties: {
        layer: cc.Node,
        animationList: {
          default: [],
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.AnimBase = new pokerAnimBase();
      },
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {},
      playAnimation: function playAnimation(index, scale, fromPos, toPos) {
        var animationNode = this.animationList[index];
        if (void 0 == animationNode) return;
        toPos && toPos.y && (toPos.y += 10);
        var node = cc.instantiate(animationNode);
        node.parent = this.layer;
        node.active = true;
        node.scale = scale;
        var self = this;
        var fun1 = function fun1(node) {
          var fun2 = function fun2(node) {
            node.destroy();
          };
          self.AnimBase.playDragonBonesAnimation(node, "touxiangxiaoguo", 1, null, null, fun2);
          soundMngr.instance.playTableDynAudio(index, 1);
        };
        this.AnimBase.playDragonBonesAnimation(node, "feixing", 0, fromPos, toPos, fun1);
        soundMngr.instance.playTableDynAudio(index, 0);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    pokerAnimationBase: "pokerAnimationBase"
  } ],
  tablePlayersControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6900fTMI0pO64ZRrdlxI80l", "tablePlayersControl");
    "use strict";
    var gameDefine = require("gameDefine");
    var soundMngr = require("SoundMngr");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        play_up_player: cc.Node,
        play_down_player: cc.Node,
        play_left_player: cc.Node,
        play_right_player: cc.Node,
        readyNode: cc.Node,
        lostNode: cc.Node,
        playerTemplate: cc.Prefab,
        dragonBonesNode: cc.Prefab
      },
      onLoad: function onLoad() {
        registEvent("onRoomChat", this, this.onRoomChatHandler);
        registEvent("dynChat", this, this.dynChatHandler);
        this.headers = [];
        this.zhuangUid = 0;
        this.turnUid = 0;
        this.roomState = -1;
        this.readyData = {};
        this.scoreData = {};
        this.onLineData = {};
        this.addDynAnimation();
        this.showPlayers();
        this.updatePlayerZhuang();
        this.updatePlayerReady();
        this.updatePlayerTurn();
        this.updatePlayerScore();
        this.updatePlayerOnLine();
      },
      onEnable: function onEnable() {},
      onDestroy: function onDestroy() {
        unregistEvent("onRoomChat", this, this.onRoomChatHandler);
        unregistEvent("dynChat", this, this.dynChatHandler);
      },
      setPlayerZhuang: function setPlayerZhuang(uid) {
        this.zhuangUid = uid;
        this.updatePlayerZhuang();
      },
      setRoomReadyData: function setRoomReadyData(state, data) {
        this.roomState = state;
        this.readyData = data;
        this.updatePlayerReady();
      },
      setPlayerTurn: function setPlayerTurn(uid) {
        this.turnUid = uid;
        this.updatePlayerTurn();
      },
      setPlayerScoreData: function setPlayerScoreData(data) {
        if (void 0 == data) return;
        this.scoreData = data;
        this.updatePlayerScore();
      },
      setPlayerOnLineData: function setPlayerOnLineData(data) {
        if (void 0 == data) return;
        this.onLineData = data;
        this.updatePlayerOnLine();
      },
      dynChatHandler: function dynChatHandler(data) {
        if (void 0 == data || void 0 == data.detail) return;
        var index = data.detail.chatId, fromUid = data.detail.fromUid, toUid = data.detail.toUid;
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (animationNode) {
          var template = animationNode.getComponent("tableDynAnimation");
          if (template) {
            var fromPos = this.getHeadPositionOnUid(fromUid);
            var toPos = this.getHeadPositionOnUid(toUid);
            template.playAnimation(index, .65, fromPos, toPos);
          }
        }
      },
      addDynAnimation: function addDynAnimation() {
        var animationNode = this.node.getChildByName("uiAnimationNode");
        if (void 0 == animationNode) {
          animationNode = cc.instantiate(this.dragonBonesNode);
          animationNode.parent = this.node;
          animationNode.name = "uiAnimationNode";
        }
      },
      showPlayers: function showPlayers() {
        this.headers = [];
        this.showPlayer("down", this.play_down_player);
        this.showPlayer("right", this.play_right_player);
        this.showPlayer("up", this.play_up_player);
        this.showPlayer("left", this.play_left_player);
      },
      showPlayer: function showPlayer(direction, parent) {
        var player = GameData.getPlayerByPos(direction);
        if (null != player) {
          var playerNode = parent.getChildByName("playerNode");
          if (void 0 == playerNode) {
            playerNode = cc.instantiate(this.playerTemplate);
            playerNode.name = "playerNode";
            playerNode.parent = parent;
          }
          parent.active = true;
          playerNode.getComponent("playerTemplate").setPlayer(player);
          playerNode.getComponent("playerTemplate").setName(player.name);
          playerNode.getComponent("playerTemplate").setHeadIcon(player.headimgurl);
          this.headers.push(playerNode);
        } else parent.active = false;
      },
      updatePlayerZhuang: function updatePlayerZhuang() {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode) {
            var playerTemplate = headerNode.getComponent("playerTemplate");
            var zhuangShow = this.zhuangUid == playerTemplate.uid;
            playerTemplate.showZhuang(zhuangShow);
          }
        }
      },
      updatePlayerTurn: function updatePlayerTurn() {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode) {
            var uid = headerNode.getComponent("playerTemplate").uid;
            var disNode = cc.find("liuguang", headerNode);
            disNode && (disNode.active = this.turnUid == uid);
          }
        }
      },
      updatePlayerScore: function updatePlayerScore() {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode) {
            var uid = headerNode.getComponent("playerTemplate").uid;
            var score = void 0 == this.scoreData[uid] ? 0 : this.scoreData[uid];
            headerNode.getComponent("playerTemplate").setCoin(score);
          }
        }
      },
      updatePlayerReady: function updatePlayerReady() {
        for (var i = 0; i < this.headers.length; i++) {
          var ready1 = false, ready2 = false;
          var headerNode = this.headers[i];
          if (headerNode) {
            var playerTemplate = headerNode.getComponent("playerTemplate");
            this.roomState >= 0 && this.roomState < gameDefine.RoomState.GAMEING && (true == this.readyData[playerTemplate.uid] ? ready2 = true : ready1 = true);
          }
          var direction = GameData.getPlayerPosByUid(playerTemplate.uid);
          this.showReadyIcon(direction, ready2, ready1);
          cc.log("...ready:" + direction, ready2, ready1);
        }
      },
      updatePlayerOnLine: function updatePlayerOnLine() {
        for (var i = 0; i < this.headers.length; i++) {
          var onLine = false;
          var headerNode = this.headers[i];
          if (headerNode) {
            var playerTemplate = headerNode.getComponent("playerTemplate");
            onLine = RoomHandler.isPlayerOnline(playerTemplate.uid);
            playerTemplate.setIsOnline(onLine);
          }
          var direction = GameData.getPlayerPosByUid(playerTemplate.uid);
          this.showLostIcon(direction, onLine);
        }
      },
      showReadyIcon: function showReadyIcon(direction, showHand, showReading) {
        var readyHand = cc.find("ready_hand_" + direction, this.readyNode);
        readyHand && (readyHand.active = showHand);
        var readying = cc.find("readying_" + direction, this.readyNode);
        readying && (readying.active = showReading);
      },
      showLostIcon: function showLostIcon(direction, online) {
        var lostNode = cc.find("lost_" + direction, this.lostNode);
        lostNode && (lostNode.active = !online);
      },
      onRoomChatHandler: function onRoomChatHandler(data) {
        var uid = data.detail.uid;
        var type = data.detail.msg.type;
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (headerNode.getComponent("playerTemplate").uid == uid) {
            var direction = GameData.tablePos[uid];
            var content;
            var chatNode = cc.find("chat_" + direction, headerNode);
            if (null != chatNode) {
              var wordNode = cc.find("word", chatNode);
              var emoNode = cc.find("emo", chatNode);
              var yuyinNode = cc.find("yuyinNode", chatNode);
              var chatBg = cc.find("word/bg", chatNode);
              var chatLabel = cc.find("word/Label", chatNode).getComponent(cc.Label);
              if ("word" == type) {
                content = data.detail.msg.data;
                chatLabel.string = content;
                chatBg.width = 20 + 24 * content.length;
                wordNode.getComponent("HideComponent").show(3);
              } else if ("fast" == type) {
                var soundKey = data.detail.msg.data.sound;
                content = data.detail.msg.data.content;
                var contentStr = getShortStr(content, 20);
                chatLabel.string = contentStr;
                chatBg.width = 30 * contentStr.length;
                var playerSex = GameData.getPlayerSexByUid(uid);
                soundMngr.instance.playAudioChat(soundKey, playerSex);
                wordNode.getComponent("HideComponent").show(3);
              } else if ("emo" == type) {
                var animationName = data.detail.msg.data;
                emoNode.getComponent(cc.Animation).play(animationName);
                emoNode.getComponent("HideComponent").show(3);
              } else if ("yuyin" == type) {
                if (!GameData.isPlayVioce) return;
                var soundurl = data.detail.msg.data;
                cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org.cocos2dx.javascript.AppActivity", "playRecord", "(Ljava/lang/String;)V", soundurl) : cc.sys.OS_IOS == cc.sys.os && jsb.reflection.callStaticMethod("AppController", "playRecord:", String(soundurl));
                var yuyinAnim = cc.find("yuyinAnimNode/yuyinAnim", yuyinNode);
                yuyinAnim.getComponent(cc.Animation).play("yuyinduihua");
                yuyinNode.getComponent("HideComponent").show(3);
              }
            }
          }
        }
      },
      getHeadPositionOnUid: function getHeadPositionOnUid(uid) {
        for (var i = 0; i < this.headers.length; i++) {
          var headerNode = this.headers[i];
          if (void 0 == headerNode) continue;
          var template = headerNode.getComponent("playerTemplate");
          if (void 0 == template) continue;
          if (template.uid != uid) continue;
          return headerNode.parent.position;
        }
        return 0;
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  talkView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ffd49ngdldMuocTF5VeV5kJ", "talkView");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        voiceBtnNode: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("yunwaUploaded", this, this.handleVoice);
        registEvent("shortRecord", this, this.YVShortRecordCallback);
      },
      onDestroy: function onDestroy() {
        unregistEvent("yunwaUploaded", this, this.handleVoice);
        unregistEvent("shortRecord", this, this.YVShortRecordCallback);
      },
      onEnable: function onEnable() {
        this.setVoiceBtn();
        this.initTalkNode();
      },
      setVoiceBtn: function setVoiceBtn() {
        var self = this;
        this.voiceBtnNode.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (inCD(1e3)) return;
          self.startTalk();
        });
        this.voiceBtnNode.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var movePos = event.touch.getLocation();
          var talkBtnWorldPos = this.convertToWorldSpace(this.getPosition());
          var RelativeCoordinatePos = {};
          RelativeCoordinatePos.x = talkBtnWorldPos.x - this.getPosition().x + 170;
          RelativeCoordinatePos.y = talkBtnWorldPos.y - this.getPosition().y + 50;
          var distance = cc.pDistance(movePos, RelativeCoordinatePos);
          distance > this.width && self.cancelTalk();
        });
        this.voiceBtnNode.on(cc.Node.EventType.TOUCH_END, function() {
          self.endTalk();
        });
        this.voiceBtnNode.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          self.endTalk();
        });
      },
      initTalkNode: function initTalkNode() {
        this.talkNode = new cc.Node();
        this.talkNode.setTag("talkNode");
        var sprite = cc.textureCache.addImage(cc.url.raw("resources/animation/yuyin/yuyinjingtan.png"));
        var spriteNode = this.talkNode.addComponent(cc.Sprite);
        spriteNode.spriteFrame = new cc.SpriteFrame(sprite);
        var animNode = this.talkNode.addComponent(cc.Animation);
        cc.loader.loadRes("animation/yuyin/yuyin", function(err, clip) {
          animNode.addClip(clip, "yuyin");
        });
        cc.loader.loadRes("animation/yuyin/CancelSend", function(err, clip) {
          animNode.addClip(clip, "CancelSend");
        });
        cc.loader.loadRes("animation/yuyin/ShortRecoed", function(err, clip) {
          animNode.addClip(clip, "ShortRecoed");
        });
      },
      startTalk: function startTalk() {
        yunwaStartTalk();
        GameData.isPlayVioce = true;
        cc.audioEngine.pauseAll();
        cc.director.getScene().getChildByName("Canvas").addChild(this.talkNode);
        this.talkNode.getComponent(cc.Animation).play("yuyin");
      },
      endTalk: function endTalk() {
        yunwaStopTalk();
        GameData.isPlayVioce = false;
        cc.audioEngine.resumeAll();
        cc.director.getScene().getChildByName("Canvas").removeChildByTag("talkNode");
      },
      cancelTalk: function cancelTalk() {
        GameData.isPlayVioce = false;
        cc.audioEngine.resumeAll();
        this.talkNode.getComponent(cc.Animation).play("CancelSend");
      },
      handleVoice: function handleVoice(data) {
        var soundurl = data.detail;
        ChatHandler.getInstance().sendRecord(soundurl);
      },
      YVShortRecordCallback: function YVShortRecordCallback() {
        cc.director.getScene().getChildByName("Canvas").addChild(this.talkNode);
        this.talkNode.getComponent(cc.Animation).play("ShortRecoed");
        this.unschedule(this.goToHide);
        this.scheduleOnce(this.goToHide, 1);
      },
      goToHide: function goToHide() {
        cc.director.getScene().getChildByName("Canvas").removeChildByTag("talkNode");
      }
    });
    cc._RF.pop();
  }, {} ],
  "tdk-ResultRender": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80d00XDENdJsrwk6r6GnH1a", "tdk-ResultRender");
    "use strict";
    var tdk_roomData = require("tdkRoomData");
    var gameDefine = require("gameDefine");
    var roomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        maxWinner: cc.Node,
        nameLbl: cc.Label,
        userIdLbl: cc.Label,
        winNumLbl: cc.Label,
        loseNumLbl: cc.Label,
        baoNumLbl: cc.Label,
        doubleKingLbl: cc.Label,
        fourSameLbl: cc.Label,
        creatorIcon: cc.Node,
        headIcon: cc.Node,
        roomScoreLbl: cc.Label,
        fonts: [ cc.Font ],
        _playerInfo: null,
        infoNode: cc.Node
      },
      onLoad: function onLoad() {},
      initUI: function initUI() {
        var player = this._playerInfo;
        JSON.stringify("结算玩家数据  " + JSON.stringify(player));
        this.nameLbl.string = getShortStr(player.name, 10);
        this.userIdLbl.string = "ID: " + player.uid;
        var self = this;
        this.headIcon.getComponent(cc.Sprite).spriteFrame = null;
        null != player.headimgurl && "" != player.headimgurl && player.headimgurl.length > 0 && cc.loader.load({
          url: player.headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (self.headIcon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
        });
        this.winNumLbl.string = 0;
        this.loseNumLbl.string = 0;
        this.baoNumLbl.string = 0;
        this.doubleKingLbl.string = 0;
        this.fourSameLbl.string = 0;
        var resultInfo = tdk_roomData.resultData;
        if (tdk_roomData.resultData.statis && tdk_roomData.resultData.statis[player.uid]) {
          this.winNumLbl.string = resultInfo.statis[player.uid].win;
          this.loseNumLbl.string = resultInfo.statis[player.uid].lost;
          this.baoNumLbl.string = resultInfo.statis[player.uid].baozi;
          this.doubleKingLbl.string = resultInfo.statis[player.uid].kings;
          this.fourSameLbl.string = resultInfo.statis[player.uid].zhadan;
        }
        var scoreData;
        var eveScore = 0;
        if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Coin) {
          if (roomHandler.coinData.coins) {
            scoreData = roomHandler.coinData.coins;
            eveScore = scoreData[player.uid];
          }
        } else if (GameData.room.opts.currencyType == gameDefine.currencyType.Currency_Card && tdk_roomData.resultData.score && tdk_roomData.resultData.score[player.uid]) {
          scoreData = resultInfo.score;
          eveScore = scoreData[player.uid];
        }
        if (eveScore > 0) {
          this.roomScoreLbl.string = "+" + eveScore;
          this.roomScoreLbl.font = this.fonts[0];
        } else if (eveScore < 0) {
          this.roomScoreLbl.string = eveScore;
          this.roomScoreLbl.font = this.fonts[1];
        } else if (0 == eveScore) {
          this.roomScoreLbl.string = eveScore;
          this.roomScoreLbl.font = this.fonts[2];
        }
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var maxScore = [];
          for (var key in scoreData) maxScore.push(scoreData[key]);
          var index = 0;
          for (var i = 1; i < maxScore.length; i++) maxScore[i] && maxScore[i] > maxScore[index] && (index = i);
          return maxScore[index];
        };
        void 0 != scoreData && GetScoreMaxUid() == scoreData[player.uid] && (this.maxWinner.active = true);
        this.creatorIcon.active = player.uid == GameData.room.creator;
      },
      getActiveNode: function getActiveNode() {
        return this.infoNode;
      },
      initData: function initData(playerInfo) {
        if (!playerInfo) return;
        this._playerInfo = playerInfo;
        cc.log("tdk_roomData.resultData = " + JSON.stringify(tdk_roomData.resultData));
        Object.keys(tdk_roomData.resultData).length > 0 && this.initUI();
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler",
    tdkRoomData: "tdkRoomData"
  } ],
  "tdk-debug": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78b06ZrCApAV4ARVl5JucF8", "tdk-debug");
    "use strict";
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        debugBtn: cc.Node
      },
      onLoad: function onLoad() {
        var setCardsOpen = configMgr.getSetCardsOpen();
        this.debugBtn.active = setCardsOpen;
      },
      onOkBtnClick: function onOkBtnClick() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {
          console.log("--- 调牌结果 " + JSON.stringify(rtn));
        });
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr"
  } ],
  "tdk-resultFlyScore": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e944hpZtNEeYfE2Q5ji8P3", "tdk-resultFlyScore");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreLabel: cc.Label,
        fonts: [ cc.Font ]
      },
      onLoad: function onLoad() {},
      getScoreColor: function getScoreColor(score) {
        this.scoreLabel.getComponent(cc.Label).string = score;
        if (score > 0) {
          this.scoreLabel.getComponent(cc.Label).string = "+" + score;
          this.scoreLabel.getComponent(cc.Label).font = this.fonts[0];
        } else if (score < 0) {
          this.scoreLabel.getComponent(cc.Label).string = score;
          this.scoreLabel.getComponent(cc.Label).font = this.fonts[1];
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  tdkRoomData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ccd21DbO1tHRoJO9zKPbbYG", "tdkRoomData");
    "use strict";
    var room_tdk = {
      roundNum: 0,
      roundmax: 0,
      addpokersRight: false,
      createRoomOpts: {},
      pokers: {},
      roomInfo: {},
      initScore: [],
      turn: 0,
      score: [],
      maxScore: 0,
      allInscore: 0,
      actionBtn: {},
      turnerAction: {},
      close: 0,
      gameResult: {},
      resultData: {},
      connectWin: 0,
      presentScore: {},
      incPokerData: {},
      DropPlayerInfo: {},
      onRoomReadyInfo: {}
    };
    module.exports = room_tdk;
    room_tdk.initCreateRoomOpts = function() {
      var data = cc.sys.localStorage.getItem("createRoomOpts_tdk");
      if (null != data) {
        room_tdk.createRoomOpts = JSON.parse(data);
        return;
      }
      room_tdk.createRoomOpts = {};
      room_tdk.createRoomOpts.playType = 2;
      room_tdk.createRoomOpts.king = false;
      room_tdk.createRoomOpts.nextDouble = false;
      room_tdk.createRoomOpts.roundMax = 15;
      room_tdk.createRoomOpts.roundRule = 71;
      room_tdk.createRoomOpts.quanya = 0;
      room_tdk.createRoomOpts.costType = 1;
      room_tdk.createRoomOpts.player = 4;
    };
    room_tdk.saveCreateRoomOpts = function() {
      if (null == room_tdk.createRoomOpts || void 0 == room_tdk.createRoomOpts) return;
      cc.sys.localStorage.setItem("createRoomOpts_tdk", JSON.stringify(room_tdk.createRoomOpts));
    };
    room_tdk.getHandPokerByUid = function(uid) {
      for (var key in room_tdk.pokers) if (key == uid) return room_tdk.pokers[key];
      return null;
    };
    room_tdk.getPlayerSexByUid = function(uid) {
      for (var i = 0; i < GameData.joiners.length; ++i) if (GameData.joiners[i] && GameData.joiners[i].uid == uid) return GameData.joiners[i].sex;
      return null;
    };
    room_tdk.getPlayerInfoByUid = function(uid) {
      for (var i = 0; i < GameData.joiners.length; i++) if (GameData.joiners[i].uid == uid) return GameData.joiners[i];
      return null;
    };
    room_tdk.getPlayerPosByUid = function(uid) {
      for (var i = 0; i < GameData.joiners.length; i++) if (GameData.joiners[i].uid == uid) return i;
      return null;
    };
    room_tdk.getLocalPosition = function(index) {
      var selfIndex = 0;
      var temp = [];
      for (var i = 0; i < GameData.joiners.length; i++) temp.push(i);
      var selfIndx = room_tdk.getPlayerPosByUid(GameData.player.uid);
      var prev = temp.slice(temp.indexOf(selfIndx));
      prev = prev.concat(temp.slice(0, temp.indexOf(selfIndx)));
      return prev.indexOf(index);
    };
    room_tdk.registMessage = function() {
      room_tdk.initCreateRoomOpts();
      GameNet.getInstance().setCallBack("onPlayerIncScore", function(data) {
        WriteLog("do event onPlayerIncScore  " + JSON.stringify(data));
        var turnerscore = data;
        for (var i = 0; i < turnerscore.length; i++) {
          var userid = turnerscore[i].uid;
          var preScore = turnerscore[i].score;
          room_tdk.presentScore[userid] || (room_tdk.presentScore[userid] = {});
          room_tdk.presentScore[userid] = preScore;
        }
        sendEvent("onPlayerIncScore", data);
      });
      GameNet.getInstance().setCallBack("onPlayerInitScore", function(data) {
        WriteLog("do event onPlayerInitScore  " + JSON.stringify(data));
        room_tdk.initScore = data;
        for (var i = 0; i < room_tdk.initScore.length; i++) {
          var userid = room_tdk.initScore[i].uid;
          var preScore = room_tdk.initScore[i].score;
          room_tdk.presentScore[userid] || (room_tdk.presentScore[userid] = {});
          room_tdk.presentScore[userid] = preScore;
        }
        sendEvent("onPlayerInitScore", data);
      });
      GameNet.getInstance().setCallBack("onTurner", function(data) {
        WriteLog("onTurner:" + JSON.stringify(data));
        room_tdk.turn = data.uid;
        sendEvent("onTurner", data);
      });
      GameNet.getInstance().setCallBack("onActionBtn", function(data) {
        WriteLog("onActionBtn:" + JSON.stringify(data));
        room_tdk.actionBtn = data;
        data.allinScore && (room_tdk.allInscore = data.allinScore);
        room_tdk.maxScore = data.score;
        sendEvent("onActionBtn", data);
      });
      GameNet.getInstance().setCallBack("onPlayerCards", function(data) {
        WriteLog("onPlayerCards:" + JSON.stringify(data));
        for (var key in data) room_tdk.pokers[key] = data[key];
        for (var key in room_tdk.pokers) data[key] || delete room_tdk.pokers[key];
        room_tdk.addpokersRight = true;
        sendEvent("onPlayerCards", data);
      });
      GameNet.getInstance().setCallBack("onTurnerAction", function(data) {
        WriteLog("onTurnerAction:" + JSON.stringify(data));
        room_tdk.turnerAction = data;
        sendEvent("onTurnerAction", data);
      });
      GameNet.getInstance().setCallBack("onGameResult", function(data) {
        WriteLog("onGameResult:" + JSON.stringify(data));
        room_tdk.gameResult = data;
        sendEvent("onGameResult", data);
      });
      GameNet.getInstance().setCallBack("onGameAllResult", function(data) {
        WriteLog("onGameAllResult:" + JSON.stringify(data));
        room_tdk.close = true;
        room_tdk.resultData = data;
        sendEvent("onGameAllResult", data);
      });
      GameNet.getInstance().setCallBack("onIncScore", function(data) {
        WriteLog("onIncScore:" + JSON.stringify(data));
        room_tdk.incPokerData = data;
        sendEvent("onIncScore", data);
      });
      GameNet.getInstance().setCallBack("onDropPlayerInfo", function(data) {
        WriteLog("onDropPlayerInfo:" + JSON.stringify(data));
        room_tdk.DropPlayerInfo = data;
        sendEvent("onDropPlayerInfo", data);
      });
      GameNet.getInstance().setCallBack("onRotInfo", function(data) {
        WriteLog("onRotInfo:" + JSON.stringify(data));
        room_tdk.connectWin = data.winner;
        sendEvent("onRotInfo", data);
      });
    };
    room_tdk.unregistAllMessage = function() {
      GameNet.getInstance().removeAllListeners("onPlayerIncScore");
      GameNet.getInstance().removeAllListeners("onPlayerInitScore");
      GameNet.getInstance().removeAllListeners("onTurner");
      GameNet.getInstance().removeAllListeners("onActionBtn");
      GameNet.getInstance().removeAllListeners("onPlayerCards");
      GameNet.getInstance().removeAllListeners("onTurnerAction");
      GameNet.getInstance().removeAllListeners("onGameResult");
      GameNet.getInstance().removeAllListeners("onGameAllResult");
      GameNet.getInstance().removeAllListeners("onIncScore");
      GameNet.getInstance().removeAllListeners("onDropPlayerInfo");
    };
    cc._RF.pop();
  }, {} ],
  "tenNN-createRoom": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1e9bcaZVFF95QeX9lXa52i", "tenNN-createRoom");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        spend: {
          default: [],
          type: [ cc.Label ]
        },
        drowArray: {
          default: [],
          type: [ cc.Node ]
        }
      },
      onLoad: function onLoad() {
        this.spendData = void 0;
        this.refreshNiuNiuUI();
      },
      createRoom: function createRoom() {
        this.saveNiuNiuRule();
        profileNiuNiu.saveCreateRoomOpts();
        GameData.setGameType(gameDefine.GameType.Game_Niu_Niu_10);
        var createData = profileNiuNiu.createRoomOpts;
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Niu_Niu_10) return createData;
        createData.currencyType = modeTypeData.Game_Niu_Niu_10.CurrencyType;
        createData.settleType = modeTypeData.Game_Niu_Niu_10.SettleType;
        return createData;
      },
      saveNiuNiuRule: function saveNiuNiuRule() {
        var panel = this.node;
        var roundToggleArry = [ cc.find("/round/ToggleGroup/round10", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round20", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round30", panel).getComponent(cc.Toggle) ];
        var selectedRooundType = 10;
        for (var i = 0; i < roundToggleArry.length; i++) roundToggleArry[i].isChecked && (selectedRooundType = 10 * (i + 1));
        profileNiuNiu.createRoomOpts.roundMax = selectedRooundType;
        profileNiuNiu.createRoomOpts.roundRule = selectedRooundType / 10;
        var bossType = 0;
        var bossTypes = [ cc.find("/bossType/ToggleGroup/boss1", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss2", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss3", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < bossTypes.length; i++) bossTypes[i].isChecked && (bossType = i + 1);
        profileNiuNiu.createRoomOpts.bossType = bossType;
        var baseScore = 0;
        var baseScores = [ cc.find("/baseScore/toggleGroup/score1", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score2", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score5", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < baseScores.length; i++) baseScores[i].isChecked && (baseScore = this.getScoreBeseNum(baseScores[i].node));
        profileNiuNiu.createRoomOpts.scoreBase = baseScore;
        var multipleType = 0;
        var multipleTypes = [ cc.find("/multipleType/ToggleGroup/multiple1", panel).getComponent(cc.Toggle), cc.find("/multipleType/ToggleGroup/multiple2", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < multipleTypes.length; i++) multipleTypes[i].isChecked && (multipleType = i);
        profileNiuNiu.createRoomOpts.multipleType = multipleType;
        var cost_type = 0;
        var cost_types = [ cc.find("/rule_roomPay/toggleGroup/roomOwner", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/AA", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/winPlayer", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < cost_types.length; i++) cost_types[i].isChecked && (cost_type = i + 1);
        profileNiuNiu.createRoomOpts.costType = cost_type;
        profileNiuNiu.createRoomOpts.joinermax = 10;
        profileNiuNiu.createRoomOpts.gameType = 104;
        this.showSpendUI();
      },
      refreshNiuNiuUI: function refreshNiuNiuUI() {
        var panel = this.node;
        var roundToggleArry = [ cc.find("/round/ToggleGroup/round10", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round20", panel).getComponent(cc.Toggle), cc.find("/round/ToggleGroup/round30", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < roundToggleArry.length; i++) roundToggleArry[i].isChecked = i + 1 == profileNiuNiu.createRoomOpts.roundMax / 10;
        var bossType = 0;
        var bossTypes = [ cc.find("/bossType/ToggleGroup/boss1", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss2", panel).getComponent(cc.Toggle), cc.find("/bossType/ToggleGroup/boss3", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < bossTypes.length; i++) bossTypes[i].isChecked = i + 1 == profileNiuNiu.createRoomOpts.bossType;
        var baseScore = 0;
        var baseScores = [ cc.find("/baseScore/toggleGroup/score1", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score2", panel).getComponent(cc.Toggle), cc.find("/baseScore/toggleGroup/score5", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < baseScores.length; i++) baseScores[i].isChecked = this.getScoreBeseNum(baseScores[i].node) == profileNiuNiu.createRoomOpts.scoreBase;
        var multipleTypes = [ cc.find("/multipleType/ToggleGroup/multiple1", panel).getComponent(cc.Toggle), cc.find("/multipleType/ToggleGroup/multiple2", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < multipleTypes.length; i++) multipleTypes[i].isChecked = i == profileNiuNiu.createRoomOpts.multipleType;
        profileNiuNiu.createRoomOpts.costType > 3 ? profileNiuNiu.createRoomOpts.costType = 1 : null;
        var cost_types = [ cc.find("/rule_roomPay/toggleGroup/roomOwner", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/AA", panel).getComponent(cc.Toggle), cc.find("/rule_roomPay/toggleGroup/winPlayer", panel).getComponent(cc.Toggle) ];
        for (var i = 0; i < cost_types.length; i++) cost_types[i].isChecked = i + 1 == profileNiuNiu.createRoomOpts.costType;
        this.showSpendUI();
      },
      showSpendUI: function showSpendUI() {
        cc.log("..mode..niuniu10");
        var str1 = "", str2 = "";
        var modeTypeData = configMgr.getModeType();
        if (void 0 == modeTypeData || void 0 == modeTypeData.Game_Niu_Niu_10) return;
        var serverConfig = configMgr.getServerConfig();
        if (void 0 == serverConfig) return;
        this.modeType = modeTypeData.Game_Niu_Niu_10.CurrencyType;
        switch (this.modeType) {
         case gameDefine.currencyType.Currency_Card:
          str1 = "房卡";
          this.spendData = serverConfig.roomCard[gameDefine.GameType.Game_Niu_Niu_10];
          break;

         case gameDefine.currencyType.Currency_Coin:
          str1 = "金";
          this.spendData = serverConfig.roomCoin[gameDefine.GameType.Game_Niu_Niu_10];
        }
        if (!this.spendData) {
          cc.log("..spendData is undefined");
          return;
        }
        var cost;
        var number = 10;
        for (var key = 0; key < Object.keys(this.spendData).length; key++) {
          var final = 0;
          if (this.modeType == gameDefine.currencyType.Currency_Card) {
            cost = this.spendData[key + 1].cost;
            final = cost[number].final;
            this.spend[key].string = "（" + str1 + "*" + final + "）";
          } else {
            cost = this.spendData[key].cost;
            final = cost[number].final;
            str2 = "/局";
            this.spend[key].string = "";
          }
          this.drowArray[key].active = 0 == final;
        }
      },
      getScoreBeseNum: function getScoreBeseNum(node) {
        var nameStr = node.name;
        var num = nameStr.substring(5, nameStr.length);
        return parseInt(num);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  test: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "09c9bRJQjdIq7sJQm1QX3zG", "test");
    "use strict";
    var _roomCard;
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var gameDefine = require("gameDefine");
    var TestConfig = {
      gameName: "若宇测试麻将",
      areaType: gameDefine.AreaType.Area_Test,
      serverIP: "47.104.25.227",
      serverPort: 3010,
      versionText: "测试服版本",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/rytianjinmajiang",
      wxWelcomeText: "还等嘛!我在天津攒局麻将等你!",
      loginLogo: "resources/login/cuanjumajiang.png",
      agentWeChat: {
        accounts: {
          number: 123,
          type: "(微信号)"
        },
        agentConsult: {
          number: 456,
          type: "(QQ号)"
        },
        gameProblem: {
          number: 789,
          type: "(手机号)"
        }
      },
      Poster: [ "resources/poster/tianjin/poster_tianjin_1.png" ],
      CompetitionPoster: [ "resources/poster/tianjin/poster_tianjin_1.png", "resources/poster/tianjin/poster_tianjin_2.png", "resources/poster/tianjin/poster_tianjin_1.png", "resources/poster/tianjin/poster_tianjin_2.png" ],
      GameVisible: [ gameDefine.GameType.Game_MJ_HuaDian, gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_Mj_HZ, gameDefine.GameType.Game_Mj_CC, gameDefine.GameType.Game_Mj_AS, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_TDK, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_Niu_Niu_10, gameDefine.GameType.Game_Poker_paodekuai, gameDefine.GameType.Game_Poker_ZJH ],
      SetCardsOpen: true,
      MatchGameType: [ gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_Poker_ZJH, gameDefine.GameType.Game_Poker_HHDZ, gameDefine.GameType.Game_Niu_Hundred ],
      FightGameType: [ gameDefine.GameType.Game_Poker_ZJH, gameDefine.GameType.Game_Poker_ZJH ],
      ModeType: {
        Game_Mj_Tianjin: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_TianjinDDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_niu_niu: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Niu_Niu_10: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_TDK: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_CC: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_MJ_HuaDian: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Mj_Heb: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            sumLv: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          5: {
            name: "牛牛匹配局",
            sumLv: 3,
            cost: [ 50, 300, 2e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            sumLv: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            sumLv: 3,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          8: {
            name: "天津斗地主匹配局",
            sumLv: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          10: {
            name: "长春麻将匹配局",
            sumLv: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            sumLv: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          },
          102: {
            name: "经典斗地主匹配局",
            sumLv: 3,
            cost: [ 100, 500, 2e3 ],
            enter: [ 2e3, 1e4, 5e4 ]
          },
          103: {
            name: "三张牌匹配局",
            sumLv: 3,
            cost: [ 50, 300, 1e3 ],
            enter: [ 2e4, 1e5, 5e5 ]
          },
          105: {
            name: "牛牛匹配局",
            sumLv: 3,
            cost: [ 0, 0, 0 ],
            enter: [ 1e3, 1e4, 1e5 ],
            zhuang: [ 1e6, 2e6, 5e6 ]
          },
          106: {
            name: "红黑大战匹配局",
            sumLv: 1,
            cost: [ 66 ],
            enter: [ 666 ]
          }
        },
        fight: {
          1: {
            templateId: 1,
            name: "炸金花16人比赛场",
            type: 2,
            gameType: 103,
            minPlayerNum: 8,
            maxPlayerNum: 16,
            signCosts: {
              1: 1
            },
            rankGroups: [ 1, 2, 3, 4, 16 ],
            giftGroups: [ [ {
              1: 10
            }, {
              3: 5
            } ], [ {
              1: 5
            }, {
              3: 2
            } ], [], [], [] ],
            roundArray: [ 3, 3, 3, 3 ],
            roundPlayers: [ 16, 12, 8, 4 ]
          },
          2: {
            templateId: 2,
            name: "炸金花32人比赛场",
            type: 2,
            gameType: 103,
            minPlayerNum: 16,
            maxPlayerNum: 32,
            signCosts: {
              1: 1
            },
            rankGroups: [ 1, 2, 3, 4, 16 ],
            giftGroups: [ [ {
              1: 10
            }, {
              3: 5
            } ], [ {
              1: 5
            }, {
              3: 2
            } ], [], [], [] ],
            roundArray: [ 3, 3, 3, 3 ],
            roundPlayers: [ 32, 16, 8, 4 ]
          }
        },
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              3: [ 2e4, 4e4, 1e5 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 4e4, 1e5 ],
              3: [ 4e4, 8e4, 2e5 ],
              4: [ 4e4, 8e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              3: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 8e4, 2e5 ],
              3: [ 8e4, 16e4, 4e5 ],
              4: [ 8e4, 16e4, 4e5 ]
            }
          } ],
          6: [ {
            name: "6局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 100, 200, 500 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "12局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "24局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 100, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 200, 200, 5e4 ],
              4: [ 200, 400, 1e3 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 300, 300, 6e4 ],
              4: [ 300, 500, 2e3 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 400, 400, 7e4 ],
              4: [ 400, 600, 3e3 ]
            }
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ],
          10: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          13: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 1e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "1圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 2e4, 2e4, 5e4 ],
              4: [ 2e4, 4e4, 1e5 ]
            }
          }, {
            name: "2圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 3e4, 3e4, 6e4 ],
              4: [ 3e4, 5e4, 2e5 ]
            }
          }, {
            name: "4圈",
            roundType: 1,
            roundMax: 4,
            cost: {
              2: [ 100, 200, 500 ],
              4: [ 100, 200, 500 ]
            },
            enter: {
              2: [ 4e4, 4e4, 7e4 ],
              4: [ 4e4, 6e4, 3e5 ]
            }
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 5e3, 1e4, 2e4 ]
            }
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: {
              3: [ 100, 200, 500 ]
            },
            enter: {
              3: [ 1e4, 2e4, 4e4 ]
            }
          } ]
        },
        roomCard: (_roomCard = {
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          2: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 20
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            },
            4: {
              name: "1课/50分",
              cost: {
                2: {
                  final: 20
                },
                3: {
                  final: 30
                },
                4: {
                  final: 40
                }
              }
            },
            5: {
              name: "1课/100分",
              cost: {
                2: {
                  final: 40
                },
                3: {
                  final: 60
                },
                4: {
                  final: 80
                }
              }
            }
          },
          3: {
            1: {
              name: "15局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            2: {
              name: "30局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            3: {
              name: "45局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            4: {
              name: "60局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            },
            5: {
              name: "75局",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          6: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 1
                },
                4: {
                  final: 1
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 2
                },
                4: {
                  final: 2
                }
              }
            }
          },
          7: {
            71: {
              name: "15局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            },
            72: {
              name: "30局",
              cost: {
                3: {
                  final: 0
                },
                4: {
                  final: 0
                },
                5: {
                  final: 0
                },
                6: {
                  final: 0
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          10: {
            61: {
              name: "4局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            62: {
              name: "8局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            63: {
              name: "16局",
              cost: {
                2: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                4: {
                  final: 0
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 0
                },
                3: {
                  final: 0
                }
              }
            }
          },
          13: {
            61: {
              name: "6局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            62: {
              name: "12局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            63: {
              name: "24局",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            64: {
              name: "1圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            65: {
              name: "2圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            },
            66: {
              name: "4圈",
              cost: {
                2: {
                  final: 0
                },
                4: {
                  final: 0
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 0
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 0
                }
              }
            }
          }
        }, _defineProperty(_roomCard, "5", {
          1: {
            name: "10局",
            cost: {
              6: {
                final: 0
              }
            }
          },
          2: {
            name: "20局",
            cost: {
              6: {
                final: 0
              }
            }
          },
          3: {
            name: "30局",
            cost: {
              6: {
                final: 0
              }
            }
          }
        }), _defineProperty(_roomCard, "104", {
          1: {
            name: "10局",
            cost: {
              10: {
                final: 0
              }
            }
          },
          2: {
            name: "20局",
            cost: {
              10: {
                final: 0
              }
            }
          },
          3: {
            name: "30局",
            cost: {
              10: {
                final: 0
              }
            }
          }
        }), _roomCard)
      }
    };
    module.exports = TestConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  tianjin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d3d51MKiJGr56Zh9TmnjAH", "tianjin");
    "use strict";
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var gameDefine = require("gameDefine");
    var TianJinConfig = {
      areaType: gameDefine.AreaType.Area_TianJin,
      serverIP: "mahjong.ry-tianjin.xyz",
      serverPort: 3010,
      gameName: "天津攒局麻将",
      versionText: "审批文号：新广出审[2017]10415号  出版物号：ISBN978-7-498-03201-0  出版单位：天津电子出版社有限公司",
      notice: "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活.",
      wxShareUrl: "https://fir.im/rytianjinmajiang",
      wxWelcomeText: "还等嘛!我在天津攒局麻将等你!",
      loginLogo: "resources/login/cuanjumajiang.png",
      agentWeChat: {
        accounts: {
          number: "",
          type: "cjmajiang"
        },
        agentConsult: {
          number: "",
          type: "mu141319"
        },
        gameProblem: {
          number: "",
          type: "mu141219"
        }
      },
      Poster: [],
      GameVisible: [ gameDefine.GameType.Game_Mj_Tianjin, gameDefine.GameType.Game_Poker_DDZ, gameDefine.GameType.Game_Poker_TianjinDDZ, gameDefine.GameType.Game_Poker_paodekuai, gameDefine.GameType.Game_niu_niu, gameDefine.GameType.Game_Niu_Niu_10, gameDefine.GameType.Game_Poker_ZJH ],
      ModeType: {
        Game_Mj_Tianjin: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_TianjinDDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_DDZ: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Poker_paodekuai: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_niu_niu: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        },
        Game_Niu_Niu_10: {
          CurrencyType: gameDefine.currencyType.Currency_Card,
          SettleType: []
        }
      },
      SetCardsOpen: false,
      MatchGameType: [],
      serverConfig: {
        matchCoin: {
          1: {
            name: "天津麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e4 ]
          },
          8: {
            name: "天津斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          102: {
            name: "经典斗地主匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 3,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e4 ]
          },
          5: {
            name: "牛牛匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          6: {
            name: "桦甸麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          7: {
            name: "填大坑匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 300, 1e3, 5e3 ],
            enter: [ 3e4, 1e5, 5e5 ]
          },
          10: {
            name: "长春麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 5e3, 15e3, 1e5 ]
          },
          13: {
            name: "哈尔滨麻将匹配局",
            roundType: 1,
            roundMax: 1,
            joinerMax: 4,
            cost: [ 100, 300, 1e3 ],
            enter: [ 2e3, 15e3, 1e5 ]
          }
        },
        roomCoin: {
          1: [ {
            name: "4局",
            roundType: 1,
            roundMax: 4,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "8局",
            roundType: 1,
            roundMax: 8,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "16局",
            roundType: 1,
            roundMax: 16,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          }, {
            name: "1圈",
            roundType: 2,
            roundMax: 1,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "2圈",
            roundType: 2,
            roundMax: 2,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "4圈",
            roundType: 2,
            roundMax: 4,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ],
          8: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ],
          102: [ {
            name: "6局",
            roundType: 1,
            roundMax: 6,
            cost: 1,
            enter: [ 20, 50, 100 ],
            perround: 5
          }, {
            name: "10局",
            roundType: 1,
            roundMax: 10,
            cost: 2,
            enter: [ 40, 100, 200 ],
            perround: 5
          }, {
            name: "20局",
            roundType: 1,
            roundMax: 20,
            cost: 4,
            enter: [ 80, 200, 400 ],
            perround: 5
          } ]
        },
        roomCard: _defineProperty({
          1: {
            1: {
              name: "4局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            2: {
              name: "8局",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            3: {
              name: "16局",
              cost: {
                2: {
                  final: 4
                },
                3: {
                  final: 6
                },
                4: {
                  final: 8
                }
              }
            },
            4: {
              name: "1圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            5: {
              name: "2圈",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 3
                },
                4: {
                  final: 4
                }
              }
            },
            6: {
              name: "4圈",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 9
                },
                4: {
                  final: 12
                }
              }
            }
          },
          8: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          11: {
            10: {
              name: "10",
              cost: {
                2: {
                  final: 2
                },
                3: {
                  final: 2
                }
              }
            },
            20: {
              name: "20",
              cost: {
                2: {
                  final: 3
                },
                3: {
                  final: 3
                }
              }
            },
            30: {
              name: "30",
              cost: {
                2: {
                  final: 6
                },
                3: {
                  final: 6
                }
              }
            }
          },
          102: {
            6: {
              name: "6局",
              cost: {
                3: {
                  final: 2
                }
              }
            },
            10: {
              name: "10局",
              cost: {
                3: {
                  final: 3
                }
              }
            },
            20: {
              name: "20局",
              cost: {
                3: {
                  final: 6
                }
              }
            }
          },
          5: {
            1: {
              name: "10局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                6: {
                  final: 0
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                6: {
                  final: 0
                }
              }
            }
          },
          104: {
            1: {
              name: "10局",
              cost: {
                10: {
                  final: 3
                }
              }
            },
            2: {
              name: "20局",
              cost: {
                10: {
                  final: 6
                }
              }
            },
            3: {
              name: "30局",
              cost: {
                10: {
                  final: 9
                }
              }
            }
          }
        }, "5", {
          1: {
            name: "10局",
            cost: {
              6: {
                final: 2
              }
            }
          },
          2: {
            name: "20局",
            cost: {
              6: {
                final: 4
              }
            }
          },
          3: {
            name: "30局",
            cost: {
              6: {
                final: 6
              }
            }
          }
        })
      }
    };
    module.exports = TianJinConfig;
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine"
  } ],
  timeView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "153eeBLUhlCR4RS0QNu0yfA", "timeView");
    "use strict";
    var roomUtil = require("roomUtil");
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label
      },
      onEnable: function onEnable() {
        this.showTime();
        this.schedule(this.showTime, 1);
      },
      showTime: function showTime() {
        this.timeLabel.string = roomUtil.getTimeString();
      }
    });
    cc._RF.pop();
  }, {
    roomUtil: "roomUtil"
  } ],
  tingView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2146PdZOhGo6AG8oXKibvK", "tingView");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: cc.Node,
        nbg: cc.Node,
        cardTemplate: cc.Node
      },
      onLoad: function onLoad() {
        this.bgHeight = this.bg.height;
        this.nbgHeight = this.nbg.height;
        this.cardNodeList = [];
        this.cardTemplate.active = false;
      },
      show: function show(selectCard, tingData) {
        var huCards = [], showCards = [], tempCards = {}, totalLeft = 0;
        for (var i = 0; i < tingData.length; i++) {
          var data = tingData[i];
          if (data.discard == selectCard) {
            huCards = data.ting;
            break;
          }
        }
        if (!(huCards.length > 0)) {
          this.node.active = false;
          return;
        }
        this.node.active = true;
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.destroy();
        }
        this.cardNodeList.splice(0, this.cardNodeList.length);
        for (var t = 0; t < huCards.length; t++) {
          var item = huCards[t];
          var key = item.type.toString();
          "4" === key && (key = "3");
          tempCards[key] = tempCards[key] || [];
          tempCards[key].push(item);
        }
        for (var i in tempCards) {
          var item = tempCards[i];
          if (item.length >= 15) showCards.push({
            obcard: -1,
            score: item[0].score
          }); else for (var n in item) showCards.push({
            obcard: item[n].obcard,
            score: item[n].score
          });
        }
        showCards.sort(function(a, b) {
          return b.score - a.score;
        });
        var anyIdx = -1;
        for (var i = 0; i < showCards.length; i++) {
          if (-1 == showCards[i].obcard) {
            anyIdx = i;
            continue;
          }
          var obcard = showCards[i].obcard;
          var score = showCards[i].score;
          var leftCount = this.leftCard(obcard);
          totalLeft += leftCount;
          this.showCardNode(obcard, score, leftCount);
        }
        if (anyIdx >= 0) {
          var obcard = "renyi";
          var score = showCards[anyIdx].score;
          var leftCount = GameData.game.cardleft - totalLeft;
          totalLeft = GameData.game.cardleft;
          this.showCardNode(obcard, score, leftCount);
        }
        cc.find("totalLeftLabel", this.node).getComponent(cc.Label).string = "剩余" + totalLeft + "张";
        var length = this.cardNodeList.length;
        var oneRowCount = length > 4 ? Math.ceil(length / 2) : length;
        var lineCount = Math.ceil(length / oneRowCount);
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.x = this.cardTemplate.x + i % oneRowCount * 90;
          cardNode.y = this.cardTemplate.y - 154 * Math.floor(i / oneRowCount);
        }
        this.nbg.width = 90 * oneRowCount;
        this.bg.width = 220 + this.nbg.width;
        if (length > 4) {
          this.bg.height = 370;
          this.nbg.height = 300;
        } else {
          this.bg.height = this.bgHeight;
          this.nbg.height = this.nbgHeight;
        }
      },
      hide: function hide() {
        this.node.active = false;
      },
      showCardNode: function showCardNode(card, score, left) {
        var cardNode = cc.instantiate(this.cardTemplate);
        var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cc.find("scoreLabel", cardNode).getComponent(cc.Label).string = score + "分";
        cc.find("leftLabel", cardNode).getComponent(cc.Label).string = left + "张";
        cc.find("mask", cardNode).active = 0 == left;
        cardNode.active = true;
        this.node.addChild(cardNode);
        this.cardNodeList.push(cardNode);
      },
      leftCard: function leftCard(obcard) {
        var knowCount = 0;
        var cards = GameData.getMyHandCards();
        for (var key in cards) obcard == key && (knowCount += cards[key]);
        for (var index = 0; index < GameData.joiners.length; index++) {
          var player = GameData.joiners[index];
          if (!player) continue;
          var uid = player.uid;
          var disCards = GameData.getDisCards(uid);
          var pengCards = GameData.getPengCards(uid);
          var gangCards = GameData.getGangCards(uid);
          for (var key in disCards) obcard == disCards[key] && (knowCount += 1);
          for (var key in pengCards) obcard == pengCards[key][0] && (knowCount += 3);
          for (var key in gangCards) obcard == gangCards[key][0] && (knowCount += 4);
        }
        var leftCount = 4 - knowCount;
        leftCount = leftCount <= 0 ? 0 : leftCount;
        return leftCount;
      }
    });
    cc._RF.pop();
  }, {} ],
  topHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3e344Nxd8tBpaV3kERRw1bt", "topHandler");
    "use strict";
    var gameDefine = require("gameDefine");
    var errorCode = require("errorCode");
    var topHandler = {};
    module.exports = topHandler;
    topHandler.getCoinTopList = function() {
      GameNet.getInstance().request("game.topHandler.getCoinlist", null, function(rtn) {
        rtn && sendEvent("updateCoinTopList", rtn);
      });
    };
    cc._RF.pop();
  }, {
    errorCode: "errorCode",
    gameDefine: "gameDefine"
  } ],
  uiCardTest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01606fjUmpKMKq8oNCXlfKs", "uiCardTest");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        parents: {
          default: [],
          type: cc.Node
        }
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  uiDebug: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "21701FFR8hJErEuDQQXv2dl", "uiDebug");
    "use strict";
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        editCards: cc.EditBox,
        cardInput: cc.EditBox,
        wildCards: cc.EditBox,
        parents: {
          default: [],
          type: cc.Node
        }
      },
      onLoad: function onLoad() {},
      onClose: function onClose() {
        this.node.active = false;
      },
      onSetCards: function onSetCards() {
        var str = this.editCards.string.split(",");
        var cards = [];
        for (var i = 0; i < str.length; i++) cards.push(parseInt(str[i]));
        var data = {
          roomid: GameData.room.id,
          cards: cards
        };
        GameNet.getInstance().request("game.debugHandler.setCards", data, function(rtn) {
          cc.log("debug rtn: ", JSON.stringify(rtn));
        });
      },
      onSetWildcard: function onSetWildcard() {
        var str = this.wildCards.string;
        var data = {
          roomid: GameData.room.id,
          cards: parseInt(str)
        };
        GameNet.getInstance().request("game.debugHandler.setWildCards", data, function(rtn) {});
      },
      testAllCardShow: function testAllCardShow() {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          "layer_down" != parent.name && (cc.find("cardHand", parent).active = false);
        }
        var cardId = this.cardInput.string;
        this.testHand(cardId);
        this.testPeng(cardId);
        this.testDis(cardId);
      },
      testHand: function testHand(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          if ("layer_down" == parent.name) {
            var cardHandParent = cc.find("cardHand", parent);
            for (var n = 0; n < cardHandParent.childrenCount; n++) {
              var cardHand = cardHandParent.getChildByName("cardHand" + n);
              this.showCardContent(cardHand, "mj_card_xia_shou", cardId);
            }
          }
        }
      },
      testDis: function testDis(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          parent.active = true;
          var cardDis = cc.find("cardDis", parent);
          for (var n = 0; n < cardDis.childrenCount; n++) {
            var disCard = cardDis.getChildByName("card_face" + (n + 1));
            disCard.active = true;
            "layer_down" == parent.name ? this.showCardContent(disCard, "mj_card_xia_chu", cardId) : "layer_right" == parent.name ? this.showCardContent(disCard, "mj_card_you_chu", cardId) : "layer_left" == parent.name ? this.showCardContent(disCard, "mj_card_zuo_chu", cardId) : "layer_up" == parent.name && this.showCardContent(disCard, "mj_card_shang_chu", cardId);
          }
        }
      },
      testPeng: function testPeng(cardId) {
        for (var i = 0; i < this.parents.length; i++) {
          var parent = this.parents[i];
          for (var n = 0; n < GameData.room.joinermax; n++) {
            var pengParent = cc.find("cardPeng/cardPeng" + (n + 1), parent);
            pengParent.active = true;
            for (var m = 0; m < 4; m++) {
              var cardFace = pengParent.getChildByName("card_face" + (m + 1));
              cardFace.active = true;
              "layer_down" == parent.name ? this.showCardContent(cardFace, "mj_card_xia_peng", cardId) : "layer_right" == parent.name ? this.showCardContent(cardFace, "mj_card_you_peng", cardId) : "layer_left" == parent.name ? this.showCardContent(cardFace, "mj_card_zuo_peng", cardId) : "layer_up" == parent.name && this.showCardContent(cardFace, "mj_card_shang_chu", cardId);
            }
          }
        }
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        if (null == card) {
          cc.log("missing card Component, please add it");
          return;
        }
        var cardIndex = card.index;
        var iconUrl = "resources/mjcard/" + cardHeader + "_" + cardIndex + "_" + cardId + ".png";
        cc.log("load Card URL :" + iconUrl);
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
      }
    });
    cc._RF.pop();
  }, {
    configMgr: "configMgr",
    gameDefine: "gameDefine"
  } ],
  uiRoomDissolve: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58561UVV4JKO6ZrbzuJSNvN", "uiRoomDissolve");
    "use strict";
    var RoomHandler = require("roomHandler");
    var gameDefine = require("gameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        headPanel: cc.Node,
        headerNode: cc.Node,
        agreeWaitNode: cc.Node,
        agreeBtn: cc.Node,
        disAgreeBtn: cc.Node,
        dissolvePerson: cc.Label,
        lastTimeLabel: cc.Label
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.onRoomInfoHandler);
        registEvent("onRoomDissolve", this, this.onRoomDissolveHandler);
        registEvent("showDissolve", this, this.showDissolveLayer);
        this.lastTimeLabel.string = "";
        this.openDisAgree = false;
        this.initHeaderUI();
        this.showDissolveText();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.onRoomInfoHandler);
        unregistEvent("onRoomDissolve", this, this.onRoomDissolveHandler);
        unregistEvent("showDissolve", this, this.showDissolveLayer);
      },
      onRoomInfoHandler: function onRoomInfoHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomInfoSetData(data.detail);
        this.initHeaderUI();
      },
      onRoomDissolveHandler: function onRoomDissolveHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomDissolveSetData(data.detail);
        this.initHeaderUI();
        this.showDissolveText();
      },
      showDissolveLayer: function showDissolveLayer(data) {
        cc.log("..showDissolve:" + data.detail);
        this.node.active = data.detail;
      },
      initHeaderUI: function initHeaderUI() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        for (var ii = 0; ii < this.headPanel.getChildrenCount(); ii++) {
          var child = this.headPanel.getChildren()[ii];
          child && (child.active = false);
        }
        for (var index = 0; index < roomData.opts.joinermax; index++) {
          var playerData = GameData.joiners[index];
          if (void 0 == playerData) continue;
          var headNode = this.headPanel.getChildren()[index];
          if (void 0 == headNode) {
            headNode = cc.instantiate(this.headerNode);
            headNode.parent = this.headPanel;
            headNode.name = "headNode" + index;
            headNode.y = this.headerNode.y;
            headNode.x = this.headerNode.x + index * (this.headerNode.width + 50);
          }
          headNode.tag = playerData.uid;
          headNode.active = true;
          var nameStr = playerData.name;
          var nameNode = cc.find("nameLabel", headNode);
          nameNode.getComponent(cc.Label).string = getShortStr(nameStr, 4);
          var headImgurl = playerData.headimgurl;
          var headSprite = cc.find("headimg", headNode).getComponent(cc.Sprite);
          this.showHeaderIcon(headSprite, headImgurl);
          var onLine = RoomHandler.isPlayerOnline(playerData.uid);
          this.showLostIcon(headNode, onLine);
        }
      },
      showHeaderIcon: function showHeaderIcon(headSprite, headimgurl) {
        if (void 0 == headSprite || void 0 == headimgurl || headimgurl.length <= 0) return;
        cc.loader.load({
          url: headimgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (headSprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      showLostIcon: function showLostIcon(headNode, onLine) {
        var disNode = cc.find("lost", headNode);
        disNode.active = !onLine;
      },
      showAgreeIcon: function showAgreeIcon(headNode, show) {
        var node = cc.find("duigou", headNode);
        node.active = show;
      },
      alreadyAgree: function alreadyAgree(act) {
        this.agreeWaitNode.active = !act;
        this.agreeBtn.active = act;
        this.disAgreeBtn.active = act;
      },
      handleSomebodyDisagree: function handleSomebodyDisagree(uid) {
        if (uid == GameData.player.uid) return;
        if (this.openDisAgree) return;
        var playerData = GameData.getPlayerByUid(uid);
        if (playerData) {
          var self = this;
          var name = playerData.name;
          createMessageBox("因［" + name + "］拒绝解散房间，游戏需继续进行", function() {
            self.openDisAgree = false;
          });
          this.openDisAgree = true;
        }
      },
      showDissolveText: function showDissolveText() {
        var dissolveData = RoomHandler.getRoomDissolveData();
        if (void 0 == dissolveData || Object.keys(dissolveData).length <= 0) return;
        GameData.showResult = false;
        var playerData, headNode, show = true;
        for (var uid in dissolveData.select) {
          var select = dissolveData.select[uid];
          if ("apply" == select) {
            playerData = GameData.getPlayerByUid(uid);
            if (playerData) {
              this.dissolvePerson.string = "[" + playerData.name + "]发起投票解散对局";
              headNode = this.headPanel.getChildByTag(parseInt(uid));
              headNode && this.showAgreeIcon(headNode, true);
            }
          } else if ("agree" == select) {
            headNode = this.headPanel.getChildByTag(parseInt(uid));
            headNode && this.showAgreeIcon(headNode, true);
          } else if ("disagree" == select) {
            sendEvent("showDissolve", false);
            this.handleSomebodyDisagree(uid);
            return;
          }
          "agree" != select && "apply" != select || uid != GameData.player.uid || (show = false);
        }
        this.alreadyAgree(show);
        sendEvent("showDissolve", true);
        this.handleVoteResult();
        this.handleRoomDisbandTimer();
      },
      handleVoteResult: function handleVoteResult() {
        var dissolveData = RoomHandler.getRoomDissolveData();
        if (void 0 == dissolveData) return;
        if (false == dissolveData.isStart) {
          sendEvent("showDissolve", false);
          this.unschedule(this.updateLastTime);
          setTimeout(function() {
            GameData.roomClose && sendEvent("showSummary");
          }, 100);
        }
      },
      handleRoomDisbandTimer: function handleRoomDisbandTimer() {
        var dissolveData = RoomHandler.getRoomDissolveData();
        if (void 0 == dissolveData) return;
        this.totalTime = dissolveData.startTime;
        this.lastTime = dissolveData.lastTime;
        this.schedule(this.updateLastTime, 1);
      },
      updateLastTime: function updateLastTime() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        this.lastTime--;
        this.lastTimeLabel.string = "倒计时结束后自动解散牌局   " + formatSeconds(this.lastTime, 1);
        if (this.lastTime <= 0) {
          RoomHandler.deleteRoom(roomData.id, "close");
          this.unschedule(this.updateLastTime);
        }
      },
      requestDissolveAgree: function requestDissolveAgree() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        RoomHandler.deleteRoom(roomData.id, "agree");
      },
      requestDissolveDisagree: function requestDissolveDisagree() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        RoomHandler.deleteRoom(roomData.id, "disagree");
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  uiRoomMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ca0fwZMLlB4r7egPTIITcN", "uiRoomMain");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var configMgr = require("configMgr");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    var hongzhongData = require("hongzhongData");
    cc.Class({
      extends: cc.Component,
      properties: {
        uiWaitLayer: cc.Node,
        resultLayer: cc.Node,
        dissolveLayer: cc.Node,
        summaryLayer: cc.Node,
        scoreLayer: cc.Node,
        debugLayer: cc.Node,
        mapLayer: cc.Node,
        layerPlayer: cc.Node,
        debugBtn: cc.Node,
        mapBtnNode: cc.Node,
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node,
        uiResult: cc.Prefab,
        uiSummary: cc.Prefab,
        uiDissolve: cc.Prefab,
        uiScore: cc.Prefab,
        uiMap: cc.Prefab,
        uiDebug: cc.Prefab,
        uiPlayers: cc.Prefab,
        tableUI: {
          default: [],
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        cc.log("..uiMain onLoad.");
        registEvent("onRoomInfo", this, this.RoomInfoHandler);
        registEvent("onGameStart", this, this.GameStartHandler);
        registEvent("onGameScore", this, this.GameScoreHandler);
        registEvent("onJoinerLost", this, this.showJoinerLost);
        registEvent("onJoinerConnect", this, this.showJoinerConnect);
        registEvent("showSummary", this, this.showSummaryLayer);
        registEvent("onRoomInfo", this, this.onRoomInfoHandler);
        registEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.RoomInfoHandler);
        unregistEvent("onGameStart", this, this.GameStartHandler);
        unregistEvent("onGameScore", this, this.GameScoreHandler);
        unregistEvent("onJoinerLost", this, this.showJoinerLost);
        unregistEvent("onJoinerConnect", this, this.showJoinerConnect);
        unregistEvent("showSummary", this, this.showSummaryLayer);
        unregistEvent("onRoomInfo", this, this.onRoomInfoHandler);
        unregistEvent("onPrepareInfo", this, this.onRoomReadyInfoHandler);
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
      },
      onEnable: function onEnable() {
        cc.log("..uiMain onEnable.");
        MjHandler.getInstance().requestReady();
        scheduleLamp(this);
        this.initUIData();
        this.initUIShow();
        this.addPlayers();
        this.addUIResult();
        this.addUISummary();
        this.addUIScore();
        this.addUIDissolve();
        this.addUIMap();
        this.addUIDebug();
        this.setUIBaseInfo();
      },
      onRoomInfoHandler: function onRoomInfoHandler() {
        this.updatePlayersWithRoom();
      },
      onRoomReadyInfoHandler: function onRoomReadyInfoHandler() {
        this.updatePlayersReady();
      },
      initUIData: function initUIData() {
        cc.log("...room main init data.");
        RuleHandler.instance.setGameType(GameData.client.gameType);
        this._curGameData = void 0;
        this.setCurGameData();
      },
      initUIShow: function initUIShow() {
        this.debugBtn.active = configMgr.getSetCardsOpen();
        this.resultLayer.active = false;
        this.summaryLayer.active = false;
        this.setLayerShow();
      },
      setCurGameData: function setCurGameData() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        switch (roomData.opts.gameType) {
         case gameDefine.GameType.Game_Mj_HZ:
          this._curGameData = hongzhongData;
        }
      },
      setLayerShow: function setLayerShow() {
        var roomData = RoomHandler.getRoomData();
        roomData && (roomData.status >= gameDefine.RoomState.GAMEING ? this.showTableLayer() : this.showWaitLayer());
      },
      RoomInfoHandler: function RoomInfoHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomInfoSetData(data.detail);
        this.setCurGameData();
        this.setLayerShow();
        this.addUIResult();
        this.addUISummary();
        this.addUIScore();
      },
      GameStartHandler: function GameStartHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameStartSetData(data.detail);
        this.showTableLayer();
        this.mapCondition();
        this.setMapBtnShow();
      },
      GameScoreHandler: function GameScoreHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameScoreSetData(data.detail);
        this.showResultLayer();
      },
      addPlayers: function addPlayers() {
        var uiPlayersNode = this.layerPlayer.getChildByName("uiPlayers");
        if (void 0 == uiPlayersNode) {
          uiPlayersNode = cc.instantiate(this.uiPlayers);
          uiPlayersNode.parent = this.layerPlayer;
          uiPlayersNode.name = "uiPlayers";
        }
        this.updatePlayersWithRoom();
      },
      updatePlayersWithRoom: function updatePlayersWithRoom() {
        var scoreData = RoomHandler.getScoreData();
        var onLineData = RoomHandler.getOnLinesData();
        if (void 0 == scoreData || void 0 == onLineData) return;
        var uiPlayersNode = this.layerPlayer.getChildByName("uiPlayers");
        if (uiPlayersNode) {
          var template = uiPlayersNode.getComponent("tablePlayersControl");
          template.showPlayers();
          template.setPlayerScoreData(scoreData);
          template.setPlayerOnLineData(onLineData);
          this.updatePlayersReady();
        }
      },
      updatePlayersReady: function updatePlayersReady() {
        var roomData = RoomHandler.getRoomData();
        var readyData = RoomHandler.getRoomReadyData();
        if (void 0 == roomData || void 0 == readyData) return;
        var uiPlayersNode = this.layerPlayer.getChildByName("uiPlayers");
        if (uiPlayersNode) {
          var template = uiPlayersNode.getComponent("tablePlayersControl");
          template.setRoomReadyData(roomData.status, readyData);
        }
      },
      addUIResult: function addUIResult() {
        var uiResultNode = this.resultLayer.getChildByName("uiResult");
        if (void 0 == uiResultNode) {
          uiResultNode = cc.instantiate(this.uiResult);
          uiResultNode.parent = this.resultLayer;
          uiResultNode.name = "uiResult";
        }
        var template = uiResultNode.getComponent("uiRoomResult");
        template._curGameData = this._curGameData;
      },
      addUISummary: function addUISummary() {
        var uiSummaryNode = this.summaryLayer.getChildByName("uiSummary");
        if (void 0 == uiSummaryNode) {
          uiSummaryNode = cc.instantiate(this.uiSummary);
          uiSummaryNode.parent = this.summaryLayer;
          uiSummaryNode.name = "uiSummary";
        }
        var template = uiSummaryNode.getComponent("uiRoomSummary");
        template._curGameData = this._curGameData;
      },
      addUIScore: function addUIScore() {
        var uiScore = this.scoreLayer.getChildByName("uiScore");
        if (void 0 == uiScore) {
          uiScore = cc.instantiate(this.uiScore);
          uiScore.parent = this.scoreLayer;
          uiScore.name = "uiScore";
          uiScore.active = false;
        }
        var template = uiScore.getComponent("uiRoomScore");
        template._curGameData = this._curGameData;
      },
      addUIDissolve: function addUIDissolve() {
        var uiDissolveNode = this.dissolveLayer.getChildByName("uiDissolve");
        if (void 0 == uiDissolveNode) {
          uiDissolveNode = cc.instantiate(this.uiDissolve);
          uiDissolveNode.parent = this.dissolveLayer;
          uiDissolveNode.name = "uiDissolve";
          uiDissolveNode.active = false;
        }
      },
      addUIMap: function addUIMap() {
        var uiMap = this.mapLayer.getChildByName("uiMap");
        if (void 0 == uiMap) {
          uiMap = cc.instantiate(this.uiMap);
          uiMap.parent = this.mapLayer;
          uiMap.name = "uiMap";
          uiMap.active = false;
        }
      },
      addUIDebug: function addUIDebug() {
        var uiDebug = this.debugLayer.getChildByName("uiDebug");
        if (void 0 == uiDebug) {
          uiDebug = cc.instantiate(this.uiDebug);
          uiDebug.parent = this.debugLayer;
          uiDebug.name = "uiDebug";
          uiDebug.active = false;
        }
      },
      showWaitLayer: function showWaitLayer() {
        this.uiWaitLayer.active = true;
        this.showTableUI(false);
        this.resultLayer.active = false;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showTableLayer: function showTableLayer() {
        this.showTableUI(true);
        this.uiWaitLayer.active = false;
        this.resultLayer.active = false;
        soundMngr.instance.playMusic("sound/beijyingyue");
      },
      showTableUI: function showTableUI(show) {
        cc.log("...showTableUI:" + show);
        for (var i = 0; i < this.tableUI.length; i++) {
          var node = this.tableUI[i];
          node.active = show;
        }
      },
      showResultLayer: function showResultLayer() {
        var self = this;
        this.scheduleOnce(function() {
          self.showResultDirectly();
        }, 2);
      },
      showResultDirectly: function showResultDirectly() {
        this.resultLayer.active = true;
        this.uiWaitLayer.active = false;
        this.showTableUI(false);
        var uiResultNode = this.resultLayer.getChildByName("uiResult");
        if (uiResultNode) {
          var template = uiResultNode.getComponent("uiRoomResult");
          template.onShow();
        }
      },
      showSettingLayer: function showSettingLayer(evt) {
        sendEvent("runlamp");
        openView("SettingsPanel");
      },
      showSummaryLayer: function showSummaryLayer() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        this.summaryLayer.active = true;
        sendEvent("onShowSummary");
        GameData.player.uid == roomData.creator ? cc.sys.localStorage.setItem("creatorIsCheckIp", false) : cc.sys.localStorage.setItem("isCheckIp", false);
      },
      showScoreLayer: function showScoreLayer() {
        var uiScore = this.scoreLayer.getChildByName("uiScore");
        if (uiScore) {
          uiScore.active = true;
          var template = uiScore.getComponent("uiRoomScore");
          template.ShowPlayerScoreItem();
        }
      },
      showDebugLayer: function showDebugLayer() {
        var uiDebug = this.debugLayer.getChildByName("uiDebug");
        uiDebug && (uiDebug.active = true);
      },
      showChat: function showChat() {
        if (inCD(3e3)) return;
        openView("ChatPanel");
      },
      showJoinerLost: function showJoinerLost(data) {
        var uid = data.detail.uid;
        var nameStr = GameData.getPlayerByUid(uid).name;
        createMoveMessage("玩家[" + nameStr + "]掉线了。");
      },
      showJoinerConnect: function showJoinerConnect(data) {
        var uid = data.detail.uid;
        var nameStr = GameData.getPlayerByUid(uid).name;
        createMoveMessage("玩家[" + nameStr + "]已上线。");
      },
      mapCondition: function mapCondition() {
        var uiMap = this.mapLayer.getChildByName("uiMap");
        if (uiMap) {
          var template = uiMap.getComponent("AMapPanel");
          template.showPlayers();
        }
        var iconUrl;
        iconUrl = GameData.danger ? "resources/table/map/weixian.png" : "resources/table/map/anquan.png";
        if ("" != iconUrl) {
          console.log("iconUrl = " + iconUrl);
          var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
          this.mapBtnNode.getComponent(cc.Sprite).spriteFrame = null;
          this.mapBtnNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          this.mapBtnNode.active = true;
        }
      },
      showMap: function showMap(eve) {
        var uiMap = this.mapLayer.getChildByName("uiMap");
        if (uiMap) {
          uiMap.active = true;
          var template = uiMap.getComponent("AMapPanel");
          template.showPlayers();
        }
      },
      setMapBtnShow: function setMapBtnShow() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        2 == roomData.opts.joinermax ? this.mapBtnNode.active = false : this.mapBtnNode.active = true;
      },
      onCreatorQuit: function onCreatorQuit() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        GameData.player.roomid = void 0;
        roomData.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      setUIBaseInfo: function setUIBaseInfo() {
        var roomData = RoomHandler.getRoomData();
        var isCreator = roomData.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
      },
      backBtnClicked: function backBtnClicked() {
        var roomData = RoomHandler.getRoomData();
        roomData.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(roomData.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var gameName = getGameTypeNameString(roomData.opts.gameType);
        var title = gameName + "房间号:" + roomData.id;
        4 == roomData.opts.costType && (title = gameName + "(代开)房间号:" + roomData.id);
        var des = this.getInviteStr();
        wxShareText(title, des);
      },
      getInviteStr: function getInviteStr() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var str1 = "玩法:";
        var str2 = ",请您快速加入对局.";
        var playStr = getRuleStrHongZhong(roomData.opts);
        return str1 + playStr + str2;
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          var roomData = RoomHandler.getRoomData();
          RoomHandler.deleteRoom(roomData.id, "close");
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        var roomData = RoomHandler.getRoomData();
        roomData.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(roomData.id);
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var gameName = getGameTypeNameString(roomData.opts.gameType);
        var title = gameName + "房间号:" + roomData.id + ",";
        var des = this.getInviteStr();
        wxShareCommond(title + des);
      }
    });
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    configMgr: "configMgr",
    gameDefine: "gameDefine",
    hongzhongData: "hongzhongData",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  uiRoomPlayerInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a4bdiUwzhOlpxzvj4PP9rM", "uiRoomPlayerInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        headNode: cc.Node,
        nameLabel: cc.Label,
        idLabel: cc.Label,
        winningLabel: cc.Label,
        roundLabel: cc.Label,
        winRateLabel: cc.Label,
        playerTemplate: cc.Prefab,
        _player: void 0
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {},
      onShow: function onShow(player) {
        if (void 0 == player || Object.keys(player).length <= 0) return;
        this._player = player;
        var headNode = this.headNode.getChildByName("playerHeadNode");
        if (void 0 == headNode) {
          headNode = cc.instantiate(this.playerTemplate);
          this.headNode.addChild(headNode);
        }
        var template = headNode.getComponent("playerTemplate");
        if (template) {
          template.setName("");
          template.showZhuang(false);
          template.enableHeadBtn(false);
          template.setHeadIcon(player.headimgurl);
        }
        this.node.active = true;
        isChinese(player.name) ? this.nameLabel.string = getShortStr(player.name, 8) : this.nameLabel.string = getShortStr(player.name, 16);
        this.idLabel.string = player.uid;
      },
      onSendMessage: function onSendMessage(evt, data) {
        if (inCD(1e3)) return;
        if (void 0 == data) return;
        if (void 0 == this._player) return;
        if (this._player.uid == GameData.player.uid) {
          createMoveMessage("不能对自己使用道具哦！");
          return;
        }
        cc.log("..playerUid:" + GameData.player.uid);
        cc.log("..toUid:" + this._player.uid);
        cc.log("..data:" + data);
        ChatHandler.getInstance().dynChat(GameData.player.uid, this._player.uid, data, function(rtn) {});
        this.onClose();
      },
      onClose: function onClose() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  uiRoomResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a63cHYVNdEvJmCrn0se/xJ", "uiRoomResult");
    "use strict";
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultLayer: cc.Node,
        playerItem: cc.Node,
        winSprite: cc.Sprite,
        loseSprite: cc.Sprite,
        pingSprite: cc.Sprite,
        createTime: cc.Label,
        roomID: cc.Label,
        roundNumber: cc.Label,
        cardTemplate: cc.Prefab,
        cardHuier: cc.Prefab,
        playerTemplate: cc.Prefab,
        cardHuimage: cc.Prefab,
        shareBtn: cc.Button,
        readyBtn: cc.Button,
        font: {
          default: [],
          type: [ cc.Font ]
        },
        _curGameData: void 0
      },
      onLoad: function onLoad() {
        this.isMark = 0;
      },
      onDestroy: function onDestroy() {},
      initResultData: function initResultData() {
        cc.log("initResultData");
        this.isHuType = false;
      },
      onShow: function onShow() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        this.initResultData();
        if (roomData.opts.joinermax) {
          this.showResultIcon();
          for (var i = 0; i < roomData.opts.joinermax; i++) {
            this.showPlayer(i);
            this.showCards(i);
            this.showScore(i);
            this.showDetail(i);
            this.showWinIcon(i);
          }
          this.showRoundInfo();
        }
      },
      showPlayer: function showPlayer(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) {
          playerNode = cc.instantiate(this.playerItem);
          playerNode.parent = this.resultLayer;
          playerNode.name = "player" + (index + 1);
          playerNode.x = this.playerItem.x;
          playerNode.y = this.playerItem.y - index * this.playerItem.height;
        }
        var idNode = cc.find("/head/id", playerNode);
        var nameNode = cc.find("/head/name", playerNode);
        var headpicNode = cc.find("/head/headpic", playerNode);
        var zhuangNode = cc.find("/head/zhuang", playerNode);
        var creator = cc.find("/head/creator", playerNode);
        var player = GameData.joiners[index];
        var name = player.name.substring(0, 6) + "...";
        nameNode.getComponent(cc.Label).string = name;
        idNode.getComponent(cc.Label).string = player.uid;
        zhuangNode.active = player.uid == gameInfoData.zhuangUid;
        creator.active = player.uid == roomData.creator;
        var iconSprite = headpicNode.getComponent(cc.Sprite);
        this.setIcon(iconSprite, player.headimgurl);
      },
      showCards: function showCards(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var player = GameData.joiners[index];
        var hu = player.uid == gameInfoData.winnerUid;
        hu && (this.isMark = 0);
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var parent = cc.find("cards", playerNode);
        var handNode = cc.find("cardHand", parent);
        for (var ii = 0; ii < handNode.getChildrenCount(); ii++) {
          var child = handNode.getChildren()[ii];
          child && (child.active = false);
        }
        var cardHand = curGameData.getHandCards(player.uid);
        if (void 0 == cardHand) return;
        var handNumber = cardHand.length;
        var index1 = 1;
        var nodeIndex = 1;
        var show;
        for (var i = handNumber; i >= 0; i--) {
          var cardId = cardHand[i];
          if (void 0 == cardId || cardId <= 0) continue;
          if (RuleHandler.instance.isHuier(cardId)) {
            show = true;
            nodeIndex = handNumber;
            handNumber--;
          } else {
            show = false;
            nodeIndex = index1;
            index1++;
          }
          var node = cc.find("cardHand" + nodeIndex, handNode);
          if (node) {
            node.active = true;
            this.showCardContent(node, "mj_face_xia_shou", cardId);
            this.setMyHuierVisible(node, cardId, "down", show);
            this.setMyHuimageVisible(node, cardId, hu);
          }
        }
        this.showPengCards(player, parent, "mj_face_xia_chu");
      },
      showScore: function showScore(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var scoreData = curGameData.getGameScoreData();
        if (void 0 == scoreData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var uid = GameData.joiners[index].uid;
        var scoreNode = cc.find("score", playerNode);
        if (scoreData[uid] > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + scoreData[uid];
        } else if (scoreData[uid] < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = scoreData[uid];
        } else if (0 == scoreData[uid]) {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = scoreData[uid];
        }
      },
      showDetail: function showDetail(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var player = GameData.joiners[index];
        var termNode = cc.find("term", playerNode);
        var label = termNode.getComponent(cc.Label);
      },
      setIcon: function setIcon(sprite, imgurl) {
        if (void 0 == sprite || void 0 == imgurl || imgurl.length <= 0) return;
        cc.loader.load({
          url: imgurl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      setMyHuierVisible: function setMyHuierVisible(cardNode, cardId, direction, show) {
        var huierNode = cardNode.getChildByName(cardNode.name + "_huier");
        if (null == huierNode) {
          if (true == show) {
            huierNode = cc.instantiate(this.cardHuier);
            huierNode.y = huierNode.y - 18;
            cardNode.addChild(huierNode);
            huierNode.name = cardNode.name + "_huier";
            cc.find("up", huierNode).active = false;
            cc.find("down", huierNode).active = false;
            cc.find("right", huierNode).active = false;
            cc.find("left", huierNode).active = false;
            cc.find(direction, huierNode).active = true;
          }
        } else huierNode.active = show;
      },
      setMyHuimageVisible: function setMyHuimageVisible(cardNode, cardId, isHu) {
        var show = false;
        false == isHu ? show = false : 0 == this.isMark && (show = true);
        var huimageNode = cardNode.getChildByName(cardNode.name + "_hu");
        if (null == huimageNode) {
          if (true == show) {
            huimageNode = cc.instantiate(this.cardHuimage);
            huimageNode.y = huimageNode.y - 20;
            cardNode.addChild(huimageNode);
            huimageNode.name = cardNode.name + "_hu";
          }
        } else huimageNode.active = show;
        true == show && (this.isMark = 1);
      },
      showCardContent: function showCardContent(cardNode, cardHeader, cardId) {
        var card = cardNode.getComponent("Card");
        null != card && (card.id = cardId);
        cardNode.getComponent(cc.Sprite).spriteFrame = null;
        var iconUrl = "resources/mjcard2d/" + cardHeader + "_" + cardId + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        this.setMaskVisible(cardNode, false);
      },
      setMaskVisible: function setMaskVisible(cardNode, show) {
        var maskNode = cardNode.getChildByName(cardNode.name + "_mask");
        if (null == maskNode) {
          if (true == show) {
            maskNode = cc.instantiate(this.cardMaskPrefab);
            cardNode.addChild(maskNode);
            maskNode.name = cardNode.name + "_mask";
          }
        } else maskNode.active = show;
        return maskNode;
      },
      showPengCards: function showPengCards(player, parent, cardHeader) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        if (void 0 == parent || void 0 == player || Object.keys(player).length <= 0) return;
        var pengNode = cc.find("cardPeng", parent);
        for (var ii = 0; ii < pengNode.getChildrenCount(); ii++) {
          var child = pengNode.getChildren()[ii];
          child && (child.active = false);
        }
        var chi = curGameData.getChiCards(player.uid);
        var peng = curGameData.getPengCards(player.uid);
        var gang = curGameData.getGangCards(player.uid);
        if (void 0 == chi || void 0 == gang || void 0 == peng) return;
        var cards = peng.concat(chi);
        var size = parseInt(GameData.client.handsize / 3);
        var index, node, n, face, back, cardsObject, cardsArray, cardId;
        for (index = 0; index < cards.length; index++) {
          if (index >= size) break;
          node = cc.find("cardPeng" + (index + 1), pengNode);
          if (node) {
            for (n = 0; n < 4; n++) {
              face = node.getChildByName("card_face" + (n + 1)).getComponent(cc.Sprite);
              cardsObject = cards[index];
              if (void 0 == cardsObject) break;
              cardsArray = cardsObject.cards;
              if (void 0 == cardsArray || cardsArray.length <= 0) break;
              cardsArray.length >= 1 && cardsArray.sort(function(a, b) {
                return a - b;
              });
              if (n < cardsArray.length) {
                face.node.active = true;
                if (3 == n) {
                  back = node.getChildByName("card_back4").getComponent("cc.Sprite");
                  back.node.active = false;
                }
                cardId = cardsArray[n];
                this.showCardContent(face.node, cardHeader, cardId);
              } else face.node.active = false;
            }
            node.active = true;
          }
        }
        for (;index < gang.length; index++) {
          if (index >= size) break;
          node = cc.find("cardPeng" + (index + 1), pengNode);
          if (node) {
            for (n = 0; n < 4; n++) {
              face = node.getChildByName("card_face" + (n + 1)).getComponent(cc.Sprite);
              cardsObject = gang[index];
              if (void 0 == cardsObject) break;
              cardsArray = cardsObject.cards;
              if (void 0 == cardsArray || cardsArray.length <= 0) break;
              if (n < cardsArray.length) {
                face.node.active = true;
                if (3 == n) {
                  back = node.getChildByName("card_back4").getComponent(cc.Sprite);
                  if (cardsObject.type == GangType.Gang_An) {
                    face.node.active = false;
                    back.node.active = true;
                  } else back.node.active = false;
                }
                cardId = cardsArray[n];
                this.showCardContent(face.node, cardHeader, cardId);
              } else face.node.active = false;
            }
            node.active = true;
          }
        }
      },
      showWinIcon: function showWinIcon(index) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var playerNode = cc.find("player" + (index + 1), this.resultLayer);
        if (void 0 == playerNode) return;
        var uid = GameData.joiners[index].uid;
        var node = cc.find("huIcon", playerNode);
        node.active = uid == gameInfoData.winnerUid;
      },
      showResultIcon: function showResultIcon() {
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var scoreData = curGameData.getGameScoreData();
        if (void 0 == scoreData || Object.keys(scoreData).length <= 0) return;
        var myScore = scoreData[GameData.player.uid];
        if (myScore > 0) {
          this.winSprite.node.active = true;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = false;
        } else if (myScore < 0) {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = true;
          this.pingSprite.node.active = false;
        } else {
          this.winSprite.node.active = false;
          this.loseSprite.node.active = false;
          this.pingSprite.node.active = true;
        }
      },
      showRoundInfo: function showRoundInfo() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var curGameData = this._curGameData;
        if (void 0 == curGameData) return;
        var gameInfoData = curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        this.roomID.string = "房号：" + roomData.id;
        var time = getTimeStr(roomData.createtime);
        this.createTime.string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
        var showRoundNum = gameInfoData.roundNum;
        this.roundNumber.string = "第" + showRoundNum + "局";
      },
      setReady: function setReady() {
        if (GameData.roomClose) {
          this.resultLayer.active = false;
          sendEvent("showSummary");
        } else {
          MjHandler.getInstance().requestReady(function(res) {});
          sendEvent("onGameStart");
        }
      },
      shareRet: function shareRet() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  uiRoomScore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b8a7jAYKRIBoBJjpLtY62c", "uiRoomScore");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        scoreScollView: cc.ScrollView,
        scoreLayer: cc.Node,
        headLayer: cc.Node,
        playerHeadNode: cc.Node,
        playerScoreItem: cc.Node,
        playerSumScore: cc.Node,
        _curGameData: null
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.RoomInfoHandler);
        this.playerMax = 0;
        this.ScoreList = [];
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        this.playerMax = roomData.opts.joinermax;
        this.initPlayerHeadNode();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.RoomInfoHandler);
      },
      RoomInfoHandler: function RoomInfoHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomInfoSetData(data.detail);
        this.initPlayerHeadNode();
      },
      initPlayerHeadNode: function initPlayerHeadNode() {
        for (var ii = 0; ii < this.headLayer.getChildrenCount(); ii++) {
          var child = this.headLayer.getChildren()[ii];
          child && (child.active = false);
        }
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var index = 0;
        for (var jj = 0; jj < this.playerMax; jj++) {
          var joiner = GameData.joiners[jj];
          if (void 0 == joiner) continue;
          var headNode = this.headLayer.getChildren()[index];
          if (void 0 == headNode) {
            headNode = cc.instantiate(this.playerHeadNode);
            headNode.parent = this.headLayer;
          }
          headNode.active = true;
          headNode.x = this.playerHeadNode.x + index * this.playerHeadNode.width;
          var headurl = joiner.headimgurl;
          var headSprite = cc.find("head", headNode).getComponent(cc.Sprite);
          this.setHeadIcon(headurl, headSprite);
          var name = joiner.name;
          var nameNode = cc.find("nick_name", headNode);
          nameNode.getComponent(cc.Label).string = getShortStr(name, 4);
          var show = false;
          roomData.creator == joiner.uid ? show = true : null;
          var owner = cc.find("owner", headNode);
          owner.active = show;
          index++;
        }
      },
      setHeadIcon: function setHeadIcon(url, sprite) {
        if (void 0 == sprite || void 0 == url || url.length <= 0) return;
        cc.loader.load({
          url: url,
          type: "png"
        }, function(error, texture) {
          !error && texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      ShowPlayerScoreItem: function ShowPlayerScoreItem() {
        if (void 0 == this._curGameData) {
          cc.log("...gameData is undefined.");
          return;
        }
        var scoreData = RoomHandler.getScoreData();
        if (void 0 == scoreData) return;
        var gameInfoData = this._curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var len = gameInfoData.roundNum - 1;
        cc.log("...len:" + len);
        var content = this.scoreScollView.content;
        content.height = len * this.playerScoreItem.height;
        for (var ii = 0; ii < content.getChildrenCount(); ii++) {
          var child = content.getChildren()[ii];
          child && (child.active = false);
        }
        for (var jj = 0; jj < len; jj++) {
          var node = content.getChildren()[jj];
          if (void 0 == node) {
            node = cc.instantiate(this.playerScoreItem);
            node.parent = content;
          }
          node.active = true;
          node.x = this.playerScoreItem.x;
          node.y = this.playerScoreItem.y - jj * this.playerScoreItem.height;
          var jushuNode = cc.find("roundNum", node);
          jushuNode.getComponent(cc.Label).string = "第" + (jj + 1) + "局：";
          for (var m = 0; m < 4; m++) {
            var scoreNode = cc.find("scoreNum_" + (m + 1), node);
            scoreNode.active = false;
          }
          for (var kk = 0; kk < this.playerMax; kk++) {
            var playerData = GameData.joiners[kk];
            if (void 0 == playerData) continue;
            var playerUid = playerData.uid;
            var playerScore = scoreData[playerUid];
            void 0 == playerScore ? playerScore = 0 : null;
            var scoreNum = cc.find("scoreNum_" + (kk + 1), node);
            scoreNum.active = true;
            scoreNum.getComponent("cc.Label").string = playerScore > 0 ? "+" + playerScore + "分" : 0 == playerScore ? "0 分" : playerScore + "分";
          }
        }
        this.AddSumScore();
      },
      AddSumScore: function AddSumScore() {
        var scoreData = RoomHandler.getScoreData();
        if (void 0 == scoreData) return;
        var children = this.playerSumScore.children;
        for (var i = 0; i < children.length; i++) i >= this.playerMax && (children[i].active = false);
        for (var j = 0; j < this.playerMax; j++) {
          var Allscore = cc.find("scoreNum_" + (j + 1), this.playerSumScore);
          var playUid = GameData.joiners[j].uid;
          scoreData[playUid] > 0 ? Allscore.getComponent("cc.Label").string = "+" + scoreData[playUid] + "分" : 0 == scoreData[playUid] ? Allscore.getComponent("cc.Label").string = "0 分" : Allscore.getComponent("cc.Label").string = scoreData[playUid] + "分";
        }
      },
      close: function close() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  uiRoomSummary: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b99eeur1xKDpGoXm7BPeIN", "uiRoomSummary");
    "use strict";
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        panel: cc.Node,
        font: {
          default: [],
          type: [ cc.Font ]
        },
        _curGameData: void 0
      },
      onLoad: function onLoad() {
        registEvent("onShowSummary", this, this.onShow);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onShowSummary", this, this.onShow);
      },
      onShow: function onShow() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var idx = 0;
        var playerNode;
        this.showPlayer(GameData.player, ++idx);
        for (var i = 0; i < GameData.joiners.length; i++) {
          if (GameData.joiners[i].uid == GameData.player.uid) continue;
          this.showPlayer(GameData.joiners[i], ++idx);
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = true;
        }
        for (i = GameData.joiners.length; i < 4; i++) {
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.active = false;
        }
        for (i = 0; i < GameData.joiners.length; i++) if (2 == GameData.joiners.length) {
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.x = 310 * i - 155;
        } else if (3 == GameData.joiners.length) {
          playerNode = cc.find("player_" + (i + 1), this.panel);
          playerNode.x = 310 * i - 310;
        }
        var roomId = cc.find("strNode/roomid", this.panel);
        var createtime = cc.find("strNode/time", this.panel);
        roomId.getComponent("cc.Label").string = "房间号:" + roomData.id;
        var time = getTimeStr(roomData.createtime);
        createtime.getComponent("cc.Label").string = time[0] + "/" + time[1] + "/" + time[2] + "  " + time[3] + ":" + time[4] + ":" + time[5];
      },
      showPlayer: function showPlayer(player, idx) {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var scoreData = RoomHandler.getScoreData();
        if (void 0 == scoreData) return;
        var nameNode = cc.find("player_" + idx + "/head_bg/name", this.panel);
        var uid = cc.find("player_" + idx + "/head_bg/id", this.panel);
        var scoreNode = cc.find("player_" + idx + "/field_num1", this.panel);
        var headNode = cc.find("player_" + idx + "/head_bg/head", this.panel);
        uid.getComponent("cc.Label").string = "ID:" + player.uid;
        isChinese(player.name) ? nameNode.getComponent("cc.Label").string = getShortStr(player.name, 8) : nameNode.getComponent("cc.Label").string = getShortStr(player.name, 10);
        var score = scoreData[player.uid];
        if (score > 0) {
          scoreNode.getComponent("cc.Label").font = this.font[0];
          scoreNode.getComponent("cc.Label").string = "+" + score;
        } else if (score < 0) {
          scoreNode.getComponent("cc.Label").font = this.font[1];
          scoreNode.getComponent("cc.Label").string = score;
        } else {
          scoreNode.getComponent("cc.Label").font = this.font[2];
          scoreNode.getComponent("cc.Label").string = score;
        }
        var imgUrl = player.headimgurl;
        var headSprite = headNode.getComponent(cc.Sprite);
        this.setIcon(headSprite, imgUrl);
        var GetScoreMaxUid = function GetScoreMaxUid() {
          var tempUid;
          tempUid = GameData.joiners[0].uid;
          for (var i = 1; i < GameData.joiners.length; i++) GameData.joiners[i] && scoreData[GameData.joiners[i].uid] > scoreData[tempUid] && (tempUid = GameData.joiners[i].uid);
          return tempUid;
        };
        var winNode = cc.find("player_" + idx + "/win", this.panel);
        GetScoreMaxUid() == player.uid ? winNode.active = scoreData[GetScoreMaxUid()] - roomData.initScore > 0 : winNode.active = false;
        var owner = cc.find("player_" + idx + "/head_bg/Owner", this.panel);
        owner.active = roomData.creator == player.uid;
        var selfBg = cc.find("player_" + idx + "/selfBg", this.panel);
        var playerBg = cc.find("player_" + idx + "/playerBg", this.panel);
        if (player.uid == GameData.player.uid) {
          selfBg.active = true;
          playerBg.active = false;
        } else {
          selfBg.active = false;
          playerBg.active = true;
        }
        this.recordInfoShow(player.uid, idx);
      },
      setIcon: function setIcon(sprite, imgUrl) {
        if (void 0 == sprite || void 0 == imgUrl || imgUrl.length <= 0) return;
        cc.loader.load({
          url: imgUrl,
          type: "png"
        }, function(error, texture) {
          !error && texture && (sprite.spriteFrame = new cc.SpriteFrame(texture));
        });
      },
      btnBackOnClicked: function btnBackOnClicked(evt) {
        GameData.player.roomid = void 0;
        cc.director.loadScene("home");
      },
      recordInfoShow: function recordInfoShow(uid, index) {
        var hu_num = 0, chan_num = 0, ming_num = 0, an_num = 0;
        var huNum = cc.find("player_" + index + "/tongji/hu", this.panel);
        var chanNum = cc.find("player_" + index + "/tongji/chan", this.panel);
        var minggang = cc.find("player_" + index + "/tongji/ming", this.panel);
        var angang = cc.find("player_" + index + "/tongji/an", this.panel);
        huNum.getComponent("cc.Label").string = "胡牌次数:  " + hu_num;
        chanNum.getComponent("cc.Label").string = "被铲次数:  " + chan_num;
        minggang.getComponent("cc.Label").string = "明杠次数:  " + ming_num;
        angang.getComponent("cc.Label").string = "暗杠次数:  " + an_num;
      },
      btnShareOnClicked: function btnShareOnClicked() {
        if (inCD(3e3)) return;
        screenShoot(wxShareTexture);
      }
    });
    cc._RF.pop();
  }, {
    roomHandler: "roomHandler"
  } ],
  uiRoomTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01735Rf5ORBJppaW/MYGp3G", "uiRoomTable");
    "use strict";
    var soundMngr = require("SoundMngr");
    var gameDefine = require("gameDefine");
    var RuleHandler = require("ruleHandler");
    var RoomHandler = require("roomHandler");
    var hongzhongData = require("hongzhongData");
    var roomTable = cc.Class({
      extends: cc.Component,
      properties: {
        uiDirection: cc.Node,
        directionNode: cc.Prefab,
        uiCardNode: cc.Node,
        cardNode: cc.Prefab
      },
      onLoad: function onLoad() {
        registEvent("onRoomInfo", this, this.RoomInfoHandler);
        registEvent("onGameInfo", this, this.GameInfoHandler);
        registEvent("onGamePass", this, this.GamePassHandler);
        registEvent("onGameAction", this, this.GameActionHandler);
        registEvent("initCardHand", this, this.initCardHandHandler);
        registEvent("initCardHandNum", this, this.initCardHandNumHandler);
        registEvent("initCardChi", this, this.initCardChiHandler);
        registEvent("initCardPeng", this, this.initCardPengHandler);
        registEvent("initCardGang", this, this.initCardGangHandler);
        registEvent("initCardDis", this, this.initCardDisHandler);
        registEvent("onCardDis", this, this.onCardDisHandler);
        registEvent("onCardChi", this, this.onCardChiHandler);
        registEvent("onCardPeng", this, this.onCardPengHandler);
        registEvent("onCardGangAn", this, this.onCardGangAnHandler);
        registEvent("onCardGangMing", this, this.onCardGangMingHandler);
        registEvent("onCardGangBu", this, this.onCardGangBuHandler);
        registEvent("onCardHu", this, this.onCardHuHandler);
        registEvent("onGameStart", this, this.onGameStartHandler);
        registEvent("onGameScore", this, this.onGameScoreHandler);
        registEvent("onGameTurn", this, this.GameTurnHandler);
        registEvent("updateCards", this, this.updateCardsHandler);
        this.playerSex = 1;
        this._curGameData = void 0;
        this.setCurGameData();
        this.updateUIDirection();
        this.updateUICardNode();
        this.updateUICardNodeOnCards();
        this.updateUICardWithGame();
        this.GameTurnStart();
        this.updateGamePassAction();
      },
      onDestroy: function onDestroy() {
        unregistEvent("onRoomInfo", this, this.RoomInfoHandler);
        unregistEvent("onGameInfo", this, this.GameInfoHandler);
        unregistEvent("onGamePass", this, this.GamePassHandler);
        unregistEvent("onGameAction", this, this.GameActionHandler);
        unregistEvent("initCardHand", this, this.initCardHandHandler);
        unregistEvent("initCardHandNum", this, this.initCardHandNumHandler);
        unregistEvent("initCardChi", this, this.initCardChiHandler);
        unregistEvent("initCardPeng", this, this.initCardPengHandler);
        unregistEvent("initCardGang", this, this.initCardGangHandler);
        unregistEvent("initCardDis", this, this.initCardDisHandler);
        unregistEvent("onCardDis", this, this.onCardDisHandler);
        unregistEvent("onCardChi", this, this.onCardChiHandler);
        unregistEvent("onCardPeng", this, this.onCardPengHandler);
        unregistEvent("onCardGangAn", this, this.onCardGangAnHandler);
        unregistEvent("onCardGangMing", this, this.onCardGangMingHandler);
        unregistEvent("onCardGangBu", this, this.onCardGangBuHandler);
        unregistEvent("onCardHu", this, this.onCardHuHandler);
        unregistEvent("onGameStart", this, this.onGameStartHandler);
        unregistEvent("onGameScore", this, this.onGameScoreHandler);
        unregistEvent("onGameTurn", this, this.GameTurnHandler);
        unregistEvent("updateCards", this, this.updateCardsHandler);
      },
      setCurGameData: function setCurGameData() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        switch (roomData.opts.gameType) {
         case gameDefine.GameType.Game_Mj_HZ:
          this._curGameData = hongzhongData;
        }
      },
      RoomInfoHandler: function RoomInfoHandler(data) {
        if (void 0 == data) return;
        RoomHandler.onRoomInfoSetData(data.detail);
        this.setCurGameData();
        this.updateUIDirection();
        this.updateUICardNode();
      },
      GameInfoHandler: function GameInfoHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameInfoSetData(data.detail);
        this.updateUIDirection();
        this.updateUICardWithGame();
      },
      onGameStartHandler: function onGameStartHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameStartSetData(data.detail);
      },
      GamePassHandler: function GamePassHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGamePassSetData(data.detail);
        this.updateGamePassAction();
      },
      GameActionHandler: function GameActionHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameActionSetData(data.detail);
        this.updateGamePassAction();
      },
      onGameScoreHandler: function onGameScoreHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onGameScoreSetData(data.detail);
      },
      onCardDisHandler: function onCardDisHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardDisSetData(data.detail);
        this.ShowCardAction();
      },
      onCardChiHandler: function onCardChiHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardChiSetData(data.detail);
        this.ShowCardAction();
      },
      onCardPengHandler: function onCardPengHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardPengSetData(data.detail);
        this.ShowCardAction();
      },
      onCardGangMingHandler: function onCardGangMingHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardGangMingSetData(data.detail);
        this.ShowCardAction();
      },
      onCardGangAnHandler: function onCardGangAnHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardGangAnSetData(data.detail);
        this.ShowCardAction();
      },
      onCardGangBuHandler: function onCardGangBuHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardGangBuSetData(data.detail);
        this.ShowCardAction();
      },
      onCardHuHandler: function onCardHuHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.onCardHuSetData(data.detail);
        this.ShowCardAction();
      },
      initCardHandHandler: function initCardHandHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.initCardHandSetData(data.detail);
        this.updateUICardNodeOnCards();
      },
      initCardHandNumHandler: function initCardHandNumHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.initCardHandNumSetData(data.detail);
        this.updateUICardNodeOnCards();
      },
      initCardChiHandler: function initCardChiHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.initCardChiSetData(data.detail);
        this.updateUICardNodeOnCards();
      },
      initCardPengHandler: function initCardPengHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.initCardPengSetData(data.detail);
        this.updateUICardNodeOnCards();
      },
      initCardGangHandler: function initCardGangHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.initCardGangSetData(data.detail);
        this.updateUICardNodeOnCards();
      },
      initCardDisHandler: function initCardDisHandler(data) {
        if (void 0 == data || void 0 == this._curGameData) return;
        this._curGameData.initCardDisSetData(data.detail);
        this.updateUICardNodeOnCards();
      },
      updateCardsHandler: function updateCardsHandler() {
        this.updateUICardNodeOnCards();
      },
      GameTurnHandler: function GameTurnHandler() {
        this.GameTurnStart();
      },
      updateUIDirection: function updateUIDirection() {
        var node = this.uiDirection.getChildByName("uiDirection");
        if (void 0 == node) {
          node = cc.instantiate(this.directionNode);
          node.parent = this.uiDirection;
          node.name = "uiDirection";
        }
        var template = node.getComponent("tableDirectionControl");
        var gameInfoData = this._curGameData.getGameInfoData();
        if (gameInfoData) {
          template.setTurnUid(gameInfoData.turn);
          cc.log("..gameInfoData:" + JSON.stringify(gameInfoData));
          template.setRoomRoundCur(gameInfoData.roundNum, gameInfoData.roundmax);
          template.setLeftCardNumber(gameInfoData.cardleft);
        }
        var roomData = RoomHandler.getRoomData();
        if (roomData) {
          template.setRoundRule(roomData.opts.roundRule);
          template.setRoomState(roomData.status);
        }
      },
      updateUICardNode: function updateUICardNode() {
        var node = this.uiCardNode.getChildByName("uiCardNode");
        if (void 0 == node) {
          node = cc.instantiate(this.cardNode);
          node.parent = this.uiCardNode;
          node.name = "uiCardNode";
        }
        var template = node.getComponent("tableCardControl");
        template.setDisCardMax();
        template._curGameData = this._curGameData;
        var roomData = RoomHandler.getRoomData();
        if (roomData) {
          var upUid = 0, downUid = 0, rightUid = 0, leftUid = 0;
          var player = GameData.getPlayerByPos("up");
          player && (upUid = player.uid);
          player = GameData.getPlayerByPos("down");
          player && (downUid = player.uid);
          player = GameData.getPlayerByPos("right");
          player && (rightUid = player.uid);
          player = GameData.getPlayerByPos("left");
          player && (leftUid = player.uid);
          template.setPlayersUid(upUid, downUid, rightUid, leftUid);
        }
      },
      updateUICardWithGame: function updateUICardWithGame() {
        var gameInfoData = this._curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var turnUid = gameInfoData.turn;
        var wildcard = gameInfoData.wildcard;
        var lastdisUid = gameInfoData.lastdisUid;
        var lastdisCard = gameInfoData.lastdisCard;
        var node = this.uiCardNode.getChildByName("uiCardNode");
        if (node) {
          var template = node.getComponent("tableCardControl");
          template.setTurnUid(turnUid);
          template.setWildCards(wildcard);
          template.setLastDisObject(lastdisUid, lastdisCard);
        }
      },
      updateUICardNodeOnCards: function updateUICardNodeOnCards() {
        var gameInfoData = this._curGameData.getGameInfoData();
        if (void 0 == gameInfoData) return;
        var upPlayer = GameData.getPlayerByPos("up");
        var downPlayer = GameData.getPlayerByPos("down");
        var rightPlayer = GameData.getPlayerByPos("right");
        var leftPlayer = GameData.getPlayerByPos("left");
        var myHandCards = this._curGameData.getHandCards(GameData.player.uid);
        var obtain = gameInfoData.obtain;
        var upHandNumber = 0, rightHandNumber = 0, leftHandNumber = 0;
        var upDisCards = [], downDisCards = [], rightDisCards = [], leftDisCards = [];
        var upUsedCards = {
          chi: [],
          peng: [],
          gang: []
        }, downUsedCards = {
          chi: [],
          peng: [],
          gang: []
        }, rightUsedCards = {
          chi: [],
          peng: [],
          gang: []
        }, leftUsedCards = {
          chi: [],
          peng: [],
          gang: []
        };
        if (upPlayer) {
          upHandNumber = this._curGameData.getHandCardNum(upPlayer.uid);
          upDisCards = this._curGameData.getDisCards(upPlayer.uid);
          upUsedCards.chi = this._curGameData.getChiCards(upPlayer.uid);
          upUsedCards.peng = this._curGameData.getPengCards(upPlayer.uid);
          upUsedCards.gang = this._curGameData.getGangCards(upPlayer.uid);
        }
        if (downPlayer) {
          downDisCards = this._curGameData.getDisCards(downPlayer.uid);
          downUsedCards.chi = this._curGameData.getChiCards(downPlayer.uid);
          downUsedCards.peng = this._curGameData.getPengCards(downPlayer.uid);
          downUsedCards.gang = this._curGameData.getGangCards(downPlayer.uid);
        }
        if (rightPlayer) {
          rightHandNumber = this._curGameData.getHandCardNum(rightPlayer.uid);
          rightDisCards = this._curGameData.getDisCards(rightPlayer.uid);
          rightUsedCards.chi = this._curGameData.getChiCards(rightPlayer.uid);
          rightUsedCards.peng = this._curGameData.getPengCards(rightPlayer.uid);
          rightUsedCards.gang = this._curGameData.getGangCards(rightPlayer.uid);
        }
        if (leftPlayer) {
          leftHandNumber = this._curGameData.getHandCardNum(leftPlayer.uid);
          leftDisCards = this._curGameData.getDisCards(leftPlayer.uid);
          leftUsedCards.chi = this._curGameData.getChiCards(leftPlayer.uid);
          leftUsedCards.peng = this._curGameData.getPengCards(leftPlayer.uid);
          leftUsedCards.gang = this._curGameData.getGangCards(leftPlayer.uid);
        }
        var node = this.uiCardNode.getChildByName("uiCardNode");
        if (node) {
          var template = node.getComponent("tableCardControl");
          template.setMyHandObject(myHandCards, obtain);
          template.setHandCardsObject(upHandNumber, rightHandNumber, leftHandNumber);
          template.setDisCardsObject(upDisCards, downDisCards, rightDisCards, leftDisCards);
          template.setUsedCardsObject(upUsedCards, downUsedCards, rightUsedCards, leftUsedCards);
        }
      },
      updateGamePassAction: function updateGamePassAction() {
        if (void 0 == this._curGameData) return;
        var passData = this._curGameData.getPassActionsData();
        var passType = this._curGameData.getActionsType();
        if (void 0 == passData || void 0 == passType) return;
        var node = this.uiCardNode.getChildByName("uiCardNode");
        if (node) {
          var template = node.getComponent("tableCardControl");
          template.setActionsObject(passData, passType);
        }
      },
      GameTurnStart: function GameTurnStart() {
        var node = this.uiDirection.getChildByName("uiDirection");
        if (node) {
          var template = node.getComponent("tableDirectionControl");
          template.startCoundDown();
        }
      },
      ShowCardAction: function ShowCardAction() {
        var actionEffectData = this._curGameData.getActionEffectData();
        if (void 0 == actionEffectData) return;
        var node = this.uiCardNode.getChildByName("uiCardNode");
        if (node) {
          var template = node.getComponent("tableCardControl");
          var sex = GameData.getPlayerSexByUid(actionEffectData.uid);
          var pos = GameData.getPlayerPosByUid(actionEffectData.uid);
          switch (actionEffectData.action) {
           case "dis":
            template.showDisAudioEffect(actionEffectData.action, actionEffectData.card, sex);
            break;

           case "chi":
           case "peng":
           case "gang":
           case "hu":
            cc.log("...sex:" + sex);
            cc.log("...pos:" + pos);
            cc.log("...action:" + actionEffectData.action);
            template.showActionEffect(sex, pos, actionEffectData.action);
          }
        }
      }
    });
    module.exports = roomTable;
    cc._RF.pop();
  }, {
    SoundMngr: "SoundMngr",
    gameDefine: "gameDefine",
    hongzhongData: "hongzhongData",
    roomHandler: "roomHandler",
    ruleHandler: "ruleHandler"
  } ],
  uiRoomWait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ceef3WP6sRCE7poRf914B0+", "uiRoomWait");
    "use strict";
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    var gameHandler = require("hongzhongData");
    var roomUtil = require("roomUtil");
    cc.Class({
      extends: cc.Component,
      properties: {
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        this.setUIBaseInfo();
      },
      setUIBaseInfo: function setUIBaseInfo() {
        var roomData = RoomHandler.getRoomData();
        var isCreator = roomData.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
      },
      backBtnClicked: function backBtnClicked() {
        var roomData = RoomHandler.getRoomData();
        roomData.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(roomData.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var roomData = RoomHandler.getRoomData();
        var title = "红中麻将 房间号:" + roomData.id;
        4 == roomData.opts.costType && (title = "红中麻将 (代开)房间号:" + roomData.id);
        var des = this.getInviteStr();
        wxShareText(title, des);
      },
      getInviteStr: function getInviteStr() {
        var roomData = RoomHandler.getRoomData();
        var str1 = "玩法:";
        var str2 = ",请您快速加入对局.";
        var playStr = getRuleStrHongZhong(roomData.opts);
        return str1 + playStr + str2;
      },
      onShareResult: function onShareResult() {
        wxShareTimeline("红中麻将", "还等嘛!我在红中麻将等你!");
      },
      onShareFriend: function onShareFriend() {
        wxShareWeb("红中麻将", "还等嘛!我在红中麻将等你!");
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          var roomData = RoomHandler.getRoomData();
          RoomHandler.deleteRoom(roomData.id, "close");
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        var roomData = RoomHandler.getRoomData();
        roomData.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(roomData.id);
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomData = RoomHandler.getRoomData();
        var title = "红中麻将,房间号:" + roomData.id + ",";
        var des = this.getInviteStr();
        wxShareCommond(title + des);
      }
    });
    cc._RF.pop();
  }, {
    gameDefine: "gameDefine",
    hongzhongData: "hongzhongData",
    roomHandler: "roomHandler",
    roomUtil: "roomUtil"
  } ],
  uiTingTip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5596eAMW1BEH7beiHKn8mVV", "uiTingTip");
    "use strict";
    var RuleHandler = require("ruleHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        tingNode: cc.Node,
        bg: cc.Node,
        nbg: cc.Node,
        cardTemplate: cc.Node
      },
      onLoad: function onLoad() {
        this.bgHeight = this.bg.height;
        this.nbgHeight = this.nbg.height;
        this.cardNodeList = [];
        this.cardTemplate.active = false;
      },
      show: function show(selectCard, tingData) {
        var huCards = [], showCards = [], tempCards = {}, totalLeft = 0;
        for (var i = 0; i < tingData.length; i++) {
          var data = tingData[i];
          if (data.discard == selectCard) {
            huCards = data.ting;
            break;
          }
        }
        if (!(huCards.length > 0)) {
          this.tingNode.active = false;
          return;
        }
        this.tingNode.active = true;
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.destroy();
        }
        this.cardNodeList.splice(0, this.cardNodeList.length);
        for (var t = 0; t < huCards.length; t++) {
          var item = huCards[t];
          var key = item.type.toString();
          "4" === key && (key = "3");
          tempCards[key] = tempCards[key] || [];
          tempCards[key].push(item);
        }
        for (var i in tempCards) {
          var item = tempCards[i];
          if (item.length >= 15) showCards.push({
            obcard: -1,
            score: item[0].score
          }); else for (var n in item) showCards.push({
            obcard: item[n].obcard,
            score: item[n].score
          });
        }
        showCards.sort(function(a, b) {
          return b.score - a.score;
        });
        var anyIdx = -1;
        for (var i = 0; i < showCards.length; i++) {
          if (-1 == showCards[i].obcard) {
            anyIdx = i;
            continue;
          }
          var obcard = showCards[i].obcard;
          var score = showCards[i].score;
          var leftCount = this.leftCard(obcard);
          totalLeft += leftCount;
          this.showCardNode(obcard, score, leftCount);
        }
        if (anyIdx >= 0) {
          var obcard = "renyi";
          var score = showCards[anyIdx].score;
          var leftCount = GameData.game.cardleft - totalLeft;
          totalLeft = GameData.game.cardleft;
          this.showCardNode(obcard, score, leftCount);
        }
        cc.find("totalLeftLabel", this.tingNode).getComponent(cc.Label).string = "剩余" + totalLeft + "张";
        var length = this.cardNodeList.length;
        var oneRowCount = length > 4 ? Math.ceil(length / 2) : length;
        var lineCount = Math.ceil(length / oneRowCount);
        for (var i = 0; i < this.cardNodeList.length; i++) {
          var cardNode = this.cardNodeList[i];
          cardNode.x = this.cardTemplate.x + i % oneRowCount * 90;
          cardNode.y = this.cardTemplate.y - 154 * Math.floor(i / oneRowCount);
        }
        this.nbg.width = 90 * oneRowCount;
        this.bg.width = 220 + this.nbg.width;
        if (length > 4) {
          this.bg.height = 370;
          this.nbg.height = 300;
        } else {
          this.bg.height = this.bgHeight;
          this.nbg.height = this.nbgHeight;
        }
      },
      hide: function hide() {
        this.tingNode.active = false;
      },
      showCardNode: function showCardNode(card, score, left) {
        var cardNode = cc.instantiate(this.cardTemplate);
        var iconUrl = "resources/mjcard2d/mj_face_xia_shou_" + card + ".png";
        var texture = cc.textureCache.addImage(cc.url.raw(iconUrl));
        cardNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        cc.find("scoreLabel", cardNode).getComponent(cc.Label).string = score + "分";
        cc.find("leftLabel", cardNode).getComponent(cc.Label).string = left + "张";
        cc.find("mask", cardNode).active = 0 == left;
        cardNode.active = true;
        this.tingNode.addChild(cardNode);
        this.cardNodeList.push(cardNode);
      },
      leftCard: function leftCard(obcard) {
        var knowCount = 0;
        var cards = GameData.getMyHandCards();
        for (var key in cards) obcard == key && (knowCount += cards[key]);
        for (var index = 0; index < GameData.joiners.length; index++) {
          var player = GameData.joiners[index];
          if (!player) continue;
          var uid = player.uid;
          var disCards = GameData.getDisCards(uid);
          var pengCards = GameData.getPengCards(uid);
          var gangCards = GameData.getGangCards(uid);
          for (var key in disCards) obcard == disCards[key] && (knowCount += 1);
          for (var key in pengCards) obcard == pengCards[key][0] && (knowCount += 3);
          for (var key in gangCards) obcard == gangCards[key][0] && (knowCount += 4);
        }
        var leftCount = 4 - knowCount;
        leftCount = leftCount <= 0 ? 0 : leftCount;
        return leftCount;
      }
    });
    cc._RF.pop();
  }, {
    ruleHandler: "ruleHandler"
  } ],
  updateHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68b51VnnRxBRJ7bUbHfkC+2", "updateHandler");
    "use strict";
    var md5Encode = require("md5");
    var exp = module.exports;
    var _instance = null;
    var _isNeedUpdate = true;
    var _isUpdateError = false;
    var _assetsManager = null;
    var _updateListener = null;
    exp.checkUpdate = function(manifestUrl) {
      if (!cc.sys.isNative) {
        sendEvent("updateFinish");
        return false;
      }
      if (!_isNeedUpdate) {
        WriteLog("updateHandler noNeedUpdate");
        sendEvent("updateFinish");
        return false;
      }
      _init(manifestUrl);
      return _check();
    };
    exp.retry = function() {
      WriteLog("updateHandler Retry failed Assets...");
      if (_isUpdateError) {
        _isUpdateError = false;
        _assetsManager.downloadFailedAssets();
      } else _check();
    };
    exp.getVersion = function() {
      if (_assetsManager && _assetsManager.getLocalManifest().isLoaded()) {
        var project = _assetsManager.getLocalManifest();
        WriteLog("updateHandler version: " + project.getVersion());
        return project.getVersion();
      }
      return "0.0.1";
    };
    function _init(manifestUrl) {
      WriteLog("updateHandler init ...");
      if (!_assetsManager) {
        var storagePath = jsb.fileUtils.getWritablePath() + "com.mahjong.tianjin/";
        _assetsManager = new jsb.AssetsManager(manifestUrl, storagePath);
        _assetsManager.setVersionCompareHandle(_compareCb);
        _assetsManager.setVerifyCallback(_verifyCb);
        var manifest = _assetsManager.getLocalManifest();
        WriteLog("updateHandler manifestUrl:" + JSON.stringify(manifest.getManifestFileUrl()));
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          _assetsManager.setMaxConcurrentTask(2);
          WriteLog("updateHandler Max concurrent tasks count have been limited to 2");
        }
      }
    }
    function _check() {
      WriteLog("updateHandler checkUpdate ...");
      if (!_assetsManager.getLocalManifest().isLoaded()) {
        WriteLog("updateHandler Failed to load local manifest ...");
        sendEvent("updateError", "加载更新列表失败");
        return false;
      }
      if (null == _updateListener) {
        _updateListener = new jsb.EventListenerAssetsManager(_assetsManager, _updateCb.bind(this));
        cc.eventManager.addListener(_updateListener, 1);
      }
      _assetsManager.checkUpdate();
      return true;
    }
    function _updateCb(event) {
      var needRestart = false;
      switch (event.getEventCode()) {
       case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
        sendEvent("updateError", "未找到本地文件列表");
        break;

       case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
        sendEvent("updateError", "下载更新列表失败");
        break;

       case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
        sendEvent("updateError", "解析更新列表失败");
        break;

       case jsb.EventAssetsManager.NEW_VERSION_FOUND:
        sendEvent("updateStart");
        _assetsManager.update();
        break;

       case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
        _isNeedUpdate = false;
        sendEvent("updateFinish");
        break;

       case jsb.EventAssetsManager.UPDATE_PROGRESSION:
        var bytePer = event.getPercent();
        bytePer > 0 && sendEvent("updateProgress", bytePer);
        break;

       case jsb.EventAssetsManager.ASSET_UPDATED:
        break;

       case jsb.EventAssetsManager.ERROR_UPDATING:
        WriteLog("updateHandler update error:" + event.getMessage() + " asset:" + event.getAssetId());
        break;

       case jsb.EventAssetsManager.UPDATE_FINISHED:
        needRestart = true;
        break;

       case jsb.EventAssetsManager.UPDATE_FAILED:
        sendEvent("updateError", "更新失败");
        _isUpdateError = true;
        break;

       case jsb.EventAssetsManager.ERROR_DECOMPRESS:
        sendEvent("updateError", "解压文件失败:" + event.getAssetId());
        _isUpdateError = true;
        break;

       default:
        return;
      }
      if (needRestart) {
        cc.eventManager.removeListener(_updateListener);
        _updateListener = null;
        var searchPaths = jsb.fileUtils.getSearchPaths();
        var newPaths = _assetsManager.getLocalManifest().getSearchPaths();
        console.log(JSON.stringify(newPaths));
        Array.prototype.unshift(searchPaths, newPaths);
        cc.sys.localStorage.setItem("UpdateSearchPaths", JSON.stringify(searchPaths));
        jsb.fileUtils.setSearchPaths(searchPaths);
        cc.game.restart();
      }
    }
    function _compareCb(versionA, versionB) {
      WriteLog("updateHandler Version Compare: local version is " + versionA + ", remote version is " + versionB);
      var vA = versionA.split(".");
      var vB = versionB.split(".");
      for (var i = 0; i < vA.length; ++i) {
        var a = parseInt(vA[i]);
        var b = parseInt(vB[i] || 0);
        if (a === b) continue;
        return a - b;
      }
      return vB.length > vA.length ? -1 : 0;
    }
    function _verifyCb(path, asset) {
      var filename = _getFileName(path);
      if ("project.manifest" == filename || "version.manifest" == filename) return true;
      if (asset.compressed) return true;
      var data = jsb.fileUtils.getDataFromFile(path);
      if (null == data) {
        WriteLog("updateHandler verify get file failed:" + data);
        return false;
      }
      var md5 = md5Encode(data).toLowerCase();
      if (md5 == asset.md5) return true;
      WriteLog("updateHandler verify failed:" + path);
      WriteLog("updateHandler md5:" + md5 + " asset.md5:" + asset.md5);
      return false;
    }
    function _getFileName(path) {
      var pos1 = path.lastIndexOf("/");
      var pos2 = path.lastIndexOf("\\");
      var pos = Math.max(pos1, pos2);
      return pos < 0 ? path : path.substring(pos + 1);
    }
    cc._RF.pop();
  }, {
    md5: "md5"
  } ],
  utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "567d6lNjzNAbLAQ1N0lyoji", "utils");
    "use strict";
    exports.inherits = function(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false
        }
      });
    };
    cc._RF.pop();
  }, {} ],
  waitView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd9c79f5y5Gq6nGTBXhwX5X", "waitView");
    "use strict";
    var game = require("gameConfig");
    var gameDefine = require("gameDefine");
    var RoomHandler = require("roomHandler");
    cc.Class({
      extends: cc.Component,
      properties: {
        deleteRoomBtn: cc.Node,
        quitRoomBtn: cc.Node
      },
      onLoad: function onLoad() {
        registEvent("onCreatorQuit", this, this.onCreatorQuit);
      },
      onDestroy: function onDestroy() {
        unregistEvent("onCreatorQuit", this, this.onCreatorQuit);
      },
      onEnable: function onEnable() {
        scheduleLamp(this);
        var roomData = RoomHandler.getRoomData();
        roomData.status == gameDefine.RoomState.WAIT && RoomHandler.setReady();
      },
      setUIBaseInfo: function setUIBaseInfo() {
        var roomData = RoomHandler.getRoomData();
        var isCreator = roomData.creator == GameData.player.uid;
        this.deleteRoomBtn.active = isCreator;
      },
      backBtnClicked: function backBtnClicked() {
        var roomData = RoomHandler.getRoomData();
        roomData.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(roomData.id);
      },
      wxInviteBtnClicked: function wxInviteBtnClicked() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var gameName = game.getName();
        var title = roomData.opts.costType == gameDefine.CostType.Cost_Agent ? gameName + "(代开)房间号:" + roomData.id : gameName + "房间号:" + roomData.id;
        var des = this.getInviteStr();
        wxShareText(title, des);
      },
      getInviteStr: function getInviteStr() {
        var str1 = "玩法:";
        var str2 = ",请您快速加入对局.";
        var playStr = game.getRuleStr();
        return str1 + playStr + str2;
      },
      onDeleteRoom: function onDeleteRoom() {
        createMessageBox("解散房间不扣房卡，是否确定解散？", function() {
          var roomData = RoomHandler.getRoomData();
          RoomHandler.deleteRoom(roomData.id, "close");
        }, function() {});
      },
      onQuitRoom: function onQuitRoom() {
        var roomData = RoomHandler.getRoomData();
        roomData.creator == GameData.player.uid ? cc.director.loadScene("home") : RoomHandler.quitRoom(roomData.id);
      },
      onCreatorQuit: function onCreatorQuit() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        GameData.player.roomid = void 0;
        roomData.creator != GameData.player.uid ? createMessageBox("房主已经解散房间", function() {
          cc.director.loadScene("home");
        }) : cc.director.loadScene("home");
      },
      onCopyRoomInfo: function onCopyRoomInfo() {
        var roomData = RoomHandler.getRoomData();
        if (void 0 == roomData) return;
        var gameName = game.getName();
        var title = gameName + "房间号:" + roomData.id + ",";
        var des = this.getInviteStr();
        wxShareCommond(title + des);
      }
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig",
    gameDefine: "gameDefine",
    roomHandler: "roomHandler"
  } ],
  wifiView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0265fkoOVlIFZee3V5b4LW5", "wifiView");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        wifiNode: cc.Node
      },
      onEnable: function onEnable() {
        this.showWifi();
        this.schedule(this.showWifi, 5);
      },
      showWifi: function showWifi() {
        var index = 0;
        var ms = GameNet.getInstance().getPingPong();
        ms < 300 ? index = 3 : ms < 600 ? index = 2 : ms < 1e3 && (index = 1);
        for (var i = 0; i < 4; i++) {
          var node = cc.find("WiFi-" + (i + 1), this.wifiNode);
          node.active = i == index;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  wildCard1View: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c1b83XdBNHXaudcQFgS6vg", "wildCard1View");
    "use strict";
    var game = require("gameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        wildCard: cc.Sprite,
        wildIcon: cc.Sprite
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {},
      onEnable: function onEnable() {
        var wildCards = game.getGameData().game.wildcard;
        if (wildCards.length > 0) {
          var texture = cc.textureCache.addImage(cc.url.raw("resources/mjcard2d/mj_face_xia_shou_" + wildCards[0] + ".png"));
          this.wildCard.spriteFrame = new cc.SpriteFrame(texture);
        }
        var wildIconUrl = game.getWildIcon();
        if ("" != wildIconUrl) {
          var texture = cc.textureCache.addImage(cc.url.raw(wildIconUrl));
          this.wildIcon.spriteFrame = new cc.SpriteFrame(texture);
        }
      }
    });
    cc._RF.pop();
  }, {
    gameConfig: "gameConfig"
  } ]
}, {}, [ "PDK-createRoom", "PDK-handler", "PDK-poker", "PDK-roomDissolve", "PDK-roomHandler", "PDK-roomMain", "PDK-roomResult", "PDK-roomSummary", "PDK-roomWait", "PDK-roomtable", "TDK-createRoom", "TDK-playerTemplate", "TDK-poker", "TDK-roomDissolve", "TDK-roomMain", "TDK-roomSummary", "TDK-roomWait", "TDK-roomtable", "TDK-setting", "replayMain-tdk", "tdk-ResultRender", "tdk-debug", "tdk-resultFlyScore", "tdkRoomData", "TJDDZ-createRoom", "TJDDZ-poker", "TJDDZ-roomDissolve", "TJDDZ-roomMain", "TJDDZ-roomResult", "TJDDZ-roomSummary", "TJDDZ-roomWait", "TJDDZ-roomtable", "pokerRoomBaseView", "pokerRoomPlayer", "roomUtil", "tableCardControl", "tableDirectionControl", "tableDynAnimation", "tablePlayersControl", "uiCardTest", "uiDebug", "uiRoomDissolve", "uiRoomMain", "uiRoomPlayerInfo", "uiRoomResult", "uiRoomScore", "uiRoomSummary", "uiRoomTable", "uiRoomWait", "uiTingTip", "createRoom_changchun", "debug_changchun", "roomDissolve_changchun", "roomMain_changchun", "roomPiao_changchun", "roomResult_changchun", "roomScore_changchun", "roomSummary_changchun", "roomTable_changchun", "roomWait_changchun", "appstore", "changchun", "codeString", "coin", "configMgr", "dunhua", "errorCode", "gameDefine", "haerbin", "hebei", "huadian", "mission", "shishi", "shopConfig", "test", "tianjin", "competitionHandler", "es6-promise", "matchHandler", "md5", "missionHandler", "roomHandler", "stateMachine", "topHandler", "utils", "DDZ-coinEnd", "DDZ-createRoom", "DDZ-home", "DDZ-playerTemplate", "DDZ-poker", "DDZ-ReplayCardController", "DDZ-ReplayMain", "DDZ-ReplayResultPanel", "DDZ-roomDissolve", "DDZ-roomMain", "DDZ-roomSummary", "DDZ-roomWait", "DDZ-roomtable", "TuiDaoHu-Data", "TuiDaoHu-Protocol", "TuiDaoHu-Rules", "TuiDaoHu", "gameConfig", "createRoom_heb", "debug_heb", "roomDissolve_heb", "roomMain_heb", "roomResult_heb", "roomSummary_heb", "roomTable_heb", "roomWait_heb", "hhdz_bet", "hhdz_data", "hhdz_head", "hhdz_roomHead", "hhdz_roomMain", "hhdz_roomUtil", "hhdz_runChart", "hhdz_table", "createRoom-hz", "hongzhongData", "createRoom_huadian", "debug_huadian", "roomDissolve_huadian", "roomMain_huadian", "roomPiao_huadian", "roomResult_huadian", "roomScore_huadian", "roomSummary_huadian", "roomTable_huadian", "roomWait_huadian", "roomZhuang_huadian", "hundredNiu-roomBase", "hundredNiu-roomMain", "hundredNiu-roomTable", "hundredNiu-roomWait", "hundredNiuHandler", "hundred_backPanel", "hundred_dealerPanel", "hundred_fortunePanel", "hundred_pokerPanel", "hundred_rulePanel", "hundred_runscorePanel", "hundred_sankePanel", "hundred_trendPanel", "loginHandler", "mahjong", "mahjong_changchun", "mahjong_huadian", "mahjong_hz", "mahjong_shishi", "mahjong_tianjin", "poker13", "replayHandler", "ruleHandler", "shopHandler", "updateHandler", "LanguagerManager", "SoundMngr", "getLottery", "NN-createRoom", "niuNiuHandler", "niuNiuPlayerInfo", "niuNiuPoker", "niuniuGmCard", "niuniuMoveMessage", "niuniuPokerHandler", "pokerTypeAnimation", "niuNiuProcessResult", "niuNiuResultRender", "niuNiuRoomDissolve", "niuNiuRoomMain", "niuNiuRoomPlay", "niuNiuRoomResult", "niuNiuRoomWait", "niuNiuSetting", "resultRunScore", "tenNN-createRoom", "chip_mask", "poker_Mask", "poker_ZJH_resultItemPrefab", "poker_chipPrefab", "poker_debugPrefab", "poker_playerStateImgPrefab", "poker_settingPrefab", "poker_summaryPrefab", "SSSCard", "SSSChatPanel", "SSSFastVoiceButton", "SSSHideComponent", "SSSCreateRoom", "SSSDebug", "SSSHome", "SSSPromptCard", "SSSRoomDissolve", "SSSRoomMain", "SSSRoomTable", "SSSSetting", "roomEndClear", "SSSPlayerChat", "SpecialTypeAnimatePanel", "groupType", "playerRoundDetail", "roundDetail", "ReplayMain-shishi", "ReplayResultPanel-shishi", "TingTip-shishi", "createRoom_shishi", "cardTest-shishi", "roomChaShui-shishi", "roomDissolve-shishi", "roomMain-shishi", "roomResult-shishi", "roomScore-shishi", "roomSummary-shishi", "roomWait-shishi", "roomTable_shishi", "cardTemplate", "messagebox", "playerInfoTemplate", "playerTemplate", "AgreePanel", "ButtonCD", "EveryDayShare", "MoveMessage", "NoticePanel", "PlayIntroPanel", "PosterItemPrefab", "PosterPanel", "PosterPrefab", "PreLoader", "RunlampPanel", "RunlampPanel1", "SharePanel", "TingTip", "UIClub", "UICoinRankingList", "UIGroup", "UIPushGame", "UISuccour", "UITask", "WebPanel", "agentPanel", "Card", "CardButton", "ChatPanel", "FastVoiceButton", "HideComponent", "clubPanel", "CompetitionDetail", "CompetitionRecord", "UICompetition", "selectGameItem", "createControl", "goodsType", "home", "joinControl", "joinclubPanel", "login", "UIMatch", "UISelectGame", "UISelectGameLv", "agentBindLayer", "playerInformationLayer", "RecordItem", "RecordPanel", "RecordPlayerInfo", "RoundItem", "RoundPanel", "CardRef", "DisCard", "HandCard", "PengCard", "ReplayCardController", "ReplayCardFace", "ReplayEffectController", "ReplayLayout", "ReplayMain", "ReplayResultPanel", "replayData", "cardTest", "createRoom", "debug", "roomDissolve", "roomMain", "roomResult", "roomScore", "roomSummary", "roomTable", "roomWait", "roomZhuang", "selectclubPanel", "SetWeixin", "AMapPanel", "SettingsPanel", "shoppingPanel", "settingView", "chatView", "dissolveView", "locationView", "powerView", "roomNumView", "ruleTipsView", "ruleView", "talkView", "timeView", "wifiView", "cardActionView", "cardBtnView", "cardsView", "debugView", "directionView", "headView", "prepareView", "resultView", "summaryView", "tingView", "waitView", "wildCard1View", "scene_mahjong", "ZJH-RoomData", "ZJH-createRoom", "ZJH-roomDissolve", "ZJH-roomWait", "ZJH-roomtable", "ZJH_roomMain", "pokerAnimationBase" ]);